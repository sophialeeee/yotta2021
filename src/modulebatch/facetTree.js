/*eslint-disable*/
!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.facetTree=n():t.facetTree=n()}(window,(function(){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=77)}([function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function i(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(0),i=e(24),o=e(49),u=e(5),a=e(35),c=e(14),f=e(32),s=function(t){function n(e,r,i){var u=t.call(this)||this;switch(u.syncErrorValue=null,u.syncErrorThrown=!1,u.syncErrorThrowable=!1,u.isStopped=!1,arguments.length){case 0:u.destination=o.a;break;case 1:if(!e){u.destination=o.a;break}if("object"==typeof e){e instanceof n?(u.syncErrorThrowable=e.syncErrorThrowable,u.destination=e,e.add(u)):(u.syncErrorThrowable=!0,u.destination=new l(u,e));break}default:u.syncErrorThrowable=!0,u.destination=new l(u,e,r,i)}return u}return r.a(n,t),n.prototype[a.a]=function(){return this},n.create=function(t,e,r){var i=new n(t,e,r);return i.syncErrorThrowable=!1,i},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(u.a),l=function(t){function n(n,e,r,u){var a,c=t.call(this)||this;c._parentSubscriber=n;var f=c;return Object(i.a)(e)?a=e:e&&(a=e.next,r=e.error,u=e.complete,e!==o.a&&(f=Object.create(e),Object(i.a)(f.unsubscribe)&&c.add(f.unsubscribe.bind(f)),f.unsubscribe=c.unsubscribe.bind(c))),c._context=f,c._next=a,c._error=r,c._complete=u,c}return r.a(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;c.a.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,e=c.a.useDeprecatedSynchronousErrorHandling;if(this._error)e&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)e?(n.syncErrorValue=t,n.syncErrorThrown=!0):Object(f.a)(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;Object(f.a)(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};c.a.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),c.a.useDeprecatedSynchronousErrorHandling)throw t;Object(f.a)(t)}},n.prototype.__tryOrSetError=function(t,n,e){if(!c.a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,e)}catch(n){return c.a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(Object(f.a)(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(s)},function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(46),i=e(1),o=e(35),u=e(49);var a=e(20),c=e(34),f=e(14),s=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r=this.operator,a=function(t,n,e){if(t){if(t instanceof i.a)return t;if(t[o.a])return t[o.a]()}return t||n||e?new i.a(t,n,e):new i.a(u.a)}(t,n,e);if(r?a.add(r.call(a,this.source)):a.add(this.source||f.a.useDeprecatedSynchronousErrorHandling&&!a.syncErrorThrowable?this._subscribe(a):this._trySubscribe(a)),f.a.useDeprecatedSynchronousErrorHandling&&a.syncErrorThrowable&&(a.syncErrorThrowable=!1,a.syncErrorThrown))throw a.syncErrorValue;return a},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){f.a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),Object(r.a)(t)?t.error(n):console.warn(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=l(n))((function(n,r){var i;i=e.subscribe((function(n){try{t(n)}catch(t){r(t),i&&i.unsubscribe()}}),r,n)}))},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[a.a]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:Object(c.b)(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=l(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function l(t){if(t||(t=f.a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(13),i=e(37),o=e(2);function u(t,n,e,u,a){if(void 0===a&&(a=new r.a(t,e,u)),!a.closed)return n instanceof o.a?n.subscribe(a):Object(i.a)(n)(a)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(0),i=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyError=function(t,n){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.complete()},n}(e(1).a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return a}));var r=e(7),i=e(45),o=e(24),u=e(36),a=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var n;return t.prototype.unsubscribe=function(){var n;if(!this.closed){var e=this._parentOrParents,a=this._unsubscribe,f=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,e instanceof t)e.remove(this);else if(null!==e)for(var s=0;s<e.length;++s){e[s].remove(this)}if(Object(o.a)(a))try{a.call(this)}catch(t){n=t instanceof u.a?c(t.errors):[t]}if(Object(r.a)(f)){s=-1;for(var l=f.length;++s<l;){var h=f[s];if(Object(i.a)(h))try{h.unsubscribe()}catch(t){n=n||[],t instanceof u.a?n=n.concat(c(t.errors)):n.push(t)}}}if(n)throw new u.a(n)}},t.prototype.add=function(n){var e=n;if(!n)return t.EMPTY;switch(typeof n){case"function":e=new t(n);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var r=e;(e=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var i=e._parentOrParents;if(null===i)e._parentOrParents=this;else if(i instanceof t){if(i===this)return e;e._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return e;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[e]:o.push(e),e},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}},t.EMPTY=((n=new t).closed=!0,n),t}();function c(t){return t.reduce((function(t,n){return t.concat(n instanceof u.a?n.errors:n)}),[])}},function(t,n,e){"use strict";e.d(n,"b",(function(){return s})),e.d(n,"a",(function(){return l}));var r=e(0),i=e(2),o=e(1),u=e(5),a=e(21),c=e(71),f=e(35),s=function(t){function n(n){var e=t.call(this,n)||this;return e.destination=n,e}return r.a(n,t),n}(o.a),l=function(t){function n(){var n=t.call(this)||this;return n.observers=[],n.closed=!1,n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return r.a(n,t),n.prototype[f.a]=function(){return new s(this)},n.prototype.lift=function(t){var n=new h(this,this);return n.operator=t,n},n.prototype.next=function(t){if(this.closed)throw new a.a;if(!this.isStopped)for(var n=this.observers,e=n.length,r=n.slice(),i=0;i<e;i++)r[i].next(t)},n.prototype.error=function(t){if(this.closed)throw new a.a;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var n=this.observers,e=n.length,r=n.slice(),i=0;i<e;i++)r[i].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new a.a;this.isStopped=!0;for(var t=this.observers,n=t.length,e=t.slice(),r=0;r<n;r++)e[r].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(n){if(this.closed)throw new a.a;return t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){if(this.closed)throw new a.a;return this.hasError?(t.error(this.thrownError),u.a.EMPTY):this.isStopped?(t.complete(),u.a.EMPTY):(this.observers.push(t),new c.a(this,t))},n.prototype.asObservable=function(){var t=new i.a;return t.source=this,t},n.create=function(t,n){return new h(t,n)},n}(i.a),h=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return r.a(n,t),n.prototype.next=function(t){var n=this.destination;n&&n.next&&n.next(t)},n.prototype.error=function(t){var n=this.destination;n&&n.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):u.a.EMPTY},n}(l)},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(29),i=new(e(26).a)(r.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(0),i=e(1);function o(t,n){return function(e){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return e.lift(new u(t,n))}}var u=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.project,this.thisArg))},t}(),a=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.project=e,i.count=0,i.thisArg=r||i,i}return r.a(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(i.a)},function(t,n,e){"use strict";function r(t){return t&&"function"==typeof t.schedule}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return i})),e.d(n,"b",(function(){return o}));var r=e(2),i=new r.a((function(t){return t.complete()}));function o(t){return t?function(t){return new r.a((function(n){return t.schedule((function(){return n.complete()}))}))}(t):i}},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(2),i=e(37),o=e(66);function u(t,n){return n?Object(o.a)(t,n):t instanceof r.a?t:new r.a(Object(i.a)(t))}},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(0),i=function(t){function n(n,e,r){var i=t.call(this)||this;return i.parent=n,i.outerValue=e,i.outerIndex=r,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},n.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},n}(e(1).a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},function(t,n,e){"use strict";function r(t){return t}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(0),i=e(1);function o(t,n){return function(e){return e.lift(new u(t,n))}}var u=function(){function t(t,n){this.predicate=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.predicate,this.thisArg))},t}(),a=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.thisArg=r,i.count=0,i}return r.a(n,t),n.prototype._next=function(t){var n;try{n=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}n&&this.destination.next(t)},n}(i.a)},function(t,n,e){"use strict";e.d(n,"b",(function(){return r})),e.d(n,"a",(function(){return a}));var r,i=e(11),o=e(33),u=e(40);r||(r={});var a=function(){function t(t,n,e){this.kind=t,this.value=n,this.error=e,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,n,e){switch(this.kind){case"N":return t&&t(this.value);case"E":return n&&n(this.error);case"C":return e&&e()}},t.prototype.accept=function(t,n,e){return t&&"function"==typeof t.next?this.observe(t):this.do(t,n,e)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Object(o.a)(this.value);case"E":return Object(u.a)(this.error);case"C":return Object(i.b)()}throw new Error("unexpected notification kind value")},t.createNext=function(n){return void 0!==n?new t("N",n):t.undefinedValueNotification},t.createError=function(n){return new t("E",void 0,n)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},function(t,n,e){"use strict";function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}e.d(n,"a",(function(){return i}));var i=r()},function(t,n,e){"use strict";function r(){}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return f}));var r=e(0),i=e(3),o=e(4),u=e(13),a=e(9),c=e(12);function f(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?function(r){return r.pipe(f((function(e,r){return Object(c.a)(t(e,r)).pipe(Object(a.a)((function(t,i){return n(e,t,r,i)})))}),e))}:("number"==typeof n&&(e=n),function(n){return n.lift(new s(t,e))})}var s=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new l(t,this.project,this.concurrent))},t}(),l=function(t){function n(n,e,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,n)||this;return i.project=e,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=new u.a(this,n,e),o=this.destination;o.add(r);var a=Object(i.a)(this,t,void 0,void 0,r);a!==r&&o.add(a)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}(o.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,n,e){"use strict";function r(t){return"function"==typeof t}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(0),i=e(53),o=function(t){function n(e,r){void 0===r&&(r=i.a.now);var o=t.call(this,e,(function(){return n.delegate&&n.delegate!==o?n.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.a(n,t),n.prototype.schedule=function(e,r,i){return void 0===r&&(r=0),n.delegate&&n.delegate!==this?n.delegate.schedule(e,r,i):t.prototype.schedule.call(this,e,r,i)},n.prototype.flush=function(t){var n=this.actions;if(this.active)n.push(t);else{var e;this.active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this.active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},n}(i.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(2),i=e(69),o=e(47);function u(t,n){return n?Object(o.a)(t,n):new r.a(Object(i.a)(t))}},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(0),i=e(6),o=e(5),u=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.value=null,n.hasNext=!1,n.hasCompleted=!1,n}return r.a(n,t),n.prototype._subscribe=function(n){return this.hasError?(n.error(this.thrownError),o.a.EMPTY):this.hasCompleted&&this.hasNext?(n.next(this.value),n.complete(),o.a.EMPTY):t.prototype._subscribe.call(this,n)},n.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},n.prototype.error=function(n){this.hasCompleted||t.prototype.error.call(this,n)},n.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},n}(i.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(0),i=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return r.a(n,t),n.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},n.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),setInterval(t.flush.bind(t,this),e)},n.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!==e&&this.delay===e&&!1===this.pending)return n;clearInterval(n)},n.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,n){var e=!1,r=void 0;try{this.work(t)}catch(t){e=!0,r=!!t&&t||new Error(t)}if(e)return this.unsubscribe(),r},n.prototype._unsubscribe=function(){var t=this.id,n=this.scheduler,e=n.actions,r=e.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&e.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null},n}(function(t){function n(n,e){return t.call(this)||this}return r.a(n,t),n.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},n}(e(5).a))},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(7);function i(t){return!Object(r.a)(t)&&t-parseFloat(t)+1>=0}},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(33),i=e(59);function o(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Object(i.a)()(r.a.apply(void 0,t))}},function(t,n,e){"use strict";function r(t){setTimeout((function(){throw t}),0)}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(10),i=e(27),o=e(47);function u(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return Object(r.a)(e)?(t.pop(),Object(o.a)(t,e)):Object(i.a)(t)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return i})),e.d(n,"b",(function(){return o}));var r=e(15);function i(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return o(t)}function o(t){return 0===t.length?r.a:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(69),i=e(32),o=e(18),u=e(20),a=e(68),c=e(70),f=e(45),s=function(t){if(t&&"function"==typeof t[u.a])return s=t,function(t){var n=s[u.a]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if(Object(a.a)(t))return Object(r.a)(t);if(Object(c.a)(t))return e=t,function(t){return e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,i.a),t};if(t&&"function"==typeof t[o.a])return n=t,function(t){for(var e=n[o.a]();;){var r=e.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof e.return&&t.add((function(){e.return&&e.return()})),t};var n,e,s,l=Object(f.a)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+l+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},function(t,n,e){"use strict";e.d(n,"b",(function(){return s})),e.d(n,"a",(function(){return l}));var r=e(0),i=e(10),o=e(7),u=e(4),a=e(3),c=e(27),f={};function s(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null,r=null;return Object(i.a)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&Object(o.a)(t[0])&&(t=t[0]),Object(c.a)(t,r).lift(new l(e))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function n(n,e){var r=t.call(this,n)||this;return r.resultSelector=e,r.active=0,r.values=[],r.observables=[],r}return r.a(n,t),n.prototype._next=function(t){this.values.push(f),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var e=0;e<n;e++){var r=t[e];this.add(Object(a.a)(this,r,r,e))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.values,u=o[e],a=this.toRespond?u===f?--this.toRespond:this.toRespond:0;o[e]=n,0===a&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(u.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(22),i=e(15);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Object(r.a)(i.a,t)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(2);function i(t,n){return n?new r.a((function(e){return n.schedule(o,0,{error:t,subscriber:e})})):new r.a((function(n){return n.error(t)}))}function o(t){var n=t.error;t.subscriber.error(n)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(0),i=e(1);function o(){return function(t){return t.lift(new u(t))}}var u=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,n){var e=this.connectable;e._refCount++;var r=new a(t,e),i=n.subscribe(r);return r.closed||(r.connection=e.connect()),i},t}(),a=function(t){function n(n,e){var r=t.call(this,n)||this;return r.connectable=e,r}return r.a(n,t),n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var n=t._refCount;if(n<=0)this.connection=null;else if(t._refCount=n-1,n>1)this.connection=null;else{var e=this.connection,r=t._connection;this.connection=null,!r||e&&r!==e||r.unsubscribe()}}else this.connection=null},n}(i.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(0),i=e(6),o=e(67),u=e(5),a=e(62),c=e(21),f=e(71),s=function(t){function n(n,e,r){void 0===n&&(n=Number.POSITIVE_INFINITY),void 0===e&&(e=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=n<1?1:n,i._windowTime=e<1?1:e,e===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.a(n,t),n.prototype.nextInfiniteTimeWindow=function(n){var e=this._events;e.push(n),e.length>this._bufferSize&&e.shift(),t.prototype.next.call(this,n)},n.prototype.nextTimeWindow=function(n){this._events.push(new l(this._getNow(),n)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,n)},n.prototype._subscribe=function(t){var n,e=this._infiniteTimeWindow,r=e?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new c.a;if(this.isStopped||this.hasError?n=u.a.EMPTY:(this.observers.push(t),n=new f.a(this,t)),i&&t.add(t=new a.a(t,i)),e)for(var s=0;s<o&&!t.closed;s++)t.next(r[s]);else for(s=0;s<o&&!t.closed;s++)t.next(r[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),n},n.prototype._getNow=function(){return(this.scheduler||o.a).now()},n.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),n=this._bufferSize,e=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<e);)o++;return i>n&&(o=Math.max(o,i-n)),o>0&&r.splice(0,o),r},n}(i.a),l=function(){return function(t,n){this.time=t,this.value=n}}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(2),i=e(12),o=e(11);function u(t){return new r.a((function(n){var e;try{e=t()}catch(t){return void n.error(t)}return(e?Object(i.a)(e):Object(o.b)()).subscribe(n)}))}},function(t,n,e){"use strict";e.d(n,"b",(function(){return s})),e.d(n,"a",(function(){return l}));var r=e(0),i=e(27),o=e(7),u=e(1),a=e(4),c=e(3),f=e(18);function s(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return"function"==typeof e&&t.pop(),Object(i.a)(t,void 0).lift(new l(e))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function n(n,e,r){void 0===r&&(r=Object.create(null));var i=t.call(this,n)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof e?e:null,i.values=r,i}return r.a(n,t),n.prototype._next=function(t){var n=this.iterators;Object(o.a)(t)?n.push(new p(t)):"function"==typeof t[f.a]?n.push(new d(t[f.a]())):n.push(new v(this.destination,this,t))},n.prototype._complete=function(){var t=this.iterators,n=t.length;if(this.unsubscribe(),0!==n){this.active=n;for(var e=0;e<n;e++){var r=t[e];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,e));else this.active--}}else this.destination.complete()},n.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},n.prototype.checkIterators=function(){for(var t=this.iterators,n=t.length,e=this.destination,r=0;r<n;r++){if("function"==typeof(u=t[r]).hasValue&&!u.hasValue())return}var i=!1,o=[];for(r=0;r<n;r++){var u,a=(u=t[r]).next();if(u.hasCompleted()&&(i=!0),a.done)return void e.complete();o.push(a.value)}this.resultSelector?this._tryresultSelector(o):e.next(o),i&&e.complete()},n.prototype._tryresultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(u.a),d=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),p=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[f.a]=function(){return this},t.prototype.next=function(t){var n=this.index++,e=this.array;return n<this.length?{value:e[n],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),v=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.parent=e,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.a(n,t),n.prototype[f.a]=function(){return this},n.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},n.prototype.hasValue=function(){return this.buffer.length>0},n.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},n.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,i){this.buffer.push(n),this.parent.checkIterators()},n.prototype.subscribe=function(t,n){return Object(c.a)(this,this.observable,this,n)},n}(a.a)},function(t,n,e){"use strict";function r(t){return null!==t&&"object"==typeof t}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(1);function i(t){for(;t;){var n=t,e=n.closed,i=n.destination,o=n.isStopped;if(e||o)return!1;t=i&&i instanceof r.a?i:null}return!0}},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(2),i=e(5);function o(t,n){return new r.a((function(e){var r=new i.a,o=0;return r.add(n.schedule((function(){o!==t.length?(e.next(t[o++]),e.closed||r.add(this.schedule())):e.complete()}))),r}))}},function(t,n,e){"use strict";e.d(n,"a",(function(){return l}));var r=e(0),i=1,o=function(){return Promise.resolve()}(),u={};function a(t){return t in u&&(delete u[t],!0)}var c=function(t){var n=i++;return u[n]=!0,o.then((function(){return a(n)&&t()})),n},f=function(t){a(t)},s=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return r.a(n,t),n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,n,e,r):(n.actions.push(this),n.scheduled||(n.scheduled=c(n.flush.bind(n,null))))},n.prototype.recycleAsyncId=function(n,e,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,n,e,r);0===n.actions.length&&(f(e),n.scheduled=void 0)},n}(e(29).a),l=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var n,e=this.actions,r=-1,i=e.length;t=t||e.shift();do{if(n=t.execute(t.state,t.delay))break}while(++r<i&&(t=e.shift()));if(this.active=!1,n){for(;++r<i&&(t=e.shift());)t.unsubscribe();throw n}},n}(e(26).a))(s)},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(14),i=e(32),o={closed:!0,next:function(t){},error:function(t){if(r.a.useDeprecatedSynchronousErrorHandling)throw t;Object(i.a)(t)},complete:function(){}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(52),i=e(51);n.drawFacetPieChart=function(t,n,e){void 0===e&&(e=12);var o=r.select(n),u=r.pie().value(1)(t.children);console.log("piedata",u);var a=r.arc().innerRadius(0).outerRadius(t.r),c=(r.arc().innerRadius(0).outerRadius(t.r+70),o.selectAll("g.arc"+t.facetId).data(u).enter().append("g").attr("class","arc"+t.facetId).attr("transform",t.transform));c.append("path").attr("fill",t.color).attr("d",a).attr("stroke","white").attr("stroke-width",t.r/10).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),o=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.data.facetId,expandedFacetId:o+","+t.facetId.toString()}));var u=document.getElementById("facet-tree-tooltip");r.select(u).transition().transition().duration(500).style("opacity",0)})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html(t.data.facetName).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})),u.length>1?c.append("text").attr("transform",(function(t){return"translate("+a.centroid(t)+")"})).attr("text-anchor","middle").attr("fill","#fff").attr("font-size","10px").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),o=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.data.facetId,expandedFacetId:o+","+t.facetId.toString()}));var u=document.getElementById("facet-tree-tooltip");r.select(u).transition().transition().duration(500).style("opacity",0)})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html(t.data.facetName).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})):c.append("text").attr("text-anchor","middle").attr("fill","#fff").attr("font-size","20px").attr("vertical-align","middle").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),o=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.data.facetId,expandedFacetId:o+","+t.facetId.toString()}));var u=document.getElementById("facet-tree-tooltip");r.select(u).transition().transition().duration(500).style("opacity",0)})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html(t.data.facetName).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)}));t.childrenNumber;Math.PI}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(57);n.globalState=new r.BehaviorSubject({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!1}),n.globalData={treeData:null},n.globalBranch=new r.BehaviorSubject({currentFacetId:-1,expandedFacetId:"-2,-2",init:!1})},function(t,n,e){"use strict";e.r(n),e.d(n,"version",(function(){return r})),e.d(n,"bisect",(function(){return f})),e.d(n,"bisectRight",(function(){return a})),e.d(n,"bisectLeft",(function(){return c})),e.d(n,"ascending",(function(){return i})),e.d(n,"bisector",(function(){return o})),e.d(n,"cross",(function(){return h})),e.d(n,"descending",(function(){return d})),e.d(n,"deviation",(function(){return b})),e.d(n,"extent",(function(){return y})),e.d(n,"histogram",(function(){return C})),e.d(n,"thresholdFreedmanDiaconis",(function(){return O})),e.d(n,"thresholdScott",(function(){return F})),e.d(n,"thresholdSturges",(function(){return k})),e.d(n,"max",(function(){return P})),e.d(n,"mean",(function(){return z})),e.d(n,"median",(function(){return D})),e.d(n,"merge",(function(){return R})),e.d(n,"min",(function(){return B})),e.d(n,"pairs",(function(){return s})),e.d(n,"permute",(function(){return V})),e.d(n,"quantile",(function(){return j})),e.d(n,"range",(function(){return S})),e.d(n,"scan",(function(){return L})),e.d(n,"shuffle",(function(){return U})),e.d(n,"sum",(function(){return q})),e.d(n,"ticks",(function(){return N})),e.d(n,"tickIncrement",(function(){return T})),e.d(n,"tickStep",(function(){return I})),e.d(n,"transpose",(function(){return Y})),e.d(n,"variance",(function(){return v})),e.d(n,"zip",(function(){return W})),e.d(n,"axisTop",(function(){return nt})),e.d(n,"axisRight",(function(){return et})),e.d(n,"axisBottom",(function(){return rt})),e.d(n,"axisLeft",(function(){return it})),e.d(n,"brush",(function(){return Ai})),e.d(n,"brushX",(function(){return Mi})),e.d(n,"brushY",(function(){return Ei})),e.d(n,"brushSelection",(function(){return Si})),e.d(n,"chord",(function(){return Pi})),e.d(n,"ribbon",(function(){return Gi})),e.d(n,"nest",(function(){return Ji})),e.d(n,"set",(function(){return ao})),e.d(n,"map",(function(){return Qi})),e.d(n,"keys",(function(){return co})),e.d(n,"values",(function(){return fo})),e.d(n,"entries",(function(){return so})),e.d(n,"color",(function(){return Hn})),e.d(n,"rgb",(function(){return Gn})),e.d(n,"hsl",(function(){return ee})),e.d(n,"lab",(function(){return bo})),e.d(n,"hcl",(function(){return Mo})),e.d(n,"lch",(function(){return So})),e.d(n,"gray",(function(){return vo})),e.d(n,"cubehelix",(function(){return jo})),e.d(n,"contours",(function(){return Uo})),e.d(n,"contourDensity",(function(){return Xo})),e.d(n,"dispatch",(function(){return lt})),e.d(n,"drag",(function(){return nu})),e.d(n,"dragDisable",(function(){return Nn})),e.d(n,"dragEnable",(function(){return Tn})),e.d(n,"dsvFormat",(function(){return cu})),e.d(n,"csvParse",(function(){return su})),e.d(n,"csvParseRows",(function(){return lu})),e.d(n,"csvFormat",(function(){return hu})),e.d(n,"csvFormatBody",(function(){return du})),e.d(n,"csvFormatRows",(function(){return pu})),e.d(n,"csvFormatRow",(function(){return vu})),e.d(n,"csvFormatValue",(function(){return bu})),e.d(n,"tsvParse",(function(){return gu})),e.d(n,"tsvParseRows",(function(){return _u})),e.d(n,"tsvFormat",(function(){return mu})),e.d(n,"tsvFormatBody",(function(){return xu})),e.d(n,"tsvFormatRows",(function(){return wu})),e.d(n,"tsvFormatRow",(function(){return Su})),e.d(n,"tsvFormatValue",(function(){return Mu})),e.d(n,"autoType",(function(){return Eu})),e.d(n,"easeLinear",(function(){return Nu})),e.d(n,"easeQuad",(function(){return ku})),e.d(n,"easeQuadIn",(function(){return Tu})),e.d(n,"easeQuadOut",(function(){return Iu})),e.d(n,"easeQuadInOut",(function(){return ku})),e.d(n,"easeCubic",(function(){return $r})),e.d(n,"easeCubicIn",(function(){return Hr})),e.d(n,"easeCubicOut",(function(){return Wr})),e.d(n,"easeCubicInOut",(function(){return $r})),e.d(n,"easePoly",(function(){return Ou})),e.d(n,"easePolyIn",(function(){return Cu})),e.d(n,"easePolyOut",(function(){return ju})),e.d(n,"easePolyInOut",(function(){return Ou})),e.d(n,"easeSin",(function(){return Ru})),e.d(n,"easeSinIn",(function(){return zu})),e.d(n,"easeSinOut",(function(){return Du})),e.d(n,"easeSinInOut",(function(){return Ru})),e.d(n,"easeExp",(function(){return Lu})),e.d(n,"easeExpIn",(function(){return Bu})),e.d(n,"easeExpOut",(function(){return Vu})),e.d(n,"easeExpInOut",(function(){return Lu})),e.d(n,"easeCircle",(function(){return Yu})),e.d(n,"easeCircleIn",(function(){return Uu})),e.d(n,"easeCircleOut",(function(){return qu})),e.d(n,"easeCircleInOut",(function(){return Yu})),e.d(n,"easeBounce",(function(){return Wu})),e.d(n,"easeBounceIn",(function(){return Hu})),e.d(n,"easeBounceOut",(function(){return Wu})),e.d(n,"easeBounceInOut",(function(){return $u})),e.d(n,"easeBack",(function(){return Zu})),e.d(n,"easeBackIn",(function(){return Xu})),e.d(n,"easeBackOut",(function(){return Gu})),e.d(n,"easeBackInOut",(function(){return Zu})),e.d(n,"easeElastic",(function(){return Ju})),e.d(n,"easeElasticIn",(function(){return Qu})),e.d(n,"easeElasticOut",(function(){return Ju})),e.d(n,"easeElasticInOut",(function(){return ta})),e.d(n,"blob",(function(){return ea})),e.d(n,"buffer",(function(){return ia})),e.d(n,"dsv",(function(){return ca})),e.d(n,"csv",(function(){return fa})),e.d(n,"tsv",(function(){return sa})),e.d(n,"image",(function(){return la})),e.d(n,"json",(function(){return da})),e.d(n,"text",(function(){return ua})),e.d(n,"xml",(function(){return va})),e.d(n,"html",(function(){return ba})),e.d(n,"svg",(function(){return ya})),e.d(n,"forceCenter",(function(){return ga})),e.d(n,"forceCollide",(function(){return Ca})),e.d(n,"forceLink",(function(){return Fa})),e.d(n,"forceManyBody",(function(){return Ba})),e.d(n,"forceRadial",(function(){return Va})),e.d(n,"forceSimulation",(function(){return Ra})),e.d(n,"forceX",(function(){return La})),e.d(n,"forceY",(function(){return Ua})),e.d(n,"formatDefaultLocale",(function(){return ic})),e.d(n,"format",(function(){return Za})),e.d(n,"formatPrefix",(function(){return Ka})),e.d(n,"formatLocale",(function(){return rc})),e.d(n,"formatSpecifier",(function(){return Wa})),e.d(n,"FormatSpecifier",(function(){return $a})),e.d(n,"precisionFixed",(function(){return oc})),e.d(n,"precisionPrefix",(function(){return uc})),e.d(n,"precisionRound",(function(){return ac})),e.d(n,"geoArea",(function(){return Qc})),e.d(n,"geoBounds",(function(){return Hf})),e.d(n,"geoCentroid",(function(){return rs})),e.d(n,"geoCircle",(function(){return ps})),e.d(n,"geoClipAntimeridian",(function(){return As})),e.d(n,"geoClipCircle",(function(){return Ns})),e.d(n,"geoClipExtent",(function(){return js})),e.d(n,"geoClipRectangle",(function(){return Ts})),e.d(n,"geoContains",(function(){return Zs})),e.d(n,"geoDistance",(function(){return Ls})),e.d(n,"geoGraticule",(function(){return Js})),e.d(n,"geoGraticule10",(function(){return tl})),e.d(n,"geoInterpolate",(function(){return ol})),e.d(n,"geoLength",(function(){return Rs})),e.d(n,"geoPath",(function(){return rh})),e.d(n,"geoAlbers",(function(){return wh})),e.d(n,"geoAlbersUsa",(function(){return Sh})),e.d(n,"geoAzimuthalEqualArea",(function(){return Nh})),e.d(n,"geoAzimuthalEqualAreaRaw",(function(){return Ah})),e.d(n,"geoAzimuthalEquidistant",(function(){return Ih})),e.d(n,"geoAzimuthalEquidistantRaw",(function(){return Th})),e.d(n,"geoConicConformal",(function(){return Ph})),e.d(n,"geoConicConformalRaw",(function(){return Fh})),e.d(n,"geoConicEqualArea",(function(){return xh})),e.d(n,"geoConicEqualAreaRaw",(function(){return mh})),e.d(n,"geoConicEquidistant",(function(){return Bh})),e.d(n,"geoConicEquidistantRaw",(function(){return Rh})),e.d(n,"geoEqualEarth",(function(){return Wh})),e.d(n,"geoEqualEarthRaw",(function(){return Hh})),e.d(n,"geoEquirectangular",(function(){return Dh})),e.d(n,"geoEquirectangularRaw",(function(){return zh})),e.d(n,"geoGnomonic",(function(){return Xh})),e.d(n,"geoGnomonicRaw",(function(){return $h})),e.d(n,"geoIdentity",(function(){return Gh})),e.d(n,"geoProjection",(function(){return yh})),e.d(n,"geoProjectionMutator",(function(){return gh})),e.d(n,"geoMercator",(function(){return Ch})),e.d(n,"geoMercatorRaw",(function(){return kh})),e.d(n,"geoNaturalEarth1",(function(){return Kh})),e.d(n,"geoNaturalEarth1Raw",(function(){return Zh})),e.d(n,"geoOrthographic",(function(){return Jh})),e.d(n,"geoOrthographicRaw",(function(){return Qh})),e.d(n,"geoStereographic",(function(){return nd})),e.d(n,"geoStereographicRaw",(function(){return td})),e.d(n,"geoTransverseMercator",(function(){return rd})),e.d(n,"geoTransverseMercatorRaw",(function(){return ed})),e.d(n,"geoRotation",(function(){return ls})),e.d(n,"geoStream",(function(){return Yc})),e.d(n,"geoTransform",(function(){return ih})),e.d(n,"cluster",(function(){return ad})),e.d(n,"hierarchy",(function(){return fd})),e.d(n,"pack",(function(){return Fd})),e.d(n,"packSiblings",(function(){return Td})),e.d(n,"packEnclose",(function(){return vd})),e.d(n,"partition",(function(){return Vd})),e.d(n,"stratify",(function(){return Hd})),e.d(n,"tree",(function(){return Qd})),e.d(n,"treemap",(function(){return rp})),e.d(n,"treemapBinary",(function(){return ip})),e.d(n,"treemapDice",(function(){return Bd})),e.d(n,"treemapSlice",(function(){return Jd})),e.d(n,"treemapSliceDice",(function(){return op})),e.d(n,"treemapSquarify",(function(){return ep})),e.d(n,"treemapResquarify",(function(){return up})),e.d(n,"interpolate",(function(){return Ie})),e.d(n,"interpolateArray",(function(){return _e})),e.d(n,"interpolateBasis",(function(){return ue})),e.d(n,"interpolateBasisClosed",(function(){return ae})),e.d(n,"interpolateDate",(function(){return xe})),e.d(n,"interpolateDiscrete",(function(){return ap})),e.d(n,"interpolateHue",(function(){return cp})),e.d(n,"interpolateNumber",(function(){return we})),e.d(n,"interpolateNumberArray",(function(){return ye})),e.d(n,"interpolateObject",(function(){return Se})),e.d(n,"interpolateRound",(function(){return fp})),e.d(n,"interpolateString",(function(){return Te})),e.d(n,"interpolateTransformCss",(function(){return hr})),e.d(n,"interpolateTransformSvg",(function(){return dr})),e.d(n,"interpolateZoom",(function(){return hp})),e.d(n,"interpolateRgb",(function(){return de})),e.d(n,"interpolateRgbBasis",(function(){return ve})),e.d(n,"interpolateRgbBasisClosed",(function(){return be})),e.d(n,"interpolateHsl",(function(){return pp})),e.d(n,"interpolateHslLong",(function(){return vp})),e.d(n,"interpolateLab",(function(){return bp})),e.d(n,"interpolateHcl",(function(){return gp})),e.d(n,"interpolateHclLong",(function(){return _p})),e.d(n,"interpolateCubehelix",(function(){return xp})),e.d(n,"interpolateCubehelixLong",(function(){return wp})),e.d(n,"piecewise",(function(){return Sp})),e.d(n,"quantize",(function(){return Mp})),e.d(n,"path",(function(){return qi})),e.d(n,"polygonArea",(function(){return Ep})),e.d(n,"polygonCentroid",(function(){return Ap})),e.d(n,"polygonHull",(function(){return Ip})),e.d(n,"polygonContains",(function(){return kp})),e.d(n,"polygonLength",(function(){return Cp})),e.d(n,"quadtree",(function(){return Ea})),e.d(n,"randomUniform",(function(){return Op})),e.d(n,"randomNormal",(function(){return Fp})),e.d(n,"randomLogNormal",(function(){return Pp})),e.d(n,"randomBates",(function(){return Dp})),e.d(n,"randomIrwinHall",(function(){return zp})),e.d(n,"randomExponential",(function(){return Rp})),e.d(n,"scaleBand",(function(){return Wp})),e.d(n,"scalePoint",(function(){return Xp})),e.d(n,"scaleIdentity",(function(){return cv})),e.d(n,"scaleLinear",(function(){return av})),e.d(n,"scaleLog",(function(){return yv})),e.d(n,"scaleSymlog",(function(){return xv})),e.d(n,"scaleOrdinal",(function(){return Hp})),e.d(n,"scaleImplicit",(function(){return Yp})),e.d(n,"scalePow",(function(){return Av})),e.d(n,"scaleSqrt",(function(){return Nv})),e.d(n,"scaleQuantile",(function(){return Tv})),e.d(n,"scaleQuantize",(function(){return Iv})),e.d(n,"scaleThreshold",(function(){return kv})),e.d(n,"scaleTime",(function(){return ag})),e.d(n,"scaleUtc",(function(){return yg})),e.d(n,"scaleSequential",(function(){return mg})),e.d(n,"scaleSequentialLog",(function(){return xg})),e.d(n,"scaleSequentialPow",(function(){return Sg})),e.d(n,"scaleSequentialSqrt",(function(){return Mg})),e.d(n,"scaleSequentialSymlog",(function(){return wg})),e.d(n,"scaleSequentialQuantile",(function(){return Eg})),e.d(n,"scaleDiverging",(function(){return Ng})),e.d(n,"scaleDivergingLog",(function(){return Tg})),e.d(n,"scaleDivergingPow",(function(){return kg})),e.d(n,"scaleDivergingSqrt",(function(){return Cg})),e.d(n,"scaleDivergingSymlog",(function(){return Ig})),e.d(n,"tickFormat",(function(){return ov})),e.d(n,"schemeCategory10",(function(){return Og})),e.d(n,"schemeAccent",(function(){return Fg})),e.d(n,"schemeDark2",(function(){return Pg})),e.d(n,"schemePaired",(function(){return zg})),e.d(n,"schemePastel1",(function(){return Dg})),e.d(n,"schemePastel2",(function(){return Rg})),e.d(n,"schemeSet1",(function(){return Bg})),e.d(n,"schemeSet2",(function(){return Vg})),e.d(n,"schemeSet3",(function(){return Lg})),e.d(n,"schemeTableau10",(function(){return Ug})),e.d(n,"interpolateBrBG",(function(){return Hg})),e.d(n,"schemeBrBG",(function(){return Yg})),e.d(n,"interpolatePRGn",(function(){return $g})),e.d(n,"schemePRGn",(function(){return Wg})),e.d(n,"interpolatePiYG",(function(){return Gg})),e.d(n,"schemePiYG",(function(){return Xg})),e.d(n,"interpolatePuOr",(function(){return Kg})),e.d(n,"schemePuOr",(function(){return Zg})),e.d(n,"interpolateRdBu",(function(){return Jg})),e.d(n,"schemeRdBu",(function(){return Qg})),e.d(n,"interpolateRdGy",(function(){return n_})),e.d(n,"schemeRdGy",(function(){return t_})),e.d(n,"interpolateRdYlBu",(function(){return r_})),e.d(n,"schemeRdYlBu",(function(){return e_})),e.d(n,"interpolateRdYlGn",(function(){return o_})),e.d(n,"schemeRdYlGn",(function(){return i_})),e.d(n,"interpolateSpectral",(function(){return a_})),e.d(n,"schemeSpectral",(function(){return u_})),e.d(n,"interpolateBuGn",(function(){return f_})),e.d(n,"schemeBuGn",(function(){return c_})),e.d(n,"interpolateBuPu",(function(){return l_})),e.d(n,"schemeBuPu",(function(){return s_})),e.d(n,"interpolateGnBu",(function(){return d_})),e.d(n,"schemeGnBu",(function(){return h_})),e.d(n,"interpolateOrRd",(function(){return v_})),e.d(n,"schemeOrRd",(function(){return p_})),e.d(n,"interpolatePuBuGn",(function(){return y_})),e.d(n,"schemePuBuGn",(function(){return b_})),e.d(n,"interpolatePuBu",(function(){return __})),e.d(n,"schemePuBu",(function(){return g_})),e.d(n,"interpolatePuRd",(function(){return x_})),e.d(n,"schemePuRd",(function(){return m_})),e.d(n,"interpolateRdPu",(function(){return S_})),e.d(n,"schemeRdPu",(function(){return w_})),e.d(n,"interpolateYlGnBu",(function(){return E_})),e.d(n,"schemeYlGnBu",(function(){return M_})),e.d(n,"interpolateYlGn",(function(){return N_})),e.d(n,"schemeYlGn",(function(){return A_})),e.d(n,"interpolateYlOrBr",(function(){return I_})),e.d(n,"schemeYlOrBr",(function(){return T_})),e.d(n,"interpolateYlOrRd",(function(){return C_})),e.d(n,"schemeYlOrRd",(function(){return k_})),e.d(n,"interpolateBlues",(function(){return O_})),e.d(n,"schemeBlues",(function(){return j_})),e.d(n,"interpolateGreens",(function(){return P_})),e.d(n,"schemeGreens",(function(){return F_})),e.d(n,"interpolateGreys",(function(){return D_})),e.d(n,"schemeGreys",(function(){return z_})),e.d(n,"interpolatePurples",(function(){return B_})),e.d(n,"schemePurples",(function(){return R_})),e.d(n,"interpolateReds",(function(){return L_})),e.d(n,"schemeReds",(function(){return V_})),e.d(n,"interpolateOranges",(function(){return q_})),e.d(n,"schemeOranges",(function(){return U_})),e.d(n,"interpolateCividis",(function(){return Y_})),e.d(n,"interpolateCubehelixDefault",(function(){return H_})),e.d(n,"interpolateRainbow",(function(){return G_})),e.d(n,"interpolateWarm",(function(){return W_})),e.d(n,"interpolateCool",(function(){return $_})),e.d(n,"interpolateSinebow",(function(){return J_})),e.d(n,"interpolateTurbo",(function(){return tm})),e.d(n,"interpolateViridis",(function(){return em})),e.d(n,"interpolateMagma",(function(){return rm})),e.d(n,"interpolateInferno",(function(){return im})),e.d(n,"interpolatePlasma",(function(){return om})),e.d(n,"create",(function(){return um})),e.d(n,"creator",(function(){return rn})),e.d(n,"local",(function(){return cm})),e.d(n,"matcher",(function(){return bt})),e.d(n,"mouse",(function(){return Oe})),e.d(n,"namespace",(function(){return Mt})),e.d(n,"namespaces",(function(){return St})),e.d(n,"clientPoint",(function(){return Ce})),e.d(n,"select",(function(){return Mn})),e.d(n,"selectAll",(function(){return sm})),e.d(n,"selection",(function(){return Sn})),e.d(n,"selector",(function(){return dt})),e.d(n,"selectorAll",(function(){return vt})),e.d(n,"style",(function(){return Pt})),e.d(n,"touch",(function(){return je})),e.d(n,"touches",(function(){return lm})),e.d(n,"window",(function(){return Ct})),e.d(n,"event",(function(){return sn})),e.d(n,"customEvent",(function(){return bn})),e.d(n,"arc",(function(){return jm})),e.d(n,"area",(function(){return Rm})),e.d(n,"line",(function(){return Dm})),e.d(n,"pie",(function(){return Lm})),e.d(n,"areaRadial",(function(){return $m})),e.d(n,"radialArea",(function(){return $m})),e.d(n,"lineRadial",(function(){return Wm})),e.d(n,"radialLine",(function(){return Wm})),e.d(n,"pointRadial",(function(){return Xm})),e.d(n,"linkHorizontal",(function(){return ex})),e.d(n,"linkVertical",(function(){return rx})),e.d(n,"linkRadial",(function(){return ix})),e.d(n,"symbol",(function(){return wx})),e.d(n,"symbols",(function(){return xx})),e.d(n,"symbolCircle",(function(){return ox})),e.d(n,"symbolCross",(function(){return ux})),e.d(n,"symbolDiamond",(function(){return fx})),e.d(n,"symbolSquare",(function(){return px})),e.d(n,"symbolStar",(function(){return dx})),e.d(n,"symbolTriangle",(function(){return bx})),e.d(n,"symbolWye",(function(){return mx})),e.d(n,"curveBasisClosed",(function(){return Tx})),e.d(n,"curveBasisOpen",(function(){return kx})),e.d(n,"curveBasis",(function(){return Ax})),e.d(n,"curveBundle",(function(){return jx})),e.d(n,"curveCardinalClosed",(function(){return Dx})),e.d(n,"curveCardinalOpen",(function(){return Bx})),e.d(n,"curveCardinal",(function(){return Px})),e.d(n,"curveCatmullRomClosed",(function(){return Yx})),e.d(n,"curveCatmullRomOpen",(function(){return Wx})),e.d(n,"curveCatmullRom",(function(){return Ux})),e.d(n,"curveLinearClosed",(function(){return Xx})),e.d(n,"curveLinear",(function(){return Fm})),e.d(n,"curveMonotoneX",(function(){return ew})),e.d(n,"curveMonotoneY",(function(){return rw})),e.d(n,"curveNatural",(function(){return uw})),e.d(n,"curveStep",(function(){return cw})),e.d(n,"curveStepAfter",(function(){return sw})),e.d(n,"curveStepBefore",(function(){return fw})),e.d(n,"stack",(function(){return pw})),e.d(n,"stackOffsetExpand",(function(){return vw})),e.d(n,"stackOffsetDiverging",(function(){return bw})),e.d(n,"stackOffsetNone",(function(){return lw})),e.d(n,"stackOffsetSilhouette",(function(){return yw})),e.d(n,"stackOffsetWiggle",(function(){return gw})),e.d(n,"stackOrderAppearance",(function(){return _w})),e.d(n,"stackOrderAscending",(function(){return xw})),e.d(n,"stackOrderDescending",(function(){return Sw})),e.d(n,"stackOrderInsideOut",(function(){return Mw})),e.d(n,"stackOrderNone",(function(){return hw})),e.d(n,"stackOrderReverse",(function(){return Ew})),e.d(n,"timeInterval",(function(){return Ov})),e.d(n,"timeMillisecond",(function(){return pb})),e.d(n,"timeMilliseconds",(function(){return vb})),e.d(n,"utcMillisecond",(function(){return pb})),e.d(n,"utcMilliseconds",(function(){return vb})),e.d(n,"timeSecond",(function(){return lb})),e.d(n,"timeSeconds",(function(){return hb})),e.d(n,"utcSecond",(function(){return lb})),e.d(n,"utcSeconds",(function(){return hb})),e.d(n,"timeMinute",(function(){return cb})),e.d(n,"timeMinutes",(function(){return fb})),e.d(n,"timeHour",(function(){return ob})),e.d(n,"timeHours",(function(){return ub})),e.d(n,"timeDay",(function(){return eb})),e.d(n,"timeDays",(function(){return rb})),e.d(n,"timeWeek",(function(){return Lv})),e.d(n,"timeWeeks",(function(){return Xv})),e.d(n,"timeSunday",(function(){return Lv})),e.d(n,"timeSundays",(function(){return Xv})),e.d(n,"timeMonday",(function(){return Uv})),e.d(n,"timeMondays",(function(){return Gv})),e.d(n,"timeTuesday",(function(){return qv})),e.d(n,"timeTuesdays",(function(){return Zv})),e.d(n,"timeWednesday",(function(){return Yv})),e.d(n,"timeWednesdays",(function(){return Kv})),e.d(n,"timeThursday",(function(){return Hv})),e.d(n,"timeThursdays",(function(){return Qv})),e.d(n,"timeFriday",(function(){return Wv})),e.d(n,"timeFridays",(function(){return Jv})),e.d(n,"timeSaturday",(function(){return $v})),e.d(n,"timeSaturdays",(function(){return tb})),e.d(n,"timeMonth",(function(){return Rv})),e.d(n,"timeMonths",(function(){return Bv})),e.d(n,"timeYear",(function(){return Pv})),e.d(n,"timeYears",(function(){return zv})),e.d(n,"utcMinute",(function(){return vg})),e.d(n,"utcMinutes",(function(){return bg})),e.d(n,"utcHour",(function(){return hg})),e.d(n,"utcHours",(function(){return dg})),e.d(n,"utcDay",(function(){return jb})),e.d(n,"utcDays",(function(){return Ob})),e.d(n,"utcWeek",(function(){return yb})),e.d(n,"utcWeeks",(function(){return Mb})),e.d(n,"utcSunday",(function(){return yb})),e.d(n,"utcSundays",(function(){return Mb})),e.d(n,"utcMonday",(function(){return gb})),e.d(n,"utcMondays",(function(){return Eb})),e.d(n,"utcTuesday",(function(){return _b})),e.d(n,"utcTuesdays",(function(){return Ab})),e.d(n,"utcWednesday",(function(){return mb})),e.d(n,"utcWednesdays",(function(){return Nb})),e.d(n,"utcThursday",(function(){return xb})),e.d(n,"utcThursdays",(function(){return Tb})),e.d(n,"utcFriday",(function(){return wb})),e.d(n,"utcFridays",(function(){return Ib})),e.d(n,"utcSaturday",(function(){return Sb})),e.d(n,"utcSaturdays",(function(){return kb})),e.d(n,"utcMonth",(function(){return fg})),e.d(n,"utcMonths",(function(){return sg})),e.d(n,"utcYear",(function(){return Pb})),e.d(n,"utcYears",(function(){return zb})),e.d(n,"timeFormatDefaultLocale",(function(){return rg})),e.d(n,"timeFormat",(function(){return Ub})),e.d(n,"timeParse",(function(){return qb})),e.d(n,"utcFormat",(function(){return Yb})),e.d(n,"utcParse",(function(){return Hb})),e.d(n,"timeFormatLocale",(function(){return Vb})),e.d(n,"isoFormat",(function(){return Aw})),e.d(n,"isoParse",(function(){return Nw})),e.d(n,"now",(function(){return Ue})),e.d(n,"timer",(function(){return He})),e.d(n,"timerFlush",(function(){return We})),e.d(n,"timeout",(function(){return Ze})),e.d(n,"interval",(function(){return Tw})),e.d(n,"transition",(function(){return Ur})),e.d(n,"active",(function(){return Kr})),e.d(n,"interrupt",(function(){return ar})),e.d(n,"voronoi",(function(){return dS})),e.d(n,"zoom",(function(){return NS})),e.d(n,"zoomTransform",(function(){return gS})),e.d(n,"zoomIdentity",(function(){return yS}));var r="5.16.0",i=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},o=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var u=o(i),a=u.right,c=u.left,f=a,s=function(t,n){null==n&&(n=l);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o};function l(t,n){return[t,n]}var h=function(t,n,e){var r,i,o,u,a=t.length,c=n.length,f=new Array(a*c);for(null==e&&(e=l),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)f[o]=e(u,n[i]);return f},d=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},p=function(t){return null===t?NaN:+t},v=function(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=p(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=p(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)},b=function(t,n){var e=v(t,n);return e?Math.sqrt(e):e},y=function(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},g=Array.prototype,_=g.slice,m=g.map,x=function(t){return function(){return t}},w=function(t){return t},S=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},M=Math.sqrt(50),E=Math.sqrt(10),A=Math.sqrt(2),N=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=T(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function T(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=M?10:o>=E?5:o>=A?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=M?10:o>=E?5:o>=A?2:1)}function I(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=M?i*=10:o>=E?i*=5:o>=A&&(i*=2),n<t?-i:i}var k=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},C=function(){var t=w,n=y,e=k;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var c=n(a),s=c[0],l=c[1],h=e(a,s,l);Array.isArray(h)||(h=I(s,l,h),h=S(Math.ceil(s/h)*h,l,h));for(var d=h.length;h[0]<=s;)h.shift(),--d;for(;h[d-1]>l;)h.pop(),--d;var p,v=new Array(d+1);for(i=0;i<=d;++i)(p=v[i]=[]).x0=i>0?h[i-1]:s,p.x1=i<d?h[i]:l;for(i=0;i<u;++i)s<=(o=a[i])&&o<=l&&v[f(h,o,0,d)].push(r[i]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:x(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:x([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?x(_.call(t)):x(t),r):e},r},j=function(t,n,e){if(null==e&&(e=p),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}},O=function(t,n,e){return t=m.call(t,p).sort(i),Math.ceil((e-n)/(2*(j(t,.75)-j(t,.25))*Math.pow(t.length,-1/3)))},F=function(t,n,e){return Math.ceil((e-n)/(3.5*b(t)*Math.pow(t.length,-1/3)))},P=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},z=function(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=p(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=p(n(t[o],o,t)))?--i:u+=e;if(i)return u/i},D=function(t,n){var e,r=t.length,o=-1,u=[];if(null==n)for(;++o<r;)isNaN(e=p(t[o]))||u.push(e);else for(;++o<r;)isNaN(e=p(n(t[o],o,t)))||u.push(e);return j(u.sort(i),.5)},R=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e},B=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},V=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},L=function(t,n){if(e=t.length){var e,r,o=0,u=0,a=t[u];for(null==n&&(n=i);++o<e;)(n(r=t[o],a)<0||0!==n(a,a))&&(a=r,u=o);return 0===n(a,a)?u:void 0}},U=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},q=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},Y=function(t){if(!(i=t.length))return[];for(var n=-1,e=B(t,H),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r};function H(t){return t.length}var W=function(){return Y(arguments)},$=Array.prototype.slice,X=function(t){return t};function G(t){return"translate("+(t+.5)+",0)"}function Z(t){return"translate(0,"+(t+.5)+")"}function K(t){return function(n){return+t(n)}}function Q(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function J(){return!this.__axis}function tt(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=1===t||4===t?-1:1,f=4===t||2===t?"x":"y",s=1===t||3===t?G:Z;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):X:i,p=Math.max(o,0)+a,v=n.range(),b=+v[0]+.5,y=+v[v.length-1]+.5,g=(n.bandwidth?Q:K)(n.copy()),_=l.selection?l.selection():l,m=_.selectAll(".domain").data([null]),x=_.selectAll(".tick").data(h,n).order(),w=x.exit(),S=x.enter().append("g").attr("class","tick"),M=x.select("line"),E=x.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(f+"2",c*o)),E=E.merge(S.append("text").attr("fill","currentColor").attr(f,c*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),l!==_&&(m=m.transition(l),x=x.transition(l),M=M.transition(l),E=E.transition(l),w=w.transition(l).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=g(t))?s(t):this.getAttribute("transform")})),S.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:g(t))}))),w.remove(),m.attr("d",4===t||2==t?u?"M"+c*u+","+b+"H0.5V"+y+"H"+c*u:"M0.5,"+b+"V"+y:u?"M"+b+","+c*u+"V0.5H"+y+"V"+c*u:"M"+b+",0.5H"+y),x.attr("opacity",1).attr("transform",(function(t){return s(g(t))})),M.attr(f+"2",c*o),E.attr(f,c*p).text(d),_.filter(J).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),_.each((function(){this.__axis=g}))}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=$.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:$.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:$.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=u=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(u=+t,l):u},l.tickPadding=function(t){return arguments.length?(a=+t,l):a},l}function nt(t){return tt(1,t)}function et(t){return tt(2,t)}function rt(t){return tt(3,t)}function it(t){return tt(4,t)}var ot={value:function(){}};function ut(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new at(r)}function at(t){this._=t}function ct(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function ft(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function st(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ot,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}at.prototype=ut.prototype={constructor:at,on:function(t,n){var e,r=this._,i=ct(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=st(r[e],t.name,n);else if(null==n)for(e in r)r[e]=st(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=ft(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new at(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var lt=ut;function ht(){}var dt=function(t){return null==t?ht:function(){return this.querySelector(t)}};function pt(){return[]}var vt=function(t){return null==t?pt:function(){return this.querySelectorAll(t)}},bt=function(t){return function(){return this.matches(t)}},yt=function(t){return new Array(t.length)};function gt(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}gt.prototype={constructor:gt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function _t(t,n,e,r,i,o){for(var u,a=0,c=n.length,f=o.length;a<f;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new gt(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function mt(t,n,e,r,i,o,u){var a,c,f,s={},l=n.length,h=o.length,d=new Array(l);for(a=0;a<l;++a)(c=n[a])&&(d[a]=f="$"+u.call(c,c.__data__,a,n),f in s?i[a]=c:s[f]=c);for(a=0;a<h;++a)(c=s[f="$"+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],s[f]=null):e[a]=new gt(t,o[a]);for(a=0;a<l;++a)(c=n[a])&&s[d[a]]===c&&(i[a]=c)}function xt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var wt="http://www.w3.org/1999/xhtml",St={svg:"http://www.w3.org/2000/svg",xhtml:wt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Mt=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),St.hasOwnProperty(n)?{space:St[n],local:t}:t};function Et(t){return function(){this.removeAttribute(t)}}function At(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Nt(t,n){return function(){this.setAttribute(t,n)}}function Tt(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function It(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function kt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var Ct=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function jt(t){return function(){this.style.removeProperty(t)}}function Ot(t,n,e){return function(){this.style.setProperty(t,n,e)}}function Ft(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function Pt(t,n){return t.style.getPropertyValue(n)||Ct(t).getComputedStyle(t,null).getPropertyValue(n)}function zt(t){return function(){delete this[t]}}function Dt(t,n){return function(){this[t]=n}}function Rt(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Bt(t){return t.trim().split(/^|\s+/)}function Vt(t){return t.classList||new Lt(t)}function Lt(t){this._node=t,this._names=Bt(t.getAttribute("class")||"")}function Ut(t,n){for(var e=Vt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function qt(t,n){for(var e=Vt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Yt(t){return function(){Ut(this,t)}}function Ht(t){return function(){qt(this,t)}}function Wt(t,n){return function(){(n.apply(this,arguments)?Ut:qt)(this,t)}}Lt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function $t(){this.textContent=""}function Xt(t){return function(){this.textContent=t}}function Gt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Zt(){this.innerHTML=""}function Kt(t){return function(){this.innerHTML=t}}function Qt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Jt(){this.nextSibling&&this.parentNode.appendChild(this)}function tn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function nn(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===wt&&n.documentElement.namespaceURI===wt?n.createElement(t):n.createElementNS(e,t)}}function en(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var rn=function(t){var n=Mt(t);return(n.local?en:nn)(n)};function on(){return null}function un(){var t=this.parentNode;t&&t.removeChild(this)}function an(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function cn(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var fn={},sn=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(fn={mouseenter:"mouseover",mouseleave:"mouseout"}));function ln(t,n,e){return t=hn(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function hn(t,n,e){return function(r){var i=sn;sn=r;try{t.call(this,this.__data__,n,e)}finally{sn=i}}}function dn(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function pn(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function vn(t,n,e){var r=fn.hasOwnProperty(t.type)?ln:hn;return function(i,o,u){var a,c=this.__on,f=r(n,o,u);if(c)for(var s=0,l=c.length;s<l;++s)if((a=c[s]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=f,a.capture=e),void(a.value=n);this.addEventListener(t.type,f,e),a={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(a):this.__on=[a]}}function bn(t,n,e,r){var i=sn;t.sourceEvent=sn,sn=t;try{return n.apply(e,r)}finally{sn=i}}function yn(t,n,e){var r=Ct(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function gn(t,n){return function(){return yn(this,t,n)}}function _n(t,n){return function(){return yn(this,t,n.apply(this,arguments))}}var mn=[null];function xn(t,n){this._groups=t,this._parents=n}function wn(){return new xn([[document.documentElement]],mn)}xn.prototype=wn.prototype={constructor:xn,select:function(t){"function"!=typeof t&&(t=dt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=a[s])&&(u=t.call(o,o.__data__,s,a))&&("__data__"in o&&(u.__data__=o.__data__),f[s]=u);return new xn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=vt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,f=0;f<c;++f)(u=a[f])&&(r.push(t.call(u,u.__data__,f,a)),i.push(u));return new xn(r,i)},filter:function(t){"function"!=typeof t&&(t=bt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new xn(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each((function(t){p[++s]=t})),p;var e,r=n?mt:_t,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),f=new Array(u),s=0;s<u;++s){var l=i[s],h=o[s],d=h.length,p=t.call(l,l&&l.__data__,s,i),v=p.length,b=c[s]=new Array(v),y=a[s]=new Array(v);r(l,h,b,y,f[s]=new Array(d),p,n);for(var g,_,m=0,x=0;m<v;++m)if(g=b[m]){for(m>=x&&(x=m+1);!(_=y[x])&&++x<v;);g._next=_||null}}return(a=new xn(a,i))._enter=c,a._exit=f,a},enter:function(){return new xn(this._enter||this._groups.map(yt),this._parents)},exit:function(){return new xn(this._exit||this._groups.map(yt),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new xn(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=xt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,f=i[o]=new Array(c),s=0;s<c;++s)(u=a[s])&&(f[s]=u);f.sort(n)}return new xn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=Mt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?At:Et:"function"==typeof n?e.local?kt:It:e.local?Tt:Nt)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?jt:"function"==typeof n?Ft:Ot)(t,n,null==e?"":e)):Pt(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?zt:"function"==typeof n?Rt:Dt)(t,n)):this.node()[t]},classed:function(t,n){var e=Bt(t+"");if(arguments.length<2){for(var r=Vt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Wt:n?Yt:Ht)(e,n))},text:function(t){return arguments.length?this.each(null==t?$t:("function"==typeof t?Gt:Xt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Zt:("function"==typeof t?Qt:Kt)(t)):this.node().innerHTML},raise:function(){return this.each(Jt)},lower:function(){return this.each(tn)},append:function(t){var n="function"==typeof t?t:rn(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:rn(t),r=null==n?on:"function"==typeof n?n:dt(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(un)},clone:function(t){return this.select(t?cn:an)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=dn(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?vn:pn,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,f=0,s=a.length;f<s;++f)for(r=0,c=a[f];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?_n:gn)(t,n))}};var Sn=wn,Mn=function(t){return"string"==typeof t?new xn([[document.querySelector(t)]],[document.documentElement]):new xn([[t]],mn)};function En(){sn.stopImmediatePropagation()}var An=function(){sn.preventDefault(),sn.stopImmediatePropagation()},Nn=function(t){var n=t.document.documentElement,e=Mn(t).on("dragstart.drag",An,!0);"onselectstart"in n?e.on("selectstart.drag",An,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function Tn(t,n){var e=t.document.documentElement,r=Mn(t).on("dragstart.drag",null);n&&(r.on("click.drag",An,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var In=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function kn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Cn(){}var jn="\\s*([+-]?\\d+)\\s*",On="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Fn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Pn=/^#([0-9a-f]{3,8})$/,zn=new RegExp("^rgb\\("+[jn,jn,jn]+"\\)$"),Dn=new RegExp("^rgb\\("+[Fn,Fn,Fn]+"\\)$"),Rn=new RegExp("^rgba\\("+[jn,jn,jn,On]+"\\)$"),Bn=new RegExp("^rgba\\("+[Fn,Fn,Fn,On]+"\\)$"),Vn=new RegExp("^hsl\\("+[On,Fn,Fn]+"\\)$"),Ln=new RegExp("^hsla\\("+[On,Fn,Fn,On]+"\\)$"),Un={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function qn(){return this.rgb().formatHex()}function Yn(){return this.rgb().formatRgb()}function Hn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Pn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Wn(n):3===e?new Zn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?$n(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?$n(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=zn.exec(t))?new Zn(n[1],n[2],n[3],1):(n=Dn.exec(t))?new Zn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Rn.exec(t))?$n(n[1],n[2],n[3],n[4]):(n=Bn.exec(t))?$n(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Vn.exec(t))?te(n[1],n[2]/100,n[3]/100,1):(n=Ln.exec(t))?te(n[1],n[2]/100,n[3]/100,n[4]):Un.hasOwnProperty(t)?Wn(Un[t]):"transparent"===t?new Zn(NaN,NaN,NaN,0):null}function Wn(t){return new Zn(t>>16&255,t>>8&255,255&t,1)}function $n(t,n,e,r){return r<=0&&(t=n=e=NaN),new Zn(t,n,e,r)}function Xn(t){return t instanceof Cn||(t=Hn(t)),t?new Zn((t=t.rgb()).r,t.g,t.b,t.opacity):new Zn}function Gn(t,n,e,r){return 1===arguments.length?Xn(t):new Zn(t,n,e,null==r?1:r)}function Zn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Kn(){return"#"+Jn(this.r)+Jn(this.g)+Jn(this.b)}function Qn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Jn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function te(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new re(t,n,e,r)}function ne(t){if(t instanceof re)return new re(t.h,t.s,t.l,t.opacity);if(t instanceof Cn||(t=Hn(t)),!t)return new re;if(t instanceof re)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new re(u,a,c,t.opacity)}function ee(t,n,e,r){return 1===arguments.length?ne(t):new re(t,n,e,null==r?1:r)}function re(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ie(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function oe(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}In(Cn,Hn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:qn,formatHex:qn,formatHsl:function(){return ne(this).formatHsl()},formatRgb:Yn,toString:Yn}),In(Zn,Gn,kn(Cn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Zn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Zn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Kn,formatHex:Kn,formatRgb:Qn,toString:Qn})),In(re,ee,kn(Cn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new re(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new re(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Zn(ie(t>=240?t-240:t+120,i,r),ie(t,i,r),ie(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var ue=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return oe((e-r/n)*n,u,i,o,a)}},ae=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return oe((e-r/n)*n,i,o,u,a)}},ce=function(t){return function(){return t}};function fe(t,n){return function(e){return t+e*n}}function se(t,n){var e=n-t;return e?fe(t,e>180||e<-180?e-360*Math.round(e/360):e):ce(isNaN(t)?n:t)}function le(t){return 1==(t=+t)?he:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ce(isNaN(n)?e:n)}}function he(t,n){var e=n-t;return e?fe(t,e):ce(isNaN(t)?n:t)}var de=function t(n){var e=le(n);function r(t,n){var r=e((t=Gn(t)).r,(n=Gn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=he(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function pe(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Gn(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}var ve=pe(ue),be=pe(ae),ye=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}};function ge(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}var _e=function(t,n){return(ge(n)?ye:me)(t,n)};function me(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=Ie(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}var xe=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},we=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},Se=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Ie(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Me=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ee=new RegExp(Me.source,"g");var Ae,Ne,Te=function(t,n){var e,r,i,o=Me.lastIndex=Ee.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=Me.exec(t))&&(r=Ee.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:we(e,r)})),o=Ee.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})},Ie=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?ce(n):("number"===r?we:"string"===r?(e=Hn(n))?(n=e,de):Te:n instanceof Hn?de:n instanceof Date?xe:ge(n)?ye:Array.isArray(n)?me:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Se:we)(t,n)},ke=function(){for(var t,n=sn;t=n.sourceEvent;)n=t;return n},Ce=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},je=function(t,n,e){arguments.length<3&&(e=n,n=ke().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return Ce(t,r);return null},Oe=function(t){var n=ke();return n.changedTouches&&(n=n.changedTouches[0]),Ce(t,n)},Fe=0,Pe=0,ze=0,De=0,Re=0,Be=0,Ve="object"==typeof performance&&performance.now?performance:Date,Le="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ue(){return Re||(Le(qe),Re=Ve.now()+Be)}function qe(){Re=0}function Ye(){this._call=this._time=this._next=null}function He(t,n,e){var r=new Ye;return r.restart(t,n,e),r}function We(){Ue(),++Fe;for(var t,n=Ae;n;)(t=Re-n._time)>=0&&n._call.call(null,t),n=n._next;--Fe}function $e(){Re=(De=Ve.now())+Be,Fe=Pe=0;try{We()}finally{Fe=0,function(){var t,n,e=Ae,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ae=n);Ne=t,Ge(r)}(),Re=0}}function Xe(){var t=Ve.now(),n=t-De;n>1e3&&(Be-=n,De=t)}function Ge(t){Fe||(Pe&&(Pe=clearTimeout(Pe)),t-Re>24?(t<1/0&&(Pe=setTimeout($e,t-Ve.now()-Be)),ze&&(ze=clearInterval(ze))):(ze||(De=Ve.now(),ze=setInterval(Xe,1e3)),Fe=1,Le($e)))}Ye.prototype=He.prototype={constructor:Ye,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Ue():+e)+(null==n?0:+n),this._next||Ne===this||(Ne?Ne._next=this:Ae=this,Ne=this),this._call=t,this._time=e,Ge()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ge())}};var Ze=function(t,n,e){var r=new Ye;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},Ke=lt("start","end","cancel","interrupt"),Qe=[],Je=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,s,l,h;if(1!==e.state)return a();for(f in i)if((h=i[f]).name===e.name){if(3===h.state)return Ze(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[f])}if(Ze((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),f=0,s=-1;f<l;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=He((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Ke,tween:Qe,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function tr(t,n){var e=er(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function nr(t,n){var e=er(t,n);if(e.state>3)throw new Error("too late; already running");return e}function er(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var rr,ir,or,ur,ar=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}},cr=180/Math.PI,fr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},sr=function(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*cr,skewX:Math.atan(c)*cr,scaleX:u,scaleY:a}};function lr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:we(t,i)},{i:c-2,x:we(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:we(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:we(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:we(t,e)},{i:a-2,x:we(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var hr=lr((function(t){return"none"===t?fr:(rr||(rr=document.createElement("DIV"),ir=document.documentElement,or=document.defaultView),rr.style.transform=t,t=or.getComputedStyle(ir.appendChild(rr),null).getPropertyValue("transform"),ir.removeChild(rr),t=t.slice(7,-1).split(","),sr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),dr=lr((function(t){return null==t?fr:(ur||(ur=document.createElementNS("http://www.w3.org/2000/svg","g")),ur.setAttribute("transform",t),(t=ur.transform.baseVal.consolidate())?(t=t.matrix,sr(t.a,t.b,t.c,t.d,t.e,t.f)):fr)}),", ",")",")");function pr(t,n){var e,r;return function(){var i=nr(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function vr(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=nr(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=a;break}c===f&&i.push(a)}o.tween=i}}function br(t,n,e){var r=t._id;return t.each((function(){var t=nr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return er(t,r).value[n]}}var yr=function(t,n){var e;return("number"==typeof n?we:n instanceof Hn?de:(e=Hn(n))?(n=e,de):Te)(t,n)};function gr(t){return function(){this.removeAttribute(t)}}function _r(t){return function(){this.removeAttributeNS(t.space,t.local)}}function mr(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}}function xr(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}function wr(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttribute(t))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttribute(t)}}function Sr(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttributeNS(t.space,t.local))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttributeNS(t.space,t.local)}}function Mr(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Er(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Ar(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Er(t,i)),e}return i._value=n,i}function Nr(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Mr(t,i)),e}return i._value=n,i}function Tr(t,n){return function(){tr(this,t).delay=+n.apply(this,arguments)}}function Ir(t,n){return n=+n,function(){tr(this,t).delay=n}}function kr(t,n){return function(){nr(this,t).duration=+n.apply(this,arguments)}}function Cr(t,n){return n=+n,function(){nr(this,t).duration=n}}function jr(t,n){if("function"!=typeof n)throw new Error;return function(){nr(this,t).ease=n}}function Or(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?tr:nr;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var Fr=Sn.prototype.constructor;function Pr(t){return function(){this.style.removeProperty(t)}}function zr(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Dr(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&zr(t,o,e)),r}return o._value=n,o}function Rr(t){return function(n){this.textContent=t.call(this,n)}}function Br(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Rr(r)),n}return r._value=t,r}var Vr=0;function Lr(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ur(t){return Sn().transition(t)}function qr(){return++Vr}var Yr=Sn.prototype;function Hr(t){return t*t*t}function Wr(t){return--t*t*t+1}function $r(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}Lr.prototype=Ur.prototype={constructor:Lr,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=dt(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,f=r[u],s=f.length,l=o[u]=new Array(s),h=0;h<s;++h)(a=f[h])&&(c=t.call(a,a.__data__,h,f))&&("__data__"in a&&(c.__data__=a.__data__),l[h]=c,Je(l[h],n,e,h,l,er(a,e)));return new Lr(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=vt(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,f=r[a],s=f.length,l=0;l<s;++l)if(c=f[l]){for(var h,d=t.call(c,c.__data__,l,f),p=er(c,e),v=0,b=d.length;v<b;++v)(h=d[v])&&Je(h,n,e,v,d,p);o.push(d),u.push(c)}return new Lr(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=bt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new Lr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new Lr(u,this._parents,this._name,this._id)},selection:function(){return new Fr(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=qr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)if(u=a[f]){var s=er(u,n);Je(u,t,e,f,a,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Lr(r,this._parents,t,e)},call:Yr.call,nodes:Yr.nodes,node:Yr.node,size:Yr.size,empty:Yr.empty,each:Yr.each,on:function(t,n){var e=this._id;return arguments.length<2?er(this.node(),e).on.on(t):this.each(Or(e,t,n))},attr:function(t,n){var e=Mt(t),r="transform"===e?dr:yr;return this.attrTween(t,"function"==typeof n?(e.local?Sr:wr)(e,r,br(this,"attr."+t,n)):null==n?(e.local?_r:gr)(e):(e.local?xr:mr)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Mt(t);return this.tween(e,(r.local?Ar:Nr)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?hr:yr;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Pt(this,t),u=(this.style.removeProperty(t),Pt(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,Pr(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Pt(this,t),a=e(this),c=a+"";return null==a&&(this.style.removeProperty(t),c=a=Pt(this,t)),u===c?null:u===r&&c===i?o:(i=c,o=n(r=u,a))}}(t,r,br(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var c=nr(this,t),f=c.on,s=null==c.value[u]?o||(o=Pr(n)):void 0;f===e&&i===s||(r=(e=f).copy()).on(a,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Pt(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Dr(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(br(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Br(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=er(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?pr:vr)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Tr:Ir)(n,t)):er(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?kr:Cr)(n,t)):er(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(jr(n,t)):er(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,u){var a={value:u},c={value:function(){0==--i&&o()}};e.each((function(){var e=nr(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(c)),e.on=n}))}))}};var Xr={time:null,delay:0,duration:250,ease:$r};function Gr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Xr.time=Ue(),Xr;return e}Sn.prototype.interrupt=function(t){return this.each((function(){ar(this,t)}))},Sn.prototype.transition=function(t){var n,e;t instanceof Lr?(n=t._id,t=t._name):(n=qr(),(e=Xr).time=Ue(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)(u=a[f])&&Je(u,t,n,f,a,e||Gr(u,n));return new Lr(r,this._parents,t,n)};var Zr=[null],Kr=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new Lr([[t]],Zr,n,+r);return null},Qr=function(t){return function(){return t}},Jr=function(t,n,e){this.target=t,this.type=n,this.selection=e};function ti(){sn.stopImmediatePropagation()}var ni=function(){sn.preventDefault(),sn.stopImmediatePropagation()},ei={name:"drag"},ri={name:"space"},ii={name:"handle"},oi={name:"center"};function ui(t){return[+t[0],+t[1]]}function ai(t){return[ui(t[0]),ui(t[1])]}function ci(t){return function(n){return je(n,sn.touches,t)}}var fi={name:"x",handles:["w","e"].map(yi),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},si={name:"y",handles:["n","s"].map(yi),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},li={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(yi),input:function(t){return null==t?null:ai(t)},output:function(t){return t}},hi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},di={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},pi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},vi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},bi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function yi(t){return{type:t}}function gi(){return!sn.ctrlKey&&!sn.button}function _i(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function mi(){return navigator.maxTouchPoints||"ontouchstart"in this}function xi(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function wi(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Si(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Mi(){return Ni(fi)}function Ei(){return Ni(si)}var Ai=function(){return Ni(li)};function Ni(t){var n,e=_i,r=gi,i=mi,o=!0,u=lt("start","brush","end"),a=6;function c(n){var e=n.property("__brush",v).selectAll(".overlay").data([yi("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",hi.overlay).merge(e).each((function(){var t=xi(this).extent;Mn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([yi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",hi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return hi[t.type]})),n.each(f).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function f(){var t=Mn(this),n=xi(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-a/2:n[0][0]-a/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-a/2:n[0][1]-a/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+a:a})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+a:a}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,n,e){return!e&&t.__brush.emitter||new l(t,n)}function l(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function h(){if((!n||sn.touches)&&r.apply(this,arguments)){var e,i,u,a,c,l,h,d,p,v,b,y=this,g=sn.target.__data__.type,_="selection"===(o&&sn.metaKey?g="overlay":g)?ei:o&&sn.altKey?oi:ii,m=t===si?null:vi[g],x=t===fi?null:bi[g],w=xi(y),S=w.extent,M=w.selection,E=S[0][0],A=S[0][1],N=S[1][0],T=S[1][1],I=0,k=0,C=m&&x&&o&&sn.shiftKey,j=sn.touches?ci(sn.changedTouches[0].identifier):Oe,O=j(y),F=O,P=s(y,arguments,!0).beforestart();"overlay"===g?(M&&(p=!0),w.selection=M=[[e=t===si?E:O[0],u=t===fi?A:O[1]],[c=t===si?N:e,h=t===fi?T:u]]):(e=M[0][0],u=M[0][1],c=M[1][0],h=M[1][1]),i=e,a=u,l=c,d=h;var z=Mn(y).attr("pointer-events","none"),D=z.selectAll(".overlay").attr("cursor",hi[g]);if(sn.touches)P.moved=B,P.ended=L;else{var R=Mn(sn.view).on("mousemove.brush",B,!0).on("mouseup.brush",L,!0);o&&R.on("keydown.brush",U,!0).on("keyup.brush",q,!0),Nn(sn.view)}ti(),ar(y),f.call(y),P.start()}function B(){var t=j(y);!C||v||b||(Math.abs(t[0]-F[0])>Math.abs(t[1]-F[1])?b=!0:v=!0),F=t,p=!0,ni(),V()}function V(){var t;switch(I=F[0]-O[0],k=F[1]-O[1],_){case ri:case ei:m&&(I=Math.max(E-e,Math.min(N-c,I)),i=e+I,l=c+I),x&&(k=Math.max(A-u,Math.min(T-h,k)),a=u+k,d=h+k);break;case ii:m<0?(I=Math.max(E-e,Math.min(N-e,I)),i=e+I,l=c):m>0&&(I=Math.max(E-c,Math.min(N-c,I)),i=e,l=c+I),x<0?(k=Math.max(A-u,Math.min(T-u,k)),a=u+k,d=h):x>0&&(k=Math.max(A-h,Math.min(T-h,k)),a=u,d=h+k);break;case oi:m&&(i=Math.max(E,Math.min(N,e-I*m)),l=Math.max(E,Math.min(N,c+I*m))),x&&(a=Math.max(A,Math.min(T,u-k*x)),d=Math.max(A,Math.min(T,h+k*x)))}l<i&&(m*=-1,t=e,e=c,c=t,t=i,i=l,l=t,g in di&&D.attr("cursor",hi[g=di[g]])),d<a&&(x*=-1,t=u,u=h,h=t,t=a,a=d,d=t,g in pi&&D.attr("cursor",hi[g=pi[g]])),w.selection&&(M=w.selection),v&&(i=M[0][0],l=M[1][0]),b&&(a=M[0][1],d=M[1][1]),M[0][0]===i&&M[0][1]===a&&M[1][0]===l&&M[1][1]===d||(w.selection=[[i,a],[l,d]],f.call(y),P.brush())}function L(){if(ti(),sn.touches){if(sn.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else Tn(sn.view,p),R.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);z.attr("pointer-events","all"),D.attr("cursor",hi.overlay),w.selection&&(M=w.selection),wi(M)&&(w.selection=null,f.call(y)),P.end()}function U(){switch(sn.keyCode){case 16:C=m&&x;break;case 18:_===ii&&(m&&(c=l-I*m,e=i+I*m),x&&(h=d-k*x,u=a+k*x),_=oi,V());break;case 32:_!==ii&&_!==oi||(m<0?c=l-I:m>0&&(e=i-I),x<0?h=d-k:x>0&&(u=a-k),_=ri,D.attr("cursor",hi.selection),V());break;default:return}ni()}function q(){switch(sn.keyCode){case 16:C&&(v=b=C=!1,V());break;case 18:_===oi&&(m<0?c=l:m>0&&(e=i),x<0?h=d:x>0&&(u=a),_=ii,V());break;case 32:_===ri&&(sn.altKey?(m&&(c=l-I*m,e=i+I*m),x&&(h=d-k*x,u=a+k*x),_=oi):(m<0?c=l:m>0&&(e=i),x<0?h=d:x>0&&(u=a),_=ii),D.attr("cursor",hi[g]),V());break;default:return}ni()}}function d(){s(this,arguments).moved()}function p(){s(this,arguments).ended()}function v(){var n=this.__brush||{selection:null};return n.extent=ai(e.apply(this,arguments)),n.dim=t,n}return c.move=function(n,e){n.selection?n.on("start.brush",(function(){s(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){s(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=s(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),a=Ie(o,u);function c(t){r.selection=1===t&&null===u?null:a(t),f.call(n),i.brush()}return null!==o&&null!==u?c:c(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),u=s(n,r).beforestart();ar(n),i.selection=null===o?null:o,f.call(n),u.start().brush().end()}))},c.clear=function(t){c.move(t,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){bn(new Jr(c,n,t.output(this.state.selection)),u.apply,u,[n,this.that,this.args])}},c.extent=function(t){return arguments.length?(e="function"==typeof t?t:Qr(ai(t)),c):e},c.filter=function(t){return arguments.length?(r="function"==typeof t?t:Qr(!!t),c):r},c.touchable=function(t){return arguments.length?(i="function"==typeof t?t:Qr(!!t),c):i},c.handleSize=function(t){return arguments.length?(a=+t,c):a},c.keyModifiers=function(t){return arguments.length?(o=!!t,c):o},c.on=function(){var t=u.on.apply(u,arguments);return t===u?c:t},c}var Ti=Math.cos,Ii=Math.sin,ki=Math.PI,Ci=ki/2,ji=2*ki,Oi=Math.max;function Fi(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}var Pi=function(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,f,s,l=i.length,h=[],d=S(l),p=[],v=[],b=v.groups=new Array(l),y=new Array(l*l);for(o=0,f=-1;++f<l;){for(u=0,s=-1;++s<l;)u+=i[f][s];h.push(u),p.push(S(l)),o+=u}for(n&&d.sort((function(t,e){return n(h[t],h[e])})),e&&p.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),c=(o=Oi(0,ji-t*l)/o)?t:ji/l,u=0,f=-1;++f<l;){for(a=u,s=-1;++s<l;){var g=d[f],_=p[g][s],m=i[g][_],x=u,w=u+=m*o;y[_*l+g]={index:g,subindex:_,startAngle:x,endAngle:w,value:m}}b[g]={index:g,startAngle:a,endAngle:u,value:h[g]},u+=c}for(f=-1;++f<l;)for(s=f-1;++s<l;){var M=y[s*l+f],E=y[f*l+s];(M.value||E.value)&&v.push(M.value<E.value?{source:E,target:M}:{source:M,target:E})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=Oi(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Fi(t))._=t,i):r&&r._},i},zi=Array.prototype.slice,Di=function(t){return function(){return t}},Ri=Math.PI,Bi=2*Ri,Vi=Bi-1e-6;function Li(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ui(){return new Li}Li.prototype=Ui.prototype={constructor:Li,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,f=o-t,s=u-n,l=f*f+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(s*a-c*f)>1e-6&&i){var h=e-o,d=r-u,p=a*a+c*c,v=h*h+d*d,b=Math.sqrt(p),y=Math.sqrt(l),g=i*Math.tan((Ri-Math.acos((p+l-v)/(2*b*y)))/2),_=g/y,m=g/b;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*f)+","+(n+_*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>f*d)+","+(this._x1=t+m*a)+","+(this._y1=n+m*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,f=n+a,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+c+","+f),e&&(l<0&&(l=l%Bi+Bi),l>Vi?this._+="A"+e+","+e+",0,1,"+s+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=f):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=Ri)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var qi=Ui;function Yi(t){return t.source}function Hi(t){return t.target}function Wi(t){return t.radius}function $i(t){return t.startAngle}function Xi(t){return t.endAngle}var Gi=function(){var t=Yi,n=Hi,e=Wi,r=$i,i=Xi,o=null;function u(){var u,a=zi.call(arguments),c=t.apply(this,a),f=n.apply(this,a),s=+e.apply(this,(a[0]=c,a)),l=r.apply(this,a)-Ci,h=i.apply(this,a)-Ci,d=s*Ti(l),p=s*Ii(l),v=+e.apply(this,(a[0]=f,a)),b=r.apply(this,a)-Ci,y=i.apply(this,a)-Ci;if(o||(o=u=qi()),o.moveTo(d,p),o.arc(0,0,s,l,h),l===b&&h===y||(o.quadraticCurveTo(0,0,v*Ti(b),v*Ii(b)),o.arc(0,0,v,b,y)),o.quadraticCurveTo(0,0,d,p),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:Di(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Di(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Di(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u};function Zi(){}function Ki(t,n){var e=new Zi;if(t instanceof Zi)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}Zi.prototype=Ki.prototype={constructor:Zi,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Qi=Ki,Ji=function(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,f,s,l=-1,h=e.length,d=r[i++],p=Qi(),v=u();++l<h;)(s=p.get(c=d(f=e[l])+""))?s.push(f):p.set(c,[f]);return p.each((function(t,n){a(v,n,o(t,i,u,a))})),v}return e={object:function(t){return o(t,0,to,no)},map:function(t){return o(t,0,eo,ro)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var u,a=i[o-1];return null!=n&&o>=r.length?u=e.entries():(u=[],e.each((function(n,e){u.push({key:e,values:t(n,o)})}))),null!=a?u.sort((function(t,n){return a(t.key,n.key)})):u}(o(t,0,eo,ro),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function to(){return{}}function no(t,n,e){t[n]=e}function eo(){return Qi()}function ro(t,n,e){t.set(n,e)}function io(){}var oo=Qi.prototype;function uo(t,n){var e=new io;if(t instanceof io)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}io.prototype=uo.prototype={constructor:io,has:oo.has,add:function(t){return this["$"+(t+="")]=t,this},remove:oo.remove,clear:oo.clear,values:oo.keys,size:oo.size,empty:oo.empty,each:oo.each};var ao=uo,co=function(t){var n=[];for(var e in t)n.push(e);return n},fo=function(t){var n=[];for(var e in t)n.push(t[e]);return n},so=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},lo=Math.PI/180,ho=180/Math.PI;function po(t){if(t instanceof yo)return new yo(t.l,t.a,t.b,t.opacity);if(t instanceof Eo)return Ao(t);t instanceof Zn||(t=Xn(t));var n,e,r=xo(t.r),i=xo(t.g),o=xo(t.b),u=go((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=u:(n=go((.4360747*r+.3850649*i+.1430804*o)/.96422),e=go((.0139322*r+.0971045*i+.7141733*o)/.82521)),new yo(116*u-16,500*(n-u),200*(u-e),t.opacity)}function vo(t,n){return new yo(t,0,0,null==n?1:n)}function bo(t,n,e,r){return 1===arguments.length?po(t):new yo(t,n,e,null==r?1:r)}function yo(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function go(t){return t>6/29*(6/29)*(6/29)?Math.pow(t,1/3):t/(6/29*3*(6/29))+4/29}function _o(t){return t>6/29?t*t*t:6/29*3*(6/29)*(t-4/29)}function mo(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function xo(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function wo(t){if(t instanceof Eo)return new Eo(t.h,t.c,t.l,t.opacity);if(t instanceof yo||(t=po(t)),0===t.a&&0===t.b)return new Eo(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*ho;return new Eo(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function So(t,n,e,r){return 1===arguments.length?wo(t):new Eo(e,n,t,null==r?1:r)}function Mo(t,n,e,r){return 1===arguments.length?wo(t):new Eo(t,n,e,null==r?1:r)}function Eo(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Ao(t){if(isNaN(t.h))return new yo(t.l,0,0,t.opacity);var n=t.h*lo;return new yo(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}In(yo,bo,kn(Cn,{brighter:function(t){return new yo(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new yo(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Zn(mo(3.1338561*(n=.96422*_o(n))-1.6168667*(t=1*_o(t))-.4906146*(e=.82521*_o(e))),mo(-.9787684*n+1.9161415*t+.033454*e),mo(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),In(Eo,Mo,kn(Cn,{brighter:function(t){return new Eo(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Eo(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Ao(this).rgb()}}));var No=-.29227,To=-1.7884503806,Io=3.5172982438,ko=-.6557636667999999;function Co(t){if(t instanceof Oo)return new Oo(t.h,t.s,t.l,t.opacity);t instanceof Zn||(t=Xn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(ko*r+To*n-Io*e)/(ko+To-Io),o=r-i,u=(1.97294*(e-i)-No*o)/-.90649,a=Math.sqrt(u*u+o*o)/(1.97294*i*(1-i)),c=a?Math.atan2(u,o)*ho-120:NaN;return new Oo(c<0?c+360:c,a,i,t.opacity)}function jo(t,n,e,r){return 1===arguments.length?Co(t):new Oo(t,n,e,null==r?1:r)}function Oo(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}In(Oo,jo,kn(Cn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Oo(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Oo(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*lo,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Zn(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(No*r+-.90649*i)),255*(n+e*(1.97294*r)),this.opacity)}}));var Fo=Array.prototype.slice,Po=function(t,n){return t-n},zo=function(t){return function(){return t}},Do=function(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=Ro(t,n[r]))return e;return 0};function Ro(t,n){for(var e=n[0],r=n[1],i=-1,o=0,u=t.length,a=u-1;o<u;a=o++){var c=t[o],f=c[0],s=c[1],l=t[a],h=l[0],d=l[1];if(Bo(c,l,n))return 0;s>r!=d>r&&e<(h-f)*(r-s)/(d-s)+f&&(i=-i)}return i}function Bo(t,n,e){var r,i,o,u;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],u=n[r],i<=o&&o<=u||u<=o&&o<=i)}var Vo=function(){},Lo=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],Uo=function(){var t=1,n=1,e=k,r=a;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(Po);else{var r=y(t),i=r[0],u=r[1];n=I(i,u,n),n=S(Math.floor(i/n)*n,Math.floor(u/n)*n,n)}return n.map((function(n){return o(t,n)}))}function o(e,i){var o=[],a=[];return function(e,r,i){var o,a,c,f,s,l,h=new Array,d=new Array;o=a=-1,f=e[0]>=r,Lo[f<<1].forEach(p);for(;++o<t-1;)c=f,f=e[o+1]>=r,Lo[c|f<<1].forEach(p);Lo[f<<0].forEach(p);for(;++a<n-1;){for(o=-1,f=e[a*t+t]>=r,s=e[a*t]>=r,Lo[f<<1|s<<2].forEach(p);++o<t-1;)c=f,f=e[a*t+t+o+1]>=r,l=s,s=e[a*t+o+1]>=r,Lo[c|f<<1|s<<2|l<<3].forEach(p);Lo[f|s<<3].forEach(p)}o=-1,s=e[a*t]>=r,Lo[s<<2].forEach(p);for(;++o<t-1;)l=s,s=e[a*t+o+1]>=r,Lo[s<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+a],c=[t[1][0]+o,t[1][1]+a],f=u(r),s=u(c);(n=d[f])?(e=h[s])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(c),d[n.end=s]=n):(n=h[s])?(e=d[f])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=f]=n):h[f]=d[s]={start:f,end:s,ring:[r,c]}}Lo[s<<3].forEach(p)}(e,i,(function(t){r(t,e,i),function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r}(t)>0?o.push([t]):a.push(t)})),a.forEach((function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==Do((n=o[e])[0],t))return void n.push(t)})),{type:"MultiPolygon",value:i,coordinates:o}}function u(n){return 2*n[0]+n[1]*(t+1)*4}function a(e,r,i){e.forEach((function(e){var o,u=e[0],a=e[1],c=0|u,f=0|a,s=r[f*t+c];u>0&&u<t&&c===u&&(o=r[f*t+c-1],e[0]=u+(i-o)/(s-o)-.5),a>0&&a<n&&f===a&&(o=r[(f-1)*t+c],e[1]=a+(i-o)/(s-o)-.5)}))}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?zo(Fo.call(t)):zo(t),i):e},i.smooth=function(t){return arguments.length?(r=t?a:Vo,i):r===a},i};function qo(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<i;++u)for(var a=0,c=0;a<r+e;++a)a<r&&(c+=t.data[a+u*r]),a>=e&&(a>=o&&(c-=t.data[a-o+u*r]),n.data[a-e+u*r]=c/Math.min(a+1,r-1+o-a,o))}function Yo(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<r;++u)for(var a=0,c=0;a<i+e;++a)a<i&&(c+=t.data[u+a*r]),a>=e&&(a>=o&&(c-=t.data[u+(a-o)*r]),n.data[u+(a-e)*r]=c/Math.min(a+1,i-1+o-a,o))}function Ho(t){return t[0]}function Wo(t){return t[1]}function $o(){return 1}var Xo=function(){var t=Ho,n=Wo,e=$o,r=960,i=500,o=20,u=2,a=3*o,c=r+2*a>>u,f=i+2*a>>u,s=zo(20);function l(r){var i=new Float32Array(c*f),l=new Float32Array(c*f);r.forEach((function(r,o,s){var l=+t(r,o,s)+a>>u,h=+n(r,o,s)+a>>u,d=+e(r,o,s);l>=0&&l<c&&h>=0&&h<f&&(i[l+h*c]+=d)})),qo({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),Yo({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u),qo({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),Yo({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u),qo({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),Yo({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u);var d=s(i);if(!Array.isArray(d)){var p=P(i);d=I(0,p,d),(d=S(0,Math.floor(p/d)*d,d)).shift()}return Uo().thresholds(d).size([c,f])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*u),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(v)}function v(t){t[0]=t[0]*Math.pow(2,u)-a,t[1]=t[1]*Math.pow(2,u)-a}function b(){return c=r+2*(a=3*o)>>u,f=i+2*a>>u,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:zo(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:zo(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:zo(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,b()},l.cellSize=function(t){if(!arguments.length)return 1<<u;if(!((t=+t)>=1))throw new Error("invalid cell size");return u=Math.floor(Math.log(t)/Math.LN2),b()},l.thresholds=function(t){return arguments.length?(s="function"==typeof t?t:Array.isArray(t)?zo(Fo.call(t)):zo(t),l):s},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),b()},l},Go=function(t){return function(){return t}};function Zo(t,n,e,r,i,o,u,a,c,f){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=f}function Ko(){return!sn.ctrlKey&&!sn.button}function Qo(){return this.parentNode}function Jo(t){return null==t?{x:sn.x,y:sn.y}:t}function tu(){return navigator.maxTouchPoints||"ontouchstart"in this}Zo.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var nu=function(){var t,n,e,r,i=Ko,o=Qo,u=Jo,a=tu,c={},f=lt("start","drag","end"),s=0,l=0;function h(t){t.on("mousedown.drag",d).filter(a).on("touchstart.drag",b).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var u=_("mouse",o.apply(this,arguments),Oe,this,arguments);u&&(Mn(sn.view).on("mousemove.drag",p,!0).on("mouseup.drag",v,!0),Nn(sn.view),En(),e=!1,t=sn.clientX,n=sn.clientY,u("start"))}}function p(){if(An(),!e){var r=sn.clientX-t,i=sn.clientY-n;e=r*r+i*i>l}c.mouse("drag")}function v(){Mn(sn.view).on("mousemove.drag mouseup.drag",null),Tn(sn.view,e),An(),c.mouse("end")}function b(){if(i.apply(this,arguments)){var t,n,e=sn.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=_(e[t].identifier,r,je,this,arguments))&&(En(),n("start"))}}function y(){var t,n,e=sn.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(An(),n("drag"))}function g(){var t,n,e=sn.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=c[e[t].identifier])&&(En(),n("end"))}function _(t,n,e,r,i){var o,a,l,d=e(n,t),p=f.copy();if(bn(new Zo(h,"beforestart",o,t,s,d[0],d[1],0,0,p),(function(){return null!=(sn.subject=o=u.apply(r,i))&&(a=o.x-d[0]||0,l=o.y-d[1]||0,!0)})))return function u(f){var v,b=d;switch(f){case"start":c[t]=u,v=s++;break;case"end":delete c[t],--s;case"drag":d=e(n,t),v=s}bn(new Zo(h,f,o,t,v,d[0]+a,d[1]+l,d[0]-b[0],d[1]-b[1],p),p.apply,p,[f,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:Go(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:Go(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:Go(t),h):u},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:Go(!!t),h):a},h.on=function(){var t=f.on.apply(f,arguments);return t===f?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h},eu={},ru={};function iu(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function ou(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function uu(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function au(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+uu(-n,6):n>9999?"+"+uu(n,6):uu(n,4))+"-"+uu(t.getUTCMonth()+1,2)+"-"+uu(t.getUTCDate(),2)+(o?"T"+uu(e,2)+":"+uu(r,2)+":"+uu(i,2)+"."+uu(o,3)+"Z":i?"T"+uu(e,2)+":"+uu(r,2)+":"+uu(i,2)+"Z":r||e?"T"+uu(e,2)+":"+uu(r,2)+"Z":"")}var cu=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,f=!1;function s(){if(c)return ru;if(f)return f=!1,eu;var n,r,i=u;if(34===t.charCodeAt(i)){for(;u++<o&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=o?c=!0:10===(r=t.charCodeAt(u++))?f=!0:13===r&&(f=!0,10===t.charCodeAt(u)&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if(10===(r=t.charCodeAt(n=u++)))f=!0;else if(13===r)f=!0,10===t.charCodeAt(u)&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=s())!==ru;){for(var l=[];r!==eu&&r!==ru;)l.push(r),r=s();n&&null==(l=n(l,a++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return u(n[t])})).join(t)}))}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?au(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=iu(t);return function(r,i){return n(e(r),i,t)}}(t,n):iu(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=ou(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=ou(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:u}},fu=cu(","),su=fu.parse,lu=fu.parseRows,hu=fu.format,du=fu.formatBody,pu=fu.formatRows,vu=fu.formatRow,bu=fu.formatValue,yu=cu("\t"),gu=yu.parse,_u=yu.parseRows,mu=yu.format,xu=yu.formatBody,wu=yu.formatRows,Su=yu.formatRow,Mu=yu.formatValue;function Eu(t){for(var n in t){var e,r,i=t[n].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(e=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Au&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=e;else i=null;t[n]=i}return t}var Au=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function Nu(t){return+t}function Tu(t){return t*t}function Iu(t){return t*(2-t)}function ku(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var Cu=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),ju=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Ou=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Fu=Math.PI,Pu=Fu/2;function zu(t){return 1-Math.cos(t*Pu)}function Du(t){return Math.sin(t*Pu)}function Ru(t){return(1-Math.cos(Fu*t))/2}function Bu(t){return Math.pow(2,10*t-10)}function Vu(t){return 1-Math.pow(2,-10*t)}function Lu(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function Uu(t){return 1-Math.sqrt(1-t*t)}function qu(t){return Math.sqrt(1- --t*t)}function Yu(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}function Hu(t){return 1-Wu(1-t)}function Wu(t){return(t=+t)<4/11?7.5625*t*t:t<8/11?7.5625*(t-=6/11)*t+3/4:t<10/11?7.5625*(t-=9/11)*t+15/16:7.5625*(t-=21/22)*t+63/64}function $u(t){return((t*=2)<=1?1-Wu(1-t):Wu(t-1)+1)/2}var Xu=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),Gu=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),Zu=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),Ku=2*Math.PI,Qu=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ku);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Ku)},i.period=function(e){return t(n,e)},i}(1,.3),Ju=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ku);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Ku)},i.period=function(e){return t(n,e)},i}(1,.3),ta=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ku);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Ku)},i.period=function(e){return t(n,e)},i}(1,.3);function na(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var ea=function(t,n){return fetch(t,n).then(na)};function ra(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var ia=function(t,n){return fetch(t,n).then(ra)};function oa(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var ua=function(t,n){return fetch(t,n).then(oa)};function aa(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),ua(n,e).then((function(n){return t(n,r)}))}}function ca(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=cu(t);return ua(n,e).then((function(t){return i.parse(t,r)}))}var fa=aa(su),sa=aa(gu),la=function(t,n){return new Promise((function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t}))};function ha(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var da=function(t,n){return fetch(t,n).then(ha)};function pa(t){return function(n,e){return ua(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}var va=pa("application/xml"),ba=pa("text/html"),ya=pa("image/svg+xml"),ga=function(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r},_a=function(t){return function(){return t}},ma=function(){return 1e-6*(Math.random()-.5)};function xa(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,f,s,l,h,d=t._root,p={data:r},v=t._x0,b=t._y0,y=t._x1,g=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((f=n>=(o=(v+y)/2))?v=o:y=o,(s=e>=(u=(b+g)/2))?b=u:g=u,i=d,!(d=d[l=s<<1|f]))return i[l]=p,t;if(a=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===a&&e===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(o=(v+y)/2))?v=o:y=o,(s=e>=(u=(b+g)/2))?b=u:g=u}while((l=s<<1|f)==(h=(c>=u)<<1|a>=o));return i[h]=d,i[l]=p,t}var wa=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function Sa(t){return t[0]}function Ma(t){return t[1]}function Ea(t,n,e){var r=new Aa(null==n?Sa:n,null==e?Ma:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Aa(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Na(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Ta=Ea.prototype=Aa.prototype;function Ia(t){return t.x+t.vx}function ka(t){return t.y+t.vy}Ta.copy=function(){var t,n,e=new Aa(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Na(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Na(n));return e},Ta.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return xa(this.cover(n,e),n,e,t)},Ta.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,f=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>s&&(s=r),i<f&&(f=i),i>l&&(l=i));if(c>s||f>l)return this;for(this.cover(c,f).cover(s,l),e=0;e<o;++e)xa(this,u[e],a[e],t[e]);return this},Ta.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var u,a,c=i-e,f=this._root;e>t||t>=i||r>n||n>=o;)switch(a=(n<r)<<1|t<e,(u=new Array(4))[a]=f,f=u,c*=2,a){case 0:i=e+c,o=r+c;break;case 1:e=i-c,o=r+c;break;case 2:i=e+c,r=o-c;break;case 3:e=i-c,r=o-c}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Ta.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Ta.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Ta.find=function(t,n,e){var r,i,o,u,a,c,f,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],v=this._root;for(v&&p.push(new wa(v,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>d||(u=c.x1)<s||(a=c.y1)<l))if(v.length){var b=(i+u)/2,y=(o+a)/2;p.push(new wa(v[3],b,y,u,a),new wa(v[2],i,y,b,a),new wa(v[1],b,o,u,y),new wa(v[0],i,o,b,y)),(f=(n>=y)<<1|t>=b)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var g=t-+this._x.call(null,v.data),_=n-+this._y.call(null,v.data),m=g*g+_*_;if(m<e){var x=Math.sqrt(e=m);s=t-x,l=n-x,h=t+x,d=n+x,r=v.data}}return r},Ta.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,f,s,l,h,d=this._root,p=this._x0,v=this._y0,b=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((f=o>=(a=(p+b)/2))?p=a:b=a,(s=u>=(c=(v+y)/2))?v=c:y=c,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},Ta.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Ta.root=function(){return this._root},Ta.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Ta.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new wa(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var f=(r+o)/2,s=(i+u)/2;(e=c[3])&&a.push(new wa(e,f,s,o,u)),(e=c[2])&&a.push(new wa(e,r,s,f,u)),(e=c[1])&&a.push(new wa(e,f,i,o,s)),(e=c[0])&&a.push(new wa(e,r,i,f,s))}return this},Ta.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new wa(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,f=n.y1,s=(u+c)/2,l=(a+f)/2;(o=i[0])&&e.push(new wa(o,u,a,s,l)),(o=i[1])&&e.push(new wa(o,s,a,c,l)),(o=i[2])&&e.push(new wa(o,u,l,s,f)),(o=i[3])&&e.push(new wa(o,s,l,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Ta.x=function(t){return arguments.length?(this._x=t,this):this._x},Ta.y=function(t){return arguments.length?(this._y=t,this):this._y};var Ca=function(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,f,s,l,h=n.length,d=0;d<i;++d)for(o=Ea(n,Ia,ka).visitAfter(u),t=0;t<h;++t)a=n[t],s=e[a.index],l=s*s,c=a.x+a.vx,f=a.y+a.vy,o.visit(p);function p(t,n,e,i,o){var u=t.data,h=t.r,d=s+h;if(!u)return n>c+d||i<c-d||e>f+d||o<f-d;if(u.index>a.index){var p=c-u.x-u.vx,v=f-u.y-u.vy,b=p*p+v*v;b<d*d&&(0===p&&(b+=(p=ma())*p),0===v&&(b+=(v=ma())*v),b=(d-(b=Math.sqrt(b)))/b*r,a.vx+=(p*=b)*(d=(h*=h)/(l+h)),a.vy+=(v*=b)*d,u.vx-=p*(d=1-d),u.vy-=v*d)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=_a(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:_a(+n),a(),o):t},o};function ja(t){return t.index}function Oa(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}var Fa=function(t){var n,e,r,i,o,u=ja,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=_a(30),f=1;function s(r){for(var i=0,u=t.length;i<f;++i)for(var a,c,s,l,h,d,p,v=0;v<u;++v)c=(a=t[v]).source,l=(s=a.target).x+s.vx-c.x-c.vx||ma(),h=s.y+s.vy-c.y-c.vy||ma(),l*=d=((d=Math.sqrt(l*l+h*h))-e[v])/d*r*n[v],h*=d,s.vx-=l*(p=o[v]),s.vy-=h*p,c.vx+=l*(p=1-p),c.vy+=h*p}function l(){if(r){var a,c,f=r.length,s=t.length,l=Qi(r,u);for(a=0,i=new Array(f);a<s;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=Oa(l,c.source)),"object"!=typeof c.target&&(c.target=Oa(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(s);a<s;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(s),h(),e=new Array(s),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),s.initialize=function(t){r=t,l()},s.links=function(n){return arguments.length?(t=n,l(),s):t},s.id=function(t){return arguments.length?(u=t,s):u},s.iterations=function(t){return arguments.length?(f=+t,s):f},s.strength=function(t){return arguments.length?(a="function"==typeof t?t:_a(+t),h(),s):a},s.distance=function(t){return arguments.length?(c="function"==typeof t?t:_a(+t),d(),s):c},s};function Pa(t){return t.x}function za(t){return t.y}var Da=Math.PI*(3-Math.sqrt(5)),Ra=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=Qi(),c=He(s),f=lt("tick","end");function s(){l(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function l(r){var c,f,s=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,a.each((function(t){t(e)})),c=0;c<s;++c)null==(f=t[c]).fx?f.x+=f.vx*=u:(f.x=f.fx,f.vx=0),null==f.fy?f.y+=f.vy*=u:(f.y=f.fy,f.vy=0);return n}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*Da;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return c.restart(s),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(d),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,d(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)(u=(i=n-(a=t[f]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}},Ba=function(){var t,n,e,r,i=_a(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=Ea(t,Pa,za).visitAfter(s);for(e=r,i=0;i<o;++i)n=t[i],u.visit(l)}function f(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function s(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function l(t,i,c,f){if(!t.value)return!0;var s=t.x-n.x,l=t.y-n.y,h=f-i,d=s*s+l*l;if(h*h/a<d)return d<u&&(0===s&&(d+=(s=ma())*s),0===l&&(d+=(l=ma())*l),d<o&&(d=Math.sqrt(o*d)),n.vx+=s*t.value*e/d,n.vy+=l*t.value*e/d),!0;if(!(t.length||d>=u)){(t.data!==n||t.next)&&(0===s&&(d+=(s=ma())*s),0===l&&(d+=(l=ma())*l),d<o&&(d=Math.sqrt(o*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=s*h,n.vy+=l*h)}while(t=t.next)}}return c.initialize=function(n){t=n,f()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:_a(+t),f(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c},Va=function(t,n,e){var r,i,o,u=_a(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],f=c.x-n||1e-6,s=c.y-e||1e-6,l=Math.sqrt(f*f+s*s),h=(o[u]-l)*i[u]*t/l;c.vx+=f*h,c.vy+=s*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=_a(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:_a(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:_a(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a},La=function(t){var n,e,r,i=_a(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=_a(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:_a(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:_a(+n),u(),o):t},o},Ua=function(t){var n,e,r,i=_a(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=_a(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:_a(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:_a(+n),u(),o):t},o},qa=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Ya=function(t){return(t=qa(Math.abs(t)))?t[1]:NaN},Ha=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Wa(t){if(!(n=Ha.exec(t)))throw new Error("invalid format: "+t);var n;return new $a({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function $a(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Wa.prototype=$a.prototype,$a.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Xa,Ga,Za,Ka,Qa=function(t,n){var e=qa(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Ja={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Qa(100*t,n)},r:Qa,s:function(t,n){var e=qa(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Xa=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+qa(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},tc=function(t){return t},nc=Array.prototype.map,ec=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],rc=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?tc:(n=nc.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?tc:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(nc.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",f=void 0===t.minus?"-":t.minus+"",s=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=Wa(t)).fill,e=t.align,l=t.sign,h=t.symbol,d=t.zero,p=t.width,v=t.comma,b=t.precision,y=t.trim,g=t.type;"n"===g?(v=!0,g="g"):Ja[g]||(void 0===b&&(b=12),y=!0,g="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===h?o:/[%p]/.test(g)?c:"",x=Ja[g],w=/[defgprs%]/.test(g);function S(t){var i,o,c,h=_,S=m;if("c"===g)S=x(t)+S,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?s:x(Math.abs(t),b),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),M&&0==+t&&"+"!==l&&(M=!1),h=(M?"("===l?l:f:"-"===l||"("===l?"":l)+h,S=("s"===g?ec[8+Xa/3]:"")+S+(M&&"("===l?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){S=(46===c?u+t.slice(i+1):t.slice(i))+S,t=t.slice(0,i);break}}v&&!d&&(t=r(t,1/0));var E=h.length+t.length+S.length,A=E<p?new Array(p-E+1).join(n):"";switch(v&&d&&(t=r(A+t,A.length?p-S.length:1/0),A=""),e){case"<":t=h+t+S+A;break;case"=":t=h+A+t+S;break;case"^":t=A.slice(0,E=A.length>>1)+h+t+S+A.slice(E);break;default:t=A+h+t+S}return a(t)}return b=void 0===b?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,b)):Math.max(0,Math.min(20,b)),S.toString=function(){return t+""},S}return{format:l,formatPrefix:function(t,n){var e=l(((t=Wa(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Ya(n)/3))),i=Math.pow(10,-r),o=ec[8+r/3];return function(t){return e(i*t)+o}}}};function ic(t){return Ga=rc(t),Za=Ga.format,Ka=Ga.formatPrefix,Ga}ic({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var oc=function(t){return Math.max(0,-Ya(Math.abs(t)))},uc=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ya(n)/3)))-Ya(Math.abs(t)))},ac=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Ya(n)-Ya(t))+1},cc=function(){return new fc};function fc(){this.reset()}fc.prototype={constructor:fc,reset:function(){this.s=this.t=0},add:function(t){lc(sc,t,this.t),lc(this,sc.s,this.s),this.s?this.t+=sc.t:this.s=sc.t},valueOf:function(){return this.s}};var sc=new fc;function lc(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var hc=Math.PI,dc=hc/2,pc=hc/4,vc=2*hc,bc=180/hc,yc=hc/180,gc=Math.abs,_c=Math.atan,mc=Math.atan2,xc=Math.cos,wc=Math.ceil,Sc=Math.exp,Mc=(Math.floor,Math.log),Ec=Math.pow,Ac=Math.sin,Nc=Math.sign||function(t){return t>0?1:t<0?-1:0},Tc=Math.sqrt,Ic=Math.tan;function kc(t){return t>1?0:t<-1?hc:Math.acos(t)}function Cc(t){return t>1?dc:t<-1?-dc:Math.asin(t)}function jc(t){return(t=Ac(t/2))*t}function Oc(){}function Fc(t,n){t&&zc.hasOwnProperty(t.type)&&zc[t.type](t,n)}var Pc={Feature:function(t,n){Fc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Fc(e[r].geometry,n)}},zc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Dc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Dc(e[r],n,0)},Polygon:function(t,n){Rc(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Rc(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Fc(e[r],n)}};function Dc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Rc(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Dc(t[e],n,1);n.polygonEnd()}var Bc,Vc,Lc,Uc,qc,Yc=function(t,n){t&&Pc.hasOwnProperty(t.type)?Pc[t.type](t,n):Fc(t,n)},Hc=cc(),Wc=cc(),$c={point:Oc,lineStart:Oc,lineEnd:Oc,polygonStart:function(){Hc.reset(),$c.lineStart=Xc,$c.lineEnd=Gc},polygonEnd:function(){var t=+Hc;Wc.add(t<0?vc+t:t),this.lineStart=this.lineEnd=this.point=Oc},sphere:function(){Wc.add(vc)}};function Xc(){$c.point=Zc}function Gc(){Kc(Bc,Vc)}function Zc(t,n){$c.point=Kc,Bc=t,Vc=n,Lc=t*=yc,Uc=xc(n=(n*=yc)/2+pc),qc=Ac(n)}function Kc(t,n){var e=(t*=yc)-Lc,r=e>=0?1:-1,i=r*e,o=xc(n=(n*=yc)/2+pc),u=Ac(n),a=qc*u,c=Uc*o+a*xc(i),f=a*r*Ac(i);Hc.add(mc(f,c)),Lc=t,Uc=o,qc=u}var Qc=function(t){return Wc.reset(),Yc(t,$c),2*Wc};function Jc(t){return[mc(t[1],t[0]),Cc(t[2])]}function tf(t){var n=t[0],e=t[1],r=xc(e);return[r*xc(n),r*Ac(n),Ac(e)]}function nf(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function ef(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function rf(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function of(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function uf(t){var n=Tc(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var af,cf,ff,sf,lf,hf,df,pf,vf,bf,yf=cc(),gf={point:_f,lineStart:xf,lineEnd:wf,polygonStart:function(){gf.point=Sf,gf.lineStart=Mf,gf.lineEnd=Ef,yf.reset(),$c.polygonStart()},polygonEnd:function(){$c.polygonEnd(),gf.point=_f,gf.lineStart=xf,gf.lineEnd=wf,Hc<0?(af=-(ff=180),cf=-(sf=90)):yf>1e-6?sf=90:yf<-1e-6&&(cf=-90),bf[0]=af,bf[1]=ff},sphere:function(){af=-(ff=180),cf=-(sf=90)}};function _f(t,n){vf.push(bf=[af=t,ff=t]),n<cf&&(cf=n),n>sf&&(sf=n)}function mf(t,n){var e=tf([t*yc,n*yc]);if(pf){var r=ef(pf,e),i=ef([r[1],-r[0],0],r);uf(i),i=Jc(i);var o,u=t-lf,a=u>0?1:-1,c=i[0]*bc*a,f=gc(u)>180;f^(a*lf<c&&c<a*t)?(o=i[1]*bc)>sf&&(sf=o):f^(a*lf<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*bc)<cf&&(cf=o):(n<cf&&(cf=n),n>sf&&(sf=n)),f?t<lf?Af(af,t)>Af(af,ff)&&(ff=t):Af(t,ff)>Af(af,ff)&&(af=t):ff>=af?(t<af&&(af=t),t>ff&&(ff=t)):t>lf?Af(af,t)>Af(af,ff)&&(ff=t):Af(t,ff)>Af(af,ff)&&(af=t)}else vf.push(bf=[af=t,ff=t]);n<cf&&(cf=n),n>sf&&(sf=n),pf=e,lf=t}function xf(){gf.point=mf}function wf(){bf[0]=af,bf[1]=ff,gf.point=_f,pf=null}function Sf(t,n){if(pf){var e=t-lf;yf.add(gc(e)>180?e+(e>0?360:-360):e)}else hf=t,df=n;$c.point(t,n),mf(t,n)}function Mf(){$c.lineStart()}function Ef(){Sf(hf,df),$c.lineEnd(),gc(yf)>1e-6&&(af=-(ff=180)),bf[0]=af,bf[1]=ff,pf=null}function Af(t,n){return(n-=t)<0?n+360:n}function Nf(t,n){return t[0]-n[0]}function Tf(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var If,kf,Cf,jf,Of,Ff,Pf,zf,Df,Rf,Bf,Vf,Lf,Uf,qf,Yf,Hf=function(t){var n,e,r,i,o,u,a;if(sf=ff=-(af=cf=1/0),vf=[],Yc(t,gf),e=vf.length){for(vf.sort(Nf),n=1,o=[r=vf[0]];n<e;++n)Tf(r,(i=vf[n])[0])||Tf(r,i[1])?(Af(r[0],i[1])>Af(r[0],r[1])&&(r[1]=i[1]),Af(i[0],r[1])>Af(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=Af(r[1],i[0]))>u&&(u=a,af=i[0],ff=r[1])}return vf=bf=null,af===1/0||cf===1/0?[[NaN,NaN],[NaN,NaN]]:[[af,cf],[ff,sf]]},Wf={sphere:Oc,point:$f,lineStart:Gf,lineEnd:Qf,polygonStart:function(){Wf.lineStart=Jf,Wf.lineEnd=ts},polygonEnd:function(){Wf.lineStart=Gf,Wf.lineEnd=Qf}};function $f(t,n){t*=yc;var e=xc(n*=yc);Xf(e*xc(t),e*Ac(t),Ac(n))}function Xf(t,n,e){++If,Cf+=(t-Cf)/If,jf+=(n-jf)/If,Of+=(e-Of)/If}function Gf(){Wf.point=Zf}function Zf(t,n){t*=yc;var e=xc(n*=yc);Uf=e*xc(t),qf=e*Ac(t),Yf=Ac(n),Wf.point=Kf,Xf(Uf,qf,Yf)}function Kf(t,n){t*=yc;var e=xc(n*=yc),r=e*xc(t),i=e*Ac(t),o=Ac(n),u=mc(Tc((u=qf*o-Yf*i)*u+(u=Yf*r-Uf*o)*u+(u=Uf*i-qf*r)*u),Uf*r+qf*i+Yf*o);kf+=u,Ff+=u*(Uf+(Uf=r)),Pf+=u*(qf+(qf=i)),zf+=u*(Yf+(Yf=o)),Xf(Uf,qf,Yf)}function Qf(){Wf.point=$f}function Jf(){Wf.point=ns}function ts(){es(Vf,Lf),Wf.point=$f}function ns(t,n){Vf=t,Lf=n,t*=yc,n*=yc,Wf.point=es;var e=xc(n);Uf=e*xc(t),qf=e*Ac(t),Yf=Ac(n),Xf(Uf,qf,Yf)}function es(t,n){t*=yc;var e=xc(n*=yc),r=e*xc(t),i=e*Ac(t),o=Ac(n),u=qf*o-Yf*i,a=Yf*r-Uf*o,c=Uf*i-qf*r,f=Tc(u*u+a*a+c*c),s=Cc(f),l=f&&-s/f;Df+=l*u,Rf+=l*a,Bf+=l*c,kf+=s,Ff+=s*(Uf+(Uf=r)),Pf+=s*(qf+(qf=i)),zf+=s*(Yf+(Yf=o)),Xf(Uf,qf,Yf)}var rs=function(t){If=kf=Cf=jf=Of=Ff=Pf=zf=Df=Rf=Bf=0,Yc(t,Wf);var n=Df,e=Rf,r=Bf,i=n*n+e*e+r*r;return i<1e-12&&(n=Ff,e=Pf,r=zf,kf<1e-6&&(n=Cf,e=jf,r=Of),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[mc(e,n)*bc,Cc(r/Tc(i))*bc]},is=function(t){return function(){return t}},os=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function us(t,n){return[gc(t)>hc?t+Math.round(-t/vc)*vc:t,n]}function as(t,n,e){return(t%=vc)?n||e?os(fs(t),ss(n,e)):fs(t):n||e?ss(n,e):us}function cs(t){return function(n,e){return[(n+=t)>hc?n-vc:n<-hc?n+vc:n,e]}}function fs(t){var n=cs(t);return n.invert=cs(-t),n}function ss(t,n){var e=xc(t),r=Ac(t),i=xc(n),o=Ac(n);function u(t,n){var u=xc(n),a=xc(t)*u,c=Ac(t)*u,f=Ac(n),s=f*e+a*r;return[mc(c*i-s*o,a*e-f*r),Cc(s*i+c*o)]}return u.invert=function(t,n){var u=xc(n),a=xc(t)*u,c=Ac(t)*u,f=Ac(n),s=f*i-c*o;return[mc(c*i+f*o,a*e+s*r),Cc(s*e-a*r)]},u}us.invert=us;var ls=function(t){function n(n){return(n=t(n[0]*yc,n[1]*yc))[0]*=bc,n[1]*=bc,n}return t=as(t[0]*yc,t[1]*yc,t.length>2?t[2]*yc:0),n.invert=function(n){return(n=t.invert(n[0]*yc,n[1]*yc))[0]*=bc,n[1]*=bc,n},n};function hs(t,n,e,r,i,o){if(e){var u=xc(n),a=Ac(n),c=r*e;null==i?(i=n+r*vc,o=n-c/2):(i=ds(u,i),o=ds(u,o),(r>0?i<o:i>o)&&(i+=r*vc));for(var f,s=i;r>0?s>o:s<o;s-=c)f=Jc([u,-a*xc(s),-a*Ac(s)]),t.point(f[0],f[1])}}function ds(t,n){(n=tf(n))[0]-=t,uf(n);var e=kc(-n[1]);return((-n[2]<0?-e:e)+vc-1e-6)%vc}var ps=function(){var t,n,e=is([0,0]),r=is(90),i=is(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=bc,e[1]*=bc}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*yc,c=i.apply(this,arguments)*yc;return t=[],n=as(-u[0]*yc,-u[1]*yc,0).invert,hs(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:is([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:is(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:is(+t),u):i},u},vs=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:Oc,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},bs=function(t,n){return gc(t[0]-n[0])<1e-6&&gc(t[1]-n[1])<1e-6};function ys(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var gs=function(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(bs(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new ys(r,t,null,!0)),c.push(e.o=new ys(r,null,e,!1)),a.push(e=new ys(u,t,null,!1)),c.push(e.o=new ys(u,null,e,!0))}})),a.length){for(c.sort(n),_s(a),_s(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var f,s,l=a[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,u=f.length;o<u;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function _s(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var ms=cc();function xs(t){return gc(t[0])<=hc?t[0]:Nc(t[0])*((gc(t[0])+hc)%vc-hc)}var ws=function(t,n){var e=xs(n),r=n[1],i=Ac(r),o=[Ac(e),-xc(e),0],u=0,a=0;ms.reset(),1===i?r=dc+1e-6:-1===i&&(r=-dc-1e-6);for(var c=0,f=t.length;c<f;++c)if(l=(s=t[c]).length)for(var s,l,h=s[l-1],d=xs(h),p=h[1]/2+pc,v=Ac(p),b=xc(p),y=0;y<l;++y,d=_,v=x,b=w,h=g){var g=s[y],_=xs(g),m=g[1]/2+pc,x=Ac(m),w=xc(m),S=_-d,M=S>=0?1:-1,E=M*S,A=E>hc,N=v*x;if(ms.add(mc(N*M*Ac(E),b*w+N*xc(E))),u+=A?S+M*vc:S,A^d>=e^_>=e){var T=ef(tf(h),tf(g));uf(T);var I=ef(o,T);uf(I);var k=(A^S>=0?-1:1)*Cc(I[2]);(r>k||r===k&&(T[0]||T[1]))&&(a+=A^S>=0?1:-1)}}return(u<-1e-6||u<1e-6&&ms<-1e-6)^1&a},Ss=function(t,n,e,r){return function(i){var o,u,a,c=n(i),f=vs(),s=n(f),l=!1,h={point:d,lineStart:v,lineEnd:b,polygonStart:function(){h.point=y,h.lineStart=g,h.lineEnd=_,u=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=v,h.lineEnd=b,u=R(u);var t=ws(o,r);u.length?(l||(i.polygonStart(),l=!0),gs(u,Es,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function v(){h.point=p,c.lineStart()}function b(){h.point=d,c.lineEnd()}function y(t,n){a.push([t,n]),s.point(t,n)}function g(){s.lineStart(),a=[]}function _(){y(a[0][0],a[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),h=f.result(),d=h.length;if(a.pop(),o.push(a),a=null,d)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(Ms))}return h}};function Ms(t){return t.length>1}function Es(t,n){return((t=t.x)[0]<0?t[1]-dc-1e-6:dc-t[1])-((n=n.x)[0]<0?n[1]-dc-1e-6:dc-n[1])}var As=Ss((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?hc:-hc,c=gc(o-e);gc(c-hc)<1e-6?(t.point(e,r=(r+u)/2>0?dc:-dc),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=hc&&(gc(e-i)<1e-6&&(e-=1e-6*i),gc(o-a)<1e-6&&(o-=1e-6*a),r=function(t,n,e,r){var i,o,u=Ac(t-e);return gc(u)>1e-6?_c((Ac(n)*(o=xc(r))*Ac(e)-Ac(r)*(i=xc(n))*Ac(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*dc,r.point(-hc,i),r.point(0,i),r.point(hc,i),r.point(hc,0),r.point(hc,-i),r.point(0,-i),r.point(-hc,-i),r.point(-hc,0),r.point(-hc,i);else if(gc(t[0]-n[0])>1e-6){var o=t[0]<n[0]?hc:-hc;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-hc,-dc]);var Ns=function(t){var n=xc(t),e=6*yc,r=n>0,i=gc(n)>1e-6;function o(t,e){return xc(t)*xc(e)>n}function u(t,e,r){var i=[1,0,0],o=ef(tf(t),tf(e)),u=nf(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var f=n*u/c,s=-n*a/c,l=ef(i,o),h=of(i,f);rf(h,of(o,s));var d=l,p=nf(h,d),v=nf(d,d),b=p*p-v*(nf(h,h)-1);if(!(b<0)){var y=Tc(b),g=of(d,(-p-y)/v);if(rf(g,h),g=Jc(g),!r)return g;var _,m=t[0],x=e[0],w=t[1],S=e[1];x<m&&(_=m,m=x,x=_);var M=x-m,E=gc(M-hc)<1e-6;if(!E&&S<w&&(_=w,w=S,S=_),E||M<1e-6?E?w+S>0^g[1]<(gc(g[0]-m)<1e-6?w:S):w<=g[1]&&g[1]<=S:M>hc^(m<=g[0]&&g[0]<=x)){var A=of(d,(-p+y)/v);return rf(A,h),[g,Jc(A)]}}}function a(n,e){var i=r?t:hc-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return Ss(o,(function(t){var n,e,c,f,s;return{lineStart:function(){f=c=!1,s=1},point:function(l,h){var d,p=[l,h],v=o(l,h),b=r?v?0:a(l,h):v?a(l+(l<0?hc:-hc),h):0;if(!n&&(f=c=v)&&t.lineStart(),v!==c&&(!(d=u(n,p))||bs(n,d)||bs(p,d))&&(p[0]+=1e-6,p[1]+=1e-6,v=o(p[0],p[1])),v!==c)s=0,v?(t.lineStart(),d=u(p,n),t.point(d[0],d[1])):(d=u(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&r^v){var y;b&e||!(y=u(p,n,!0))||(s=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!v||n&&bs(n,p)||t.point(p[0],p[1]),n=p,c=v,e=b},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(f&&c)<<1}}}),(function(n,r,i,o){hs(o,t,e,i,n,r)}),r?[0,-t]:[-hc,t-hc])};function Ts(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,f){var s=0,l=0;if(null==i||(s=u(i,a))!==(l=u(o,a))||c(i,o)<0^a>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+a+4)%4)!==l);else f.point(o[0],o[1])}function u(r,i){return gc(r[0]-t)<1e-6?i>0?0:3:gc(r[0]-e)<1e-6?i>0?2:1:gc(r[1]-n)<1e-6?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,f,s,l,h,d,p,v,b,y,g,_=u,m=vs(),x={point:w,lineStart:function(){x.point=S,f&&f.push(s=[]);y=!0,b=!1,p=v=NaN},lineEnd:function(){c&&(S(l,h),d&&b&&m.rejoin(),c.push(m.result()));x.point=w,b&&_.lineEnd()},polygonStart:function(){_=m,c=[],f=[],g=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,u,a=f[e],c=1,s=a.length,l=a[0],h=l[0],d=l[1];c<s;++c)o=h,u=d,l=a[c],h=l[0],d=l[1],u<=r?d>r&&(h-o)*(r-u)>(d-u)*(t-o)&&++n:d<=r&&(h-o)*(r-u)<(d-u)*(t-o)&&--n;return n}(),e=g&&n,i=(c=R(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&gs(c,a,n,o,u),u.polygonEnd());_=u,c=f=s=null}};function w(t,n){i(t,n)&&_.point(t,n)}function S(o,u){var a=i(o,u);if(f&&s.push([o,u]),y)l=o,h=u,d=a,y=!1,a&&(_.lineStart(),_.point(o,u));else if(a&&b)_.point(o,u);else{var c=[p=Math.max(-1e9,Math.min(1e9,p)),v=Math.max(-1e9,Math.min(1e9,v))],m=[o=Math.max(-1e9,Math.min(1e9,o)),u=Math.max(-1e9,Math.min(1e9,u))];!function(t,n,e,r,i,o){var u,a=t[0],c=t[1],f=0,s=1,l=n[0]-a,h=n[1]-c;if(u=e-a,l||!(u>0)){if(u/=l,l<0){if(u<f)return;u<s&&(s=u)}else if(l>0){if(u>s)return;u>f&&(f=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>s)return;u>f&&(f=u)}else if(l>0){if(u<f)return;u<s&&(s=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<f)return;u<s&&(s=u)}else if(h>0){if(u>s)return;u>f&&(f=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>s)return;u>f&&(f=u)}else if(h>0){if(u<f)return;u<s&&(s=u)}return f>0&&(t[0]=a+f*l,t[1]=c+f*h),s<1&&(n[0]=a+s*l,n[1]=c+s*h),!0}}}}}(c,m,t,n,e,r)?a&&(_.lineStart(),_.point(o,u),g=!1):(b||(_.lineStart(),_.point(c[0],c[1])),_.point(m[0],m[1]),a||_.lineEnd(),g=!1)}p=o,v=u,b=a}return x}}var Is,ks,Cs,js=function(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=Ts(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}},Os=cc(),Fs={sphere:Oc,point:Oc,lineStart:function(){Fs.point=zs,Fs.lineEnd=Ps},lineEnd:Oc,polygonStart:Oc,polygonEnd:Oc};function Ps(){Fs.point=Fs.lineEnd=Oc}function zs(t,n){Is=t*=yc,ks=Ac(n*=yc),Cs=xc(n),Fs.point=Ds}function Ds(t,n){t*=yc;var e=Ac(n*=yc),r=xc(n),i=gc(t-Is),o=xc(i),u=r*Ac(i),a=Cs*e-ks*r*o,c=ks*e+Cs*r*o;Os.add(mc(Tc(u*u+a*a),c)),Is=t,ks=e,Cs=r}var Rs=function(t){return Os.reset(),Yc(t,Fs),+Os},Bs=[null,null],Vs={type:"LineString",coordinates:Bs},Ls=function(t,n){return Bs[0]=t,Bs[1]=n,Rs(Vs)},Us={Feature:function(t,n){return Ys(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(Ys(e[r].geometry,n))return!0;return!1}},qs={Sphere:function(){return!0},Point:function(t,n){return Hs(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Hs(e[r],n))return!0;return!1},LineString:function(t,n){return Ws(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Ws(e[r],n))return!0;return!1},Polygon:function(t,n){return $s(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if($s(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(Ys(e[r],n))return!0;return!1}};function Ys(t,n){return!(!t||!qs.hasOwnProperty(t.type))&&qs[t.type](t,n)}function Hs(t,n){return 0===Ls(t,n)}function Ws(t,n){for(var e,r,i,o=0,u=t.length;o<u;o++){if(0===(r=Ls(t[o],n)))return!0;if(o>0&&(i=Ls(t[o],t[o-1]))>0&&e<=i&&r<=i&&(e+r-i)*(1-Math.pow((e-r)/i,2))<1e-12*i)return!0;e=r}return!1}function $s(t,n){return!!ws(t.map(Xs),Gs(n))}function Xs(t){return(t=t.map(Gs)).pop(),t}function Gs(t){return[t[0]*yc,t[1]*yc]}var Zs=function(t,n){return(t&&Us.hasOwnProperty(t.type)?Us[t.type]:Ys)(t,n)};function Ks(t,n,e){var r=S(t,n-1e-6,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function Qs(t,n,e){var r=S(t,n-1e-6,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function Js(){var t,n,e,r,i,o,u,a,c,f,s,l,h=10,d=h,p=90,v=360,b=2.5;function y(){return{type:"MultiLineString",coordinates:g()}}function g(){return S(wc(r/p)*p,e,p).map(s).concat(S(wc(a/v)*v,u,v).map(l)).concat(S(wc(n/h)*h,t,h).filter((function(t){return gc(t%p)>1e-6})).map(c)).concat(S(wc(o/d)*d,i,d).filter((function(t){return gc(t%v)>1e-6})).map(f))}return y.lines=function(){return g().map((function(t){return{type:"LineString",coordinates:t}}))},y.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(u).slice(1),s(e).reverse().slice(1),l(a).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),y.precision(b)):[[r,a],[e,u]]},y.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),y.precision(b)):[[n,o],[t,i]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(p=+t[0],v=+t[1],y):[p,v]},y.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],y):[h,d]},y.precision=function(h){return arguments.length?(b=+h,c=Ks(o,i,90),f=Qs(n,t,b),s=Ks(a,u,90),l=Qs(r,e,b),y):b},y.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function tl(){return Js()()}var nl,el,rl,il,ol=function(t,n){var e=t[0]*yc,r=t[1]*yc,i=n[0]*yc,o=n[1]*yc,u=xc(r),a=Ac(r),c=xc(o),f=Ac(o),s=u*xc(e),l=u*Ac(e),h=c*xc(i),d=c*Ac(i),p=2*Cc(Tc(jc(o-r)+u*c*jc(i-e))),v=Ac(p),b=p?function(t){var n=Ac(t*=p)/v,e=Ac(p-t)/v,r=e*s+n*h,i=e*l+n*d,o=e*a+n*f;return[mc(i,r)*bc,mc(o,Tc(r*r+i*i))*bc]}:function(){return[e*bc,r*bc]};return b.distance=p,b},ul=function(t){return t},al=cc(),cl=cc(),fl={point:Oc,lineStart:Oc,lineEnd:Oc,polygonStart:function(){fl.lineStart=sl,fl.lineEnd=dl},polygonEnd:function(){fl.lineStart=fl.lineEnd=fl.point=Oc,al.add(gc(cl)),cl.reset()},result:function(){var t=al/2;return al.reset(),t}};function sl(){fl.point=ll}function ll(t,n){fl.point=hl,nl=rl=t,el=il=n}function hl(t,n){cl.add(il*t-rl*n),rl=t,il=n}function dl(){hl(nl,el)}var pl=fl,vl=1/0,bl=vl,yl=-vl,gl=yl;var _l,ml,xl,wl,Sl={point:function(t,n){t<vl&&(vl=t);t>yl&&(yl=t);n<bl&&(bl=n);n>gl&&(gl=n)},lineStart:Oc,lineEnd:Oc,polygonStart:Oc,polygonEnd:Oc,result:function(){var t=[[vl,bl],[yl,gl]];return yl=gl=-(bl=vl=1/0),t}},Ml=0,El=0,Al=0,Nl=0,Tl=0,Il=0,kl=0,Cl=0,jl=0,Ol={point:Fl,lineStart:Pl,lineEnd:Rl,polygonStart:function(){Ol.lineStart=Bl,Ol.lineEnd=Vl},polygonEnd:function(){Ol.point=Fl,Ol.lineStart=Pl,Ol.lineEnd=Rl},result:function(){var t=jl?[kl/jl,Cl/jl]:Il?[Nl/Il,Tl/Il]:Al?[Ml/Al,El/Al]:[NaN,NaN];return Ml=El=Al=Nl=Tl=Il=kl=Cl=jl=0,t}};function Fl(t,n){Ml+=t,El+=n,++Al}function Pl(){Ol.point=zl}function zl(t,n){Ol.point=Dl,Fl(xl=t,wl=n)}function Dl(t,n){var e=t-xl,r=n-wl,i=Tc(e*e+r*r);Nl+=i*(xl+t)/2,Tl+=i*(wl+n)/2,Il+=i,Fl(xl=t,wl=n)}function Rl(){Ol.point=Fl}function Bl(){Ol.point=Ll}function Vl(){Ul(_l,ml)}function Ll(t,n){Ol.point=Ul,Fl(_l=xl=t,ml=wl=n)}function Ul(t,n){var e=t-xl,r=n-wl,i=Tc(e*e+r*r);Nl+=i*(xl+t)/2,Tl+=i*(wl+n)/2,Il+=i,kl+=(i=wl*t-xl*n)*(xl+t),Cl+=i*(wl+n),jl+=3*i,Fl(xl=t,wl=n)}var ql=Ol;function Yl(t){this._context=t}Yl.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,vc)}},result:Oc};var Hl,Wl,$l,Xl,Gl,Zl=cc(),Kl={point:Oc,lineStart:function(){Kl.point=Ql},lineEnd:function(){Hl&&Jl(Wl,$l),Kl.point=Oc},polygonStart:function(){Hl=!0},polygonEnd:function(){Hl=null},result:function(){var t=+Zl;return Zl.reset(),t}};function Ql(t,n){Kl.point=Jl,Wl=Xl=t,$l=Gl=n}function Jl(t,n){Xl-=t,Gl-=n,Zl.add(Tc(Xl*Xl+Gl*Gl)),Xl=t,Gl=n}var th=Kl;function nh(){this._string=[]}function eh(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}nh.prototype={_radius:4.5,_circle:eh(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=eh(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var rh=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),Yc(t,e(r))),r.result()}return o.area=function(t){return Yc(t,e(pl)),pl.result()},o.measure=function(t){return Yc(t,e(th)),th.result()},o.bounds=function(t){return Yc(t,e(Sl)),Sl.result()},o.centroid=function(t){return Yc(t,e(ql)),ql.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,ul):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new nh):new Yl(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)},ih=function(t){return{stream:oh(t)}};function oh(t){return function(n){var e=new uh;for(var r in t)e[r]=t[r];return e.stream=n,e}}function uh(){}function ah(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Yc(e,t.stream(Sl)),n(Sl.result()),null!=r&&t.clipExtent(r),t}function ch(t,n,e){return ah(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])}),e)}function fh(t,n,e){return ch(t,[[0,0],n],e)}function sh(t,n,e){return ah(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])}),e)}function lh(t,n,e){return ah(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])}),e)}uh.prototype={constructor:uh,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var hh=xc(30*yc),dh=function(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,f,s,l,h,d,p,v,b){var y=f-r,g=s-i,_=y*y+g*g;if(_>4*n&&v--){var m=u+h,x=a+d,w=c+p,S=Tc(m*m+x*x+w*w),M=Cc(w/=S),E=gc(gc(w)-1)<1e-6||gc(o-l)<1e-6?(o+l)/2:mc(x,m),A=t(E,M),N=A[0],T=A[1],I=N-r,k=T-i,C=g*I-y*k;(C*C/_>n||gc((y*I+g*k)/_-.5)>.3||u*h+a*d+c*p<hh)&&(e(r,i,o,u,a,c,N,T,E,m/=S,x/=S,w,v,b),b.point(N,T),e(N,T,E,m,x,w,f,s,l,h,d,p,v,b))}}return function(n){var r,i,o,u,a,c,f,s,l,h,d,p,v={point:b,lineStart:y,lineEnd:_,polygonStart:function(){n.polygonStart(),v.lineStart=m},polygonEnd:function(){n.polygonEnd(),v.lineStart=y}};function b(e,r){e=t(e,r),n.point(e[0],e[1])}function y(){s=NaN,v.point=g,n.lineStart()}function g(r,i){var o=tf([r,i]),u=t(r,i);e(s,l,f,h,d,p,s=u[0],l=u[1],f=r,h=o[0],d=o[1],p=o[2],16,n),n.point(s,l)}function _(){v.point=b,n.lineEnd()}function m(){y(),v.point=x,v.lineEnd=w}function x(t,n){g(r=t,n),i=s,o=l,u=h,a=d,c=p,v.point=g}function w(){e(s,l,f,h,d,p,i,o,r,u,a,c,16,n),v.lineEnd=_,_()}return v}}(t,n):function(t){return oh({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var ph=oh({point:function(t,n){this.stream.point(t*yc,n*yc)}});function vh(t,n,e,r,i){function o(o,u){return[n+t*(o*=r),e-t*(u*=i)]}return o.invert=function(o,u){return[(o-n)/t*r,(e-u)/t*i]},o}function bh(t,n,e,r,i,o){var u=xc(o),a=Ac(o),c=u*t,f=a*t,s=u/t,l=a/t,h=(a*e-u*n)/t,d=(a*n+u*e)/t;function p(t,o){return[c*(t*=r)-f*(o*=i)+n,e-f*t-c*o]}return p.invert=function(t,n){return[r*(s*t-l*n+h),i*(d-l*t-s*n)]},p}function yh(t){return gh((function(){return t}))()}function gh(t){var n,e,r,i,o,u,a,c,f,s,l=150,h=480,d=250,p=0,v=0,b=0,y=0,g=0,_=0,m=1,x=1,w=null,S=As,M=null,E=ul,A=.5;function N(t){return c(t[0]*yc,t[1]*yc)}function T(t){return(t=c.invert(t[0],t[1]))&&[t[0]*bc,t[1]*bc]}function I(){var t=bh(l,0,0,m,x,_).apply(null,n(p,v)),r=(_?bh:vh)(l,h-t[0],d-t[1],m,x,_);return e=as(b,y,g),a=os(n,r),c=os(e,a),u=dh(a,A),k()}function k(){return f=s=null,N}return N.stream=function(t){return f&&s===t?f:f=ph(function(t){return oh({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(S(u(E(s=t)))))},N.preclip=function(t){return arguments.length?(S=t,w=void 0,k()):S},N.postclip=function(t){return arguments.length?(E=t,M=r=i=o=null,k()):E},N.clipAngle=function(t){return arguments.length?(S=+t?Ns(w=t*yc):(w=null,As),k()):w*bc},N.clipExtent=function(t){return arguments.length?(E=null==t?(M=r=i=o=null,ul):Ts(M=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),k()):null==M?null:[[M,r],[i,o]]},N.scale=function(t){return arguments.length?(l=+t,I()):l},N.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],I()):[h,d]},N.center=function(t){return arguments.length?(p=t[0]%360*yc,v=t[1]%360*yc,I()):[p*bc,v*bc]},N.rotate=function(t){return arguments.length?(b=t[0]%360*yc,y=t[1]%360*yc,g=t.length>2?t[2]%360*yc:0,I()):[b*bc,y*bc,g*bc]},N.angle=function(t){return arguments.length?(_=t%360*yc,I()):_*bc},N.reflectX=function(t){return arguments.length?(m=t?-1:1,I()):m<0},N.reflectY=function(t){return arguments.length?(x=t?-1:1,I()):x<0},N.precision=function(t){return arguments.length?(u=dh(a,A=t*t),k()):Tc(A)},N.fitExtent=function(t,n){return ch(N,t,n)},N.fitSize=function(t,n){return fh(N,t,n)},N.fitWidth=function(t,n){return sh(N,t,n)},N.fitHeight=function(t,n){return lh(N,t,n)},function(){return n=t.apply(this,arguments),N.invert=n.invert&&T,I()}}function _h(t){var n=0,e=hc/3,r=gh(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*yc,e=t[1]*yc):[n*bc,e*bc]},i}function mh(t,n){var e=Ac(t),r=(e+Ac(n))/2;if(gc(r)<1e-6)return function(t){var n=xc(t);function e(t,e){return[t*n,Ac(e)/n]}return e.invert=function(t,e){return[t/n,Cc(e*n)]},e}(t);var i=1+e*(2*r-e),o=Tc(i)/r;function u(t,n){var e=Tc(i-2*r*Ac(n))/r;return[e*Ac(t*=r),o-e*xc(t)]}return u.invert=function(t,n){var e=o-n,u=mc(t,gc(e))*Nc(e);return e*r<0&&(u-=hc*Nc(t)*Nc(e)),[u/r,Cc((i-(t*t+e*e)*r*r)/(2*r))]},u}var xh=function(){return _h(mh).scale(155.424).center([0,33.6442])},wh=function(){return xh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var Sh=function(){var t,n,e,r,i,o,u=wh(),a=xh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=xh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),l()):u.precision()},s.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),s.translate(u.translate())):u.scale()},s.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],s=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(f),r=a.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+1e-6,s+.12*n+1e-6],[o-.214*n-1e-6,s+.234*n-1e-6]]).stream(f),i=c.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+1e-6,s+.166*n+1e-6],[o-.115*n-1e-6,s+.234*n-1e-6]]).stream(f),l()},s.fitExtent=function(t,n){return ch(s,t,n)},s.fitSize=function(t,n){return fh(s,t,n)},s.fitWidth=function(t,n){return sh(s,t,n)},s.fitHeight=function(t,n){return lh(s,t,n)},s.scale(1070)};function Mh(t){return function(n,e){var r=xc(n),i=xc(e),o=t(r*i);return[o*i*Ac(n),o*Ac(e)]}}function Eh(t){return function(n,e){var r=Tc(n*n+e*e),i=t(r),o=Ac(i),u=xc(i);return[mc(n*o,r*u),Cc(r&&e*o/r)]}}var Ah=Mh((function(t){return Tc(2/(1+t))}));Ah.invert=Eh((function(t){return 2*Cc(t/2)}));var Nh=function(){return yh(Ah).scale(124.75).clipAngle(179.999)},Th=Mh((function(t){return(t=kc(t))&&t/Ac(t)}));Th.invert=Eh((function(t){return t}));var Ih=function(){return yh(Th).scale(79.4188).clipAngle(179.999)};function kh(t,n){return[t,Mc(Ic((dc+n)/2))]}kh.invert=function(t,n){return[t,2*_c(Sc(n))-dc]};var Ch=function(){return jh(kh).scale(961/vc)};function jh(t){var n,e,r,i=yh(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,f=null;function s(){var o=hc*u(),a=i(ls(i.rotate()).invert([0,0]));return c(null==f?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===kh?[[Math.max(a[0]-o,f),n],[Math.min(a[0]+o,e),r]]:[[f,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),s()):u()},i.translate=function(t){return arguments.length?(a(t),s()):a()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==f?null:[[f,n],[e,r]]},s()}function Oh(t){return Ic((dc+t)/2)}function Fh(t,n){var e=xc(t),r=t===n?Ac(t):Mc(e/xc(n))/Mc(Oh(n)/Oh(t)),i=e*Ec(Oh(t),r)/r;if(!r)return kh;function o(t,n){i>0?n<1e-6-dc&&(n=1e-6-dc):n>dc-1e-6&&(n=dc-1e-6);var e=i/Ec(Oh(n),r);return[e*Ac(r*t),i-e*xc(r*t)]}return o.invert=function(t,n){var e=i-n,o=Nc(r)*Tc(t*t+e*e),u=mc(t,gc(e))*Nc(e);return e*r<0&&(u-=hc*Nc(t)*Nc(e)),[u/r,2*_c(Ec(i/o,1/r))-dc]},o}var Ph=function(){return _h(Fh).scale(109.5).parallels([30,30])};function zh(t,n){return[t,n]}zh.invert=zh;var Dh=function(){return yh(zh).scale(152.63)};function Rh(t,n){var e=xc(t),r=t===n?Ac(t):(e-xc(n))/(n-t),i=e/r+t;if(gc(r)<1e-6)return zh;function o(t,n){var e=i-n,o=r*t;return[e*Ac(o),i-e*xc(o)]}return o.invert=function(t,n){var e=i-n,o=mc(t,gc(e))*Nc(e);return e*r<0&&(o-=hc*Nc(t)*Nc(e)),[o/r,i-Nc(r)*Tc(t*t+e*e)]},o}var Bh=function(){return _h(Rh).scale(131.154).center([0,13.9389])},Vh=1.340264,Lh=-.081106,Uh=893e-6,qh=.003796,Yh=Tc(3)/2;function Hh(t,n){var e=Cc(Yh*Ac(n)),r=e*e,i=r*r*r;return[t*xc(e)/(Yh*(Vh+3*Lh*r+i*(7*Uh+9*qh*r))),e*(Vh+Lh*r+i*(Uh+qh*r))]}Hh.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(Vh+Lh*i+o*(Uh+qh*i))-n)/(Vh+3*Lh*i+o*(7*Uh+9*qh*i)))*r)*i*i,!(gc(e)<1e-12));++u);return[Yh*t*(Vh+3*Lh*i+o*(7*Uh+9*qh*i))/xc(r),Cc(Ac(r)/Yh)]};var Wh=function(){return yh(Hh).scale(177.158)};function $h(t,n){var e=xc(n),r=xc(t)*e;return[e*Ac(t)/r,Ac(n)/r]}$h.invert=Eh(_c);var Xh=function(){return yh($h).scale(144.049).clipAngle(60)},Gh=function(){var t,n,e,r,i,o,u,a=1,c=0,f=0,s=1,l=1,h=0,d=null,p=1,v=1,b=oh({point:function(t,n){var e=_([t,n]);this.stream.point(e[0],e[1])}}),y=ul;function g(){return p=a*s,v=a*l,o=u=null,_}function _(e){var r=e[0]*p,i=e[1]*v;if(h){var o=i*t-r*n;r=r*t+i*n,i=o}return[r+c,i+f]}return _.invert=function(e){var r=e[0]-c,i=e[1]-f;if(h){var o=i*t+r*n;r=r*t-i*n,i=o}return[r/p,i/v]},_.stream=function(t){return o&&u===t?o:o=b(y(u=t))},_.postclip=function(t){return arguments.length?(y=t,d=e=r=i=null,g()):y},_.clipExtent=function(t){return arguments.length?(y=null==t?(d=e=r=i=null,ul):Ts(d=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),g()):null==d?null:[[d,e],[r,i]]},_.scale=function(t){return arguments.length?(a=+t,g()):a},_.translate=function(t){return arguments.length?(c=+t[0],f=+t[1],g()):[c,f]},_.angle=function(e){return arguments.length?(n=Ac(h=e%360*yc),t=xc(h),g()):h*bc},_.reflectX=function(t){return arguments.length?(s=t?-1:1,g()):s<0},_.reflectY=function(t){return arguments.length?(l=t?-1:1,g()):l<0},_.fitExtent=function(t,n){return ch(_,t,n)},_.fitSize=function(t,n){return fh(_,t,n)},_.fitWidth=function(t,n){return sh(_,t,n)},_.fitHeight=function(t,n){return lh(_,t,n)},_};function Zh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}Zh.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(gc(e)>1e-6&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};var Kh=function(){return yh(Zh).scale(175.295)};function Qh(t,n){return[xc(n)*Ac(t),Ac(n)]}Qh.invert=Eh(Cc);var Jh=function(){return yh(Qh).scale(249.5).clipAngle(90.000001)};function td(t,n){var e=xc(n),r=1+xc(t)*e;return[e*Ac(t)/r,Ac(n)/r]}td.invert=Eh((function(t){return 2*_c(t)}));var nd=function(){return yh(td).scale(250).clipAngle(142)};function ed(t,n){return[Mc(Ic((dc+n)/2)),-t]}ed.invert=function(t,n){return[-n,2*_c(Sc(t))-dc]};var rd=function(){var t=jh(ed),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)};function id(t,n){return t.parent===n.parent?1:2}function od(t,n){return t+n.x}function ud(t,n){return Math.max(t,n.y)}var ad=function(){var t=id,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(od,0)/t.length}(e),n.y=function(t){return 1+t.reduce(ud,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)}));var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=a.x-t(a,c)/2,s=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(s-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i};function cd(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function fd(t,n){var e,r,i,o,u,a=new dd(t),c=+t.value&&(a.value=t.value),f=[a];for(null==n&&(n=sd);e=f.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)f.push(r=e.children[o]=new dd(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(hd)}function sd(t){return t.children}function ld(t){t.data=t.data.data}function hd(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function dd(t){this.data=t,this.depth=this.height=0,this.parent=null}dd.prototype=fd.prototype={constructor:dd,count:function(){return this.eachAfter(cd)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;t=e.pop(),n=r.pop();for(;t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return fd(this).eachBefore(ld)}};var pd=Array.prototype.slice;var vd=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(pd.call(t))).length,o=[];r<i;)n=t[r],e&&gd(e,n)?++r:(e=md(o=bd(o,n)),r=0);return e};function bd(t,n){var e,r;if(_d(n,t))return[n];for(e=0;e<t.length;++e)if(yd(n,t[e])&&_d(xd(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(yd(xd(t[e],t[r]),n)&&yd(xd(t[e],n),t[r])&&yd(xd(t[r],n),t[e])&&_d(wd(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function yd(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function gd(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function _d(t,n){for(var e=0;e<n.length;++e)if(!gd(t,n[e]))return!1;return!0}function md(t){switch(t.length){case 1:return{x:(n=t[0]).x,y:n.y,r:n.r};case 2:return xd(t[0],t[1]);case 3:return wd(t[0],t[1],t[2])}var n}function xd(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,f=u-r,s=a-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+u+f/l*s)/2,r:(l+i+a)/2}}function wd(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-u,d=r-f,p=i-a,v=i-s,b=c-o,y=l-o,g=r*r+i*i-o*o,_=g-u*u-a*a+c*c,m=g-f*f-s*s+l*l,x=d*p-h*v,w=(p*m-v*_)/(2*x)-r,S=(v*b-p*y)/x,M=(d*_-h*m)/(2*x)-i,E=(h*y-d*b)/x,A=S*S+E*E-1,N=2*(o+w*S+M*E),T=w*w+M*M-o*o,I=-(A?(N+Math.sqrt(N*N-4*A*T))/(2*A):T/N);return{x:r+w+S*I,y:i+M+E*I,r:I}}function Sd(t,n,e){var r,i,o,u,a=t.x-n.x,c=t.y-n.y,f=a*a+c*c;f?(i=n.r+e.r,i*=i,u=t.r+e.r,i>(u*=u)?(r=(f+u-i)/(2*f),o=Math.sqrt(Math.max(0,u/f-r*r)),e.x=t.x-r*a-o*c,e.y=t.y-r*c+o*a):(r=(f+i-u)/(2*f),o=Math.sqrt(Math.max(0,i/f-r*r)),e.x=n.x+r*a-o*c,e.y=n.y+r*c+o*a)):(e.x=n.x+e.r,e.y=n.y)}function Md(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Ed(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Ad(t){this._=t,this.next=null,this.previous=null}function Nd(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,f,s,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Sd(e,n,r=t[2]),n=new Ad(n),e=new Ad(e),r=new Ad(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){Sd(n._,e._,r=t[a]),r=new Ad(r),c=e.next,f=n.previous,s=e._.r,l=n._.r;do{if(s<=l){if(Md(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}s+=c._.r,c=c.next}else{if(Md(f._,r._)){(n=f).next=e,e.previous=n,--a;continue t}l+=f._.r,f=f.previous}}while(c!==f.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=Ed(n);(r=r.next)!==e;)(u=Ed(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=vd(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}var Td=function(t){return Nd(t),t};function Id(t){return null==t?null:kd(t)}function kd(t){if("function"!=typeof t)throw new Error;return t}function Cd(){return 0}var jd=function(t){return function(){return t}};function Od(t){return Math.sqrt(t.value)}var Fd=function(){var t=null,n=1,e=1,r=Cd;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Pd(t)).eachAfter(zd(r,.5)).eachBefore(Dd(1)):i.eachBefore(Pd(Od)).eachAfter(zd(Cd,1)).eachAfter(zd(r,i.r/Math.min(n,e))).eachBefore(Dd(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Id(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:jd(+t),i):r},i};function Pd(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function zd(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Nd(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function Dd(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}var Rd=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Bd=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f},Vd=function(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&Bd(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(Rd),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i},Ld={depth:-1},Ud={};function qd(t){return t.id}function Yd(t){return t.parentId}var Hd=function(){var t=qd,n=Yd;function e(e){var r,i,o,u,a,c,f,s=e.length,l=new Array(s),h={};for(i=0;i<s;++i)r=e[i],a=l[i]=new dd(r),null!=(c=t(r,i,e))&&(c+="")&&(h[f="$"+(a.id=c)]=f in h?Ud:a);for(i=0;i<s;++i)if(a=l[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h["$"+c]))throw new Error("missing: "+c);if(u===Ud)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=Ld,o.eachBefore((function(t){t.depth=t.parent.depth+1,--s})).eachBefore(hd),o.parent=null,s>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=kd(n),e):t},e.parentId=function(t){return arguments.length?(n=kd(t),e):n},e};function Wd(t,n){return t.parent===n.parent?1:2}function $d(t){var n=t.children;return n?n[0]:t.t}function Xd(t){var n=t.children;return n?n[n.length-1]:t.t}function Gd(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function Zd(t,n,e){return t.a.parent===n.parent?t.a:e}function Kd(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}Kd.prototype=Object.create(dd.prototype);var Qd=function(){var t=Wd,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new Kd(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new Kd(r[i],i)),e.parent=n;return(u.parent=new Kd(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var f=i,s=i,l=i;i.eachBefore((function(t){t.x<f.x&&(f=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)}));var h=f===s?1:t(f,s)/2,d=h-f.x,p=n/(s.x+h+d),v=e/(l.depth||1);i.eachBefore((function(t){t.x=(t.x+d)*p,t.y=t.depth*v}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],f=o.m,s=u.m,l=a.m,h=c.m;a=Xd(a),o=$d(o),a&&o;)c=$d(c),(u=Xd(u)).a=n,(i=a.z+l-o.z-f+t(a._,o._))>0&&(Gd(Zd(a,n,r),n,i),f+=i,s+=i),l+=a.m,f+=o.m,h+=c.m,s+=u.m;a&&!Xd(u)&&(u.t=a,u.m+=l-s),o&&!$d(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i},Jd=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f},tp=(1+Math.sqrt(5))/2;function np(t,n,e,r,i,o){for(var u,a,c,f,s,l,h,d,p,v,b,y=[],g=n.children,_=0,m=0,x=g.length,w=n.value;_<x;){c=i-e,f=o-r;do{s=g[m++].value}while(!s&&m<x);for(l=h=s,b=s*s*(v=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/b,b/l);m<x;++m){if(s+=a=g[m].value,a<l&&(l=a),a>h&&(h=a),b=s*s*v,(d=Math.max(h/b,b/l))>p){s-=a;break}p=d}y.push(u={value:s,dice:c<f,children:g.slice(_,m)}),u.dice?Bd(u,e,r,i,w?r+=f*s/w:o):Jd(u,e,r,w?e+=c*s/w:i,o),w-=s,_=m}return y}var ep=function t(n){function e(t,e,r,i,o){np(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(tp),rp=function(){var t=ep,n=!1,e=1,r=1,i=[0],o=Cd,u=Cd,a=Cd,c=Cd,f=Cd;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(Rd),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,s+=u(n)-e,(l-=a(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=kd(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:jd(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:jd(+t),s):u},s.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:jd(+t),s):a},s.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:jd(+t),s):c},s.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:jd(+t),s):f},s},ip=function(t,n,e,r,i){var o,u,a=t.children,c=a.length,f=new Array(c+1);for(f[0]=u=o=0;o<c;++o)f[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var s=a[n];return s.x0=i,s.y0=o,s.x1=u,void(s.y1=c)}var l=f[n],h=r/2+l,d=n+1,p=e-1;for(;d<p;){var v=d+p>>>1;f[v]<h?d=v+1:p=v}h-f[d-1]<f[d]-h&&n+1<d&&--d;var b=f[d]-l,y=r-b;if(u-i>c-o){var g=(i*y+u*b)/r;t(n,d,b,i,o,g,c),t(d,e,y,g,o,u,c)}else{var _=(o*y+c*b)/r;t(n,d,b,i,o,u,_),t(d,e,y,i,_,u,c)}}(0,c,t.value,n,e,r,i)},op=function(t,n,e,r,i){(1&t.depth?Jd:Bd)(t,n,e,r,i)},up=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,f,s,l=-1,h=u.length,d=t.value;++l<h;){for(c=(a=u[l]).children,f=a.value=0,s=c.length;f<s;++f)a.value+=c[f].value;a.dice?Bd(a,e,r,i,r+=(o-r)*a.value/d):Jd(a,e,r,e+=(i-e)*a.value/d,o),d-=a.value}else t._squarify=u=np(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(tp),ap=function(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}},cp=function(t,n){var e=se(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}},fp=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},sp=Math.SQRT2;function lp(t){return((t=Math.exp(t))+1/t)/2}var hp=function(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],f=n[2],s=a-i,l=c-o,h=s*s+l*l;if(h<1e-12)r=Math.log(f/u)/sp,e=function(t){return[i+t*s,o+t*l,u*Math.exp(sp*t*r)]};else{var d=Math.sqrt(h),p=(f*f-u*u+4*h)/(2*u*2*d),v=(f*f-u*u-4*h)/(2*f*2*d),b=Math.log(Math.sqrt(p*p+1)-p),y=Math.log(Math.sqrt(v*v+1)-v);r=(y-b)/sp,e=function(t){var n,e=t*r,a=lp(b),c=u/(2*d)*(a*(n=sp*e+b,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(b));return[i+c*s,o+c*l,u*a/lp(sp*e+b)]}}return e.duration=1e3*r,e};function dp(t){return function(n,e){var r=t((n=ee(n)).h,(e=ee(e)).h),i=he(n.s,e.s),o=he(n.l,e.l),u=he(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var pp=dp(se),vp=dp(he);function bp(t,n){var e=he((t=bo(t)).l,(n=bo(n)).l),r=he(t.a,n.a),i=he(t.b,n.b),o=he(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function yp(t){return function(n,e){var r=t((n=Mo(n)).h,(e=Mo(e)).h),i=he(n.c,e.c),o=he(n.l,e.l),u=he(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var gp=yp(se),_p=yp(he);function mp(t){return function n(e){function r(n,r){var i=t((n=jo(n)).h,(r=jo(r)).h),o=he(n.s,r.s),u=he(n.l,r.l),a=he(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}var xp=mp(se),wp=mp(he);function Sp(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}var Mp=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},Ep=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},Ap=function(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]};function Np(t,n){return t[0]-n[0]||t[1]-n[1]}function Tp(t){for(var n,e,r,i=t.length,o=[0,1],u=2,a=2;a<i;++a){for(;u>1&&(n=t[o[u-2]],e=t[o[u-1]],r=t[a],(e[0]-n[0])*(r[1]-n[1])-(e[1]-n[1])*(r[0]-n[0])<=0);)--u;o[u++]=a}return o.slice(0,u)}var Ip=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Np),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Tp(r),u=Tp(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)f.push(t[r[u[n]][2]]);return f},kp=function(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],f=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>a!=f>a&&u<(c-e)*(a-r)/(f-r)+e&&(s=!s),c=e,f=r;return s},Cp=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c},jp=function(){return Math.random()},Op=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(jp),Fp=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(jp),Pp=function t(n){function e(){var t=Fp.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(jp),zp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(jp),Dp=function t(n){function e(t){var e=zp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(jp),Rp=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(jp);function Bp(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function Vp(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var Lp=Array.prototype,Up=Lp.map,qp=Lp.slice,Yp={name:"implicit"};function Hp(){var t=Qi(),n=[],e=[],r=Yp;function i(i){var o=i+"",u=t.get(o);if(!u){if(r!==Yp)return r;t.set(o,u=n.push(i))}return e[(u-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Qi();for(var r,o,u=-1,a=e.length;++u<a;)t.has(o=(r=e[u])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=qp.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Hp(n,e).unknown(r)},Bp.apply(i,arguments),i}function Wp(){var t,n,e=Hp().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,f=.5;function s(){var e=r().length,s=o[1]<o[0],l=o[s-0],h=o[1-s];t=(h-l)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),l+=(h-l-t*(e-a))*f,n=t*(1-a),u&&(l=Math.round(l),n=Math.round(n));var d=S(e).map((function(n){return l+t*n}));return i(s?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],s()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,s()):u},e.padding=function(t){return arguments.length?(a=Math.min(1,c=+t),s()):a},e.paddingInner=function(t){return arguments.length?(a=Math.min(1,t),s()):a},e.paddingOuter=function(t){return arguments.length?(c=+t,s()):c},e.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},e.copy=function(){return Wp(r(),o).round(u).paddingInner(a).paddingOuter(c).align(f)},Bp.apply(s(),arguments)}function $p(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return $p(n())},t}function Xp(){return $p(Wp.apply(null,arguments).paddingInner(1))}var Gp=function(t){return+t},Zp=[0,1];function Kp(t){return t}function Qp(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function Jp(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function tv(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=Qp(i,r),o=e(u,o)):(r=Qp(r,i),o=e(o,u)),function(t){return o(r(t))}}function nv(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=Qp(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=f(t,n,1,r)-1;return o[e](i[e](n))}}function ev(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function rv(){var t,n,e,r,i,o,u=Zp,a=Zp,c=Ie,f=Kp;function s(){return r=Math.min(u.length,a.length)>2?nv:tv,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,c)))(t(f(n)))}return l.invert=function(e){return f(n((o||(o=r(a,u.map(t),we)))(e)))},l.domain=function(t){return arguments.length?(u=Up.call(t,Gp),f===Kp||(f=Jp(u)),s()):u.slice()},l.range=function(t){return arguments.length?(a=qp.call(t),s()):a.slice()},l.rangeRound=function(t){return a=qp.call(t),c=fp,s()},l.clamp=function(t){return arguments.length?(f=t?Jp(u):Kp,l):f!==Kp},l.interpolate=function(t){return arguments.length?(c=t,s()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,s()}}function iv(t,n){return rv()(t,n)}var ov=function(t,n,e,r){var i,o=I(t,n,e);switch((r=Wa(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=uc(o,u))||(r.precision=i),Ka(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=ac(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=oc(o))||(r.precision=i-2*("%"===r.type))}return Za(r)};function uv(t){var n=t.domain;return t.ticks=function(t){var e=n();return N(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return ov(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=T(a,c,e))>0?r=T(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=T(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function av(){var t=iv(Kp,Kp);return t.copy=function(){return ev(t,av())},Bp.apply(t,arguments),uv(t)}function cv(t){var n;function e(t){return isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=Up.call(n,Gp),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return cv(t).unknown(n)},t=arguments.length?Up.call(t,Gp):[0,1],uv(e)}var fv=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t};function sv(t){return Math.log(t)}function lv(t){return Math.exp(t)}function hv(t){return-Math.log(-t)}function dv(t){return-Math.exp(-t)}function pv(t){return isFinite(t)?+("1e"+t):t<0?0:t}function vv(t){return function(n){return-t(-n)}}function bv(t){var n,e,r=t(sv,lv),i=r.domain,o=10;function u(){return n=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}(o),e=function(t){return 10===t?pv:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}(o),i()[0]<0?(n=vv(n),e=vv(e),t(hv,dv)):t(sv,lv),r}return r.base=function(t){return arguments.length?(o=+t,u()):o},r.domain=function(t){return arguments.length?(i(t),u()):i()},r.ticks=function(t){var r,u=i(),a=u[0],c=u[u.length-1];(r=c<a)&&(h=a,a=c,c=h);var f,s,l,h=n(a),d=n(c),p=null==t?10:+t,v=[];if(!(o%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,a>0){for(;h<d;++h)for(s=1,f=e(h);s<o;++s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else for(;h<d;++h)for(s=o-1,f=e(h);s>=1;--s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else v=N(h,d,Math.min(d-h,p)).map(e);return r?v.reverse():v},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=Za(i)),t===1/0)return i;null==t&&(t=10);var u=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/e(Math.round(n(t)));return r*o<o-.5&&(r*=o),r<=u?i(t):""}},r.nice=function(){return i(fv(i(),{floor:function(t){return e(Math.floor(n(t)))},ceil:function(t){return e(Math.ceil(n(t)))}}))},r}function yv(){var t=bv(rv()).domain([1,10]);return t.copy=function(){return ev(t,yv()).base(t.base())},Bp.apply(t,arguments),t}function gv(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function _v(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function mv(t){var n=1,e=t(gv(n),_v(n));return e.constant=function(e){return arguments.length?t(gv(n=+e),_v(n)):n},uv(e)}function xv(){var t=mv(rv());return t.copy=function(){return ev(t,xv()).constant(t.constant())},Bp.apply(t,arguments)}function wv(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function Sv(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Mv(t){return t<0?-t*t:t*t}function Ev(t){var n=t(Kp,Kp),e=1;function r(){return 1===e?t(Kp,Kp):.5===e?t(Sv,Mv):t(wv(e),wv(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},uv(n)}function Av(){var t=Ev(rv());return t.copy=function(){return ev(t,Av()).exponent(t.exponent())},Bp.apply(t,arguments),t}function Nv(){return Av.apply(null,arguments).exponent(.5)}function Tv(){var t,n=[],e=[],r=[];function o(){var t=0,i=Math.max(1,e.length);for(r=new Array(i-1);++t<i;)r[t-1]=j(n,t/i);return u}function u(n){return isNaN(n=+n)?t:e[f(r,n)]}return u.invertExtent=function(t){var i=e.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:n[0],i<r.length?r[i]:n[n.length-1]]},u.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var e,r=0,u=t.length;r<u;++r)null==(e=t[r])||isNaN(e=+e)||n.push(e);return n.sort(i),o()},u.range=function(t){return arguments.length?(e=qp.call(t),o()):e.slice()},u.unknown=function(n){return arguments.length?(t=n,u):t},u.quantiles=function(){return r.slice()},u.copy=function(){return Tv().domain(n).range(e).unknown(t)},Bp.apply(u,arguments)}function Iv(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function u(n){return n<=n?o[f(i,n,0,r)]:t}function a(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return u}return u.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],a()):[n,e]},u.range=function(t){return arguments.length?(r=(o=qp.call(t)).length-1,a()):o.slice()},u.invertExtent=function(t){var u=o.indexOf(t);return u<0?[NaN,NaN]:u<1?[n,i[0]]:u>=r?[i[r-1],e]:[i[u-1],i[u]]},u.unknown=function(n){return arguments.length?(t=n,u):u},u.thresholds=function(){return i.slice()},u.copy=function(){return Iv().domain([n,e]).range(o).unknown(t)},Bp.apply(uv(u),arguments)}function kv(){var t,n=[.5],e=[0,1],r=1;function i(i){return i<=i?e[f(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=qp.call(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=qp.call(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return kv().domain(n).range(e).unknown(t)},Bp.apply(i,arguments)}var Cv=new Date,jv=new Date;function Ov(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return Ov((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Cv.setTime(+n),jv.setTime(+r),t(Cv),t(jv),Math.floor(e(Cv,jv))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Fv=Ov((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Fv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ov((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Pv=Fv,zv=Fv.range,Dv=Ov((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Rv=Dv,Bv=Dv.range;function Vv(t){return Ov((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Lv=Vv(0),Uv=Vv(1),qv=Vv(2),Yv=Vv(3),Hv=Vv(4),Wv=Vv(5),$v=Vv(6),Xv=Lv.range,Gv=Uv.range,Zv=qv.range,Kv=Yv.range,Qv=Hv.range,Jv=Wv.range,tb=$v.range,nb=Ov((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1})),eb=nb,rb=nb.range,ib=Ov((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()})),ob=ib,ub=ib.range,ab=Ov((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()})),cb=ab,fb=ab.range,sb=Ov((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()})),lb=sb,hb=sb.range,db=Ov((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));db.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ov((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):db:null};var pb=db,vb=db.range;function bb(t){return Ov((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var yb=bb(0),gb=bb(1),_b=bb(2),mb=bb(3),xb=bb(4),wb=bb(5),Sb=bb(6),Mb=yb.range,Eb=gb.range,Ab=_b.range,Nb=mb.range,Tb=xb.range,Ib=wb.range,kb=Sb.range,Cb=Ov((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1})),jb=Cb,Ob=Cb.range,Fb=Ov((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));Fb.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ov((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Pb=Fb,zb=Fb.range;function Db(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Rb(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Bb(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}function Vb(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,f=Qb(i),s=Jb(i),l=Qb(o),h=Jb(o),d=Qb(u),p=Jb(u),v=Qb(a),b=Jb(a),y=Qb(c),g=Jb(c),_={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:my,e:my,f:Ey,H:xy,I:wy,j:Sy,L:My,m:Ay,M:Ny,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:ng,s:eg,S:Ty,u:Iy,U:ky,V:Cy,w:jy,W:Oy,x:null,X:null,y:Fy,Y:Py,Z:zy,"%":tg},m={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Dy,e:Dy,f:Uy,H:Ry,I:By,j:Vy,L:Ly,m:qy,M:Yy,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:ng,s:eg,S:Hy,u:Wy,U:$y,V:Xy,w:Gy,W:Zy,x:null,X:null,y:Ky,Y:Qy,Z:Jy,"%":tg},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=b[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return M(t,n,e,r)},d:sy,e:sy,f:by,H:hy,I:hy,j:ly,L:vy,m:fy,M:dy,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},q:cy,Q:gy,s:_y,S:py,u:ny,U:ey,V:ry,w:ty,W:iy,x:function(t,n,r){return M(t,e,n,r)},X:function(t,n,e){return M(t,r,n,e)},y:uy,Y:oy,Z:ay,"%":yy};function w(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++a<f;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=Wb[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function S(t,n){return function(e){var r,i,o=Bb(1900,void 0,1);if(M(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Rb(Bb(o.y,0,1))).getUTCDay(),r=i>4||0===i?gb.ceil(r):gb(r),r=jb.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Db(Bb(o.y,0,1))).getDay(),r=i>4||0===i?Uv.ceil(r):Uv(r),r=eb.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Rb(Bb(o.y,0,1)).getUTCDay():Db(Bb(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Rb(o)):Db(o)}}function M(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in Wb?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=w(e,_),_.X=w(r,_),_.c=w(n,_),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=S(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=S(t+="",!0);return n.toString=function(){return t},n}}}var Lb,Ub,qb,Yb,Hb,Wb={"-":"",_:" ",0:"0"},$b=/^\s*\d+/,Xb=/^%/,Gb=/[\\^$*+?|[\]().{}]/g;function Zb(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Kb(t){return t.replace(Gb,"\\$&")}function Qb(t){return new RegExp("^(?:"+t.map(Kb).join("|")+")","i")}function Jb(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function ty(t,n,e){var r=$b.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function ny(t,n,e){var r=$b.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function ey(t,n,e){var r=$b.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function ry(t,n,e){var r=$b.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function iy(t,n,e){var r=$b.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function oy(t,n,e){var r=$b.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function uy(t,n,e){var r=$b.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function ay(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function cy(t,n,e){var r=$b.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function fy(t,n,e){var r=$b.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function sy(t,n,e){var r=$b.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function ly(t,n,e){var r=$b.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function hy(t,n,e){var r=$b.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function dy(t,n,e){var r=$b.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function py(t,n,e){var r=$b.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function vy(t,n,e){var r=$b.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function by(t,n,e){var r=$b.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function yy(t,n,e){var r=Xb.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function gy(t,n,e){var r=$b.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function _y(t,n,e){var r=$b.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function my(t,n){return Zb(t.getDate(),n,2)}function xy(t,n){return Zb(t.getHours(),n,2)}function wy(t,n){return Zb(t.getHours()%12||12,n,2)}function Sy(t,n){return Zb(1+eb.count(Pv(t),t),n,3)}function My(t,n){return Zb(t.getMilliseconds(),n,3)}function Ey(t,n){return My(t,n)+"000"}function Ay(t,n){return Zb(t.getMonth()+1,n,2)}function Ny(t,n){return Zb(t.getMinutes(),n,2)}function Ty(t,n){return Zb(t.getSeconds(),n,2)}function Iy(t){var n=t.getDay();return 0===n?7:n}function ky(t,n){return Zb(Lv.count(Pv(t)-1,t),n,2)}function Cy(t,n){var e=t.getDay();return t=e>=4||0===e?Hv(t):Hv.ceil(t),Zb(Hv.count(Pv(t),t)+(4===Pv(t).getDay()),n,2)}function jy(t){return t.getDay()}function Oy(t,n){return Zb(Uv.count(Pv(t)-1,t),n,2)}function Fy(t,n){return Zb(t.getFullYear()%100,n,2)}function Py(t,n){return Zb(t.getFullYear()%1e4,n,4)}function zy(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Zb(n/60|0,"0",2)+Zb(n%60,"0",2)}function Dy(t,n){return Zb(t.getUTCDate(),n,2)}function Ry(t,n){return Zb(t.getUTCHours(),n,2)}function By(t,n){return Zb(t.getUTCHours()%12||12,n,2)}function Vy(t,n){return Zb(1+jb.count(Pb(t),t),n,3)}function Ly(t,n){return Zb(t.getUTCMilliseconds(),n,3)}function Uy(t,n){return Ly(t,n)+"000"}function qy(t,n){return Zb(t.getUTCMonth()+1,n,2)}function Yy(t,n){return Zb(t.getUTCMinutes(),n,2)}function Hy(t,n){return Zb(t.getUTCSeconds(),n,2)}function Wy(t){var n=t.getUTCDay();return 0===n?7:n}function $y(t,n){return Zb(yb.count(Pb(t)-1,t),n,2)}function Xy(t,n){var e=t.getUTCDay();return t=e>=4||0===e?xb(t):xb.ceil(t),Zb(xb.count(Pb(t),t)+(4===Pb(t).getUTCDay()),n,2)}function Gy(t){return t.getUTCDay()}function Zy(t,n){return Zb(gb.count(Pb(t)-1,t),n,2)}function Ky(t,n){return Zb(t.getUTCFullYear()%100,n,2)}function Qy(t,n){return Zb(t.getUTCFullYear()%1e4,n,4)}function Jy(){return"+0000"}function tg(){return"%"}function ng(t){return+t}function eg(t){return Math.floor(+t/1e3)}function rg(t){return Lb=Vb(t),Ub=Lb.format,qb=Lb.parse,Yb=Lb.utcFormat,Hb=Lb.utcParse,Lb}rg({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function ig(t){return new Date(t)}function og(t){return t instanceof Date?+t:+new Date(+t)}function ug(t,n,e,r,i,u,a,c,f){var s=iv(Kp,Kp),l=s.invert,h=s.domain,d=f(".%L"),p=f(":%S"),v=f("%I:%M"),b=f("%I %p"),y=f("%a %d"),g=f("%b %d"),_=f("%B"),m=f("%Y"),x=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[u,1,6e4],[u,5,3e5],[u,15,9e5],[u,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,31536e6]];function w(o){return(a(o)<o?d:u(o)<o?p:i(o)<o?v:r(o)<o?b:n(o)<o?e(o)<o?y:g:t(o)<o?_:m)(o)}function S(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=o((function(t){return t[2]})).right(x,u);a===x.length?(i=I(e/31536e6,r/31536e6,n),n=t):a?(i=(a=x[u/x[a-1][2]<x[a][2]/u?a-1:a])[1],n=a[0]):(i=Math.max(I(e,r,n),1),n=c)}return null==i?n:n.every(i)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(Up.call(t,og)):h().map(ig)},s.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=S(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},s.tickFormat=function(t,n){return null==n?w:f(n)},s.nice=function(t,n){var e=h();return(t=S(t,e[0],e[e.length-1],n))?h(fv(e,t)):s},s.copy=function(){return ev(s,ug(t,n,e,r,i,u,a,c,f))},s}var ag=function(){return Bp.apply(ug(Pv,Rv,Lv,eb,ob,cb,lb,pb,Ub).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},cg=Ov((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),fg=cg,sg=cg.range,lg=Ov((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()})),hg=lg,dg=lg.range,pg=Ov((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})),vg=pg,bg=pg.range,yg=function(){return Bp.apply(ug(Pb,fg,yb,jb,hg,vg,lb,pb,Yb).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)};function gg(){var t,n,e,r,i,o=0,u=1,a=Kp,c=!1;function f(n){return isNaN(n=+n)?i:a(0===e?.5:(n=(r(n)-t)*e,c?Math.max(0,Math.min(1,n)):n))}return f.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(u=+i[1]),e=t===n?0:1/(n-t),f):[o,u]},f.clamp=function(t){return arguments.length?(c=!!t,f):c},f.interpolator=function(t){return arguments.length?(a=t,f):a},f.unknown=function(t){return arguments.length?(i=t,f):i},function(i){return r=i,t=i(o),n=i(u),e=t===n?0:1/(n-t),f}}function _g(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function mg(){var t=uv(gg()(Kp));return t.copy=function(){return _g(t,mg())},Vp.apply(t,arguments)}function xg(){var t=bv(gg()).domain([1,10]);return t.copy=function(){return _g(t,xg()).base(t.base())},Vp.apply(t,arguments)}function wg(){var t=mv(gg());return t.copy=function(){return _g(t,wg()).constant(t.constant())},Vp.apply(t,arguments)}function Sg(){var t=Ev(gg());return t.copy=function(){return _g(t,Sg()).exponent(t.exponent())},Vp.apply(t,arguments)}function Mg(){return Sg.apply(null,arguments).exponent(.5)}function Eg(){var t=[],n=Kp;function e(e){if(!isNaN(e=+e))return n((f(t,e)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var r,o=0,u=n.length;o<u;++o)null==(r=n[o])||isNaN(r=+r)||t.push(r);return t.sort(i),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Eg(n).domain(t)},Vp.apply(e,arguments)}function Ag(){var t,n,e,r,i,o,u,a=0,c=.5,f=1,s=Kp,l=!1;function h(t){return isNaN(t=+t)?u:(t=.5+((t=+o(t))-n)*(t<n?r:i),s(l?Math.max(0,Math.min(1,t)):t))}return h.domain=function(u){return arguments.length?(t=o(a=+u[0]),n=o(c=+u[1]),e=o(f=+u[2]),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h):[a,c,f]},h.clamp=function(t){return arguments.length?(l=!!t,h):l},h.interpolator=function(t){return arguments.length?(s=t,h):s},h.unknown=function(t){return arguments.length?(u=t,h):u},function(u){return o=u,t=u(a),n=u(c),e=u(f),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h}}function Ng(){var t=uv(Ag()(Kp));return t.copy=function(){return _g(t,Ng())},Vp.apply(t,arguments)}function Tg(){var t=bv(Ag()).domain([.1,1,10]);return t.copy=function(){return _g(t,Tg()).base(t.base())},Vp.apply(t,arguments)}function Ig(){var t=mv(Ag());return t.copy=function(){return _g(t,Ig()).constant(t.constant())},Vp.apply(t,arguments)}function kg(){var t=Ev(Ag());return t.copy=function(){return _g(t,kg()).exponent(t.exponent())},Vp.apply(t,arguments)}function Cg(){return kg.apply(null,arguments).exponent(.5)}var jg=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},Og=jg("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Fg=jg("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Pg=jg("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),zg=jg("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Dg=jg("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Rg=jg("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Bg=jg("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Vg=jg("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Lg=jg("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Ug=jg("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),qg=function(t){return ve(t[t.length-1])},Yg=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(jg),Hg=qg(Yg),Wg=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(jg),$g=qg(Wg),Xg=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(jg),Gg=qg(Xg),Zg=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(jg),Kg=qg(Zg),Qg=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(jg),Jg=qg(Qg),t_=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(jg),n_=qg(t_),e_=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(jg),r_=qg(e_),i_=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(jg),o_=qg(i_),u_=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(jg),a_=qg(u_),c_=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(jg),f_=qg(c_),s_=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(jg),l_=qg(s_),h_=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(jg),d_=qg(h_),p_=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(jg),v_=qg(p_),b_=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(jg),y_=qg(b_),g_=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(jg),__=qg(g_),m_=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(jg),x_=qg(m_),w_=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(jg),S_=qg(w_),M_=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(jg),E_=qg(M_),A_=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(jg),N_=qg(A_),T_=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(jg),I_=qg(T_),k_=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(jg),C_=qg(k_),j_=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(jg),O_=qg(j_),F_=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(jg),P_=qg(F_),z_=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(jg),D_=qg(z_),R_=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(jg),B_=qg(R_),V_=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(jg),L_=qg(V_),U_=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(jg),q_=qg(U_),Y_=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"},H_=wp(jo(300,.5,0),jo(-240,.5,1)),W_=wp(jo(-100,.75,.35),jo(80,1.5,.8)),$_=wp(jo(260,.75,.35),jo(80,1.5,.8)),X_=jo(),G_=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return X_.h=360*t-100,X_.s=1.5-1.5*n,X_.l=.8-.9*n,X_+""},Z_=Gn(),K_=Math.PI/3,Q_=2*Math.PI/3,J_=function(t){var n;return t=(.5-t)*Math.PI,Z_.r=255*(n=Math.sin(t))*n,Z_.g=255*(n=Math.sin(t+K_))*n,Z_.b=255*(n=Math.sin(t+Q_))*n,Z_+""},tm=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"};function nm(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}var em=nm(jg("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),rm=nm(jg("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),im=nm(jg("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),om=nm(jg("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),um=function(t){return Mn(rn(t).call(document.documentElement))},am=0;function cm(){return new fm}function fm(){this._="@"+(++am).toString(36)}fm.prototype=cm.prototype={constructor:fm,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var sm=function(t){return"string"==typeof t?new xn([document.querySelectorAll(t)],[document.documentElement]):new xn([null==t?[]:t],mn)},lm=function(t,n){null==n&&(n=ke().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=Ce(t,n[e]);return i},hm=function(t){return function(){return t}},dm=Math.abs,pm=Math.atan2,vm=Math.cos,bm=Math.max,ym=Math.min,gm=Math.sin,_m=Math.sqrt,mm=Math.PI,xm=mm/2,wm=2*mm;function Sm(t){return t>1?0:t<-1?mm:Math.acos(t)}function Mm(t){return t>=1?xm:t<=-1?-xm:Math.asin(t)}function Em(t){return t.innerRadius}function Am(t){return t.outerRadius}function Nm(t){return t.startAngle}function Tm(t){return t.endAngle}function Im(t){return t&&t.padAngle}function km(t,n,e,r,i,o,u,a){var c=e-t,f=r-n,s=u-i,l=a-o,h=l*c-s*f;if(!(h*h<1e-12))return[t+(h=(s*(n-o)-l*(t-i))/h)*c,n+h*f]}function Cm(t,n,e,r,i,o,u){var a=t-e,c=n-r,f=(u?o:-o)/_m(a*a+c*c),s=f*c,l=-f*a,h=t+s,d=n+l,p=e+s,v=r+l,b=(h+p)/2,y=(d+v)/2,g=p-h,_=v-d,m=g*g+_*_,x=i-o,w=h*v-p*d,S=(_<0?-1:1)*_m(bm(0,x*x*m-w*w)),M=(w*_-g*S)/m,E=(-w*g-_*S)/m,A=(w*_+g*S)/m,N=(-w*g+_*S)/m,T=M-b,I=E-y,k=A-b,C=N-y;return T*T+I*I>k*k+C*C&&(M=A,E=N),{cx:M,cy:E,x01:-s,y01:-l,x11:M*(i/x-1),y11:E*(i/x-1)}}var jm=function(){var t=Em,n=Am,e=hm(0),r=null,i=Nm,o=Tm,u=Im,a=null;function c(){var c,f,s=+t.apply(this,arguments),l=+n.apply(this,arguments),h=i.apply(this,arguments)-xm,d=o.apply(this,arguments)-xm,p=dm(d-h),v=d>h;if(a||(a=c=qi()),l<s&&(f=l,l=s,s=f),l>1e-12)if(p>wm-1e-12)a.moveTo(l*vm(h),l*gm(h)),a.arc(0,0,l,h,d,!v),s>1e-12&&(a.moveTo(s*vm(d),s*gm(d)),a.arc(0,0,s,d,h,v));else{var b,y,g=h,_=d,m=h,x=d,w=p,S=p,M=u.apply(this,arguments)/2,E=M>1e-12&&(r?+r.apply(this,arguments):_m(s*s+l*l)),A=ym(dm(l-s)/2,+e.apply(this,arguments)),N=A,T=A;if(E>1e-12){var I=Mm(E/s*gm(M)),k=Mm(E/l*gm(M));(w-=2*I)>1e-12?(m+=I*=v?1:-1,x-=I):(w=0,m=x=(h+d)/2),(S-=2*k)>1e-12?(g+=k*=v?1:-1,_-=k):(S=0,g=_=(h+d)/2)}var C=l*vm(g),j=l*gm(g),O=s*vm(x),F=s*gm(x);if(A>1e-12){var P,z=l*vm(_),D=l*gm(_),R=s*vm(m),B=s*gm(m);if(p<mm&&(P=km(C,j,R,B,z,D,O,F))){var V=C-P[0],L=j-P[1],U=z-P[0],q=D-P[1],Y=1/gm(Sm((V*U+L*q)/(_m(V*V+L*L)*_m(U*U+q*q)))/2),H=_m(P[0]*P[0]+P[1]*P[1]);N=ym(A,(s-H)/(Y-1)),T=ym(A,(l-H)/(Y+1))}}S>1e-12?T>1e-12?(b=Cm(R,B,C,j,l,T,v),y=Cm(z,D,O,F,l,T,v),a.moveTo(b.cx+b.x01,b.cy+b.y01),T<A?a.arc(b.cx,b.cy,T,pm(b.y01,b.x01),pm(y.y01,y.x01),!v):(a.arc(b.cx,b.cy,T,pm(b.y01,b.x01),pm(b.y11,b.x11),!v),a.arc(0,0,l,pm(b.cy+b.y11,b.cx+b.x11),pm(y.cy+y.y11,y.cx+y.x11),!v),a.arc(y.cx,y.cy,T,pm(y.y11,y.x11),pm(y.y01,y.x01),!v))):(a.moveTo(C,j),a.arc(0,0,l,g,_,!v)):a.moveTo(C,j),s>1e-12&&w>1e-12?N>1e-12?(b=Cm(O,F,z,D,s,-N,v),y=Cm(C,j,R,B,s,-N,v),a.lineTo(b.cx+b.x01,b.cy+b.y01),N<A?a.arc(b.cx,b.cy,N,pm(b.y01,b.x01),pm(y.y01,y.x01),!v):(a.arc(b.cx,b.cy,N,pm(b.y01,b.x01),pm(b.y11,b.x11),!v),a.arc(0,0,s,pm(b.cy+b.y11,b.cx+b.x11),pm(y.cy+y.y11,y.cx+y.x11),v),a.arc(y.cx,y.cy,N,pm(y.y11,y.x11),pm(y.y01,y.x01),!v))):a.arc(0,0,s,x,m,v):a.lineTo(O,F)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-mm/2;return[vm(r)*e,gm(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:hm(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:hm(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:hm(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:hm(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:hm(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:hm(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c};function Om(t){this._context=t}Om.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Fm=function(t){return new Om(t)};function Pm(t){return t[0]}function zm(t){return t[1]}var Dm=function(){var t=Pm,n=zm,e=hm(!0),r=null,i=Fm,o=null;function u(u){var a,c,f,s=u.length,l=!1;for(null==r&&(o=i(f=qi())),a=0;a<=s;++a)!(a<s&&e(c=u[a],a,u))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,a,u),+n(c,a,u));if(f)return o=null,f+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:hm(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:hm(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u},Rm=function(){var t=Pm,n=null,e=hm(0),r=zm,i=hm(!0),o=null,u=Fm,a=null;function c(c){var f,s,l,h,d,p=c.length,v=!1,b=new Array(p),y=new Array(p);for(null==o&&(a=u(d=qi())),f=0;f<=p;++f){if(!(f<p&&i(h=c[f],f,c))===v)if(v=!v)s=f,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),l=f-1;l>=s;--l)a.point(b[l],y[l]);a.lineEnd(),a.areaEnd()}v&&(b[f]=+t(h,f,c),y[f]=+e(h,f,c),a.point(n?+n(h,f,c):b[f],r?+r(h,f,c):y[f]))}if(d)return a=null,d+""||null}function f(){return Dm().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:hm(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:hm(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:hm(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:hm(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:hm(+t),c):r},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(r)},c.lineX1=function(){return f().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:hm(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c},Bm=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},Vm=function(t){return t},Lm=function(){var t=Vm,n=Bm,e=null,r=hm(0),i=hm(wm),o=hm(0);function u(u){var a,c,f,s,l,h=u.length,d=0,p=new Array(h),v=new Array(h),b=+r.apply(this,arguments),y=Math.min(wm,Math.max(-wm,i.apply(this,arguments)-b)),g=Math.min(Math.abs(y)/h,o.apply(this,arguments)),_=g*(y<0?-1:1);for(a=0;a<h;++a)(l=v[p[a]=a]=+t(u[a],a,u))>0&&(d+=l);for(null!=n?p.sort((function(t,e){return n(v[t],v[e])})):null!=e&&p.sort((function(t,n){return e(u[t],u[n])})),a=0,f=d?(y-h*_)/d:0;a<h;++a,b=s)c=p[a],s=b+((l=v[c])>0?l*f:0)+_,v[c]={data:u[c],index:a,value:l,startAngle:b,endAngle:s,padAngle:g};return v}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:hm(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:hm(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:hm(+t),u):o},u},Um=Ym(Fm);function qm(t){this._curve=t}function Ym(t){function n(n){return new qm(t(n))}return n._curve=t,n}function Hm(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Ym(t)):n()._curve},t}qm.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var Wm=function(){return Hm(Dm().curve(Um))},$m=function(){var t=Rm().curve(Um),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Hm(e())},delete t.lineX0,t.lineEndAngle=function(){return Hm(r())},delete t.lineX1,t.lineInnerRadius=function(){return Hm(i())},delete t.lineY0,t.lineOuterRadius=function(){return Hm(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Ym(t)):n()._curve},t},Xm=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},Gm=Array.prototype.slice;function Zm(t){return t.source}function Km(t){return t.target}function Qm(t){var n=Zm,e=Km,r=Pm,i=zm,o=null;function u(){var u,a=Gm.call(arguments),c=n.apply(this,a),f=e.apply(this,a);if(o||(o=u=qi()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=f,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:hm(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:hm(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function Jm(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function tx(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function nx(t,n,e,r,i){var o=Xm(n,e),u=Xm(n,e=(e+i)/2),a=Xm(r,e),c=Xm(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function ex(){return Qm(Jm)}function rx(){return Qm(tx)}function ix(){var t=Qm(nx);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var ox={draw:function(t,n){var e=Math.sqrt(n/mm);t.moveTo(e,0),t.arc(0,0,e,0,wm)}},ux={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},ax=Math.sqrt(1/3),cx=2*ax,fx={draw:function(t,n){var e=Math.sqrt(n/cx),r=e*ax;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},sx=Math.sin(mm/10)/Math.sin(7*mm/10),lx=Math.sin(wm/10)*sx,hx=-Math.cos(wm/10)*sx,dx={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=lx*e,i=hx*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=wm*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},px={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},vx=Math.sqrt(3),bx={draw:function(t,n){var e=-Math.sqrt(n/(3*vx));t.moveTo(0,2*e),t.lineTo(-vx*e,-e),t.lineTo(vx*e,-e),t.closePath()}},yx=Math.sqrt(3)/2,gx=1/Math.sqrt(12),_x=3*(gx/2+1),mx={draw:function(t,n){var e=Math.sqrt(n/_x),r=e/2,i=e*gx,o=r,u=e*gx+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(-.5*r-yx*i,yx*r+-.5*i),t.lineTo(-.5*o-yx*u,yx*o+-.5*u),t.lineTo(-.5*a-yx*c,yx*a+-.5*c),t.lineTo(-.5*r+yx*i,-.5*i-yx*r),t.lineTo(-.5*o+yx*u,-.5*u-yx*o),t.lineTo(-.5*a+yx*c,-.5*c-yx*a),t.closePath()}},xx=[ox,ux,fx,px,dx,bx,mx],wx=function(){var t=hm(ox),n=hm(64),e=null;function r(){var r;if(e||(e=r=qi()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:hm(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:hm(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r},Sx=function(){};function Mx(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Ex(t){this._context=t}Ex.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Mx(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Mx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var Ax=function(t){return new Ex(t)};function Nx(t){this._context=t}Nx.prototype={areaStart:Sx,areaEnd:Sx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Mx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var Tx=function(t){return new Nx(t)};function Ix(t){this._context=t}Ix.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Mx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var kx=function(t){return new Ix(t)};function Cx(t,n){this._basis=new Ex(t),this._beta=n}Cx.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var jx=function t(n){function e(t){return 1===n?new Ex(t):new Cx(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function Ox(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Fx(t,n){this._context=t,this._k=(1-n)/6}Fx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ox(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Ox(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Px=function t(n){function e(t){return new Fx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function zx(t,n){this._context=t,this._k=(1-n)/6}zx.prototype={areaStart:Sx,areaEnd:Sx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ox(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Dx=function t(n){function e(t){return new zx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Rx(t,n){this._context=t,this._k=(1-n)/6}Rx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ox(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Bx=function t(n){function e(t){return new Rx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Vx(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>1e-12){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>1e-12){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/s,u=(u*f+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function Lx(t,n){this._context=t,this._alpha=n}Lx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Vx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ux=function t(n){function e(t){return n?new Lx(t,n):new Fx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function qx(t,n){this._context=t,this._alpha=n}qx.prototype={areaStart:Sx,areaEnd:Sx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Vx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Yx=function t(n){function e(t){return n?new qx(t,n):new zx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Hx(t,n){this._context=t,this._alpha=n}Hx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Vx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Wx=function t(n){function e(t){return n?new Hx(t,n):new Rx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function $x(t){this._context=t}$x.prototype={areaStart:Sx,areaEnd:Sx,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var Xx=function(t){return new $x(t)};function Gx(t){return t<0?-1:1}function Zx(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(Gx(o)+Gx(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function Kx(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Qx(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Jx(t){this._context=t}function tw(t){this._context=new nw(t)}function nw(t){this._context=t}function ew(t){return new Jx(t)}function rw(t){return new tw(t)}function iw(t){this._context=t}function ow(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}Jx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Qx(this,this._t0,Kx(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Qx(this,Kx(this,e=Zx(this,t,n)),e);break;default:Qx(this,this._t0,e=Zx(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(tw.prototype=Object.create(Jx.prototype)).point=function(t,n){Jx.prototype.point.call(this,n,t)},nw.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},iw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=ow(t),i=ow(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var uw=function(t){return new iw(t)};function aw(t,n){this._context=t,this._t=n}aw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var cw=function(t){return new aw(t,.5)};function fw(t){return new aw(t,0)}function sw(t){return new aw(t,1)}var lw=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},hw=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};function dw(t,n){return t[n]}var pw=function(){var t=hm([]),n=hw,e=lw,r=dw;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,f=a.length,s=new Array(f);for(o=0;o<f;++o){for(var l,h=a[o],d=s[o]=new Array(c),p=0;p<c;++p)d[p]=l=[0,+r(i[p],h,p,i)],l.data=i[p];d.key=h}for(o=0,u=n(s);o<f;++o)s[u[o]].index=o;return e(s,u),s}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:hm(Gm.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:hm(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?hw:"function"==typeof t?t:hm(Gm.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?lw:t,i):e},i},vw=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}lw(t,n)}},bw=function(t,n){if((a=t.length)>0)for(var e,r,i,o,u,a,c=0,f=t[n[0]].length;c<f;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):(r[0]=0,r[1]=i)},yw=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}lw(t,n)}},gw=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,f=0;a<i;++a){for(var s=t[n[a]],l=s[u][1]||0,h=(l-(s[u-1][1]||0))/2,d=0;d<a;++d){var p=t[n[d]];h+=(p[u][1]||0)-(p[u-1][1]||0)}c+=l,f+=h*l}e[u-1][1]+=e[u-1][0]=o,c&&(o-=f/c)}e[u-1][1]+=e[u-1][0]=o,lw(t,n)}},_w=function(t){var n=t.map(mw);return hw(t).sort((function(t,e){return n[t]-n[e]}))};function mw(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}var xw=function(t){var n=t.map(ww);return hw(t).sort((function(t,e){return n[t]-n[e]}))};function ww(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}var Sw=function(t){return xw(t).reverse()},Mw=function(t){var n,e,r=t.length,i=t.map(ww),o=_w(t),u=0,a=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],f.push(e));return f.reverse().concat(c)},Ew=function(t){return hw(t).reverse()};var Aw=Date.prototype.toISOString?function(t){return t.toISOString()}:Yb("%Y-%m-%dT%H:%M:%S.%LZ");var Nw=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:Hb("%Y-%m-%dT%H:%M:%S.%LZ"),Tw=function(t,n,e){var r=new Ye,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?Ue():+e,r.restart((function o(u){u+=i,r.restart(o,i+=n,e),t(u)}),n,e),r)},Iw=function(t){return function(){return t}};function kw(t){return t[0]}function Cw(t){return t[1]}function jw(){this._=null}function Ow(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Fw(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Pw(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function zw(t){for(;t.L;)t=t.L;return t}jw.prototype={constructor:jw,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=zw(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Fw(this,e),e=(t=e).U),e.C=!1,r.C=!0,Pw(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Pw(this,e),e=(t=e).U),e.C=!1,r.C=!0,Fw(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?zw(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Fw(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Pw(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Fw(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Pw(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Fw(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Pw(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Dw=jw;function Rw(t,n,e,r){var i=[null,null],o=cS.push(i)-1;return i.left=t,i.right=n,e&&Vw(i,t,n,e),r&&Vw(i,n,t,r),uS[t.index].halfedges.push(o),uS[n.index].halfedges.push(o),i}function Bw(t,n,e){var r=[n,e];return r.left=t,r}function Vw(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Lw(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],f=u[1],s=0,l=1,h=a[0]-c,d=a[1]-f;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}if(o=e-f,d||!(o>0)){if(o/=d,d<0){if(o<s)return;o<l&&(l=o)}else if(d>0){if(o>l)return;o>s&&(s=o)}if(o=i-f,d||!(o<0)){if(o/=d,d<0){if(o>l)return;o>s&&(s=o)}else if(d>0){if(o<s)return;o<l&&(l=o)}return!(s>0||l<1)||(s>0&&(t[0]=[c+s*h,f+s*d]),l<1&&(t[1]=[c+l*h,f+l*d]),!0)}}}}}function Uw(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],f=t.left,s=t.right,l=f[0],h=f[1],d=s[0],p=s[1],v=(l+d)/2,b=(h+p)/2;if(p===h){if(v<n||v>=r)return;if(l>d){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(a=b-(u=(l-d)/(p-h))*v,u<-1||u>1)if(l>d){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<p){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function qw(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Yw(t,n){return n[+(n.left!==t.site)]}function Hw(t,n){return n[+(n.left===t.site)]}var Ww,$w=[];function Xw(){Ow(this),this.x=this.y=this.arc=this.site=this.cy=null}function Gw(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,f=r[1]-a,s=o[0]-u,l=o[1]-a,h=2*(c*l-f*s);if(!(h>=-sS)){var d=c*c+f*f,p=s*s+l*l,v=(l*d-f*p)/h,b=(c*p-s*d)/h,y=$w.pop()||new Xw;y.arc=t,y.site=i,y.x=v+u,y.y=(y.cy=b+a)+Math.sqrt(v*v+b*b),t.circle=y;for(var g=null,_=aS._;_;)if(y.y<_.y||y.y===_.y&&y.x<=_.x){if(!_.L){g=_.P;break}_=_.L}else{if(!_.R){g=_;break}_=_.R}aS.insert(g,y),g||(Ww=y)}}}}function Zw(t){var n=t.circle;n&&(n.P||(Ww=n.N),aS.remove(n),$w.push(n),Ow(n),t.circle=null)}var Kw=[];function Qw(){Ow(this),this.edge=this.site=this.circle=null}function Jw(t){var n=Kw.pop()||new Qw;return n.site=t,n}function tS(t){Zw(t),oS.remove(t),Kw.push(t),Ow(t)}function nS(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];tS(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<fS&&Math.abs(r-c.circle.cy)<fS;)o=c.P,a.unshift(c),tS(c),c=o;a.unshift(c),Zw(c);for(var f=u;f.circle&&Math.abs(e-f.circle.x)<fS&&Math.abs(r-f.circle.cy)<fS;)u=f.N,a.push(f),tS(f),f=u;a.push(f),Zw(f);var s,l=a.length;for(s=1;s<l;++s)f=a[s],c=a[s-1],Vw(f.edge,c.site,f.site,i);c=a[0],(f=a[l-1]).edge=Rw(c.site,f.site,null,i),Gw(c),Gw(f)}function eS(t){for(var n,e,r,i,o=t[0],u=t[1],a=oS._;a;)if((r=rS(a,u)-o)>fS)a=a.L;else{if(!((i=o-iS(a,u))>fS)){r>-fS?(n=a.P,e=a):i>-fS?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){uS[t.index]={site:t,halfedges:[]}}(t);var c=Jw(t);if(oS.insert(n,c),n||e){if(n===e)return Zw(n),e=Jw(n.site),oS.insert(c,e),c.edge=e.edge=Rw(n.site,c.site),Gw(n),void Gw(e);if(e){Zw(n),Zw(e);var f=n.site,s=f[0],l=f[1],h=t[0]-s,d=t[1]-l,p=e.site,v=p[0]-s,b=p[1]-l,y=2*(h*b-d*v),g=h*h+d*d,_=v*v+b*b,m=[(b*g-d*_)/y+s,(h*_-v*g)/y+l];Vw(e.edge,f,p,m),c.edge=Rw(f,t,null,m),e.edge=Rw(t,p,null,m),Gw(n),Gw(e)}else c.edge=Rw(n.site,c.site)}}function rS(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],f=c-n;if(!f)return a;var s=a-r,l=1/o-1/f,h=s/f;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*f)-c+f/2+i-o/2)))/l+r:(r+a)/2}function iS(t,n){var e=t.N;if(e)return rS(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var oS,uS,aS,cS,fS=1e-6,sS=1e-12;function lS(t,n){return n[1]-t[1]||n[0]-t[0]}function hS(t,n){var e,r,i,o=t.sort(lS).pop();for(cS=[],uS=new Array(t.length),oS=new Dw,aS=new Dw;;)if(i=Ww,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(eS(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;nS(i.arc)}if(function(){for(var t,n,e,r,i=0,o=uS.length;i<o;++i)if((t=uS[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=qw(t,cS[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],f=+n[1][1];!function(t,n,e,r){for(var i,o=cS.length;o--;)Uw(i=cS[o],t,n,e,r)&&Lw(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>fS||Math.abs(i[0][1]-i[1][1])>fS)||delete cS[o]}(u,a,c,f),function(t,n,e,r){var i,o,u,a,c,f,s,l,h,d,p,v,b=uS.length,y=!0;for(i=0;i<b;++i)if(o=uS[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)cS[c[a]]||c.splice(a,1);for(a=0,f=c.length;a<f;)p=(d=Hw(o,cS[c[a]]))[0],v=d[1],l=(s=Yw(o,cS[c[++a%f]]))[0],h=s[1],(Math.abs(p-l)>fS||Math.abs(v-h)>fS)&&(c.splice(a,0,cS.push(Bw(u,d,Math.abs(p-t)<fS&&r-v>fS?[t,Math.abs(l-t)<fS?h:r]:Math.abs(v-r)<fS&&e-p>fS?[Math.abs(h-r)<fS?l:e,r]:Math.abs(p-e)<fS&&v-n>fS?[e,Math.abs(l-e)<fS?h:n]:Math.abs(v-n)<fS&&p-t>fS?[Math.abs(h-n)<fS?l:t,n]:null))-1),++f);f&&(y=!1)}if(y){var g,_,m,x=1/0;for(i=0,y=null;i<b;++i)(o=uS[i])&&(m=(g=(u=o.site)[0]-t)*g+(_=u[1]-n)*_)<x&&(x=m,y=o);if(y){var w=[t,n],S=[t,r],M=[e,r],E=[e,n];y.halfedges.push(cS.push(Bw(u=y.site,w,S))-1,cS.push(Bw(u,S,M))-1,cS.push(Bw(u,M,E))-1,cS.push(Bw(u,E,w))-1)}}for(i=0;i<b;++i)(o=uS[i])&&(o.halfedges.length||delete uS[i])}(u,a,c,f)}this.edges=cS,this.cells=uS,oS=aS=cS=uS=null}hS.prototype={constructor:hS,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Yw(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a,c,f,s=e.site,l=-1,h=n[i[o-1]],d=h.left===s?h.right:h.left;++l<o;)u=d,d=(h=n[i[l]]).left===s?h.right:h.left,u&&d&&r<u.index&&r<d.index&&(c=u,f=d,((a=s)[0]-f[0])*(c[1]-a[1])-(a[0]-c[0])*(f[1]-a[1])<0)&&t.push([s.data,u.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],f=n-i.site[1],s=c*c+f*f;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],f=n-a[1],l=c*c+f*f;l<s&&(s=l,u=a.index)}}))}while(null!==u);return o._found=r,null==e||s<=e*e?i.site:null}};var dS=function(){var t=kw,n=Cw,e=null;function r(r){return new hS(r.map((function(e,i){var o=[Math.round(t(e,i,r)/fS)*fS,Math.round(n(e,i,r)/fS)*fS];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:Iw(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:Iw(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r},pS=function(t){return function(){return t}};function vS(t,n,e){this.target=t,this.type=n,this.transform=e}function bS(t,n,e){this.k=t,this.x=n,this.y=e}bS.prototype={constructor:bS,scale:function(t){return 1===t?this:new bS(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new bS(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var yS=new bS(1,0,0);function gS(t){for(;!t.__zoom;)if(!(t=t.parentNode))return yS;return t.__zoom}function _S(){sn.stopImmediatePropagation()}gS.prototype=bS.prototype;var mS=function(){sn.preventDefault(),sn.stopImmediatePropagation()};function xS(){return!sn.ctrlKey&&!sn.button}function wS(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function SS(){return this.__zoom||yS}function MS(){return-sn.deltaY*(1===sn.deltaMode?.05:sn.deltaMode?1:.002)}function ES(){return navigator.maxTouchPoints||"ontouchstart"in this}function AS(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],u=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),u>o?(o+u)/2:Math.min(0,o)||Math.max(0,u))}var NS=function(){var t,n,e=xS,r=wS,i=AS,o=MS,u=ES,a=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],f=250,s=hp,l=lt("start","zoom","end"),h=0;function d(t){t.property("__zoom",SS).on("wheel.zoom",m).on("mousedown.zoom",x).on("dblclick.zoom",w).filter(u).on("touchstart.zoom",S).on("touchmove.zoom",M).on("touchend.zoom touchcancel.zoom",E).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(t,n){return(n=Math.max(a[0],Math.min(a[1],n)))===t.k?t:new bS(n,t.x,t.y)}function v(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new bS(t.k,r,i)}function b(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function y(t,n,e){t.on("start.zoom",(function(){g(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){g(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,o=g(t,i),u=r.apply(t,i),a=null==e?b(u):"function"==typeof e?e.apply(t,i):e,c=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),f=t.__zoom,l="function"==typeof n?n.apply(t,i):n,h=s(f.invert(a).concat(c/f.k),l.invert(a).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=h(t),e=c/n[2];t=new bS(e,a[0]-n[0]*e,a[1]-n[1]*e)}o.zoom(null,t)}}))}function g(t,n,e){return!e&&t.__zooming||new _(t,n)}function _(t,n){this.that=t,this.args=n,this.active=0,this.extent=r.apply(t,n),this.taps=0}function m(){if(e.apply(this,arguments)){var t=g(this,arguments),n=this.__zoom,r=Math.max(a[0],Math.min(a[1],n.k*Math.pow(2,o.apply(this,arguments)))),u=Oe(this);if(t.wheel)t.mouse[0][0]===u[0]&&t.mouse[0][1]===u[1]||(t.mouse[1]=n.invert(t.mouse[0]=u)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[u,n.invert(u)],ar(this),t.start()}mS(),t.wheel=setTimeout(f,150),t.zoom("mouse",i(v(p(n,r),t.mouse[0],t.mouse[1]),t.extent,c))}function f(){t.wheel=null,t.end()}}function x(){if(!n&&e.apply(this,arguments)){var t=g(this,arguments,!0),r=Mn(sn.view).on("mousemove.zoom",f,!0).on("mouseup.zoom",s,!0),o=Oe(this),u=sn.clientX,a=sn.clientY;Nn(sn.view),_S(),t.mouse=[o,this.__zoom.invert(o)],ar(this),t.start()}function f(){if(mS(),!t.moved){var n=sn.clientX-u,e=sn.clientY-a;t.moved=n*n+e*e>h}t.zoom("mouse",i(v(t.that.__zoom,t.mouse[0]=Oe(t.that),t.mouse[1]),t.extent,c))}function s(){r.on("mousemove.zoom mouseup.zoom",null),Tn(sn.view,t.moved),mS(),t.end()}}function w(){if(e.apply(this,arguments)){var t=this.__zoom,n=Oe(this),o=t.invert(n),u=t.k*(sn.shiftKey?.5:2),a=i(v(p(t,u),n,o),r.apply(this,arguments),c);mS(),f>0?Mn(this).transition().duration(f).call(y,a,n):Mn(this).call(d.transform,a)}}function S(){if(e.apply(this,arguments)){var n,r,i,o,u=sn.touches,a=u.length,c=g(this,arguments,sn.changedTouches.length===a);for(_S(),r=0;r<a;++r)i=u[r],o=[o=je(this,u,i.identifier),this.__zoom.invert(o),i.identifier],c.touch0?c.touch1||c.touch0[2]===o[2]||(c.touch1=o,c.taps=0):(c.touch0=o,n=!0,c.taps=1+!!t);t&&(t=clearTimeout(t)),n&&(c.taps<2&&(t=setTimeout((function(){t=null}),500)),ar(this),c.start())}}function M(){if(this.__zooming){var n,e,r,o,u=g(this,arguments),a=sn.changedTouches,f=a.length;for(mS(),t&&(t=clearTimeout(t)),u.taps=0,n=0;n<f;++n)e=a[n],r=je(this,a,e.identifier),u.touch0&&u.touch0[2]===e.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===e.identifier&&(u.touch1[0]=r);if(e=u.that.__zoom,u.touch1){var s=u.touch0[0],l=u.touch0[1],h=u.touch1[0],d=u.touch1[1],b=(b=h[0]-s[0])*b+(b=h[1]-s[1])*b,y=(y=d[0]-l[0])*y+(y=d[1]-l[1])*y;e=p(e,Math.sqrt(b/y)),r=[(s[0]+h[0])/2,(s[1]+h[1])/2],o=[(l[0]+d[0])/2,(l[1]+d[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],o=u.touch0[1]}u.zoom("touch",i(v(e,r,o),u.extent,c))}}function E(){if(this.__zooming){var t,e,r=g(this,arguments),i=sn.changedTouches,o=i.length;for(_S(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),500),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var u=Mn(this).on("dblclick.zoom");u&&u.apply(this,arguments)}}}return d.transform=function(t,n,e){var r=t.selection?t.selection():t;r.property("__zoom",SS),t!==r?y(t,n,e):r.interrupt().each((function(){g(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},d.scaleBy=function(t,n,e){d.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}),e)},d.scaleTo=function(t,n,e){d.transform(t,(function(){var t=r.apply(this,arguments),o=this.__zoom,u=null==e?b(t):"function"==typeof e?e.apply(this,arguments):e,a=o.invert(u),f="function"==typeof n?n.apply(this,arguments):n;return i(v(p(o,f),u,a),t,c)}),e)},d.translateBy=function(t,n,e){d.transform(t,(function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments),c)}))},d.translateTo=function(t,n,e,o){d.transform(t,(function(){var t=r.apply(this,arguments),u=this.__zoom,a=null==o?b(t):"function"==typeof o?o.apply(this,arguments):o;return i(yS.translate(a[0],a[1]).scale(u.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)}),o)},_.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){bn(new vS(d,t,this.that.__zoom),l.apply,l,[t,this.that,this.args])}},d.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:pS(+t),d):o},d.filter=function(t){return arguments.length?(e="function"==typeof t?t:pS(!!t),d):e},d.touchable=function(t){return arguments.length?(u="function"==typeof t?t:pS(!!t),d):u},d.extent=function(t){return arguments.length?(r="function"==typeof t?t:pS([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),d):r},d.scaleExtent=function(t){return arguments.length?(a[0]=+t[0],a[1]=+t[1],d):[a[0],a[1]]},d.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],d):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},d.constrain=function(t){return arguments.length?(i=t,d):i},d.duration=function(t){return arguments.length?(f=+t,d):f},d.interpolate=function(t){return arguments.length?(s=t,d):s},d.on=function(){var t=l.on.apply(l,arguments);return t===l?d:t},d.clickDistance=function(t){return arguments.length?(h=(t=+t)*t,d):Math.sqrt(h)},d}},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(n,e){void 0===e&&(e=t.now),this.SchedulerAction=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.SchedulerAction(this,t).schedule(e,n)},t.now=function(){return Date.now()},t}()},function(t,n,e){"use strict";e.d(n,"b",(function(){return c})),e.d(n,"a",(function(){return h}));var r=e(0),i=e(1),o=e(5),u=e(2),a=e(6);function c(t,n,e,r){return function(i){return i.lift(new f(t,n,e,r))}}var f=function(){function t(t,n,e,r){this.keySelector=t,this.elementSelector=n,this.durationSelector=e,this.subjectSelector=r}return t.prototype.call=function(t,n){return n.subscribe(new s(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),s=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.keySelector=e,u.elementSelector=r,u.durationSelector=i,u.subjectSelector=o,u.groups=null,u.attemptedToUnsubscribe=!1,u.count=0,u}return r.a(n,t),n.prototype._next=function(t){var n;try{n=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,n)},n.prototype._group=function(t,n){var e=this.groups;e||(e=this.groups=new Map);var r,i=e.get(n);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new a.a,e.set(n,i);var o=new h(n,i,this);if(this.destination.next(o),this.durationSelector){var u=void 0;try{u=this.durationSelector(new h(n,i))}catch(t){return void this.error(t)}this.add(u.subscribe(new l(n,i,this)))}}i.closed||i.next(r)},n.prototype._error=function(t){var n=this.groups;n&&(n.forEach((function(n,e){n.error(t)})),n.clear()),this.destination.error(t)},n.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,n){t.complete()})),t.clear()),this.destination.complete()},n.prototype.removeGroup=function(t){this.groups.delete(t)},n.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},n}(i.a),l=function(t){function n(n,e,r){var i=t.call(this,e)||this;return i.key=n,i.group=e,i.parent=r,i}return r.a(n,t),n.prototype._next=function(t){this.complete()},n.prototype._unsubscribe=function(){var t=this.parent,n=this.key;this.key=this.parent=null,t&&t.removeGroup(n)},n}(i.a),h=function(t){function n(n,e,r){var i=t.call(this)||this;return i.key=n,i.groupSubject=e,i.refCountSubscription=r,i}return r.a(n,t),n.prototype._subscribe=function(t){var n=new o.a,e=this.refCountSubscription,r=this.groupSubject;return e&&!e.closed&&n.add(new d(e)),n.add(r.subscribe(t)),n},n}(u.a),d=function(t){function n(n){var e=t.call(this)||this;return e.parent=n,n.count++,e}return r.a(n,t),n.prototype.unsubscribe=function(){var n=this.parent;n.closed||this.closed||(t.prototype.unsubscribe.call(this),n.count-=1,0===n.count&&n.attemptedToUnsubscribe&&n.unsubscribe())},n}(o.a)},function(t,n,e){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o="Expected a function",u="__lodash_placeholder__",a=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],c="[object Arguments]",f="[object Array]",s="[object Boolean]",l="[object Date]",h="[object Error]",d="[object Function]",p="[object GeneratorFunction]",v="[object Map]",b="[object Number]",y="[object Object]",g="[object RegExp]",_="[object Set]",m="[object String]",x="[object Symbol]",w="[object WeakMap]",S="[object ArrayBuffer]",M="[object DataView]",E="[object Float32Array]",A="[object Float64Array]",N="[object Int8Array]",T="[object Int16Array]",I="[object Int32Array]",k="[object Uint8Array]",C="[object Uint16Array]",j="[object Uint32Array]",O=/\b__p \+= '';/g,F=/\b(__p \+=) '' \+/g,P=/(__e\(.*?\)|\b__t\)) \+\n'';/g,z=/&(?:amp|lt|gt|quot|#39);/g,D=/[&<>"']/g,R=RegExp(z.source),B=RegExp(D.source),V=/<%-([\s\S]+?)%>/g,L=/<%([\s\S]+?)%>/g,U=/<%=([\s\S]+?)%>/g,q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Y=/^\w*$/,H=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,W=/[\\^$.*+?()[\]{}|]/g,$=RegExp(W.source),X=/^\s+|\s+$/g,G=/^\s+/,Z=/\s+$/,K=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Q=/\{\n\/\* \[wrapped with (.+)\] \*/,J=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,nt=/\\(\\)?/g,et=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,rt=/\w*$/,it=/^[-+]0x[0-9a-f]+$/i,ot=/^0b[01]+$/i,ut=/^\[object .+?Constructor\]$/,at=/^0o[0-7]+$/i,ct=/^(?:0|[1-9]\d*)$/,ft=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,st=/($^)/,lt=/['\n\r\u2028\u2029\\]/g,ht="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",dt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",pt="[\\ud800-\\udfff]",vt="["+dt+"]",bt="["+ht+"]",yt="\\d+",gt="[\\u2700-\\u27bf]",_t="[a-z\\xdf-\\xf6\\xf8-\\xff]",mt="[^\\ud800-\\udfff"+dt+yt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",xt="\\ud83c[\\udffb-\\udfff]",wt="[^\\ud800-\\udfff]",St="(?:\\ud83c[\\udde6-\\uddff]){2}",Mt="[\\ud800-\\udbff][\\udc00-\\udfff]",Et="[A-Z\\xc0-\\xd6\\xd8-\\xde]",At="(?:"+_t+"|"+mt+")",Nt="(?:"+Et+"|"+mt+")",Tt="(?:"+bt+"|"+xt+")"+"?",It="[\\ufe0e\\ufe0f]?"+Tt+("(?:\\u200d(?:"+[wt,St,Mt].join("|")+")[\\ufe0e\\ufe0f]?"+Tt+")*"),kt="(?:"+[gt,St,Mt].join("|")+")"+It,Ct="(?:"+[wt+bt+"?",bt,St,Mt,pt].join("|")+")",jt=RegExp("['’]","g"),Ot=RegExp(bt,"g"),Ft=RegExp(xt+"(?="+xt+")|"+Ct+It,"g"),Pt=RegExp([Et+"?"+_t+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[vt,Et,"$"].join("|")+")",Nt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[vt,Et+At,"$"].join("|")+")",Et+"?"+At+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Et+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",yt,kt].join("|"),"g"),zt=RegExp("[\\u200d\\ud800-\\udfff"+ht+"\\ufe0e\\ufe0f]"),Dt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Rt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Bt=-1,Vt={};Vt[E]=Vt[A]=Vt[N]=Vt[T]=Vt[I]=Vt[k]=Vt["[object Uint8ClampedArray]"]=Vt[C]=Vt[j]=!0,Vt[c]=Vt[f]=Vt[S]=Vt[s]=Vt[M]=Vt[l]=Vt[h]=Vt[d]=Vt[v]=Vt[b]=Vt[y]=Vt[g]=Vt[_]=Vt[m]=Vt[w]=!1;var Lt={};Lt[c]=Lt[f]=Lt[S]=Lt[M]=Lt[s]=Lt[l]=Lt[E]=Lt[A]=Lt[N]=Lt[T]=Lt[I]=Lt[v]=Lt[b]=Lt[y]=Lt[g]=Lt[_]=Lt[m]=Lt[x]=Lt[k]=Lt["[object Uint8ClampedArray]"]=Lt[C]=Lt[j]=!0,Lt[h]=Lt[d]=Lt[w]=!1;var Ut={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},qt=parseFloat,Yt=parseInt,Ht="object"==typeof t&&t&&t.Object===Object&&t,Wt="object"==typeof self&&self&&self.Object===Object&&self,$t=Ht||Wt||Function("return this")(),Xt=n&&!n.nodeType&&n,Gt=Xt&&"object"==typeof r&&r&&!r.nodeType&&r,Zt=Gt&&Gt.exports===Xt,Kt=Zt&&Ht.process,Qt=function(){try{var t=Gt&&Gt.require&&Gt.require("util").types;return t||Kt&&Kt.binding&&Kt.binding("util")}catch(t){}}(),Jt=Qt&&Qt.isArrayBuffer,tn=Qt&&Qt.isDate,nn=Qt&&Qt.isMap,en=Qt&&Qt.isRegExp,rn=Qt&&Qt.isSet,on=Qt&&Qt.isTypedArray;function un(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function an(t,n,e,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];n(r,u,e(u),t)}return r}function cn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function fn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function sn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function ln(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var u=t[e];n(u,e,t)&&(o[i++]=u)}return o}function hn(t,n){return!!(null==t?0:t.length)&&wn(t,n,0)>-1}function dn(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function pn(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function vn(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function bn(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}function yn(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function gn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var _n=An("length");function mn(t,n,e){var r;return e(t,(function(t,e,i){if(n(t,e,i))return r=e,!1})),r}function xn(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function wn(t,n,e){return n==n?function(t,n,e){var r=e-1,i=t.length;for(;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):xn(t,Mn,e)}function Sn(t,n,e,r){for(var i=e-1,o=t.length;++i<o;)if(r(t[i],n))return i;return-1}function Mn(t){return t!=t}function En(t,n){var e=null==t?0:t.length;return e?In(t,n)/e:NaN}function An(t){return function(n){return null==n?void 0:n[t]}}function Nn(t){return function(n){return null==t?void 0:t[n]}}function Tn(t,n,e,r,i){return i(t,(function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)})),e}function In(t,n){for(var e,r=-1,i=t.length;++r<i;){var o=n(t[r]);void 0!==o&&(e=void 0===e?o:e+o)}return e}function kn(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function Cn(t){return function(n){return t(n)}}function jn(t,n){return pn(n,(function(n){return t[n]}))}function On(t,n){return t.has(n)}function Fn(t,n){for(var e=-1,r=t.length;++e<r&&wn(n,t[e],0)>-1;);return e}function Pn(t,n){for(var e=t.length;e--&&wn(n,t[e],0)>-1;);return e}function zn(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}var Dn=Nn({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Rn=Nn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Bn(t){return"\\"+Ut[t]}function Vn(t){return zt.test(t)}function Ln(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function Un(t,n){return function(e){return t(n(e))}}function qn(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var a=t[e];a!==n&&a!==u||(t[e]=u,o[i++]=e)}return o}function Yn(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function Hn(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function Wn(t){return Vn(t)?function(t){var n=Ft.lastIndex=0;for(;Ft.test(t);)++n;return n}(t):_n(t)}function $n(t){return Vn(t)?function(t){return t.match(Ft)||[]}(t):function(t){return t.split("")}(t)}var Xn=Nn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Gn=function t(n){var e,r=(n=null==n?$t:Gn.defaults($t.Object(),n,Gn.pick($t,Rt))).Array,i=n.Date,ht=n.Error,dt=n.Function,pt=n.Math,vt=n.Object,bt=n.RegExp,yt=n.String,gt=n.TypeError,_t=r.prototype,mt=dt.prototype,xt=vt.prototype,wt=n["__core-js_shared__"],St=mt.toString,Mt=xt.hasOwnProperty,Et=0,At=(e=/[^.]+$/.exec(wt&&wt.keys&&wt.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",Nt=xt.toString,Tt=St.call(vt),It=$t._,kt=bt("^"+St.call(Mt).replace(W,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ct=Zt?n.Buffer:void 0,Ft=n.Symbol,zt=n.Uint8Array,Ut=Ct?Ct.allocUnsafe:void 0,Ht=Un(vt.getPrototypeOf,vt),Wt=vt.create,Xt=xt.propertyIsEnumerable,Gt=_t.splice,Kt=Ft?Ft.isConcatSpreadable:void 0,Qt=Ft?Ft.iterator:void 0,_n=Ft?Ft.toStringTag:void 0,Nn=function(){try{var t=Ji(vt,"defineProperty");return t({},"",{}),t}catch(t){}}(),Zn=n.clearTimeout!==$t.clearTimeout&&n.clearTimeout,Kn=i&&i.now!==$t.Date.now&&i.now,Qn=n.setTimeout!==$t.setTimeout&&n.setTimeout,Jn=pt.ceil,te=pt.floor,ne=vt.getOwnPropertySymbols,ee=Ct?Ct.isBuffer:void 0,re=n.isFinite,ie=_t.join,oe=Un(vt.keys,vt),ue=pt.max,ae=pt.min,ce=i.now,fe=n.parseInt,se=pt.random,le=_t.reverse,he=Ji(n,"DataView"),de=Ji(n,"Map"),pe=Ji(n,"Promise"),ve=Ji(n,"Set"),be=Ji(n,"WeakMap"),ye=Ji(vt,"create"),ge=be&&new be,_e={},me=No(he),xe=No(de),we=No(pe),Se=No(ve),Me=No(be),Ee=Ft?Ft.prototype:void 0,Ae=Ee?Ee.valueOf:void 0,Ne=Ee?Ee.toString:void 0;function Te(t){if(Yu(t)&&!Ou(t)&&!(t instanceof je)){if(t instanceof Ce)return t;if(Mt.call(t,"__wrapped__"))return To(t)}return new Ce(t)}var Ie=function(){function t(){}return function(n){if(!qu(n))return{};if(Wt)return Wt(n);t.prototype=n;var e=new t;return t.prototype=void 0,e}}();function ke(){}function Ce(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=void 0}function je(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Oe(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Fe(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Pe(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function ze(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new Pe;++n<e;)this.add(t[n])}function De(t){var n=this.__data__=new Fe(t);this.size=n.size}function Re(t,n){var e=Ou(t),r=!e&&ju(t),i=!e&&!r&&Du(t),o=!e&&!r&&!i&&Qu(t),u=e||r||i||o,a=u?kn(t.length,yt):[],c=a.length;for(var f in t)!n&&!Mt.call(t,f)||u&&("length"==f||i&&("offset"==f||"parent"==f)||o&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||uo(f,c))||a.push(f);return a}function Be(t){var n=t.length;return n?t[zr(0,n-1)]:void 0}function Ve(t,n){return Mo(yi(t),Ge(n,0,t.length))}function Le(t){return Mo(yi(t))}function Ue(t,n,e){(void 0!==e&&!Iu(t[n],e)||void 0===e&&!(n in t))&&$e(t,n,e)}function qe(t,n,e){var r=t[n];Mt.call(t,n)&&Iu(r,e)&&(void 0!==e||n in t)||$e(t,n,e)}function Ye(t,n){for(var e=t.length;e--;)if(Iu(t[e][0],n))return e;return-1}function He(t,n,e,r){return tr(t,(function(t,i,o){n(r,t,e(t),o)})),r}function We(t,n){return t&&gi(n,ma(n),t)}function $e(t,n,e){"__proto__"==n&&Nn?Nn(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function Xe(t,n){for(var e=-1,i=n.length,o=r(i),u=null==t;++e<i;)o[e]=u?void 0:va(t,n[e]);return o}function Ge(t,n,e){return t==t&&(void 0!==e&&(t=t<=e?t:e),void 0!==n&&(t=t>=n?t:n)),t}function Ze(t,n,e,r,i,o){var u,a=1&n,f=2&n,h=4&n;if(e&&(u=i?e(t,r,i,o):e(t)),void 0!==u)return u;if(!qu(t))return t;var w=Ou(t);if(w){if(u=function(t){var n=t.length,e=new t.constructor(n);n&&"string"==typeof t[0]&&Mt.call(t,"index")&&(e.index=t.index,e.input=t.input);return e}(t),!a)return yi(t,u)}else{var O=eo(t),F=O==d||O==p;if(Du(t))return li(t,a);if(O==y||O==c||F&&!i){if(u=f||F?{}:io(t),!a)return f?function(t,n){return gi(t,no(t),n)}(t,function(t,n){return t&&gi(n,xa(n),t)}(u,t)):function(t,n){return gi(t,to(t),n)}(t,We(u,t))}else{if(!Lt[O])return i?t:{};u=function(t,n,e){var r=t.constructor;switch(n){case S:return hi(t);case s:case l:return new r(+t);case M:return function(t,n){var e=n?hi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case E:case A:case N:case T:case I:case k:case"[object Uint8ClampedArray]":case C:case j:return di(t,e);case v:return new r;case b:case m:return new r(t);case g:return function(t){var n=new t.constructor(t.source,rt.exec(t));return n.lastIndex=t.lastIndex,n}(t);case _:return new r;case x:return i=t,Ae?vt(Ae.call(i)):{}}var i}(t,O,a)}}o||(o=new De);var P=o.get(t);if(P)return P;o.set(t,u),Gu(t)?t.forEach((function(r){u.add(Ze(r,n,e,r,t,o))})):Hu(t)&&t.forEach((function(r,i){u.set(i,Ze(r,n,e,i,t,o))}));var z=w?void 0:(h?f?Wi:Hi:f?xa:ma)(t);return cn(z||t,(function(r,i){z&&(r=t[i=r]),qe(u,i,Ze(r,n,e,i,t,o))})),u}function Ke(t,n,e){var r=e.length;if(null==t)return!r;for(t=vt(t);r--;){var i=e[r],o=n[i],u=t[i];if(void 0===u&&!(i in t)||!o(u))return!1}return!0}function Qe(t,n,e){if("function"!=typeof t)throw new gt(o);return mo((function(){t.apply(void 0,e)}),n)}function Je(t,n,e,r){var i=-1,o=hn,u=!0,a=t.length,c=[],f=n.length;if(!a)return c;e&&(n=pn(n,Cn(e))),r?(o=dn,u=!1):n.length>=200&&(o=On,u=!1,n=new ze(n));t:for(;++i<a;){var s=t[i],l=null==e?s:e(s);if(s=r||0!==s?s:0,u&&l==l){for(var h=f;h--;)if(n[h]===l)continue t;c.push(s)}else o(n,l,r)||c.push(s)}return c}Te.templateSettings={escape:V,evaluate:L,interpolate:U,variable:"",imports:{_:Te}},Te.prototype=ke.prototype,Te.prototype.constructor=Te,Ce.prototype=Ie(ke.prototype),Ce.prototype.constructor=Ce,je.prototype=Ie(ke.prototype),je.prototype.constructor=je,Oe.prototype.clear=function(){this.__data__=ye?ye(null):{},this.size=0},Oe.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},Oe.prototype.get=function(t){var n=this.__data__;if(ye){var e=n[t];return"__lodash_hash_undefined__"===e?void 0:e}return Mt.call(n,t)?n[t]:void 0},Oe.prototype.has=function(t){var n=this.__data__;return ye?void 0!==n[t]:Mt.call(n,t)},Oe.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=ye&&void 0===n?"__lodash_hash_undefined__":n,this},Fe.prototype.clear=function(){this.__data__=[],this.size=0},Fe.prototype.delete=function(t){var n=this.__data__,e=Ye(n,t);return!(e<0)&&(e==n.length-1?n.pop():Gt.call(n,e,1),--this.size,!0)},Fe.prototype.get=function(t){var n=this.__data__,e=Ye(n,t);return e<0?void 0:n[e][1]},Fe.prototype.has=function(t){return Ye(this.__data__,t)>-1},Fe.prototype.set=function(t,n){var e=this.__data__,r=Ye(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},Pe.prototype.clear=function(){this.size=0,this.__data__={hash:new Oe,map:new(de||Fe),string:new Oe}},Pe.prototype.delete=function(t){var n=Ki(this,t).delete(t);return this.size-=n?1:0,n},Pe.prototype.get=function(t){return Ki(this,t).get(t)},Pe.prototype.has=function(t){return Ki(this,t).has(t)},Pe.prototype.set=function(t,n){var e=Ki(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},ze.prototype.add=ze.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},ze.prototype.has=function(t){return this.__data__.has(t)},De.prototype.clear=function(){this.__data__=new Fe,this.size=0},De.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},De.prototype.get=function(t){return this.__data__.get(t)},De.prototype.has=function(t){return this.__data__.has(t)},De.prototype.set=function(t,n){var e=this.__data__;if(e instanceof Fe){var r=e.__data__;if(!de||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new Pe(r)}return e.set(t,n),this.size=e.size,this};var tr=xi(cr),nr=xi(fr,!0);function er(t,n){var e=!0;return tr(t,(function(t,r,i){return e=!!n(t,r,i)})),e}function rr(t,n,e){for(var r=-1,i=t.length;++r<i;){var o=t[r],u=n(o);if(null!=u&&(void 0===a?u==u&&!Ku(u):e(u,a)))var a=u,c=o}return c}function ir(t,n){var e=[];return tr(t,(function(t,r,i){n(t,r,i)&&e.push(t)})),e}function or(t,n,e,r,i){var o=-1,u=t.length;for(e||(e=oo),i||(i=[]);++o<u;){var a=t[o];n>0&&e(a)?n>1?or(a,n-1,e,r,i):vn(i,a):r||(i[i.length]=a)}return i}var ur=wi(),ar=wi(!0);function cr(t,n){return t&&ur(t,n,ma)}function fr(t,n){return t&&ar(t,n,ma)}function sr(t,n){return ln(n,(function(n){return Vu(t[n])}))}function lr(t,n){for(var e=0,r=(n=ai(n,t)).length;null!=t&&e<r;)t=t[Ao(n[e++])];return e&&e==r?t:void 0}function hr(t,n,e){var r=n(t);return Ou(t)?r:vn(r,e(t))}function dr(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":_n&&_n in vt(t)?function(t){var n=Mt.call(t,_n),e=t[_n];try{t[_n]=void 0;var r=!0}catch(t){}var i=Nt.call(t);r&&(n?t[_n]=e:delete t[_n]);return i}(t):function(t){return Nt.call(t)}(t)}function pr(t,n){return t>n}function vr(t,n){return null!=t&&Mt.call(t,n)}function br(t,n){return null!=t&&n in vt(t)}function yr(t,n,e){for(var i=e?dn:hn,o=t[0].length,u=t.length,a=u,c=r(u),f=1/0,s=[];a--;){var l=t[a];a&&n&&(l=pn(l,Cn(n))),f=ae(l.length,f),c[a]=!e&&(n||o>=120&&l.length>=120)?new ze(a&&l):void 0}l=t[0];var h=-1,d=c[0];t:for(;++h<o&&s.length<f;){var p=l[h],v=n?n(p):p;if(p=e||0!==p?p:0,!(d?On(d,v):i(s,v,e))){for(a=u;--a;){var b=c[a];if(!(b?On(b,v):i(t[a],v,e)))continue t}d&&d.push(v),s.push(p)}}return s}function gr(t,n,e){var r=null==(t=bo(t,n=ai(n,t)))?t:t[Ao(Bo(n))];return null==r?void 0:un(r,t,e)}function _r(t){return Yu(t)&&dr(t)==c}function mr(t,n,e,r,i){return t===n||(null==t||null==n||!Yu(t)&&!Yu(n)?t!=t&&n!=n:function(t,n,e,r,i,o){var u=Ou(t),a=Ou(n),d=u?f:eo(t),p=a?f:eo(n),w=(d=d==c?y:d)==y,E=(p=p==c?y:p)==y,A=d==p;if(A&&Du(t)){if(!Du(n))return!1;u=!0,w=!1}if(A&&!w)return o||(o=new De),u||Qu(t)?qi(t,n,e,r,i,o):function(t,n,e,r,i,o,u){switch(e){case M:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case S:return!(t.byteLength!=n.byteLength||!o(new zt(t),new zt(n)));case s:case l:case b:return Iu(+t,+n);case h:return t.name==n.name&&t.message==n.message;case g:case m:return t==n+"";case v:var a=Ln;case _:var c=1&r;if(a||(a=Yn),t.size!=n.size&&!c)return!1;var f=u.get(t);if(f)return f==n;r|=2,u.set(t,n);var d=qi(a(t),a(n),r,i,o,u);return u.delete(t),d;case x:if(Ae)return Ae.call(t)==Ae.call(n)}return!1}(t,n,d,e,r,i,o);if(!(1&e)){var N=w&&Mt.call(t,"__wrapped__"),T=E&&Mt.call(n,"__wrapped__");if(N||T){var I=N?t.value():t,k=T?n.value():n;return o||(o=new De),i(I,k,e,r,o)}}if(!A)return!1;return o||(o=new De),function(t,n,e,r,i,o){var u=1&e,a=Hi(t),c=a.length,f=Hi(n).length;if(c!=f&&!u)return!1;var s=c;for(;s--;){var l=a[s];if(!(u?l in n:Mt.call(n,l)))return!1}var h=o.get(t);if(h&&o.get(n))return h==n;var d=!0;o.set(t,n),o.set(n,t);var p=u;for(;++s<c;){l=a[s];var v=t[l],b=n[l];if(r)var y=u?r(b,v,l,n,t,o):r(v,b,l,t,n,o);if(!(void 0===y?v===b||i(v,b,e,r,o):y)){d=!1;break}p||(p="constructor"==l)}if(d&&!p){var g=t.constructor,_=n.constructor;g==_||!("constructor"in t)||!("constructor"in n)||"function"==typeof g&&g instanceof g&&"function"==typeof _&&_ instanceof _||(d=!1)}return o.delete(t),o.delete(n),d}(t,n,e,r,i,o)}(t,n,e,r,mr,i))}function xr(t,n,e,r){var i=e.length,o=i,u=!r;if(null==t)return!o;for(t=vt(t);i--;){var a=e[i];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<o;){var c=(a=e[i])[0],f=t[c],s=a[1];if(u&&a[2]){if(void 0===f&&!(c in t))return!1}else{var l=new De;if(r)var h=r(f,s,c,t,n,l);if(!(void 0===h?mr(s,f,3,r,l):h))return!1}}return!0}function wr(t){return!(!qu(t)||(n=t,At&&At in n))&&(Vu(t)?kt:ut).test(No(t));var n}function Sr(t){return"function"==typeof t?t:null==t?Wa:"object"==typeof t?Ou(t)?Ir(t[0],t[1]):Tr(t):nc(t)}function Mr(t){if(!lo(t))return oe(t);var n=[];for(var e in vt(t))Mt.call(t,e)&&"constructor"!=e&&n.push(e);return n}function Er(t){if(!qu(t))return function(t){var n=[];if(null!=t)for(var e in vt(t))n.push(e);return n}(t);var n=lo(t),e=[];for(var r in t)("constructor"!=r||!n&&Mt.call(t,r))&&e.push(r);return e}function Ar(t,n){return t<n}function Nr(t,n){var e=-1,i=Pu(t)?r(t.length):[];return tr(t,(function(t,r,o){i[++e]=n(t,r,o)})),i}function Tr(t){var n=Qi(t);return 1==n.length&&n[0][2]?po(n[0][0],n[0][1]):function(e){return e===t||xr(e,t,n)}}function Ir(t,n){return co(t)&&ho(n)?po(Ao(t),n):function(e){var r=va(e,t);return void 0===r&&r===n?ba(e,t):mr(n,r,3)}}function kr(t,n,e,r,i){t!==n&&ur(n,(function(o,u){if(i||(i=new De),qu(o))!function(t,n,e,r,i,o,u){var a=go(t,e),c=go(n,e),f=u.get(c);if(f)return void Ue(t,e,f);var s=o?o(a,c,e+"",t,n,u):void 0,l=void 0===s;if(l){var h=Ou(c),d=!h&&Du(c),p=!h&&!d&&Qu(c);s=c,h||d||p?Ou(a)?s=a:zu(a)?s=yi(a):d?(l=!1,s=li(c,!0)):p?(l=!1,s=di(c,!0)):s=[]:$u(c)||ju(c)?(s=a,ju(a)?s=ua(a):qu(a)&&!Vu(a)||(s=io(c))):l=!1}l&&(u.set(c,s),i(s,c,r,o,u),u.delete(c));Ue(t,e,s)}(t,n,u,e,kr,r,i);else{var a=r?r(go(t,u),o,u+"",t,n,i):void 0;void 0===a&&(a=o),Ue(t,u,a)}}),xa)}function Cr(t,n){var e=t.length;if(e)return uo(n+=n<0?e:0,e)?t[n]:void 0}function jr(t,n,e){var r=-1;return n=pn(n.length?n:[Wa],Cn(Zi())),function(t,n){var e=t.length;for(t.sort(n);e--;)t[e]=t[e].value;return t}(Nr(t,(function(t,e,i){return{criteria:pn(n,(function(n){return n(t)})),index:++r,value:t}})),(function(t,n){return function(t,n,e){var r=-1,i=t.criteria,o=n.criteria,u=i.length,a=e.length;for(;++r<u;){var c=pi(i[r],o[r]);if(c){if(r>=a)return c;var f=e[r];return c*("desc"==f?-1:1)}}return t.index-n.index}(t,n,e)}))}function Or(t,n,e){for(var r=-1,i=n.length,o={};++r<i;){var u=n[r],a=lr(t,u);e(a,u)&&Lr(o,ai(u,t),a)}return o}function Fr(t,n,e,r){var i=r?Sn:wn,o=-1,u=n.length,a=t;for(t===n&&(n=yi(n)),e&&(a=pn(t,Cn(e)));++o<u;)for(var c=0,f=n[o],s=e?e(f):f;(c=i(a,s,c,r))>-1;)a!==t&&Gt.call(a,c,1),Gt.call(t,c,1);return t}function Pr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==o){var o=i;uo(i)?Gt.call(t,i,1):Jr(t,i)}}return t}function zr(t,n){return t+te(se()*(n-t+1))}function Dr(t,n){var e="";if(!t||n<1||n>9007199254740991)return e;do{n%2&&(e+=t),(n=te(n/2))&&(t+=t)}while(n);return e}function Rr(t,n){return xo(vo(t,n,Wa),t+"")}function Br(t){return Be(Ia(t))}function Vr(t,n){var e=Ia(t);return Mo(e,Ge(n,0,e.length))}function Lr(t,n,e,r){if(!qu(t))return t;for(var i=-1,o=(n=ai(n,t)).length,u=o-1,a=t;null!=a&&++i<o;){var c=Ao(n[i]),f=e;if(i!=u){var s=a[c];void 0===(f=r?r(s,c,a):void 0)&&(f=qu(s)?s:uo(n[i+1])?[]:{})}qe(a,c,f),a=a[c]}return t}var Ur=ge?function(t,n){return ge.set(t,n),t}:Wa,qr=Nn?function(t,n){return Nn(t,"toString",{configurable:!0,enumerable:!1,value:qa(n),writable:!0})}:Wa;function Yr(t){return Mo(Ia(t))}function Hr(t,n,e){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var u=r(o);++i<o;)u[i]=t[i+n];return u}function Wr(t,n){var e;return tr(t,(function(t,r,i){return!(e=n(t,r,i))})),!!e}function $r(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;r<i;){var o=r+i>>>1,u=t[o];null!==u&&!Ku(u)&&(e?u<=n:u<n)?r=o+1:i=o}return i}return Xr(t,n,Wa,e)}function Xr(t,n,e,r){n=e(n);for(var i=0,o=null==t?0:t.length,u=n!=n,a=null===n,c=Ku(n),f=void 0===n;i<o;){var s=te((i+o)/2),l=e(t[s]),h=void 0!==l,d=null===l,p=l==l,v=Ku(l);if(u)var b=r||p;else b=f?p&&(r||h):a?p&&h&&(r||!d):c?p&&h&&!d&&(r||!v):!d&&!v&&(r?l<=n:l<n);b?i=s+1:o=s}return ae(o,4294967294)}function Gr(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e],a=n?n(u):u;if(!e||!Iu(a,c)){var c=a;o[i++]=0===u?0:u}}return o}function Zr(t){return"number"==typeof t?t:Ku(t)?NaN:+t}function Kr(t){if("string"==typeof t)return t;if(Ou(t))return pn(t,Kr)+"";if(Ku(t))return Ne?Ne.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Qr(t,n,e){var r=-1,i=hn,o=t.length,u=!0,a=[],c=a;if(e)u=!1,i=dn;else if(o>=200){var f=n?null:Di(t);if(f)return Yn(f);u=!1,i=On,c=new ze}else c=n?[]:a;t:for(;++r<o;){var s=t[r],l=n?n(s):s;if(s=e||0!==s?s:0,u&&l==l){for(var h=c.length;h--;)if(c[h]===l)continue t;n&&c.push(l),a.push(s)}else i(c,l,e)||(c!==a&&c.push(l),a.push(s))}return a}function Jr(t,n){return null==(t=bo(t,n=ai(n,t)))||delete t[Ao(Bo(n))]}function ti(t,n,e,r){return Lr(t,n,e(lr(t,n)),r)}function ni(t,n,e,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&n(t[o],o,t););return e?Hr(t,r?0:o,r?o+1:i):Hr(t,r?o+1:0,r?i:o)}function ei(t,n){var e=t;return e instanceof je&&(e=e.value()),bn(n,(function(t,n){return n.func.apply(n.thisArg,vn([t],n.args))}),e)}function ri(t,n,e){var i=t.length;if(i<2)return i?Qr(t[0]):[];for(var o=-1,u=r(i);++o<i;)for(var a=t[o],c=-1;++c<i;)c!=o&&(u[o]=Je(u[o]||a,t[c],n,e));return Qr(or(u,1),n,e)}function ii(t,n,e){for(var r=-1,i=t.length,o=n.length,u={};++r<i;){var a=r<o?n[r]:void 0;e(u,t[r],a)}return u}function oi(t){return zu(t)?t:[]}function ui(t){return"function"==typeof t?t:Wa}function ai(t,n){return Ou(t)?t:co(t,n)?[t]:Eo(aa(t))}var ci=Rr;function fi(t,n,e){var r=t.length;return e=void 0===e?r:e,!n&&e>=r?t:Hr(t,n,e)}var si=Zn||function(t){return $t.clearTimeout(t)};function li(t,n){if(n)return t.slice();var e=t.length,r=Ut?Ut(e):new t.constructor(e);return t.copy(r),r}function hi(t){var n=new t.constructor(t.byteLength);return new zt(n).set(new zt(t)),n}function di(t,n){var e=n?hi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function pi(t,n){if(t!==n){var e=void 0!==t,r=null===t,i=t==t,o=Ku(t),u=void 0!==n,a=null===n,c=n==n,f=Ku(n);if(!a&&!f&&!o&&t>n||o&&u&&c&&!a&&!f||r&&u&&c||!e&&c||!i)return 1;if(!r&&!o&&!f&&t<n||f&&e&&i&&!r&&!o||a&&e&&i||!u&&i||!c)return-1}return 0}function vi(t,n,e,i){for(var o=-1,u=t.length,a=e.length,c=-1,f=n.length,s=ue(u-a,0),l=r(f+s),h=!i;++c<f;)l[c]=n[c];for(;++o<a;)(h||o<u)&&(l[e[o]]=t[o]);for(;s--;)l[c++]=t[o++];return l}function bi(t,n,e,i){for(var o=-1,u=t.length,a=-1,c=e.length,f=-1,s=n.length,l=ue(u-c,0),h=r(l+s),d=!i;++o<l;)h[o]=t[o];for(var p=o;++f<s;)h[p+f]=n[f];for(;++a<c;)(d||o<u)&&(h[p+e[a]]=t[o++]);return h}function yi(t,n){var e=-1,i=t.length;for(n||(n=r(i));++e<i;)n[e]=t[e];return n}function gi(t,n,e,r){var i=!e;e||(e={});for(var o=-1,u=n.length;++o<u;){var a=n[o],c=r?r(e[a],t[a],a,e,t):void 0;void 0===c&&(c=t[a]),i?$e(e,a,c):qe(e,a,c)}return e}function _i(t,n){return function(e,r){var i=Ou(e)?an:He,o=n?n():{};return i(e,t,Zi(r,2),o)}}function mi(t){return Rr((function(n,e){var r=-1,i=e.length,o=i>1?e[i-1]:void 0,u=i>2?e[2]:void 0;for(o=t.length>3&&"function"==typeof o?(i--,o):void 0,u&&ao(e[0],e[1],u)&&(o=i<3?void 0:o,i=1),n=vt(n);++r<i;){var a=e[r];a&&t(n,a,r,o)}return n}))}function xi(t,n){return function(e,r){if(null==e)return e;if(!Pu(e))return t(e,r);for(var i=e.length,o=n?i:-1,u=vt(e);(n?o--:++o<i)&&!1!==r(u[o],o,u););return e}}function wi(t){return function(n,e,r){for(var i=-1,o=vt(n),u=r(n),a=u.length;a--;){var c=u[t?a:++i];if(!1===e(o[c],c,o))break}return n}}function Si(t){return function(n){var e=Vn(n=aa(n))?$n(n):void 0,r=e?e[0]:n.charAt(0),i=e?fi(e,1).join(""):n.slice(1);return r[t]()+i}}function Mi(t){return function(n){return bn(Va(ja(n).replace(jt,"")),t,"")}}function Ei(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=Ie(t.prototype),r=t.apply(e,n);return qu(r)?r:e}}function Ai(t){return function(n,e,r){var i=vt(n);if(!Pu(n)){var o=Zi(e,3);n=ma(n),e=function(t){return o(i[t],t,i)}}var u=t(n,e,r);return u>-1?i[o?n[u]:u]:void 0}}function Ni(t){return Yi((function(n){var e=n.length,r=e,i=Ce.prototype.thru;for(t&&n.reverse();r--;){var u=n[r];if("function"!=typeof u)throw new gt(o);if(i&&!a&&"wrapper"==Xi(u))var a=new Ce([],!0)}for(r=a?r:e;++r<e;){var c=Xi(u=n[r]),f="wrapper"==c?$i(u):void 0;a=f&&fo(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?a[Xi(f[0])].apply(a,f[3]):1==u.length&&fo(u)?a[c]():a.thru(u)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&Ou(r))return a.plant(r).value();for(var i=0,o=e?n[i].apply(this,t):r;++i<e;)o=n[i].call(this,o);return o}}))}function Ti(t,n,e,i,o,u,a,c,f,s){var l=128&n,h=1&n,d=2&n,p=24&n,v=512&n,b=d?void 0:Ei(t);return function y(){for(var g=arguments.length,_=r(g),m=g;m--;)_[m]=arguments[m];if(p)var x=Gi(y),w=zn(_,x);if(i&&(_=vi(_,i,o,p)),u&&(_=bi(_,u,a,p)),g-=w,p&&g<s){var S=qn(_,x);return Pi(t,n,Ti,y.placeholder,e,_,S,c,f,s-g)}var M=h?e:this,E=d?M[t]:t;return g=_.length,c?_=yo(_,c):v&&g>1&&_.reverse(),l&&f<g&&(_.length=f),this&&this!==$t&&this instanceof y&&(E=b||Ei(E)),E.apply(M,_)}}function Ii(t,n){return function(e,r){return function(t,n,e,r){return cr(t,(function(t,i,o){n(r,e(t),i,o)})),r}(e,t,n(r),{})}}function ki(t,n){return function(e,r){var i;if(void 0===e&&void 0===r)return n;if(void 0!==e&&(i=e),void 0!==r){if(void 0===i)return r;"string"==typeof e||"string"==typeof r?(e=Kr(e),r=Kr(r)):(e=Zr(e),r=Zr(r)),i=t(e,r)}return i}}function Ci(t){return Yi((function(n){return n=pn(n,Cn(Zi())),Rr((function(e){var r=this;return t(n,(function(t){return un(t,r,e)}))}))}))}function ji(t,n){var e=(n=void 0===n?" ":Kr(n)).length;if(e<2)return e?Dr(n,t):n;var r=Dr(n,Jn(t/Wn(n)));return Vn(n)?fi($n(r),0,t).join(""):r.slice(0,t)}function Oi(t){return function(n,e,i){return i&&"number"!=typeof i&&ao(n,e,i)&&(e=i=void 0),n=ea(n),void 0===e?(e=n,n=0):e=ea(e),function(t,n,e,i){for(var o=-1,u=ue(Jn((n-t)/(e||1)),0),a=r(u);u--;)a[i?u:++o]=t,t+=e;return a}(n,e,i=void 0===i?n<e?1:-1:ea(i),t)}}function Fi(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=oa(n),e=oa(e)),t(n,e)}}function Pi(t,n,e,r,i,o,u,a,c,f){var s=8&n;n|=s?32:64,4&(n&=~(s?64:32))||(n&=-4);var l=[t,n,i,s?o:void 0,s?u:void 0,s?void 0:o,s?void 0:u,a,c,f],h=e.apply(void 0,l);return fo(t)&&_o(h,l),h.placeholder=r,wo(h,t,n)}function zi(t){var n=pt[t];return function(t,e){if(t=oa(t),(e=null==e?0:ae(ra(e),292))&&re(t)){var r=(aa(t)+"e").split("e");return+((r=(aa(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Di=ve&&1/Yn(new ve([,-0]))[1]==1/0?function(t){return new ve(t)}:Ka;function Ri(t){return function(n){var e=eo(n);return e==v?Ln(n):e==_?Hn(n):function(t,n){return pn(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function Bi(t,n,e,i,a,c,f,s){var l=2&n;if(!l&&"function"!=typeof t)throw new gt(o);var h=i?i.length:0;if(h||(n&=-97,i=a=void 0),f=void 0===f?f:ue(ra(f),0),s=void 0===s?s:ra(s),h-=a?a.length:0,64&n){var d=i,p=a;i=a=void 0}var v=l?void 0:$i(t),b=[t,n,e,i,a,d,p,c,f,s];if(v&&function(t,n){var e=t[1],r=n[1],i=e|r,o=i<131,a=128==r&&8==e||128==r&&256==e&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!o&&!a)return t;1&r&&(t[2]=n[2],i|=1&e?0:4);var c=n[3];if(c){var f=t[3];t[3]=f?vi(f,c,n[4]):c,t[4]=f?qn(t[3],u):n[4]}(c=n[5])&&(f=t[5],t[5]=f?bi(f,c,n[6]):c,t[6]=f?qn(t[5],u):n[6]);(c=n[7])&&(t[7]=c);128&r&&(t[8]=null==t[8]?n[8]:ae(t[8],n[8]));null==t[9]&&(t[9]=n[9]);t[0]=n[0],t[1]=i}(b,v),t=b[0],n=b[1],e=b[2],i=b[3],a=b[4],!(s=b[9]=void 0===b[9]?l?0:t.length:ue(b[9]-h,0))&&24&n&&(n&=-25),n&&1!=n)y=8==n||16==n?function(t,n,e){var i=Ei(t);return function o(){for(var u=arguments.length,a=r(u),c=u,f=Gi(o);c--;)a[c]=arguments[c];var s=u<3&&a[0]!==f&&a[u-1]!==f?[]:qn(a,f);if((u-=s.length)<e)return Pi(t,n,Ti,o.placeholder,void 0,a,s,void 0,void 0,e-u);var l=this&&this!==$t&&this instanceof o?i:t;return un(l,this,a)}}(t,n,s):32!=n&&33!=n||a.length?Ti.apply(void 0,b):function(t,n,e,i){var o=1&n,u=Ei(t);return function n(){for(var a=-1,c=arguments.length,f=-1,s=i.length,l=r(s+c),h=this&&this!==$t&&this instanceof n?u:t;++f<s;)l[f]=i[f];for(;c--;)l[f++]=arguments[++a];return un(h,o?e:this,l)}}(t,n,e,i);else var y=function(t,n,e){var r=1&n,i=Ei(t);return function n(){var o=this&&this!==$t&&this instanceof n?i:t;return o.apply(r?e:this,arguments)}}(t,n,e);return wo((v?Ur:_o)(y,b),t,n)}function Vi(t,n,e,r){return void 0===t||Iu(t,xt[e])&&!Mt.call(r,e)?n:t}function Li(t,n,e,r,i,o){return qu(t)&&qu(n)&&(o.set(n,t),kr(t,n,void 0,Li,o),o.delete(n)),t}function Ui(t){return $u(t)?void 0:t}function qi(t,n,e,r,i,o){var u=1&e,a=t.length,c=n.length;if(a!=c&&!(u&&c>a))return!1;var f=o.get(t);if(f&&o.get(n))return f==n;var s=-1,l=!0,h=2&e?new ze:void 0;for(o.set(t,n),o.set(n,t);++s<a;){var d=t[s],p=n[s];if(r)var v=u?r(p,d,s,n,t,o):r(d,p,s,t,n,o);if(void 0!==v){if(v)continue;l=!1;break}if(h){if(!gn(n,(function(t,n){if(!On(h,n)&&(d===t||i(d,t,e,r,o)))return h.push(n)}))){l=!1;break}}else if(d!==p&&!i(d,p,e,r,o)){l=!1;break}}return o.delete(t),o.delete(n),l}function Yi(t){return xo(vo(t,void 0,Fo),t+"")}function Hi(t){return hr(t,ma,to)}function Wi(t){return hr(t,xa,no)}var $i=ge?function(t){return ge.get(t)}:Ka;function Xi(t){for(var n=t.name+"",e=_e[n],r=Mt.call(_e,n)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==t)return i.name}return n}function Gi(t){return(Mt.call(Te,"placeholder")?Te:t).placeholder}function Zi(){var t=Te.iteratee||$a;return t=t===$a?Sr:t,arguments.length?t(arguments[0],arguments[1]):t}function Ki(t,n){var e,r,i=t.__data__;return("string"==(r=typeof(e=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof n?"string":"hash"]:i.map}function Qi(t){for(var n=ma(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,ho(i)]}return n}function Ji(t,n){var e=function(t,n){return null==t?void 0:t[n]}(t,n);return wr(e)?e:void 0}var to=ne?function(t){return null==t?[]:(t=vt(t),ln(ne(t),(function(n){return Xt.call(t,n)})))}:ic,no=ne?function(t){for(var n=[];t;)vn(n,to(t)),t=Ht(t);return n}:ic,eo=dr;function ro(t,n,e){for(var r=-1,i=(n=ai(n,t)).length,o=!1;++r<i;){var u=Ao(n[r]);if(!(o=null!=t&&e(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Uu(i)&&uo(u,i)&&(Ou(t)||ju(t))}function io(t){return"function"!=typeof t.constructor||lo(t)?{}:Ie(Ht(t))}function oo(t){return Ou(t)||ju(t)||!!(Kt&&t&&t[Kt])}function uo(t,n){var e=typeof t;return!!(n=null==n?9007199254740991:n)&&("number"==e||"symbol"!=e&&ct.test(t))&&t>-1&&t%1==0&&t<n}function ao(t,n,e){if(!qu(e))return!1;var r=typeof n;return!!("number"==r?Pu(e)&&uo(n,e.length):"string"==r&&n in e)&&Iu(e[n],t)}function co(t,n){if(Ou(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!Ku(t))||(Y.test(t)||!q.test(t)||null!=n&&t in vt(n))}function fo(t){var n=Xi(t),e=Te[n];if("function"!=typeof e||!(n in je.prototype))return!1;if(t===e)return!0;var r=$i(e);return!!r&&t===r[0]}(he&&eo(new he(new ArrayBuffer(1)))!=M||de&&eo(new de)!=v||pe&&"[object Promise]"!=eo(pe.resolve())||ve&&eo(new ve)!=_||be&&eo(new be)!=w)&&(eo=function(t){var n=dr(t),e=n==y?t.constructor:void 0,r=e?No(e):"";if(r)switch(r){case me:return M;case xe:return v;case we:return"[object Promise]";case Se:return _;case Me:return w}return n});var so=wt?Vu:oc;function lo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||xt)}function ho(t){return t==t&&!qu(t)}function po(t,n){return function(e){return null!=e&&(e[t]===n&&(void 0!==n||t in vt(e)))}}function vo(t,n,e){return n=ue(void 0===n?t.length-1:n,0),function(){for(var i=arguments,o=-1,u=ue(i.length-n,0),a=r(u);++o<u;)a[o]=i[n+o];o=-1;for(var c=r(n+1);++o<n;)c[o]=i[o];return c[n]=e(a),un(t,this,c)}}function bo(t,n){return n.length<2?t:lr(t,Hr(n,0,-1))}function yo(t,n){for(var e=t.length,r=ae(n.length,e),i=yi(t);r--;){var o=n[r];t[r]=uo(o,e)?i[o]:void 0}return t}function go(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var _o=So(Ur),mo=Qn||function(t,n){return $t.setTimeout(t,n)},xo=So(qr);function wo(t,n,e){var r=n+"";return xo(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(K,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return cn(a,(function(e){var r="_."+e[0];n&e[1]&&!hn(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(Q);return n?n[1].split(J):[]}(r),e)))}function So(t){var n=0,e=0;return function(){var r=ce(),i=16-(r-e);if(e=r,i>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(void 0,arguments)}}function Mo(t,n){var e=-1,r=t.length,i=r-1;for(n=void 0===n?r:n;++e<n;){var o=zr(e,i),u=t[o];t[o]=t[e],t[e]=u}return t.length=n,t}var Eo=function(t){var n=Su(t,(function(t){return 500===e.size&&e.clear(),t})),e=n.cache;return n}((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(H,(function(t,e,r,i){n.push(r?i.replace(nt,"$1"):e||t)})),n}));function Ao(t){if("string"==typeof t||Ku(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function No(t){if(null!=t){try{return St.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function To(t){if(t instanceof je)return t.clone();var n=new Ce(t.__wrapped__,t.__chain__);return n.__actions__=yi(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Io=Rr((function(t,n){return zu(t)?Je(t,or(n,1,zu,!0)):[]})),ko=Rr((function(t,n){var e=Bo(n);return zu(e)&&(e=void 0),zu(t)?Je(t,or(n,1,zu,!0),Zi(e,2)):[]})),Co=Rr((function(t,n){var e=Bo(n);return zu(e)&&(e=void 0),zu(t)?Je(t,or(n,1,zu,!0),void 0,e):[]}));function jo(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:ra(e);return i<0&&(i=ue(r+i,0)),xn(t,Zi(n,3),i)}function Oo(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return void 0!==e&&(i=ra(e),i=e<0?ue(r+i,0):ae(i,r-1)),xn(t,Zi(n,3),i,!0)}function Fo(t){return(null==t?0:t.length)?or(t,1):[]}function Po(t){return t&&t.length?t[0]:void 0}var zo=Rr((function(t){var n=pn(t,oi);return n.length&&n[0]===t[0]?yr(n):[]})),Do=Rr((function(t){var n=Bo(t),e=pn(t,oi);return n===Bo(e)?n=void 0:e.pop(),e.length&&e[0]===t[0]?yr(e,Zi(n,2)):[]})),Ro=Rr((function(t){var n=Bo(t),e=pn(t,oi);return(n="function"==typeof n?n:void 0)&&e.pop(),e.length&&e[0]===t[0]?yr(e,void 0,n):[]}));function Bo(t){var n=null==t?0:t.length;return n?t[n-1]:void 0}var Vo=Rr(Lo);function Lo(t,n){return t&&t.length&&n&&n.length?Fr(t,n):t}var Uo=Yi((function(t,n){var e=null==t?0:t.length,r=Xe(t,n);return Pr(t,pn(n,(function(t){return uo(t,e)?+t:t})).sort(pi)),r}));function qo(t){return null==t?t:le.call(t)}var Yo=Rr((function(t){return Qr(or(t,1,zu,!0))})),Ho=Rr((function(t){var n=Bo(t);return zu(n)&&(n=void 0),Qr(or(t,1,zu,!0),Zi(n,2))})),Wo=Rr((function(t){var n=Bo(t);return n="function"==typeof n?n:void 0,Qr(or(t,1,zu,!0),void 0,n)}));function $o(t){if(!t||!t.length)return[];var n=0;return t=ln(t,(function(t){if(zu(t))return n=ue(t.length,n),!0})),kn(n,(function(n){return pn(t,An(n))}))}function Xo(t,n){if(!t||!t.length)return[];var e=$o(t);return null==n?e:pn(e,(function(t){return un(n,void 0,t)}))}var Go=Rr((function(t,n){return zu(t)?Je(t,n):[]})),Zo=Rr((function(t){return ri(ln(t,zu))})),Ko=Rr((function(t){var n=Bo(t);return zu(n)&&(n=void 0),ri(ln(t,zu),Zi(n,2))})),Qo=Rr((function(t){var n=Bo(t);return n="function"==typeof n?n:void 0,ri(ln(t,zu),void 0,n)})),Jo=Rr($o);var tu=Rr((function(t){var n=t.length,e=n>1?t[n-1]:void 0;return e="function"==typeof e?(t.pop(),e):void 0,Xo(t,e)}));function nu(t){var n=Te(t);return n.__chain__=!0,n}function eu(t,n){return n(t)}var ru=Yi((function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,i=function(n){return Xe(n,t)};return!(n>1||this.__actions__.length)&&r instanceof je&&uo(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:eu,args:[i],thisArg:void 0}),new Ce(r,this.__chain__).thru((function(t){return n&&!t.length&&t.push(void 0),t}))):this.thru(i)}));var iu=_i((function(t,n,e){Mt.call(t,e)?++t[e]:$e(t,e,1)}));var ou=Ai(jo),uu=Ai(Oo);function au(t,n){return(Ou(t)?cn:tr)(t,Zi(n,3))}function cu(t,n){return(Ou(t)?fn:nr)(t,Zi(n,3))}var fu=_i((function(t,n,e){Mt.call(t,e)?t[e].push(n):$e(t,e,[n])}));var su=Rr((function(t,n,e){var i=-1,o="function"==typeof n,u=Pu(t)?r(t.length):[];return tr(t,(function(t){u[++i]=o?un(n,t,e):gr(t,n,e)})),u})),lu=_i((function(t,n,e){$e(t,e,n)}));function hu(t,n){return(Ou(t)?pn:Nr)(t,Zi(n,3))}var du=_i((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]}));var pu=Rr((function(t,n){if(null==t)return[];var e=n.length;return e>1&&ao(t,n[0],n[1])?n=[]:e>2&&ao(n[0],n[1],n[2])&&(n=[n[0]]),jr(t,or(n,1),[])})),vu=Kn||function(){return $t.Date.now()};function bu(t,n,e){return n=e?void 0:n,Bi(t,128,void 0,void 0,void 0,void 0,n=t&&null==n?t.length:n)}function yu(t,n){var e;if("function"!=typeof n)throw new gt(o);return t=ra(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=void 0),e}}var gu=Rr((function(t,n,e){var r=1;if(e.length){var i=qn(e,Gi(gu));r|=32}return Bi(t,r,n,e,i)})),_u=Rr((function(t,n,e){var r=3;if(e.length){var i=qn(e,Gi(_u));r|=32}return Bi(n,r,t,e,i)}));function mu(t,n,e){var r,i,u,a,c,f,s=0,l=!1,h=!1,d=!0;if("function"!=typeof t)throw new gt(o);function p(n){var e=r,o=i;return r=i=void 0,s=n,a=t.apply(o,e)}function v(t){return s=t,c=mo(y,n),l?p(t):a}function b(t){var e=t-f;return void 0===f||e>=n||e<0||h&&t-s>=u}function y(){var t=vu();if(b(t))return g(t);c=mo(y,function(t){var e=n-(t-f);return h?ae(e,u-(t-s)):e}(t))}function g(t){return c=void 0,d&&r?p(t):(r=i=void 0,a)}function _(){var t=vu(),e=b(t);if(r=arguments,i=this,f=t,e){if(void 0===c)return v(f);if(h)return si(c),c=mo(y,n),p(f)}return void 0===c&&(c=mo(y,n)),a}return n=oa(n)||0,qu(e)&&(l=!!e.leading,u=(h="maxWait"in e)?ue(oa(e.maxWait)||0,n):u,d="trailing"in e?!!e.trailing:d),_.cancel=function(){void 0!==c&&si(c),s=0,r=f=i=c=void 0},_.flush=function(){return void 0===c?a:g(vu())},_}var xu=Rr((function(t,n){return Qe(t,1,n)})),wu=Rr((function(t,n,e){return Qe(t,oa(n)||0,e)}));function Su(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new gt(o);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return e.cache=o.set(i,u)||o,u};return e.cache=new(Su.Cache||Pe),e}function Mu(t){if("function"!=typeof t)throw new gt(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Su.Cache=Pe;var Eu=ci((function(t,n){var e=(n=1==n.length&&Ou(n[0])?pn(n[0],Cn(Zi())):pn(or(n,1),Cn(Zi()))).length;return Rr((function(r){for(var i=-1,o=ae(r.length,e);++i<o;)r[i]=n[i].call(this,r[i]);return un(t,this,r)}))})),Au=Rr((function(t,n){return Bi(t,32,void 0,n,qn(n,Gi(Au)))})),Nu=Rr((function(t,n){return Bi(t,64,void 0,n,qn(n,Gi(Nu)))})),Tu=Yi((function(t,n){return Bi(t,256,void 0,void 0,void 0,n)}));function Iu(t,n){return t===n||t!=t&&n!=n}var ku=Fi(pr),Cu=Fi((function(t,n){return t>=n})),ju=_r(function(){return arguments}())?_r:function(t){return Yu(t)&&Mt.call(t,"callee")&&!Xt.call(t,"callee")},Ou=r.isArray,Fu=Jt?Cn(Jt):function(t){return Yu(t)&&dr(t)==S};function Pu(t){return null!=t&&Uu(t.length)&&!Vu(t)}function zu(t){return Yu(t)&&Pu(t)}var Du=ee||oc,Ru=tn?Cn(tn):function(t){return Yu(t)&&dr(t)==l};function Bu(t){if(!Yu(t))return!1;var n=dr(t);return n==h||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!$u(t)}function Vu(t){if(!qu(t))return!1;var n=dr(t);return n==d||n==p||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Lu(t){return"number"==typeof t&&t==ra(t)}function Uu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function qu(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function Yu(t){return null!=t&&"object"==typeof t}var Hu=nn?Cn(nn):function(t){return Yu(t)&&eo(t)==v};function Wu(t){return"number"==typeof t||Yu(t)&&dr(t)==b}function $u(t){if(!Yu(t)||dr(t)!=y)return!1;var n=Ht(t);if(null===n)return!0;var e=Mt.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&St.call(e)==Tt}var Xu=en?Cn(en):function(t){return Yu(t)&&dr(t)==g};var Gu=rn?Cn(rn):function(t){return Yu(t)&&eo(t)==_};function Zu(t){return"string"==typeof t||!Ou(t)&&Yu(t)&&dr(t)==m}function Ku(t){return"symbol"==typeof t||Yu(t)&&dr(t)==x}var Qu=on?Cn(on):function(t){return Yu(t)&&Uu(t.length)&&!!Vt[dr(t)]};var Ju=Fi(Ar),ta=Fi((function(t,n){return t<=n}));function na(t){if(!t)return[];if(Pu(t))return Zu(t)?$n(t):yi(t);if(Qt&&t[Qt])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[Qt]());var n=eo(t);return(n==v?Ln:n==_?Yn:Ia)(t)}function ea(t){return t?(t=oa(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ra(t){var n=ea(t),e=n%1;return n==n?e?n-e:n:0}function ia(t){return t?Ge(ra(t),0,4294967295):0}function oa(t){if("number"==typeof t)return t;if(Ku(t))return NaN;if(qu(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=qu(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(X,"");var e=ot.test(t);return e||at.test(t)?Yt(t.slice(2),e?2:8):it.test(t)?NaN:+t}function ua(t){return gi(t,xa(t))}function aa(t){return null==t?"":Kr(t)}var ca=mi((function(t,n){if(lo(n)||Pu(n))gi(n,ma(n),t);else for(var e in n)Mt.call(n,e)&&qe(t,e,n[e])})),fa=mi((function(t,n){gi(n,xa(n),t)})),sa=mi((function(t,n,e,r){gi(n,xa(n),t,r)})),la=mi((function(t,n,e,r){gi(n,ma(n),t,r)})),ha=Yi(Xe);var da=Rr((function(t,n){t=vt(t);var e=-1,r=n.length,i=r>2?n[2]:void 0;for(i&&ao(n[0],n[1],i)&&(r=1);++e<r;)for(var o=n[e],u=xa(o),a=-1,c=u.length;++a<c;){var f=u[a],s=t[f];(void 0===s||Iu(s,xt[f])&&!Mt.call(t,f))&&(t[f]=o[f])}return t})),pa=Rr((function(t){return t.push(void 0,Li),un(Sa,void 0,t)}));function va(t,n,e){var r=null==t?void 0:lr(t,n);return void 0===r?e:r}function ba(t,n){return null!=t&&ro(t,n,br)}var ya=Ii((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Nt.call(n)),t[n]=e}),qa(Wa)),ga=Ii((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Nt.call(n)),Mt.call(t,n)?t[n].push(e):t[n]=[e]}),Zi),_a=Rr(gr);function ma(t){return Pu(t)?Re(t):Mr(t)}function xa(t){return Pu(t)?Re(t,!0):Er(t)}var wa=mi((function(t,n,e){kr(t,n,e)})),Sa=mi((function(t,n,e,r){kr(t,n,e,r)})),Ma=Yi((function(t,n){var e={};if(null==t)return e;var r=!1;n=pn(n,(function(n){return n=ai(n,t),r||(r=n.length>1),n})),gi(t,Wi(t),e),r&&(e=Ze(e,7,Ui));for(var i=n.length;i--;)Jr(e,n[i]);return e}));var Ea=Yi((function(t,n){return null==t?{}:function(t,n){return Or(t,n,(function(n,e){return ba(t,e)}))}(t,n)}));function Aa(t,n){if(null==t)return{};var e=pn(Wi(t),(function(t){return[t]}));return n=Zi(n),Or(t,e,(function(t,e){return n(t,e[0])}))}var Na=Ri(ma),Ta=Ri(xa);function Ia(t){return null==t?[]:jn(t,ma(t))}var ka=Mi((function(t,n,e){return n=n.toLowerCase(),t+(e?Ca(n):n)}));function Ca(t){return Ba(aa(t).toLowerCase())}function ja(t){return(t=aa(t))&&t.replace(ft,Dn).replace(Ot,"")}var Oa=Mi((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),Fa=Mi((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),Pa=Si("toLowerCase");var za=Mi((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()}));var Da=Mi((function(t,n,e){return t+(e?" ":"")+Ba(n)}));var Ra=Mi((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Ba=Si("toUpperCase");function Va(t,n,e){return t=aa(t),void 0===(n=e?void 0:n)?function(t){return Dt.test(t)}(t)?function(t){return t.match(Pt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(n)||[]}var La=Rr((function(t,n){try{return un(t,void 0,n)}catch(t){return Bu(t)?t:new ht(t)}})),Ua=Yi((function(t,n){return cn(n,(function(n){n=Ao(n),$e(t,n,gu(t[n],t))})),t}));function qa(t){return function(){return t}}var Ya=Ni(),Ha=Ni(!0);function Wa(t){return t}function $a(t){return Sr("function"==typeof t?t:Ze(t,1))}var Xa=Rr((function(t,n){return function(e){return gr(e,t,n)}})),Ga=Rr((function(t,n){return function(e){return gr(t,e,n)}}));function Za(t,n,e){var r=ma(n),i=sr(n,r);null!=e||qu(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=sr(n,ma(n)));var o=!(qu(e)&&"chain"in e&&!e.chain),u=Vu(t);return cn(i,(function(e){var r=n[e];t[e]=r,u&&(t.prototype[e]=function(){var n=this.__chain__;if(o||n){var e=t(this.__wrapped__),i=e.__actions__=yi(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,vn([this.value()],arguments))})})),t}function Ka(){}var Qa=Ci(pn),Ja=Ci(sn),tc=Ci(gn);function nc(t){return co(t)?An(Ao(t)):function(t){return function(n){return lr(n,t)}}(t)}var ec=Oi(),rc=Oi(!0);function ic(){return[]}function oc(){return!1}var uc=ki((function(t,n){return t+n}),0),ac=zi("ceil"),cc=ki((function(t,n){return t/n}),1),fc=zi("floor");var sc,lc=ki((function(t,n){return t*n}),1),hc=zi("round"),dc=ki((function(t,n){return t-n}),0);return Te.after=function(t,n){if("function"!=typeof n)throw new gt(o);return t=ra(t),function(){if(--t<1)return n.apply(this,arguments)}},Te.ary=bu,Te.assign=ca,Te.assignIn=fa,Te.assignInWith=sa,Te.assignWith=la,Te.at=ha,Te.before=yu,Te.bind=gu,Te.bindAll=Ua,Te.bindKey=_u,Te.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ou(t)?t:[t]},Te.chain=nu,Te.chunk=function(t,n,e){n=(e?ao(t,n,e):void 0===n)?1:ue(ra(n),0);var i=null==t?0:t.length;if(!i||n<1)return[];for(var o=0,u=0,a=r(Jn(i/n));o<i;)a[u++]=Hr(t,o,o+=n);return a},Te.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var o=t[n];o&&(i[r++]=o)}return i},Te.concat=function(){var t=arguments.length;if(!t)return[];for(var n=r(t-1),e=arguments[0],i=t;i--;)n[i-1]=arguments[i];return vn(Ou(e)?yi(e):[e],or(n,1))},Te.cond=function(t){var n=null==t?0:t.length,e=Zi();return t=n?pn(t,(function(t){if("function"!=typeof t[1])throw new gt(o);return[e(t[0]),t[1]]})):[],Rr((function(e){for(var r=-1;++r<n;){var i=t[r];if(un(i[0],this,e))return un(i[1],this,e)}}))},Te.conforms=function(t){return function(t){var n=ma(t);return function(e){return Ke(e,t,n)}}(Ze(t,1))},Te.constant=qa,Te.countBy=iu,Te.create=function(t,n){var e=Ie(t);return null==n?e:We(e,n)},Te.curry=function t(n,e,r){var i=Bi(n,8,void 0,void 0,void 0,void 0,void 0,e=r?void 0:e);return i.placeholder=t.placeholder,i},Te.curryRight=function t(n,e,r){var i=Bi(n,16,void 0,void 0,void 0,void 0,void 0,e=r?void 0:e);return i.placeholder=t.placeholder,i},Te.debounce=mu,Te.defaults=da,Te.defaultsDeep=pa,Te.defer=xu,Te.delay=wu,Te.difference=Io,Te.differenceBy=ko,Te.differenceWith=Co,Te.drop=function(t,n,e){var r=null==t?0:t.length;return r?Hr(t,(n=e||void 0===n?1:ra(n))<0?0:n,r):[]},Te.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?Hr(t,0,(n=r-(n=e||void 0===n?1:ra(n)))<0?0:n):[]},Te.dropRightWhile=function(t,n){return t&&t.length?ni(t,Zi(n,3),!0,!0):[]},Te.dropWhile=function(t,n){return t&&t.length?ni(t,Zi(n,3),!0):[]},Te.fill=function(t,n,e,r){var i=null==t?0:t.length;return i?(e&&"number"!=typeof e&&ao(t,n,e)&&(e=0,r=i),function(t,n,e,r){var i=t.length;for((e=ra(e))<0&&(e=-e>i?0:i+e),(r=void 0===r||r>i?i:ra(r))<0&&(r+=i),r=e>r?0:ia(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},Te.filter=function(t,n){return(Ou(t)?ln:ir)(t,Zi(n,3))},Te.flatMap=function(t,n){return or(hu(t,n),1)},Te.flatMapDeep=function(t,n){return or(hu(t,n),1/0)},Te.flatMapDepth=function(t,n,e){return e=void 0===e?1:ra(e),or(hu(t,n),e)},Te.flatten=Fo,Te.flattenDeep=function(t){return(null==t?0:t.length)?or(t,1/0):[]},Te.flattenDepth=function(t,n){return(null==t?0:t.length)?or(t,n=void 0===n?1:ra(n)):[]},Te.flip=function(t){return Bi(t,512)},Te.flow=Ya,Te.flowRight=Ha,Te.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},Te.functions=function(t){return null==t?[]:sr(t,ma(t))},Te.functionsIn=function(t){return null==t?[]:sr(t,xa(t))},Te.groupBy=fu,Te.initial=function(t){return(null==t?0:t.length)?Hr(t,0,-1):[]},Te.intersection=zo,Te.intersectionBy=Do,Te.intersectionWith=Ro,Te.invert=ya,Te.invertBy=ga,Te.invokeMap=su,Te.iteratee=$a,Te.keyBy=lu,Te.keys=ma,Te.keysIn=xa,Te.map=hu,Te.mapKeys=function(t,n){var e={};return n=Zi(n,3),cr(t,(function(t,r,i){$e(e,n(t,r,i),t)})),e},Te.mapValues=function(t,n){var e={};return n=Zi(n,3),cr(t,(function(t,r,i){$e(e,r,n(t,r,i))})),e},Te.matches=function(t){return Tr(Ze(t,1))},Te.matchesProperty=function(t,n){return Ir(t,Ze(n,1))},Te.memoize=Su,Te.merge=wa,Te.mergeWith=Sa,Te.method=Xa,Te.methodOf=Ga,Te.mixin=Za,Te.negate=Mu,Te.nthArg=function(t){return t=ra(t),Rr((function(n){return Cr(n,t)}))},Te.omit=Ma,Te.omitBy=function(t,n){return Aa(t,Mu(Zi(n)))},Te.once=function(t){return yu(2,t)},Te.orderBy=function(t,n,e,r){return null==t?[]:(Ou(n)||(n=null==n?[]:[n]),Ou(e=r?void 0:e)||(e=null==e?[]:[e]),jr(t,n,e))},Te.over=Qa,Te.overArgs=Eu,Te.overEvery=Ja,Te.overSome=tc,Te.partial=Au,Te.partialRight=Nu,Te.partition=du,Te.pick=Ea,Te.pickBy=Aa,Te.property=nc,Te.propertyOf=function(t){return function(n){return null==t?void 0:lr(t,n)}},Te.pull=Vo,Te.pullAll=Lo,Te.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?Fr(t,n,Zi(e,2)):t},Te.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?Fr(t,n,void 0,e):t},Te.pullAt=Uo,Te.range=ec,Te.rangeRight=rc,Te.rearg=Tu,Te.reject=function(t,n){return(Ou(t)?ln:ir)(t,Mu(Zi(n,3)))},Te.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],o=t.length;for(n=Zi(n,3);++r<o;){var u=t[r];n(u,r,t)&&(e.push(u),i.push(r))}return Pr(t,i),e},Te.rest=function(t,n){if("function"!=typeof t)throw new gt(o);return Rr(t,n=void 0===n?n:ra(n))},Te.reverse=qo,Te.sampleSize=function(t,n,e){return n=(e?ao(t,n,e):void 0===n)?1:ra(n),(Ou(t)?Ve:Vr)(t,n)},Te.set=function(t,n,e){return null==t?t:Lr(t,n,e)},Te.setWith=function(t,n,e,r){return r="function"==typeof r?r:void 0,null==t?t:Lr(t,n,e,r)},Te.shuffle=function(t){return(Ou(t)?Le:Yr)(t)},Te.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&ao(t,n,e)?(n=0,e=r):(n=null==n?0:ra(n),e=void 0===e?r:ra(e)),Hr(t,n,e)):[]},Te.sortBy=pu,Te.sortedUniq=function(t){return t&&t.length?Gr(t):[]},Te.sortedUniqBy=function(t,n){return t&&t.length?Gr(t,Zi(n,2)):[]},Te.split=function(t,n,e){return e&&"number"!=typeof e&&ao(t,n,e)&&(n=e=void 0),(e=void 0===e?4294967295:e>>>0)?(t=aa(t))&&("string"==typeof n||null!=n&&!Xu(n))&&!(n=Kr(n))&&Vn(t)?fi($n(t),0,e):t.split(n,e):[]},Te.spread=function(t,n){if("function"!=typeof t)throw new gt(o);return n=null==n?0:ue(ra(n),0),Rr((function(e){var r=e[n],i=fi(e,0,n);return r&&vn(i,r),un(t,this,i)}))},Te.tail=function(t){var n=null==t?0:t.length;return n?Hr(t,1,n):[]},Te.take=function(t,n,e){return t&&t.length?Hr(t,0,(n=e||void 0===n?1:ra(n))<0?0:n):[]},Te.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?Hr(t,(n=r-(n=e||void 0===n?1:ra(n)))<0?0:n,r):[]},Te.takeRightWhile=function(t,n){return t&&t.length?ni(t,Zi(n,3),!1,!0):[]},Te.takeWhile=function(t,n){return t&&t.length?ni(t,Zi(n,3)):[]},Te.tap=function(t,n){return n(t),t},Te.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new gt(o);return qu(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),mu(t,n,{leading:r,maxWait:n,trailing:i})},Te.thru=eu,Te.toArray=na,Te.toPairs=Na,Te.toPairsIn=Ta,Te.toPath=function(t){return Ou(t)?pn(t,Ao):Ku(t)?[t]:yi(Eo(aa(t)))},Te.toPlainObject=ua,Te.transform=function(t,n,e){var r=Ou(t),i=r||Du(t)||Qu(t);if(n=Zi(n,4),null==e){var o=t&&t.constructor;e=i?r?new o:[]:qu(t)&&Vu(o)?Ie(Ht(t)):{}}return(i?cn:cr)(t,(function(t,r,i){return n(e,t,r,i)})),e},Te.unary=function(t){return bu(t,1)},Te.union=Yo,Te.unionBy=Ho,Te.unionWith=Wo,Te.uniq=function(t){return t&&t.length?Qr(t):[]},Te.uniqBy=function(t,n){return t&&t.length?Qr(t,Zi(n,2)):[]},Te.uniqWith=function(t,n){return n="function"==typeof n?n:void 0,t&&t.length?Qr(t,void 0,n):[]},Te.unset=function(t,n){return null==t||Jr(t,n)},Te.unzip=$o,Te.unzipWith=Xo,Te.update=function(t,n,e){return null==t?t:ti(t,n,ui(e))},Te.updateWith=function(t,n,e,r){return r="function"==typeof r?r:void 0,null==t?t:ti(t,n,ui(e),r)},Te.values=Ia,Te.valuesIn=function(t){return null==t?[]:jn(t,xa(t))},Te.without=Go,Te.words=Va,Te.wrap=function(t,n){return Au(ui(n),t)},Te.xor=Zo,Te.xorBy=Ko,Te.xorWith=Qo,Te.zip=Jo,Te.zipObject=function(t,n){return ii(t||[],n||[],qe)},Te.zipObjectDeep=function(t,n){return ii(t||[],n||[],Lr)},Te.zipWith=tu,Te.entries=Na,Te.entriesIn=Ta,Te.extend=fa,Te.extendWith=sa,Za(Te,Te),Te.add=uc,Te.attempt=La,Te.camelCase=ka,Te.capitalize=Ca,Te.ceil=ac,Te.clamp=function(t,n,e){return void 0===e&&(e=n,n=void 0),void 0!==e&&(e=(e=oa(e))==e?e:0),void 0!==n&&(n=(n=oa(n))==n?n:0),Ge(oa(t),n,e)},Te.clone=function(t){return Ze(t,4)},Te.cloneDeep=function(t){return Ze(t,5)},Te.cloneDeepWith=function(t,n){return Ze(t,5,n="function"==typeof n?n:void 0)},Te.cloneWith=function(t,n){return Ze(t,4,n="function"==typeof n?n:void 0)},Te.conformsTo=function(t,n){return null==n||Ke(t,n,ma(n))},Te.deburr=ja,Te.defaultTo=function(t,n){return null==t||t!=t?n:t},Te.divide=cc,Te.endsWith=function(t,n,e){t=aa(t),n=Kr(n);var r=t.length,i=e=void 0===e?r:Ge(ra(e),0,r);return(e-=n.length)>=0&&t.slice(e,i)==n},Te.eq=Iu,Te.escape=function(t){return(t=aa(t))&&B.test(t)?t.replace(D,Rn):t},Te.escapeRegExp=function(t){return(t=aa(t))&&$.test(t)?t.replace(W,"\\$&"):t},Te.every=function(t,n,e){var r=Ou(t)?sn:er;return e&&ao(t,n,e)&&(n=void 0),r(t,Zi(n,3))},Te.find=ou,Te.findIndex=jo,Te.findKey=function(t,n){return mn(t,Zi(n,3),cr)},Te.findLast=uu,Te.findLastIndex=Oo,Te.findLastKey=function(t,n){return mn(t,Zi(n,3),fr)},Te.floor=fc,Te.forEach=au,Te.forEachRight=cu,Te.forIn=function(t,n){return null==t?t:ur(t,Zi(n,3),xa)},Te.forInRight=function(t,n){return null==t?t:ar(t,Zi(n,3),xa)},Te.forOwn=function(t,n){return t&&cr(t,Zi(n,3))},Te.forOwnRight=function(t,n){return t&&fr(t,Zi(n,3))},Te.get=va,Te.gt=ku,Te.gte=Cu,Te.has=function(t,n){return null!=t&&ro(t,n,vr)},Te.hasIn=ba,Te.head=Po,Te.identity=Wa,Te.includes=function(t,n,e,r){t=Pu(t)?t:Ia(t),e=e&&!r?ra(e):0;var i=t.length;return e<0&&(e=ue(i+e,0)),Zu(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&wn(t,n,e)>-1},Te.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:ra(e);return i<0&&(i=ue(r+i,0)),wn(t,n,i)},Te.inRange=function(t,n,e){return n=ea(n),void 0===e?(e=n,n=0):e=ea(e),function(t,n,e){return t>=ae(n,e)&&t<ue(n,e)}(t=oa(t),n,e)},Te.invoke=_a,Te.isArguments=ju,Te.isArray=Ou,Te.isArrayBuffer=Fu,Te.isArrayLike=Pu,Te.isArrayLikeObject=zu,Te.isBoolean=function(t){return!0===t||!1===t||Yu(t)&&dr(t)==s},Te.isBuffer=Du,Te.isDate=Ru,Te.isElement=function(t){return Yu(t)&&1===t.nodeType&&!$u(t)},Te.isEmpty=function(t){if(null==t)return!0;if(Pu(t)&&(Ou(t)||"string"==typeof t||"function"==typeof t.splice||Du(t)||Qu(t)||ju(t)))return!t.length;var n=eo(t);if(n==v||n==_)return!t.size;if(lo(t))return!Mr(t).length;for(var e in t)if(Mt.call(t,e))return!1;return!0},Te.isEqual=function(t,n){return mr(t,n)},Te.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:void 0)?e(t,n):void 0;return void 0===r?mr(t,n,void 0,e):!!r},Te.isError=Bu,Te.isFinite=function(t){return"number"==typeof t&&re(t)},Te.isFunction=Vu,Te.isInteger=Lu,Te.isLength=Uu,Te.isMap=Hu,Te.isMatch=function(t,n){return t===n||xr(t,n,Qi(n))},Te.isMatchWith=function(t,n,e){return e="function"==typeof e?e:void 0,xr(t,n,Qi(n),e)},Te.isNaN=function(t){return Wu(t)&&t!=+t},Te.isNative=function(t){if(so(t))throw new ht("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return wr(t)},Te.isNil=function(t){return null==t},Te.isNull=function(t){return null===t},Te.isNumber=Wu,Te.isObject=qu,Te.isObjectLike=Yu,Te.isPlainObject=$u,Te.isRegExp=Xu,Te.isSafeInteger=function(t){return Lu(t)&&t>=-9007199254740991&&t<=9007199254740991},Te.isSet=Gu,Te.isString=Zu,Te.isSymbol=Ku,Te.isTypedArray=Qu,Te.isUndefined=function(t){return void 0===t},Te.isWeakMap=function(t){return Yu(t)&&eo(t)==w},Te.isWeakSet=function(t){return Yu(t)&&"[object WeakSet]"==dr(t)},Te.join=function(t,n){return null==t?"":ie.call(t,n)},Te.kebabCase=Oa,Te.last=Bo,Te.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r;return void 0!==e&&(i=(i=ra(e))<0?ue(r+i,0):ae(i,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,i):xn(t,Mn,i,!0)},Te.lowerCase=Fa,Te.lowerFirst=Pa,Te.lt=Ju,Te.lte=ta,Te.max=function(t){return t&&t.length?rr(t,Wa,pr):void 0},Te.maxBy=function(t,n){return t&&t.length?rr(t,Zi(n,2),pr):void 0},Te.mean=function(t){return En(t,Wa)},Te.meanBy=function(t,n){return En(t,Zi(n,2))},Te.min=function(t){return t&&t.length?rr(t,Wa,Ar):void 0},Te.minBy=function(t,n){return t&&t.length?rr(t,Zi(n,2),Ar):void 0},Te.stubArray=ic,Te.stubFalse=oc,Te.stubObject=function(){return{}},Te.stubString=function(){return""},Te.stubTrue=function(){return!0},Te.multiply=lc,Te.nth=function(t,n){return t&&t.length?Cr(t,ra(n)):void 0},Te.noConflict=function(){return $t._===this&&($t._=It),this},Te.noop=Ka,Te.now=vu,Te.pad=function(t,n,e){t=aa(t);var r=(n=ra(n))?Wn(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return ji(te(i),e)+t+ji(Jn(i),e)},Te.padEnd=function(t,n,e){t=aa(t);var r=(n=ra(n))?Wn(t):0;return n&&r<n?t+ji(n-r,e):t},Te.padStart=function(t,n,e){t=aa(t);var r=(n=ra(n))?Wn(t):0;return n&&r<n?ji(n-r,e)+t:t},Te.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),fe(aa(t).replace(G,""),n||0)},Te.random=function(t,n,e){if(e&&"boolean"!=typeof e&&ao(t,n,e)&&(n=e=void 0),void 0===e&&("boolean"==typeof n?(e=n,n=void 0):"boolean"==typeof t&&(e=t,t=void 0)),void 0===t&&void 0===n?(t=0,n=1):(t=ea(t),void 0===n?(n=t,t=0):n=ea(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var i=se();return ae(t+i*(n-t+qt("1e-"+((i+"").length-1))),n)}return zr(t,n)},Te.reduce=function(t,n,e){var r=Ou(t)?bn:Tn,i=arguments.length<3;return r(t,Zi(n,4),e,i,tr)},Te.reduceRight=function(t,n,e){var r=Ou(t)?yn:Tn,i=arguments.length<3;return r(t,Zi(n,4),e,i,nr)},Te.repeat=function(t,n,e){return n=(e?ao(t,n,e):void 0===n)?1:ra(n),Dr(aa(t),n)},Te.replace=function(){var t=arguments,n=aa(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Te.result=function(t,n,e){var r=-1,i=(n=ai(n,t)).length;for(i||(i=1,t=void 0);++r<i;){var o=null==t?void 0:t[Ao(n[r])];void 0===o&&(r=i,o=e),t=Vu(o)?o.call(t):o}return t},Te.round=hc,Te.runInContext=t,Te.sample=function(t){return(Ou(t)?Be:Br)(t)},Te.size=function(t){if(null==t)return 0;if(Pu(t))return Zu(t)?Wn(t):t.length;var n=eo(t);return n==v||n==_?t.size:Mr(t).length},Te.snakeCase=za,Te.some=function(t,n,e){var r=Ou(t)?gn:Wr;return e&&ao(t,n,e)&&(n=void 0),r(t,Zi(n,3))},Te.sortedIndex=function(t,n){return $r(t,n)},Te.sortedIndexBy=function(t,n,e){return Xr(t,n,Zi(e,2))},Te.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=$r(t,n);if(r<e&&Iu(t[r],n))return r}return-1},Te.sortedLastIndex=function(t,n){return $r(t,n,!0)},Te.sortedLastIndexBy=function(t,n,e){return Xr(t,n,Zi(e,2),!0)},Te.sortedLastIndexOf=function(t,n){if(null==t?0:t.length){var e=$r(t,n,!0)-1;if(Iu(t[e],n))return e}return-1},Te.startCase=Da,Te.startsWith=function(t,n,e){return t=aa(t),e=null==e?0:Ge(ra(e),0,t.length),n=Kr(n),t.slice(e,e+n.length)==n},Te.subtract=dc,Te.sum=function(t){return t&&t.length?In(t,Wa):0},Te.sumBy=function(t,n){return t&&t.length?In(t,Zi(n,2)):0},Te.template=function(t,n,e){var r=Te.templateSettings;e&&ao(t,n,e)&&(n=void 0),t=aa(t),n=sa({},n,r,Vi);var i,o,u=sa({},n.imports,r.imports,Vi),a=ma(u),c=jn(u,a),f=0,s=n.interpolate||st,l="__p += '",h=bt((n.escape||st).source+"|"+s.source+"|"+(s===U?et:st).source+"|"+(n.evaluate||st).source+"|$","g"),d="//# sourceURL="+(Mt.call(n,"sourceURL")?(n.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Bt+"]")+"\n";t.replace(h,(function(n,e,r,u,a,c){return r||(r=u),l+=t.slice(f,c).replace(lt,Bn),e&&(i=!0,l+="' +\n__e("+e+") +\n'"),a&&(o=!0,l+="';\n"+a+";\n__p += '"),r&&(l+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),f=c+n.length,n})),l+="';\n";var p=Mt.call(n,"variable")&&n.variable;p||(l="with (obj) {\n"+l+"\n}\n"),l=(o?l.replace(O,""):l).replace(F,"$1").replace(P,"$1;"),l="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var v=La((function(){return dt(a,d+"return "+l).apply(void 0,c)}));if(v.source=l,Bu(v))throw v;return v},Te.times=function(t,n){if((t=ra(t))<1||t>9007199254740991)return[];var e=4294967295,r=ae(t,4294967295);t-=4294967295;for(var i=kn(r,n=Zi(n));++e<t;)n(e);return i},Te.toFinite=ea,Te.toInteger=ra,Te.toLength=ia,Te.toLower=function(t){return aa(t).toLowerCase()},Te.toNumber=oa,Te.toSafeInteger=function(t){return t?Ge(ra(t),-9007199254740991,9007199254740991):0===t?t:0},Te.toString=aa,Te.toUpper=function(t){return aa(t).toUpperCase()},Te.trim=function(t,n,e){if((t=aa(t))&&(e||void 0===n))return t.replace(X,"");if(!t||!(n=Kr(n)))return t;var r=$n(t),i=$n(n);return fi(r,Fn(r,i),Pn(r,i)+1).join("")},Te.trimEnd=function(t,n,e){if((t=aa(t))&&(e||void 0===n))return t.replace(Z,"");if(!t||!(n=Kr(n)))return t;var r=$n(t);return fi(r,0,Pn(r,$n(n))+1).join("")},Te.trimStart=function(t,n,e){if((t=aa(t))&&(e||void 0===n))return t.replace(G,"");if(!t||!(n=Kr(n)))return t;var r=$n(t);return fi(r,Fn(r,$n(n))).join("")},Te.truncate=function(t,n){var e=30,r="...";if(qu(n)){var i="separator"in n?n.separator:i;e="length"in n?ra(n.length):e,r="omission"in n?Kr(n.omission):r}var o=(t=aa(t)).length;if(Vn(t)){var u=$n(t);o=u.length}if(e>=o)return t;var a=e-Wn(r);if(a<1)return r;var c=u?fi(u,0,a).join(""):t.slice(0,a);if(void 0===i)return c+r;if(u&&(a+=c.length-a),Xu(i)){if(t.slice(a).search(i)){var f,s=c;for(i.global||(i=bt(i.source,aa(rt.exec(i))+"g")),i.lastIndex=0;f=i.exec(s);)var l=f.index;c=c.slice(0,void 0===l?a:l)}}else if(t.indexOf(Kr(i),a)!=a){var h=c.lastIndexOf(i);h>-1&&(c=c.slice(0,h))}return c+r},Te.unescape=function(t){return(t=aa(t))&&R.test(t)?t.replace(z,Xn):t},Te.uniqueId=function(t){var n=++Et;return aa(t)+n},Te.upperCase=Ra,Te.upperFirst=Ba,Te.each=au,Te.eachRight=cu,Te.first=Po,Za(Te,(sc={},cr(Te,(function(t,n){Mt.call(Te.prototype,n)||(sc[n]=t)})),sc),{chain:!1}),Te.VERSION="4.17.15",cn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Te[t].placeholder=Te})),cn(["drop","take"],(function(t,n){je.prototype[t]=function(e){e=void 0===e?1:ue(ra(e),0);var r=this.__filtered__&&!n?new je(this):this.clone();return r.__filtered__?r.__takeCount__=ae(e,r.__takeCount__):r.__views__.push({size:ae(e,4294967295),type:t+(r.__dir__<0?"Right":"")}),r},je.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),cn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;je.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:Zi(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),cn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");je.prototype[t]=function(){return this[e](1).value()[0]}})),cn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");je.prototype[t]=function(){return this.__filtered__?new je(this):this[e](1)}})),je.prototype.compact=function(){return this.filter(Wa)},je.prototype.find=function(t){return this.filter(t).head()},je.prototype.findLast=function(t){return this.reverse().find(t)},je.prototype.invokeMap=Rr((function(t,n){return"function"==typeof t?new je(this):this.map((function(e){return gr(e,t,n)}))})),je.prototype.reject=function(t){return this.filter(Mu(Zi(t)))},je.prototype.slice=function(t,n){t=ra(t);var e=this;return e.__filtered__&&(t>0||n<0)?new je(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),void 0!==n&&(e=(n=ra(n))<0?e.dropRight(-n):e.take(n-t)),e)},je.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},je.prototype.toArray=function(){return this.take(4294967295)},cr(je.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),i=Te[r?"take"+("last"==n?"Right":""):n],o=r||/^find/.test(n);i&&(Te.prototype[n]=function(){var n=this.__wrapped__,u=r?[1]:arguments,a=n instanceof je,c=u[0],f=a||Ou(n),s=function(t){var n=i.apply(Te,vn([t],u));return r&&l?n[0]:n};f&&e&&"function"==typeof c&&1!=c.length&&(a=f=!1);var l=this.__chain__,h=!!this.__actions__.length,d=o&&!l,p=a&&!h;if(!o&&f){n=p?n:new je(this);var v=t.apply(n,u);return v.__actions__.push({func:eu,args:[s],thisArg:void 0}),new Ce(v,l)}return d&&p?t.apply(this,u):(v=this.thru(s),d?r?v.value()[0]:v.value():v)})})),cn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=_t[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Te.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(Ou(i)?i:[],t)}return this[e]((function(e){return n.apply(Ou(e)?e:[],t)}))}})),cr(je.prototype,(function(t,n){var e=Te[n];if(e){var r=e.name+"";Mt.call(_e,r)||(_e[r]=[]),_e[r].push({name:n,func:e})}})),_e[Ti(void 0,2).name]=[{name:"wrapper",func:void 0}],je.prototype.clone=function(){var t=new je(this.__wrapped__);return t.__actions__=yi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=yi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=yi(this.__views__),t},je.prototype.reverse=function(){if(this.__filtered__){var t=new je(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},je.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=Ou(t),r=n<0,i=e?t.length:0,o=function(t,n,e){var r=-1,i=e.length;for(;++r<i;){var o=e[r],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":n-=u;break;case"take":n=ae(n,t+u);break;case"takeRight":t=ue(t,n-u)}}return{start:t,end:n}}(0,i,this.__views__),u=o.start,a=o.end,c=a-u,f=r?a:u-1,s=this.__iteratees__,l=s.length,h=0,d=ae(c,this.__takeCount__);if(!e||!r&&i==c&&d==c)return ei(t,this.__actions__);var p=[];t:for(;c--&&h<d;){for(var v=-1,b=t[f+=n];++v<l;){var y=s[v],g=y.iteratee,_=y.type,m=g(b);if(2==_)b=m;else if(!m){if(1==_)continue t;break t}}p[h++]=b}return p},Te.prototype.at=ru,Te.prototype.chain=function(){return nu(this)},Te.prototype.commit=function(){return new Ce(this.value(),this.__chain__)},Te.prototype.next=function(){void 0===this.__values__&&(this.__values__=na(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Te.prototype.plant=function(t){for(var n,e=this;e instanceof ke;){var r=To(e);r.__index__=0,r.__values__=void 0,n?i.__wrapped__=r:n=r;var i=r;e=e.__wrapped__}return i.__wrapped__=t,n},Te.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof je){var n=t;return this.__actions__.length&&(n=new je(this)),(n=n.reverse()).__actions__.push({func:eu,args:[qo],thisArg:void 0}),new Ce(n,this.__chain__)}return this.thru(qo)},Te.prototype.toJSON=Te.prototype.valueOf=Te.prototype.value=function(){return ei(this.__wrapped__,this.__actions__)},Te.prototype.first=Te.prototype.head,Qt&&(Te.prototype[Qt]=function(){return this}),Te}();$t._=Gn,void 0===(i=function(){return Gn}.call(n,e,n,r))||(r.exports=i)}).call(this)}).call(this,e(78),e(79)(t))},function(t,n,e){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t}).apply(this,arguments)};Object.defineProperty(n,"__esModule",{value:!0});var i=e(55),o=e(80),u=[];for(var a in o.presetPalettes)u.push(o.presetPalettes[a]);function c(t){for(var n=[];t.length>0;)n.push.apply(n,t.splice(Math.floor(t.length/2),1));return n}function f(t){return-1===t.facetId?0:1===t.facetLayer?t.containChildrenFacet?2e3*t.childrenNumber:t.children.reduce((function(t,n){return"text"===n.assembleType?t+1:t+100}),0):t.containChildrenFacet?2e3*t.childrenNumber:t.children.reduce((function(t,n){return"fragment"===n.flag?t+1:t+100}),0)}function s(t,n,e,r,i){return Object.assign({},t,{transform:"translate("+n+","+e+")",cx:n,cy:e,r:i,color:r})}n.camelSort=c,n.buildTree=function(t,n){var e={branches:[],leaves:[],foldBranches:[],treeData:[],facetChart:[],texts:[],texts_leaf:[]};if(i.isEmpty(t)||!n)return e;var o=n.clientWidth,a=n.clientHeight,l=t.childrenNumber;if(1===l){e.branches.push({x:o/2-16,y:.4*a,width:32,height:.4*a-40,color:u[0][7],facetId:t.children[0].facetId,facetName:t.children[0].facetName,chilrenNumber:t.children[0].childrenNumber}),e.leaves.push({cx:o/2,cy:.382*a,r:20,color:u[0][7]}),e.foldBranches.push({x:o/2-8,y:.618*a,width:16,height:0,transform:"",color:""}),e.treeData=t.children,t.children[0].containChildrenFacet&&e.facetChart.push(s(t.children[0],e.leaves[0].cx,e.leaves[0].cy,e.leaves[0].color,e.leaves[0].r));var h=12;return h=12>(H=e.branches[0].height/(e.branches[0].facetName.length+8))?H:12,e.texts.push({x:e.branches[0].x+9,y:e.branches[0].y+8,text:e.branches[0].facetName,fontSize:h+5}),e.texts_leaf.push({x:e.leaves[0].cx,y:e.leaves[0].cy,text:e.branches[0].chilrenNumber.toString(),fontSize:18}),e}for(var d=l>7,p=[],v=0,b=t.children;v<b.length;v++){var y=b[v];p.push({facetId:y.facetId,value:f(y),containChildrenFacet:y.containChildrenFacet})}p.sort((function(t,n){return t.value-n.value}));var g=t.children;if(d){var _=p.filter((function(t){return t.value>1999})).length,m=[];if(7<_+1?m.concat(p.filter((function(t){return t.value<2e3})).map((function(t){return t.facetId}))):m=m.concat(p.slice(6).map((function(t){return t.facetId}))),m.length){var x=[];x=x.concat(g.filter((function(t){return-1===m.indexOf(t.facetId)})));var w={facetId:-1,facetName:"其他分面",facetLayer:-1,parentFacetId:0,topicId:t.topicId,childrenNumber:m.length,type:"branch",containChildrenFacet:!0,children:g.filter((function(t){return-1!==m.indexOf(t.facetId)}))};x.push(w),g=x}}g.sort((function(t,n){return f(n)-f(t)})),e.treeData=g;for(var S=g.length,M=S%2==1,E=.6*a,A=Math.PI/(2*S),N=o*Math.tan(A)/(2*(1+Math.tan(A))),T=M?E/(1+1/Math.sin(A)):E/(1+1/Math.tan(A)),I=N<T?N:T,k=I/Math.sin(A),C=k+I<E?(E-k-I)/S*2:0,j=M?0:A,O=Math.floor(S/2);j<Math.PI/2;){var F={cx:k*Math.sin(j)+o/2,cy:E-k*Math.cos(j)-C*O,r:I/2,color:"#ffffff"},P=r({},F);P.cx=o/2-k*Math.sin(j),e.leaves.push(F),e.leaves.push(P),j+=2*A,O--}M&&e.leaves.shift();for(var z=0;z<S;z++)e.leaves[z].color=u[z][7];var D=Math.abs(e.leaves[S-1].cx-e.leaves[S-2].cx)-I<.5*o,R=D?(Math.abs(e.leaves[S-1].cx-e.leaves[S-2].cx)-I)/(1.2*S-.2):.5*o/(1.2*S-.2),B=e.leaves[S-1].cx<e.leaves[S-2].cx?e.leaves[S-1].cx+I/2:e.leaves[S-2].cx+I/2;for(D||(B=.5*o/2),g.forEach((function(t,n){var r={x:B+1.2*n*R,y:0,width:R,height:0,facetId:-1,facetName:"",color:"",chilrenNumber:0};e.branches.push(r)})),e.branches=c(e.branches),z=0;z<S;z++)e.branches[z].facetName=g[z].facetName,e.branches[z].facetId=g[z].facetId,e.branches[z].chilrenNumber=g[z].childrenNumber;for(z=0;z<S;z++)e.branches[z].y=e.leaves[z].cy/2+a*(1-.4*.8)/2,e.branches[z].height=a-e.branches[z].y-40,e.branches[z].color=u[z][7];for(O=S+1,z=0;z<S;z++){var V={x:e.branches[z].x<o/2?e.branches[z].x+e.branches[z].width:e.branches[z].x-e.branches[z].width,y:e.branches[z].y,width:e.branches[z].width,height:e.branches[z].x>o/2?Math.sqrt(Math.pow(e.leaves[z].cx-e.branches[z].x+R/2,2)+Math.pow(e.leaves[z].cy-e.branches[z].y,2))/2:Math.sqrt(Math.pow(e.leaves[z].cx-e.branches[z].x-R,2)+Math.pow(e.leaves[z].cy-e.branches[z].y,2))/2,transform:"",color:u[z][7]},L=e.branches[z].x+V.width/2,U=V.y,q=Math.atan(Math.abs((e.leaves[z].cy-U)/(e.leaves[z].cx-L)))/Math.PI*180;e.branches[z].x<o/2?V.transform="rotate("+(q+90)+" "+V.x+","+V.y+")":V.transform="rotate("+(-q-90)+" "+e.branches[z].x+","+V.y+")",e.foldBranches.push(V),O--}var Y=R-10>20?20:R-4;for(z=0;z<S;z++){g[z].containChildrenFacet&&e.facetChart.push(s(g[z],e.leaves[z].cx,e.leaves[z].cy,e.leaves[z].color,e.leaves[z].r));var H;h=Y;h=Y>(H=e.branches[z].height/(e.branches[z].facetName.length+8))?H:Y,e.texts.push({x:e.branches[z].x+R/2-h/4,y:e.branches[z].y+8,text:e.branches[z].facetName,fontSize:h}),e.texts_leaf.push({x:e.leaves[z].cx-h*t.children[z].childrenNumber.toString().length/3,y:e.leaves[z].cy+.6*h,text:e.branches[z].chilrenNumber.toString(),fontSize:h})}for(var W=0,$=e.leaves;W<$.length;W++){$[W].r=.6*R}for(var X=0,G=e.facetChart;X<G.length;X++){G[X].r=.8*R}return e}},function(t,n,e){"use strict";e.r(n),e.d(n,"Observable",(function(){return r.a})),e.d(n,"ConnectableObservable",(function(){return i.a})),e.d(n,"GroupedObservable",(function(){return o.a})),e.d(n,"observable",(function(){return u.a})),e.d(n,"Subject",(function(){return a.a})),e.d(n,"BehaviorSubject",(function(){return c.a})),e.d(n,"ReplaySubject",(function(){return f.a})),e.d(n,"AsyncSubject",(function(){return s.a})),e.d(n,"asapScheduler",(function(){return l.a})),e.d(n,"asyncScheduler",(function(){return h.a})),e.d(n,"queueScheduler",(function(){return d.a})),e.d(n,"animationFrameScheduler",(function(){return g})),e.d(n,"VirtualTimeScheduler",(function(){return _})),e.d(n,"VirtualAction",(function(){return m})),e.d(n,"Scheduler",(function(){return x.a})),e.d(n,"Subscription",(function(){return w.a})),e.d(n,"Subscriber",(function(){return S.a})),e.d(n,"Notification",(function(){return M.a})),e.d(n,"NotificationKind",(function(){return M.b})),e.d(n,"pipe",(function(){return E.a})),e.d(n,"noop",(function(){return A.a})),e.d(n,"identity",(function(){return N.a})),e.d(n,"isObservable",(function(){return T})),e.d(n,"ArgumentOutOfRangeError",(function(){return I.a})),e.d(n,"EmptyError",(function(){return k.a})),e.d(n,"ObjectUnsubscribedError",(function(){return C.a})),e.d(n,"UnsubscriptionError",(function(){return j.a})),e.d(n,"TimeoutError",(function(){return O.a})),e.d(n,"bindCallback",(function(){return R})),e.d(n,"bindNodeCallback",(function(){return L})),e.d(n,"combineLatest",(function(){return H.b})),e.d(n,"concat",(function(){return W.a})),e.d(n,"defer",(function(){return $.a})),e.d(n,"empty",(function(){return X.b})),e.d(n,"forkJoin",(function(){return K})),e.d(n,"from",(function(){return Z.a})),e.d(n,"fromEvent",(function(){return tt})),e.d(n,"fromEventPattern",(function(){return nt})),e.d(n,"generate",(function(){return et})),e.d(n,"iif",(function(){return it})),e.d(n,"interval",(function(){return ut})),e.d(n,"merge",(function(){return ct.a})),e.d(n,"never",(function(){return st})),e.d(n,"of",(function(){return lt.a})),e.d(n,"onErrorResumeNext",(function(){return ht})),e.d(n,"pairs",(function(){return dt})),e.d(n,"partition",(function(){return gt})),e.d(n,"race",(function(){return _t.a})),e.d(n,"range",(function(){return mt})),e.d(n,"throwError",(function(){return wt.a})),e.d(n,"timer",(function(){return St.a})),e.d(n,"using",(function(){return Mt})),e.d(n,"zip",(function(){return Et.b})),e.d(n,"scheduled",(function(){return At.a})),e.d(n,"EMPTY",(function(){return X.a})),e.d(n,"NEVER",(function(){return ft})),e.d(n,"config",(function(){return Nt.a}));var r=e(2),i=e(61),o=e(54),u=e(20),a=e(6),c=e(63),f=e(42),s=e(28),l=e(48),h=e(8),d=e(67),p=e(0),v=e(29),b=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return p.a(n,t),n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,n,e,r):(n.actions.push(this),n.scheduled||(n.scheduled=requestAnimationFrame((function(){return n.flush(null)}))))},n.prototype.recycleAsyncId=function(n,e,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,n,e,r);0===n.actions.length&&(cancelAnimationFrame(e),n.scheduled=void 0)},n}(v.a),y=e(26),g=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return p.a(n,t),n.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var n,e=this.actions,r=-1,i=e.length;t=t||e.shift();do{if(n=t.execute(t.state,t.delay))break}while(++r<i&&(t=e.shift()));if(this.active=!1,n){for(;++r<i&&(t=e.shift());)t.unsubscribe();throw n}},n}(y.a))(b),_=function(t){function n(n,e){void 0===n&&(n=m),void 0===e&&(e=Number.POSITIVE_INFINITY);var r=t.call(this,n,(function(){return r.frame}))||this;return r.maxFrames=e,r.frame=0,r.index=-1,r}return p.a(n,t),n.prototype.flush=function(){for(var t,n,e=this.actions,r=this.maxFrames;(n=e[0])&&n.delay<=r&&(e.shift(),this.frame=n.delay,!(t=n.execute(n.state,n.delay))););if(t){for(;n=e.shift();)n.unsubscribe();throw t}},n.frameTimeFactor=10,n}(y.a),m=function(t){function n(n,e,r){void 0===r&&(r=n.index+=1);var i=t.call(this,n,e)||this;return i.scheduler=n,i.work=e,i.index=r,i.active=!0,i.index=n.index=r,i}return p.a(n,t),n.prototype.schedule=function(e,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,e,r);this.active=!1;var i=new n(this.scheduler,this.work);return this.add(i),i.schedule(e,r)},n.prototype.requestAsyncId=function(t,e,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(n.sortActions),!0},n.prototype.recycleAsyncId=function(t,n,e){void 0===e&&(e=0)},n.prototype._execute=function(n,e){if(!0===this.active)return t.prototype._execute.call(this,n,e)},n.sortActions=function(t,n){return t.delay===n.delay?t.index===n.index?0:t.index>n.index?1:-1:t.delay>n.delay?1:-1},n}(v.a),x=e(53),w=e(5),S=e(1),M=e(17),E=e(34),A=e(19),N=e(15);function T(t){return!!t&&(t instanceof r.a||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var I=e(23),k=e(25),C=e(21),j=e(36),O=e(65),F=e(9),P=e(46),z=e(7),D=e(10);function R(t,n,e){if(n){if(!Object(D.a)(n))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return R(t,e).apply(void 0,r).pipe(Object(F.a)((function(t){return Object(z.a)(t)?n.apply(void 0,t):n(t)})))};e=n}return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o,u=this,a={context:u,subject:o,callbackFunc:t,scheduler:e};return new r.a((function(r){if(e){var i={args:n,subscriber:r,params:a};return e.schedule(B,0,i)}if(!o){o=new s.a;try{t.apply(u,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){Object(P.a)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)}))}}function B(t){var n=this,e=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,u=i.context,a=i.scheduler,c=i.subject;if(!c){c=i.subject=new s.a;try{o.apply(u,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.length<=1?t[0]:t;n.add(a.schedule(V,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function V(t){var n=t.value,e=t.subject;e.next(n),e.complete()}function L(t,n,e){if(n){if(!Object(D.a)(n))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return L(t,e).apply(void 0,r).pipe(Object(F.a)((function(t){return Object(z.a)(t)?n.apply(void 0,t):n(t)})))};e=n}return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o={subject:void 0,args:n,callbackFunc:t,scheduler:e,context:this};return new r.a((function(r){var i=o.context,u=o.subject;if(e)return e.schedule(U,0,{params:o,subscriber:r,context:i});if(!u){u=o.subject=new s.a;try{t.apply(i,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.shift();e?u.error(e):(u.next(t.length<=1?t[0]:t),u.complete())}]))}catch(t){Object(P.a)(u)?u.error(t):console.warn(t)}}return u.subscribe(r)}))}}function U(t){var n=this,e=t.params,r=t.subscriber,i=t.context,o=e.callbackFunc,u=e.args,a=e.scheduler,c=e.subject;if(!c){c=e.subject=new s.a;try{o.apply(i,u.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.shift();if(r)n.add(a.schedule(Y,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;n.add(a.schedule(q,0,{value:i,subject:c}))}}]))}catch(t){this.add(a.schedule(Y,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function q(t){var n=t.value,e=t.subject;e.next(n),e.complete()}function Y(t){var n=t.err;t.subject.error(n)}var H=e(38),W=e(31),$=e(43),X=e(11),G=e(45),Z=e(12);function K(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){var e=t[0];if(Object(z.a)(e))return Q(e,null);if(Object(G.a)(e)&&Object.getPrototypeOf(e)===Object.prototype){var r=Object.keys(e);return Q(r.map((function(t){return e[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return Q(t=1===t.length&&Object(z.a)(t[0])?t[0]:t,null).pipe(Object(F.a)((function(t){return i.apply(void 0,t)})))}return Q(t,null)}function Q(t,n){return new r.a((function(e){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,u=0,a=function(a){var c=Object(Z.a)(t[a]),f=!1;e.add(c.subscribe({next:function(t){f||(f=!0,u++),i[a]=t},error:function(t){return e.error(t)},complete:function(){++o!==r&&f||(u===r&&e.next(n?n.reduce((function(t,n,e){return t[n]=i[e],t}),{}):i),e.complete())}}))},c=0;c<r;c++)a(c);else e.complete()}))}var J=e(24);function tt(t,n,e,i){return Object(J.a)(e)&&(i=e,e=void 0),i?tt(t,n,e).pipe(Object(F.a)((function(t){return Object(z.a)(t)?i.apply(void 0,t):i(t)}))):new r.a((function(r){!function t(n,e,r,i,o){var u;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(n)){var a=n;n.addEventListener(e,r,o),u=function(){return a.removeEventListener(e,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(n)){var c=n;n.on(e,r),u=function(){return c.off(e,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(n)){var f=n;n.addListener(e,r),u=function(){return f.removeListener(e,r)}}else{if(!n||!n.length)throw new TypeError("Invalid event target");for(var s=0,l=n.length;s<l;s++)t(n[s],e,r,i,o)}i.add(u)}(t,n,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,e)}))}function nt(t,n,e){return e?nt(t,n).pipe(Object(F.a)((function(t){return Object(z.a)(t)?e.apply(void 0,t):e(t)}))):new r.a((function(e){var r,i=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void e.error(t)}if(Object(J.a)(n))return function(){return n(i,r)}}))}function et(t,n,e,i,o){var u,a;if(1==arguments.length){var c=t;a=c.initialState,n=c.condition,e=c.iterate,u=c.resultSelector||N.a,o=c.scheduler}else void 0===i||Object(D.a)(i)?(a=t,u=N.a,o=i):(a=t,u=i);return new r.a((function(t){var r=a;if(o)return o.schedule(rt,0,{subscriber:t,iterate:e,condition:n,resultSelector:u,state:r});for(;;){if(n){var i=void 0;try{i=n(r)}catch(n){return void t.error(n)}if(!i){t.complete();break}}var c=void 0;try{c=u(r)}catch(n){return void t.error(n)}if(t.next(c),t.closed)break;try{r=e(r)}catch(n){return void t.error(n)}}}))}function rt(t){var n=t.subscriber,e=t.condition;if(!n.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void n.error(t)}else t.needIterate=!0;if(e){var r=void 0;try{r=e(t.state)}catch(t){return void n.error(t)}if(!r)return void n.complete();if(n.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void n.error(t)}if(!n.closed&&(n.next(i),!n.closed))return this.schedule(t)}}function it(t,n,e){return void 0===n&&(n=X.a),void 0===e&&(e=X.a),Object($.a)((function(){return t()?n:e}))}var ot=e(30);function ut(t,n){return void 0===t&&(t=0),void 0===n&&(n=h.a),(!Object(ot.a)(t)||t<0)&&(t=0),n&&"function"==typeof n.schedule||(n=h.a),new r.a((function(e){return e.add(n.schedule(at,t,{subscriber:e,counter:0,period:t})),e}))}function at(t){var n=t.subscriber,e=t.counter,r=t.period;n.next(e),this.schedule({subscriber:n,counter:e+1,period:r},r)}var ct=e(60),ft=new r.a(A.a);function st(){return ft}var lt=e(33);function ht(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(0===t.length)return X.a;var e=t[0],i=t.slice(1);return 1===t.length&&Object(z.a)(e)?ht.apply(void 0,e):new r.a((function(t){var n=function(){return t.add(ht.apply(void 0,i).subscribe(t))};return Object(Z.a)(e).subscribe({next:function(n){t.next(n)},error:n,complete:n})}))}function dt(t,n){return n?new r.a((function(e){var r=Object.keys(t),i=new w.a;return i.add(n.schedule(pt,0,{keys:r,index:0,subscriber:e,subscription:i,obj:t})),i})):new r.a((function(n){for(var e=Object.keys(t),r=0;r<e.length&&!n.closed;r++){var i=e[r];t.hasOwnProperty(i)&&n.next([i,t[i]])}n.complete()}))}function pt(t){var n=t.keys,e=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(e<n.length){var u=n[e];r.next([u,o[u]]),i.add(this.schedule({keys:n,index:e+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var vt=e(72),bt=e(37),yt=e(16);function gt(t,n,e){return[Object(yt.a)(n,e)(new r.a(Object(bt.a)(t))),Object(yt.a)(Object(vt.a)(n,e))(new r.a(Object(bt.a)(t)))]}var _t=e(64);function mt(t,n,e){return void 0===t&&(t=0),new r.a((function(r){void 0===n&&(n=t,t=0);var i=0,o=t;if(e)return e.schedule(xt,0,{index:i,count:n,start:t,subscriber:r});for(;;){if(i++>=n){r.complete();break}if(r.next(o++),r.closed)break}}))}function xt(t){var n=t.start,e=t.index,r=t.count,i=t.subscriber;e>=r?i.complete():(i.next(n),i.closed||(t.index=e+1,t.start=n+1,this.schedule(t)))}var wt=e(40),St=e(58);function Mt(t,n){return new r.a((function(e){var r,i;try{r=t()}catch(t){return void e.error(t)}try{i=n(r)}catch(t){return void e.error(t)}var o=(i?Object(Z.a)(i):X.a).subscribe(e);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}var Et=e(44),At=e(66),Nt=e(14)},function(t,n,e){"use strict";e.d(n,"a",(function(){return a}));var r=e(2),i=e(8),o=e(30),u=e(10);function a(t,n,e){void 0===t&&(t=0);var a=-1;return Object(o.a)(n)?a=Number(n)<1?1:Number(n):Object(u.a)(n)&&(e=n),Object(u.a)(e)||(e=i.a),new r.a((function(n){var r=Object(o.a)(t)?t:+t-e.now();return e.schedule(c,r,{index:0,period:a,subscriber:n})}))}function c(t){var n=t.index,e=t.period,r=t.subscriber;if(r.next(n),!r.closed){if(-1===e)return r.complete();t.index=n+1,this.schedule(t,e)}}},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(39);function i(){return Object(r.a)(1)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return a}));var r=e(2),i=e(10),o=e(39),u=e(27);function a(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Number.POSITIVE_INFINITY,a=null,c=t[t.length-1];return Object(i.a)(c)?(a=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(e=t.pop())):"number"==typeof c&&(e=t.pop()),null===a&&1===t.length&&t[0]instanceof r.a?t[0]:Object(o.a)(e)(Object(u.a)(t,a))}},function(t,n,e){"use strict";e.d(n,"a",(function(){return f})),e.d(n,"b",(function(){return s}));var r=e(0),i=e(6),o=e(2),u=e(1),a=e(5),c=e(41),f=function(t){function n(n,e){var r=t.call(this)||this;return r.source=n,r.subjectFactory=e,r._refCount=0,r._isComplete=!1,r}return r.a(n,t),n.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},n.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},n.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new a.a).add(this.source.subscribe(new l(this.getSubject(),this))),t.closed&&(this._connection=null,t=a.a.EMPTY)),t},n.prototype.refCount=function(){return Object(c.a)()(this)},n}(o.a),s=function(){var t=f.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),l=function(t){function n(n,e){var r=t.call(this,n)||this;return r.connectable=e,r}return r.a(n,t),n.prototype._error=function(n){this._unsubscribe(),t.prototype._error.call(this,n)},n.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var n=t._connection;t._refCount=0,t._subject=null,t._connection=null,n&&n.unsubscribe()}},n}(i.b);u.a},function(t,n,e){"use strict";e.d(n,"b",(function(){return u})),e.d(n,"a",(function(){return c}));var r=e(0),i=e(1),o=e(17);function u(t,n){return void 0===n&&(n=0),function(e){return e.lift(new a(t,n))}}var a=function(){function t(t,n){void 0===n&&(n=0),this.scheduler=t,this.delay=n}return t.prototype.call=function(t,n){return n.subscribe(new c(t,this.scheduler,this.delay))},t}(),c=function(t){function n(n,e,r){void 0===r&&(r=0);var i=t.call(this,n)||this;return i.scheduler=e,i.delay=r,i}return r.a(n,t),n.dispatch=function(t){var n=t.notification,e=t.destination;n.observe(e),this.unsubscribe()},n.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(n.dispatch,this.delay,new f(t,this.destination)))},n.prototype._next=function(t){this.scheduleMessage(o.a.createNext(t))},n.prototype._error=function(t){this.scheduleMessage(o.a.createError(t)),this.unsubscribe()},n.prototype._complete=function(){this.scheduleMessage(o.a.createComplete()),this.unsubscribe()},n}(i.a),f=function(){return function(t,n){this.notification=t,this.destination=n}}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(0),i=e(6),o=e(21),u=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return r.a(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return e&&!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.a;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(i.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return c}));var r=e(0),i=e(7),o=e(27),u=e(4),a=e(3);function c(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){if(!Object(i.a)(t[0]))return t[0];t=t[0]}return Object(o.a)(t,void 0).lift(new f)}var f=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new s(t))},t}(),s=function(t){function n(n){var e=t.call(this,n)||this;return e.hasFirst=!1,e.observables=[],e.subscriptions=[],e}return r.a(n,t),n.prototype._next=function(t){this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{for(var e=0;e<n&&!this.hasFirst;e++){var r=t[e],i=Object(a.a)(this,r,r,e);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},n.prototype.notifyNext=function(t,n,e,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==e){var u=this.subscriptions[o];u.unsubscribe(),this.remove(u)}this.subscriptions=null}this.destination.next(n)},n}(u.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(2),i=e(5),o=e(20);var u=e(47),a=e(18);var c=e(70),f=e(68);function s(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[o.a]}(t))return function(t,n){return new r.a((function(e){var r=new i.a;return r.add(n.schedule((function(){var i=t[o.a]();r.add(i.subscribe({next:function(t){r.add(n.schedule((function(){return e.next(t)})))},error:function(t){r.add(n.schedule((function(){return e.error(t)})))},complete:function(){r.add(n.schedule((function(){return e.complete()})))}}))}))),r}))}(t,n);if(Object(c.a)(t))return function(t,n){return new r.a((function(e){var r=new i.a;return r.add(n.schedule((function(){return t.then((function(t){r.add(n.schedule((function(){e.next(t),r.add(n.schedule((function(){return e.complete()})))})))}),(function(t){r.add(n.schedule((function(){return e.error(t)})))}))}))),r}))}(t,n);if(Object(f.a)(t))return Object(u.a)(t,n);if(function(t){return t&&"function"==typeof t[a.a]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new r.a((function(e){var r,o=new i.a;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(n.schedule((function(){r=t[a.a](),o.add(n.schedule((function(){if(!e.closed){var t,n;try{var i=r.next();t=i.value,n=i.done}catch(t){return void e.error(t)}n?e.complete():(e.next(t),this.schedule())}})))}))),o}))}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(0),i=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return r.a(n,t),n.prototype.schedule=function(n,e){return void 0===e&&(e=0),e>0?t.prototype.schedule.call(this,n,e):(this.delay=e,this.state=n,this.scheduler.flush(this),this)},n.prototype.execute=function(n,e){return e>0||this.closed?t.prototype.execute.call(this,n,e):this._execute(n,e)},n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,n,e,r):n.flush(this)},n}(e(29).a),o=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n}(e(26).a))(i)},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(t){return function(n){for(var e=0,r=t.length;e<r&&!n.closed;e++)n.next(t[e]);n.complete()}}},function(t,n,e){"use strict";function r(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(0),i=function(t){function n(n,e){var r=t.call(this)||this;return r.subject=n,r.subscriber=e,r.closed=!1,r}return r.a(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,n=t.observers;if(this.subject=null,n&&0!==n.length&&!t.isStopped&&!t.closed){var e=n.indexOf(this.subscriber);-1!==e&&n.splice(e,1)}}},n}(e(5).a)},function(t,n,e){"use strict";function r(t,n){function e(){return!e.pred.apply(e.thisArg,arguments)}return e.pred=t,e.thisArg=n,e}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(52),i=e(75),o=e(57),u=e(55),a=e(56),c=e(50),f=e(51),s=e(74),l="",h="";function d(t){if(1===t){var n=l;setTimeout((function(){h||n!==l||(r.select(document.getElementById("ListMenuFacet")).transition().transition().duration(500).style("opacity",0),l="")}),3e3)}}function p(t){for(var n=0,e=0;e<t.length;e++)/[a-z0-9\*\\\|\(\)\&\^\%\$\#\@\!\,\.\?\<\>\/]/.test(t[e])?n+=.5:n+=1;return n}n.drawTree=function(t,n,e,v,b,y){var g={children:[]};document.getElementById("ListMenuFacet")||(r.select("body").append("div").attr("id","ListMenuFacet").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","12px").style("color","white").style("padding","5px 3px").style("width","100px").style("height","90px").style("background","#7B7B7B").style("border-radius","6px").on("mouseover",(function(){h="yes"})).on("mouseout",(function(){h="",d(1)})),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionDeleteFacet").style("height","25px").style("margin-top","10px").on("mouseover",(function(){r.select(document.getElementById("optionDeleteFacet")).transition().duration(300).style("background","#ADADAD"),h="yes"})).on("mouseout",(function(){r.select(document.getElementById("optionDeleteFacet")).transition().duration(300).style("background","#7B7B7B")})).style("padding-top","5px").text("删除该主题"),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionAddFacet").style("height","25px").on("mouseover",(function(){r.select(document.getElementById("optionAddFacet")).transition().duration(300).style("background","#ADADAD"),h="yes"})).on("mouseout",(function(){r.select(document.getElementById("optionAddFacet")).transition().duration(300).style("background","#7B7B7B")})).style("padding-top","5px").text("添加新主题").on("click",(function(){console.log("insert callback start")})));for(var _=function(h){setTimeout((function(){s.emptyChildren(t);var y=r.select(t);g=function(t,n,e){t.topicId=n.topicId,t.topicName=n.topicName,t.topicUrl=n.topicUrl,t.topicLayer=n.topicLayer,t.domainId=n.domainId;var r=n.children[e];return t.children.push(r),t.childrenNumber=e+1,t}(g,n,h);var _=a.buildTree(g,t);if(document.getElementById("facet-tree-tooltip")||r.select("body").append("div").attr("id","facet-tree-tooltip").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px"),f.globalData.treeData=_,f.globalState.getValue().init)f.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});else{f.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});var m={currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!1};f.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.currentFacetId,m.currentFacetId)})),i.map((function(t){return t.currentFacetId}))).subscribe((function(t){e(t),m.currentFacetId=t})),f.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.branchFacetId,m.branchFacetId)})),i.map((function(t){return t.branchFacetId}))).subscribe((function(t){v(t),m.branchFacetId=t})),f.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.expandedFacetId})),i.filter((function(t){var n=t.split(",");return n[0]!==n[1]}))).subscribe((function(n){var e=n.split(","),r=e[0],i=e[1];if("-2"!==r&&f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0]){for(var o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}if("-2"!==i&&f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0]){for(o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}}))}console.log("treedata",_),y.append("g").selectAll("rect").data(_.branches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("cursor","pointer").attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).on("mouseover",(function(t){""===l&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){console.log("Test message!"),r.event.preventDefault(),l=n+"select";var e=document.getElementById("ListMenuFacet");r.select(e).transition().style("opacity",.9).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px");var i=document.getElementById("optionDeleteFacet"),o=document.getElementById("optionAddFacet");i.onclick=function(){var t=f.globalState.getValue().expandedFacetId.split(","),e=(t[0],t[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{branchFacetId:_.branches[n].facetId,expandedFacetId:e+",-2"})),console.log("Use your FacetDelete function here!")},o.onclick=function(){b(),console.log("Use your FacetAdd function here!")},d(1)})),y.append("g").selectAll("rect").data(_.foldBranches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("cursor","pointer").attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("transform",(function(t){return t.transform})).on("mouseover",(function(t){""===l&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){console.log("Test message!"),r.event.preventDefault(),l=n+"select";var e=document.getElementById("ListMenuFacet");r.select(e).transition().style("opacity",.9).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px");var i=document.getElementById("optionDeleteFacet"),o=document.getElementById("optionAddFacet");i.onclick=function(){var t=f.globalState.getValue().expandedFacetId.split(","),e=(t[0],t[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{branchFacetId:_.branches[n].facetId,expandedFacetId:e+",-2"})),console.log("Use your FacetDelete function here!")},o.onclick=function(){b(),console.log("Use your FacetAdd function here!")},d(1)})),y.append("g").selectAll("circle").data(_.leaves).enter().append("circle").attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("r",(function(t,n){return _.treeData[n].containChildrenFacet?0:1.5*t.r})).attr("fill",(function(t){return t.color})).style("cursor","pointer").on("click",(function(t,n){var e=f.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{currentFacetId:_.branches[n].facetId,expandedFacetId:r+",-2"}))})),y.append("g").selectAll("text").data(_.texts_leaf).enter().append("text").attr("font-size",(function(t){return t.fontSize})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).text((function(t){return""})).attr("fill","#fff").style("cursor","pointer").on("click",(function(t,n){var e=f.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{currentFacetId:_.branches[n].facetId,expandedFacetId:r+",-2"}))})),_.facetChart.forEach((function(n){c.drawFacetPieChart(n,t)}));var x=y.append("g").selectAll("text").data(_.texts).enter().append("text").attr("font-family","Times New Roman").attr("font-size",(function(t){return t.fontSize+"px"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("cursor","pointer").attr("fill","#fff").on("contextmenu",(function(t,n){console.log("Test message!"),r.event.preventDefault(),l=n+"select";var e=document.getElementById("ListMenuFacet");r.select(e).transition().style("opacity",.9).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px");var i=document.getElementById("optionDeleteFacet"),o=document.getElementById("optionAddFacet");i.onclick=function(){var t=f.globalState.getValue().expandedFacetId.split(","),e=(t[0],t[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{branchFacetId:_.branches[n].facetId,expandedFacetId:e+",-2"})),console.log("Use your FacetDelete function here!")},o.onclick=function(){b(),console.log("Use your FacetAdd function here!")},d(1)}));_.texts.forEach((function(t,n){r.select(x._groups[0][n]).selectAll("tspan").data(t.text.split("")).enter().append("tspan").attr("x",t.x).attr("dy","1.2em").text((function(t){return t})),console.log("x",t.x)})),y.append("g").append("text").attr("x",t.clientWidth/2-24*p(n.topicName)/2).attr("y",t.clientHeight-10).text(n.topicName).attr("fill","#000").attr("font-size","24px"),h+1===n.children.length&&setTimeout((function(){window.lock=!1}),100)}),h*y)},m=0;m<n.children.length;m++)_(m)},n.judgementStringLengthWithChinese=p},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.emptyChildren=function(t){for(var n=t.childNodes;n.length>0;)t.removeChild(n[0])}},function(t,n,e){"use strict";e.r(n),e.d(n,"audit",(function(){return u})),e.d(n,"auditTime",(function(){return l})),e.d(n,"buffer",(function(){return h})),e.d(n,"bufferCount",(function(){return b})),e.d(n,"bufferTime",(function(){return x})),e.d(n,"bufferToggle",(function(){return I})),e.d(n,"bufferWhen",(function(){return j})),e.d(n,"catchError",(function(){return z})),e.d(n,"combineAll",(function(){return V})),e.d(n,"combineLatest",(function(){return q})),e.d(n,"concat",(function(){return H})),e.d(n,"concatAll",(function(){return W.a})),e.d(n,"concatMap",(function(){return X})),e.d(n,"concatMapTo",(function(){return G})),e.d(n,"count",(function(){return Z})),e.d(n,"debounce",(function(){return J})),e.d(n,"debounceTime",(function(){return et})),e.d(n,"defaultIfEmpty",(function(){return ut})),e.d(n,"delay",(function(){return lt})),e.d(n,"delayWhen",(function(){return bt})),e.d(n,"dematerialize",(function(){return xt})),e.d(n,"distinct",(function(){return Mt})),e.d(n,"distinctUntilChanged",(function(){return Nt})),e.d(n,"distinctUntilKeyChanged",(function(){return kt})),e.d(n,"elementAt",(function(){return Ut})),e.d(n,"endWith",(function(){return Yt})),e.d(n,"every",(function(){return Ht})),e.d(n,"exhaust",(function(){return Xt})),e.d(n,"exhaustMap",(function(){return Qt})),e.d(n,"expand",(function(){return nn})),e.d(n,"filter",(function(){return jt.a})),e.d(n,"finalize",(function(){return on})),e.d(n,"find",(function(){return cn})),e.d(n,"findIndex",(function(){return ln})),e.d(n,"first",(function(){return dn})),e.d(n,"groupBy",(function(){return pn.b})),e.d(n,"ignoreElements",(function(){return vn})),e.d(n,"isEmpty",(function(){return gn})),e.d(n,"last",(function(){return Mn})),e.d(n,"map",(function(){return Kt.a})),e.d(n,"mapTo",(function(){return En})),e.d(n,"materialize",(function(){return Tn})),e.d(n,"max",(function(){return zn})),e.d(n,"merge",(function(){return Rn})),e.d(n,"mergeAll",(function(){return Bn.a})),e.d(n,"mergeMap",(function(){return $.a})),e.d(n,"flatMap",(function(){return $.a})),e.d(n,"mergeMapTo",(function(){return Vn})),e.d(n,"mergeScan",(function(){return Ln})),e.d(n,"min",(function(){return Yn})),e.d(n,"multicast",(function(){return Wn})),e.d(n,"observeOn",(function(){return Xn.b})),e.d(n,"onErrorResumeNext",(function(){return Gn})),e.d(n,"pairwise",(function(){return Qn})),e.d(n,"partition",(function(){return ee})),e.d(n,"pluck",(function(){return re})),e.d(n,"publish",(function(){return ue})),e.d(n,"publishBehavior",(function(){return ce})),e.d(n,"publishLast",(function(){return se})),e.d(n,"publishReplay",(function(){return he})),e.d(n,"race",(function(){return pe})),e.d(n,"reduce",(function(){return Pn})),e.d(n,"repeat",(function(){return ve})),e.d(n,"repeatWhen",(function(){return ge})),e.d(n,"retry",(function(){return xe})),e.d(n,"retryWhen",(function(){return Me})),e.d(n,"refCount",(function(){return Ne.a})),e.d(n,"sample",(function(){return Te})),e.d(n,"sampleTime",(function(){return Ce})),e.d(n,"scan",(function(){return Cn})),e.d(n,"sequenceEqual",(function(){return Pe})),e.d(n,"share",(function(){return Ve})),e.d(n,"shareReplay",(function(){return Le})),e.d(n,"single",(function(){return Ue})),e.d(n,"skip",(function(){return He})),e.d(n,"skipLast",(function(){return Xe})),e.d(n,"skipUntil",(function(){return Ke})),e.d(n,"skipWhile",(function(){return tr})),e.d(n,"startWith",(function(){return rr})),e.d(n,"subscribeOn",(function(){return ar})),e.d(n,"switchAll",(function(){return hr})),e.d(n,"switchMap",(function(){return fr})),e.d(n,"switchMapTo",(function(){return dr})),e.d(n,"take",(function(){return Bt})),e.d(n,"takeLast",(function(){return xn})),e.d(n,"takeUntil",(function(){return pr})),e.d(n,"takeWhile",(function(){return yr})),e.d(n,"tap",(function(){return wr})),e.d(n,"throttle",(function(){return Ar})),e.d(n,"throttleTime",(function(){return Ir})),e.d(n,"throwIfEmpty",(function(){return Ft})),e.d(n,"timeInterval",(function(){return Fr})),e.d(n,"timeout",(function(){return Lr})),e.d(n,"timeoutWith",(function(){return Dr})),e.d(n,"timestamp",(function(){return Ur})),e.d(n,"toArray",(function(){return Hr})),e.d(n,"window",(function(){return Wr})),e.d(n,"windowCount",(function(){return Gr})),e.d(n,"windowTime",(function(){return Qr})),e.d(n,"windowToggle",(function(){return oi})),e.d(n,"windowWhen",(function(){return ci})),e.d(n,"withLatestFrom",(function(){return li})),e.d(n,"zip",(function(){return vi})),e.d(n,"zipAll",(function(){return bi}));var r=e(0),i=e(4),o=e(3);function u(t){return function(n){return n.lift(new a(t))}}var a=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new c(t,this.durationSelector))},t}(),c=function(t){function n(n,e){var r=t.call(this,n)||this;return r.durationSelector=e,r.hasValue=!1,r}return r.a(n,t),n.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var n=void 0;try{n=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var e=Object(o.a)(this,n);!e||e.closed?this.clearThrottle():this.add(this.throttled=e)}},n.prototype.clearThrottle=function(){var t=this.value,n=this.hasValue,e=this.throttled;e&&(this.remove(e),this.throttled=null,e.unsubscribe()),n&&(this.value=null,this.hasValue=!1,this.destination.next(t))},n.prototype.notifyNext=function(t,n,e,r){this.clearThrottle()},n.prototype.notifyComplete=function(){this.clearThrottle()},n}(i.a),f=e(8),s=e(58);function l(t,n){return void 0===n&&(n=f.a),u((function(){return Object(s.a)(t,n)}))}function h(t){return function(n){return n.lift(new d(t))}}var d=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,n){return n.subscribe(new p(t,this.closingNotifier))},t}(),p=function(t){function n(n,e){var r=t.call(this,n)||this;return r.buffer=[],r.add(Object(o.a)(r,e)),r}return r.a(n,t),n.prototype._next=function(t){this.buffer.push(t)},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.buffer;this.buffer=[],this.destination.next(o)},n}(i.a),v=e(1);function b(t,n){return void 0===n&&(n=null),function(e){return e.lift(new y(t,n))}}var y=function(){function t(t,n){this.bufferSize=t,this.startBufferEvery=n,this.subscriberClass=n&&t!==n?_:g}return t.prototype.call=function(t,n){return n.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),g=function(t){function n(n,e){var r=t.call(this,n)||this;return r.bufferSize=e,r.buffer=[],r}return r.a(n,t),n.prototype._next=function(t){var n=this.buffer;n.push(t),n.length==this.bufferSize&&(this.destination.next(n),this.buffer=[])},n.prototype._complete=function(){var n=this.buffer;n.length>0&&this.destination.next(n),t.prototype._complete.call(this)},n}(v.a),_=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.bufferSize=e,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.a(n,t),n.prototype._next=function(t){var n=this.bufferSize,e=this.startBufferEvery,r=this.buffers,i=this.count;this.count++,i%e==0&&r.push([]);for(var o=r.length;o--;){var u=r[o];u.push(t),u.length===n&&(r.splice(o,1),this.destination.next(u))}},n.prototype._complete=function(){for(var n=this.buffers,e=this.destination;n.length>0;){var r=n.shift();r.length>0&&e.next(r)}t.prototype._complete.call(this)},n}(v.a),m=e(10);function x(t){var n=arguments.length,e=f.a;Object(m.a)(arguments[arguments.length-1])&&(e=arguments[arguments.length-1],n--);var r=null;n>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return n>=3&&(i=arguments[2]),function(n){return n.lift(new w(t,r,i,e))}}var w=function(){function t(t,n,e,r){this.bufferTimeSpan=t,this.bufferCreationInterval=n,this.maxBufferSize=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new M(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),S=function(){return function(){this.buffer=[]}}(),M=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;u.bufferTimeSpan=e,u.bufferCreationInterval=r,u.maxBufferSize=i,u.scheduler=o,u.contexts=[];var a=u.openContext();if(u.timespanOnly=null==r||r<0,u.timespanOnly){var c={subscriber:u,context:a,bufferTimeSpan:e};u.add(a.closeAction=o.schedule(E,e,c))}else{var f={subscriber:u,context:a},s={bufferTimeSpan:e,bufferCreationInterval:r,subscriber:u,scheduler:o};u.add(a.closeAction=o.schedule(N,e,f)),u.add(o.schedule(A,r,s))}return u}return r.a(n,t),n.prototype._next=function(t){for(var n,e=this.contexts,r=e.length,i=0;i<r;i++){var o=e[i],u=o.buffer;u.push(t),u.length==this.maxBufferSize&&(n=o)}n&&this.onBufferFull(n)},n.prototype._error=function(n){this.contexts.length=0,t.prototype._error.call(this,n)},n.prototype._complete=function(){for(var n=this.contexts,e=this.destination;n.length>0;){var r=n.shift();e.next(r.buffer)}t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){this.contexts=null},n.prototype.onBufferFull=function(t){this.closeContext(t);var n=t.closeAction;if(n.unsubscribe(),this.remove(n),!this.closed&&this.timespanOnly){t=this.openContext();var e=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:e};this.add(t.closeAction=this.scheduler.schedule(E,e,r))}},n.prototype.openContext=function(){var t=new S;return this.contexts.push(t),t},n.prototype.closeContext=function(t){this.destination.next(t.buffer);var n=this.contexts;(n?n.indexOf(t):-1)>=0&&n.splice(n.indexOf(t),1)},n}(v.a);function E(t){var n=t.subscriber,e=t.context;e&&n.closeContext(e),n.closed||(t.context=n.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function A(t){var n=t.bufferCreationInterval,e=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(N,e,{subscriber:r,context:o})),this.schedule(t,n))}function N(t){var n=t.subscriber,e=t.context;n.closeContext(e)}var T=e(5);function I(t,n){return function(e){return e.lift(new k(t,n))}}var k=function(){function t(t,n){this.openings=t,this.closingSelector=n}return t.prototype.call=function(t,n){return n.subscribe(new C(t,this.openings,this.closingSelector))},t}(),C=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.openings=e,i.closingSelector=r,i.contexts=[],i.add(Object(o.a)(i,e)),i}return r.a(n,t),n.prototype._next=function(t){for(var n=this.contexts,e=n.length,r=0;r<e;r++)n[r].buffer.push(t)},n.prototype._error=function(n){for(var e=this.contexts;e.length>0;){var r=e.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,n)},n.prototype._complete=function(){for(var n=this.contexts;n.length>0;){var e=n.shift();this.destination.next(e.buffer),e.subscription.unsubscribe(),e.buffer=null,e.subscription=null}this.contexts=null,t.prototype._complete.call(this)},n.prototype.notifyNext=function(t,n,e,r,i){t?this.closeBuffer(t):this.openBuffer(n)},n.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},n.prototype.openBuffer=function(t){try{var n=this.closingSelector.call(this,t);n&&this.trySubscribe(n)}catch(t){this._error(t)}},n.prototype.closeBuffer=function(t){var n=this.contexts;if(n&&t){var e=t.buffer,r=t.subscription;this.destination.next(e),n.splice(n.indexOf(t),1),this.remove(r),r.unsubscribe()}},n.prototype.trySubscribe=function(t){var n=this.contexts,e=new T.a,r={buffer:[],subscription:e};n.push(r);var i=Object(o.a)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),e.add(i))},n}(i.a);function j(t){return function(n){return n.lift(new O(t))}}var O=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new F(t,this.closingSelector))},t}(),F=function(t){function n(n,e){var r=t.call(this,n)||this;return r.closingSelector=e,r.subscribing=!1,r.openBuffer(),r}return r.a(n,t),n.prototype._next=function(t){this.buffer.push(t)},n.prototype._complete=function(){var n=this.buffer;n&&this.destination.next(n),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},n.prototype.notifyNext=function(t,n,e,r,i){this.openBuffer()},n.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},n.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var n,e=this.buffer;this.buffer&&this.destination.next(e),this.buffer=[];try{n=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new T.a,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add(Object(o.a)(this,n)),this.subscribing=!1},n}(i.a),P=e(13);function z(t){return function(n){var e=new D(t),r=n.lift(e);return e.caught=r}}var D=function(){function t(t){this.selector=t}return t.prototype.call=function(t,n){return n.subscribe(new R(t,this.selector,this.caught))},t}(),R=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.selector=e,i.caught=r,i}return r.a(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=void 0;try{e=this.selector(n,this.caught)}catch(n){return void t.prototype.error.call(this,n)}this._unsubscribeAndRecycle();var r=new P.a(this,void 0,void 0);this.add(r);var i=Object(o.a)(this,e,void 0,void 0,r);i!==r&&this.add(i)}},n}(i.a),B=e(38);function V(t){return function(n){return n.lift(new B.a(t))}}var L=e(7),U=e(12);function q(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null;return"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&Object(L.a)(t[0])&&(t=t[0].slice()),function(n){return n.lift.call(Object(U.a)([n].concat(t)),new B.a(e))}}var Y=e(31);function H(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(Y.a.apply(void 0,[n].concat(t)))}}var W=e(59),$=e(22);function X(t,n){return Object($.a)(t,n,1)}function G(t,n){return X((function(){return t}),n)}function Z(t){return function(n){return n.lift(new K(t,n))}}var K=function(){function t(t,n){this.predicate=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Q(t,this.predicate,this.source))},t}(),Q=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.source=r,i.count=0,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},n.prototype._tryPredicate=function(t){var n;try{n=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}n&&this.count++},n.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},n}(v.a);function J(t){return function(n){return n.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new nt(t,this.durationSelector))},t}(),nt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.durationSelector=e,r.hasValue=!1,r.durationSubscription=null,r}return r.a(n,t),n.prototype._next=function(t){try{var n=this.durationSelector.call(this,t);n&&this._tryNext(t,n)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.emitValue(),this.destination.complete()},n.prototype._tryNext=function(t,n){var e=this.durationSubscription;this.value=t,this.hasValue=!0,e&&(e.unsubscribe(),this.remove(e)),(e=Object(o.a)(this,n))&&!e.closed&&this.add(this.durationSubscription=e)},n.prototype.notifyNext=function(t,n,e,r,i){this.emitValue()},n.prototype.notifyComplete=function(){this.emitValue()},n.prototype.emitValue=function(){if(this.hasValue){var n=this.value,e=this.durationSubscription;e&&(this.durationSubscription=null,e.unsubscribe(),this.remove(e)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,n)}},n}(i.a);function et(t,n){return void 0===n&&(n=f.a),function(e){return e.lift(new rt(t,n))}}var rt=function(){function t(t,n){this.dueTime=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.dueTime=e,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.a(n,t),n.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},n.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},n.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},n.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},n}(v.a);function ot(t){t.debouncedNext()}function ut(t){return void 0===t&&(t=null),function(n){return n.lift(new at(t))}}var at=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,n){return n.subscribe(new ct(t,this.defaultValue))},t}(),ct=function(t){function n(n,e){var r=t.call(this,n)||this;return r.defaultValue=e,r.isEmpty=!0,r}return r.a(n,t),n.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},n.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},n}(v.a);function ft(t){return t instanceof Date&&!isNaN(+t)}var st=e(17);function lt(t,n){void 0===n&&(n=f.a);var e=ft(t)?+t-n.now():Math.abs(t);return function(t){return t.lift(new ht(e,n))}}var ht=function(){function t(t,n){this.delay=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new dt(t,this.delay,this.scheduler))},t}(),dt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.delay=e,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.a(n,t),n.dispatch=function(t){for(var n=t.source,e=n.queue,r=t.scheduler,i=t.destination;e.length>0&&e[0].time-r.now()<=0;)e.shift().notification.observe(i);if(e.length>0){var o=Math.max(0,e[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),n.active=!1},n.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(n.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},n.prototype.scheduleNotification=function(t){if(!0!==this.errored){var n=this.scheduler,e=new pt(n.now()+this.delay,t);this.queue.push(e),!1===this.active&&this._schedule(n)}},n.prototype._next=function(t){this.scheduleNotification(st.a.createNext(t))},n.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.scheduleNotification(st.a.createComplete()),this.unsubscribe()},n}(v.a),pt=function(){return function(t,n){this.time=t,this.notification=n}}(),vt=e(2);function bt(t,n){return n?function(e){return new _t(e,n).lift(new yt(t))}:function(n){return n.lift(new yt(t))}}var yt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new gt(t,this.delayDurationSelector))},t}(),gt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.delayDurationSelector=e,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){var n=this.removeSubscription(t);n&&this.destination.next(n),this.tryComplete()},n.prototype._next=function(t){var n=this.index++;try{var e=this.delayDurationSelector(t,n);e&&this.tryDelay(e,t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},n.prototype.removeSubscription=function(t){t.unsubscribe();var n=this.delayNotifierSubscriptions.indexOf(t);return-1!==n&&this.delayNotifierSubscriptions.splice(n,1),t.outerValue},n.prototype.tryDelay=function(t,n){var e=Object(o.a)(this,t,n);e&&!e.closed&&(this.destination.add(e),this.delayNotifierSubscriptions.push(e))},n.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},n}(i.a),_t=function(t){function n(n,e){var r=t.call(this)||this;return r.source=n,r.subscriptionDelay=e,r}return r.a(n,t),n.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new mt(t,this.source))},n}(vt.a),mt=function(t){function n(n,e){var r=t.call(this)||this;return r.parent=n,r.source=e,r.sourceSubscribed=!1,r}return r.a(n,t),n.prototype._next=function(t){this.subscribeToSource()},n.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},n.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},n.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},n}(v.a);function xt(){return function(t){return t.lift(new wt)}}var wt=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new St(t))},t}(),St=function(t){function n(n){return t.call(this,n)||this}return r.a(n,t),n.prototype._next=function(t){t.observe(this.destination)},n}(v.a);function Mt(t,n){return function(e){return e.lift(new Et(t,n))}}var Et=function(){function t(t,n){this.keySelector=t,this.flushes=n}return t.prototype.call=function(t,n){return n.subscribe(new At(t,this.keySelector,this.flushes))},t}(),At=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.keySelector=e,i.values=new Set,r&&i.add(Object(o.a)(i,r)),i}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.values.clear()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},n.prototype._useKeySelector=function(t){var n,e=this.destination;try{n=this.keySelector(t)}catch(t){return void e.error(t)}this._finalizeNext(n,t)},n.prototype._finalizeNext=function(t,n){var e=this.values;e.has(t)||(e.add(t),this.destination.next(n))},n}(i.a);function Nt(t,n){return function(e){return e.lift(new Tt(t,n))}}var Tt=function(){function t(t,n){this.compare=t,this.keySelector=n}return t.prototype.call=function(t,n){return n.subscribe(new It(t,this.compare,this.keySelector))},t}(),It=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.keySelector=r,i.hasKey=!1,"function"==typeof e&&(i.compare=e),i}return r.a(n,t),n.prototype.compare=function(t,n){return t===n},n.prototype._next=function(t){var n;try{var e=this.keySelector;n=e?e(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,n)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=n,this.destination.next(t))},n}(v.a);function kt(t,n){return Nt((function(e,r){return n?n(e[t],r[t]):e[t]===r[t]}))}var Ct=e(23),jt=e(16),Ot=e(25);function Ft(t){return void 0===t&&(t=Dt),function(n){return n.lift(new Pt(t))}}var Pt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,n){return n.subscribe(new zt(t,this.errorFactory))},t}(),zt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.errorFactory=e,r.hasValue=!1,r}return r.a(n,t),n.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},n.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(n){t=n}this.destination.error(t)},n}(v.a);function Dt(){return new Ot.a}var Rt=e(11);function Bt(t){return function(n){return 0===t?Object(Rt.b)():n.lift(new Vt(t))}}var Vt=function(){function t(t){if(this.total=t,this.total<0)throw new Ct.a}return t.prototype.call=function(t,n){return n.subscribe(new Lt(t,this.total))},t}(),Lt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.count=0,r}return r.a(n,t),n.prototype._next=function(t){var n=this.total,e=++this.count;e<=n&&(this.destination.next(t),e===n&&(this.destination.complete(),this.unsubscribe()))},n}(v.a);function Ut(t,n){if(t<0)throw new Ct.a;var e=arguments.length>=2;return function(r){return r.pipe(Object(jt.a)((function(n,e){return e===t})),Bt(1),e?ut(n):Ft((function(){return new Ct.a})))}}var qt=e(33);function Yt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return Object(Y.a)(n,qt.a.apply(void 0,t))}}function Ht(t,n){return function(e){return e.lift(new Wt(t,n,e))}}var Wt=function(){function t(t,n,e){this.predicate=t,this.thisArg=n,this.source=e}return t.prototype.call=function(t,n){return n.subscribe(new $t(t,this.predicate,this.thisArg,this.source))},t}(),$t=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.predicate=e,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.a(n,t),n.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},n.prototype._next=function(t){var n=!1;try{n=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}n||this.notifyComplete(!1)},n.prototype._complete=function(){this.notifyComplete(!0)},n}(v.a);function Xt(){return function(t){return t.lift(new Gt)}}var Gt=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new Zt(t))},t}(),Zt=function(t){function n(n){var e=t.call(this,n)||this;return e.hasCompleted=!1,e.hasSubscription=!1,e}return r.a(n,t),n.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add(Object(o.a)(this,t)))},n.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},n.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},n}(i.a),Kt=e(9);function Qt(t,n){return n?function(e){return e.pipe(Qt((function(e,r){return Object(U.a)(t(e,r)).pipe(Object(Kt.a)((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new Jt(t))}}var Jt=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new tn(t,this.project))},t}(),tn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.project=e,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.a(n,t),n.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},n.prototype.tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=new P.a(this,n,e),i=this.destination;i.add(r);var u=Object(o.a)(this,t,void 0,void 0,r);u!==r&&i.add(u)},n.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyError=function(t){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},n}(i.a);function nn(t,n,e){return void 0===n&&(n=Number.POSITIVE_INFINITY),void 0===e&&(e=void 0),n=(n||0)<1?Number.POSITIVE_INFINITY:n,function(r){return r.lift(new en(t,n,e))}}var en=function(){function t(t,n,e){this.project=t,this.concurrent=n,this.scheduler=e}return t.prototype.call=function(t,n){return n.subscribe(new rn(t,this.project,this.concurrent,this.scheduler))},t}(),rn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.project=e,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.a(n,t),n.dispatch=function(t){var n=t.subscriber,e=t.result,r=t.value,i=t.index;n.subscribeToProjection(e,r,i)},n.prototype._next=function(t){var e=this.destination;if(e.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){e.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(n.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){e.error(t)}}else this.buffer.push(t)}},n.prototype.subscribeToProjection=function(t,n,e){this.active++,this.destination.add(Object(o.a)(this,t,n,e))},n.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this._next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.destination.remove(t),this.active--,n&&n.length>0&&this._next(n.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},n}(i.a);function on(t){return function(n){return n.lift(new un(t))}}var un=function(){function t(t){this.callback=t}return t.prototype.call=function(t,n){return n.subscribe(new an(t,this.callback))},t}(),an=function(t){function n(n,e){var r=t.call(this,n)||this;return r.add(new T.a(e)),r}return r.a(n,t),n}(v.a);function cn(t,n){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(e){return e.lift(new fn(t,e,!1,n))}}var fn=function(){function t(t,n,e,r){this.predicate=t,this.source=n,this.yieldIndex=e,this.thisArg=r}return t.prototype.call=function(t,n){return n.subscribe(new sn(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),sn=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.predicate=e,u.source=r,u.yieldIndex=i,u.thisArg=o,u.index=0,u}return r.a(n,t),n.prototype.notifyComplete=function(t){var n=this.destination;n.next(t),n.complete(),this.unsubscribe()},n.prototype._next=function(t){var n=this.predicate,e=this.thisArg,r=this.index++;try{n.call(e||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},n}(v.a);function ln(t,n){return function(e){return e.lift(new fn(t,e,!0,n))}}var hn=e(15);function dn(t,n){var e=arguments.length>=2;return function(r){return r.pipe(t?Object(jt.a)((function(n,e){return t(n,e,r)})):hn.a,Bt(1),e?ut(n):Ft((function(){return new Ot.a})))}}var pn=e(54);function vn(){return function(t){return t.lift(new bn)}}var bn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new yn(t))},t}(),yn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n.prototype._next=function(t){},n}(v.a);function gn(){return function(t){return t.lift(new _n)}}var _n=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new mn(t))},t}(),mn=function(t){function n(n){return t.call(this,n)||this}return r.a(n,t),n.prototype.notifyComplete=function(t){var n=this.destination;n.next(t),n.complete()},n.prototype._next=function(t){this.notifyComplete(!1)},n.prototype._complete=function(){this.notifyComplete(!0)},n}(v.a);function xn(t){return function(n){return 0===t?Object(Rt.b)():n.lift(new wn(t))}}var wn=function(){function t(t){if(this.total=t,this.total<0)throw new Ct.a}return t.prototype.call=function(t,n){return n.subscribe(new Sn(t,this.total))},t}(),Sn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.ring=new Array,r.count=0,r}return r.a(n,t),n.prototype._next=function(t){var n=this.ring,e=this.total,r=this.count++;n.length<e?n.push(t):n[r%e]=t},n.prototype._complete=function(){var t=this.destination,n=this.count;if(n>0)for(var e=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<e;i++){var o=n++%e;t.next(r[o])}t.complete()},n}(v.a);function Mn(t,n){var e=arguments.length>=2;return function(r){return r.pipe(t?Object(jt.a)((function(n,e){return t(n,e,r)})):hn.a,xn(1),e?ut(n):Ft((function(){return new Ot.a})))}}function En(t){return function(n){return n.lift(new An(t))}}var An=function(){function t(t){this.value=t}return t.prototype.call=function(t,n){return n.subscribe(new Nn(t,this.value))},t}(),Nn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.value=e,r}return r.a(n,t),n.prototype._next=function(t){this.destination.next(this.value)},n}(v.a);function Tn(){return function(t){return t.lift(new In)}}var In=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new kn(t))},t}(),kn=function(t){function n(n){return t.call(this,n)||this}return r.a(n,t),n.prototype._next=function(t){this.destination.next(st.a.createNext(t))},n.prototype._error=function(t){var n=this.destination;n.next(st.a.createError(t)),n.complete()},n.prototype._complete=function(){var t=this.destination;t.next(st.a.createComplete()),t.complete()},n}(v.a);function Cn(t,n){var e=!1;return arguments.length>=2&&(e=!0),function(r){return r.lift(new jn(t,n,e))}}var jn=function(){function t(t,n,e){void 0===e&&(e=!1),this.accumulator=t,this.seed=n,this.hasSeed=e}return t.prototype.call=function(t,n){return n.subscribe(new On(t,this.accumulator,this.seed,this.hasSeed))},t}(),On=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.accumulator=e,o._seed=r,o.hasSeed=i,o.index=0,o}return r.a(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.accumulator(this.seed,t,e)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(v.a),Fn=e(34);function Pn(t,n){return arguments.length>=2?function(e){return Object(Fn.a)(Cn(t,n),xn(1),ut(n))(e)}:function(n){return Object(Fn.a)(Cn((function(n,e,r){return t(n,e,r+1)})),xn(1))(n)}}function zn(t){return Pn("function"==typeof t?function(n,e){return t(n,e)>0?n:e}:function(t,n){return t>n?t:n})}var Dn=e(60);function Rn(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(Dn.a.apply(void 0,[n].concat(t)))}}var Bn=e(39);function Vn(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?Object($.a)((function(){return t}),n,e):("number"==typeof n&&(e=n),Object($.a)((function(){return t}),e))}function Ln(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),function(r){return r.lift(new Un(t,n,e))}}var Un=function(){function t(t,n,e){this.accumulator=t,this.seed=n,this.concurrent=e}return t.prototype.call=function(t,n){return n.subscribe(new qn(t,this.accumulator,this.seed,this.concurrent))},t}(),qn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.accumulator=e,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.a(n,t),n.prototype._next=function(t){if(this.active<this.concurrent){var n=this.index++,e=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,n)}catch(t){return e.error(t)}this.active++,this._innerSub(r,t,n)}else this.buffer.push(t)},n.prototype._innerSub=function(t,n,e){var r=new P.a(this,n,e),i=this.destination;i.add(r);var u=Object(o.a)(this,t,void 0,void 0,r);u!==r&&i.add(u)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.destination;this.acc=n,this.hasValue=!0,o.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.destination.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},n}(i.a);function Yn(t){return Pn("function"==typeof t?function(n,e){return t(n,e)<0?n:e}:function(t,n){return t<n?t:n})}var Hn=e(61);function Wn(t,n){return function(e){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof n)return e.lift(new $n(r,n));var i=Object.create(e,Hn.b);return i.source=e,i.subjectFactory=r,i}}var $n=function(){function t(t,n){this.subjectFactory=t,this.selector=n}return t.prototype.call=function(t,n){var e=this.selector,r=this.subjectFactory(),i=e(r).subscribe(t);return i.add(n.subscribe(r)),i},t}(),Xn=e(62);function Gn(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 1===t.length&&Object(L.a)(t[0])&&(t=t[0]),function(n){return n.lift(new Zn(t))}}var Zn=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,n){return n.subscribe(new Kn(t,this.nextSources))},t}(),Kn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.destination=n,r.nextSources=e,r}return r.a(n,t),n.prototype.notifyError=function(t,n){this.subscribeToNextSource()},n.prototype.notifyComplete=function(t){this.subscribeToNextSource()},n.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},n.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},n.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var n=new P.a(this,void 0,void 0),e=this.destination;e.add(n);var r=Object(o.a)(this,t,void 0,void 0,n);r!==n&&e.add(r)}else this.destination.complete()},n}(i.a);function Qn(){return function(t){return t.lift(new Jn)}}var Jn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new te(t))},t}(),te=function(t){function n(n){var e=t.call(this,n)||this;return e.hasPrev=!1,e}return r.a(n,t),n.prototype._next=function(t){var n;this.hasPrev?n=[this.prev,t]:this.hasPrev=!0,this.prev=t,n&&this.destination.next(n)},n}(v.a),ne=e(72);function ee(t,n){return function(e){return[Object(jt.a)(t,n)(e),Object(jt.a)(Object(ne.a)(t,n))(e)]}}function re(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.length;if(0===e)throw new Error("list of properties cannot be empty.");return function(n){return Object(Kt.a)(ie(t,e))(n)}}function ie(t,n){return function(e){for(var r=e,i=0;i<n;i++){var o=r[t[i]];if(void 0===o)return;r=o}return r}}var oe=e(6);function ue(t){return t?Wn((function(){return new oe.a}),t):Wn(new oe.a)}var ae=e(63);function ce(t){return function(n){return Wn(new ae.a(t))(n)}}var fe=e(28);function se(){return function(t){return Wn(new fe.a)(t)}}var le=e(42);function he(t,n,e,r){e&&"function"!=typeof e&&(r=e);var i="function"==typeof e?e:void 0,o=new le.a(t,n,r);return function(t){return Wn((function(){return o}),i)(t)}}var de=e(64);function pe(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return 1===t.length&&Object(L.a)(t[0])&&(t=t[0]),n.lift.call(de.a.apply(void 0,[n].concat(t)))}}function ve(t){return void 0===t&&(t=-1),function(n){return 0===t?Object(Rt.b)():t<0?n.lift(new be(-1,n)):n.lift(new be(t-1,n))}}var be=function(){function t(t,n){this.count=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new ye(t,this.count,this.source))},t}(),ye=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.count=e,i.source=r,i}return r.a(n,t),n.prototype.complete=function(){if(!this.isStopped){var n=this.source,e=this.count;if(0===e)return t.prototype.complete.call(this);e>-1&&(this.count=e-1),n.subscribe(this._unsubscribeAndRecycle())}},n}(v.a);function ge(t){return function(n){return n.lift(new _e(t))}}var _e=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){return n.subscribe(new me(t,this.notifier,n))},t}(),me=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.notifier=e,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},n.prototype.notifyComplete=function(n){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},n.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},n.prototype._unsubscribe=function(){var t=this.notifications,n=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),n&&(n.unsubscribe(),this.retriesSubscription=null),this.retries=null},n.prototype._unsubscribeAndRecycle=function(){var n=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=n,this},n.prototype.subscribeToRetries=function(){var n;this.notifications=new oe.a;try{n=(0,this.notifier)(this.notifications)}catch(n){return t.prototype.complete.call(this)}this.retries=n,this.retriesSubscription=Object(o.a)(this,n)},n}(i.a);function xe(t){return void 0===t&&(t=-1),function(n){return n.lift(new we(t,n))}}var we=function(){function t(t,n){this.count=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Se(t,this.count,this.source))},t}(),Se=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.count=e,i.source=r,i}return r.a(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,n);r>-1&&(this.count=r-1),e.subscribe(this._unsubscribeAndRecycle())}},n}(v.a);function Me(t){return function(n){return n.lift(new Ee(t,n))}}var Ee=function(){function t(t,n){this.notifier=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Ae(t,this.notifier,this.source))},t}(),Ae=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.notifier=e,i.source=r,i}return r.a(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=this.errors,r=this.retries,i=this.retriesSubscription;if(r)this.errors=null,this.retriesSubscription=null;else{e=new oe.a;try{r=(0,this.notifier)(e)}catch(n){return t.prototype.error.call(this,n)}i=Object(o.a)(this,r)}this._unsubscribeAndRecycle(),this.errors=e,this.retries=r,this.retriesSubscription=i,e.next(n)}},n.prototype._unsubscribe=function(){var t=this.errors,n=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),n&&(n.unsubscribe(),this.retriesSubscription=null),this.retries=null},n.prototype.notifyNext=function(t,n,e,r,i){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},n}(i.a),Ne=e(41);function Te(t){return function(n){return n.lift(new Ie(t))}}var Ie=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new ke(t),r=n.subscribe(e);return r.add(Object(o.a)(e,this.notifier)),r},t}(),ke=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.hasValue=!1,n}return r.a(n,t),n.prototype._next=function(t){this.value=t,this.hasValue=!0},n.prototype.notifyNext=function(t,n,e,r,i){this.emitValue()},n.prototype.notifyComplete=function(){this.emitValue()},n.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},n}(i.a);function Ce(t,n){return void 0===n&&(n=f.a),function(e){return e.lift(new je(t,n))}}var je=function(){function t(t,n){this.period=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new Oe(t,this.period,this.scheduler))},t}(),Oe=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.period=e,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(Fe,e,{subscriber:i,period:e})),i}return r.a(n,t),n.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},n.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},n}(v.a);function Fe(t){var n=t.subscriber,e=t.period;n.notifyNext(),this.schedule(t,e)}function Pe(t,n){return function(e){return e.lift(new ze(t,n))}}var ze=function(){function t(t,n){this.compareTo=t,this.comparator=n}return t.prototype.call=function(t,n){return n.subscribe(new De(t,this.compareTo,this.comparator))},t}(),De=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.compareTo=e,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(e.subscribe(new Re(n,i))),i}return r.a(n,t),n.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},n.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},n.prototype.checkValues=function(){for(var t=this._a,n=this._b,e=this.comparator;t.length>0&&n.length>0;){var r=t.shift(),i=n.shift(),o=!1;try{o=e?e(r,i):r===i}catch(t){this.destination.error(t)}o||this.emit(!1)}},n.prototype.emit=function(t){var n=this.destination;n.next(t),n.complete()},n.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},n.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},n}(v.a),Re=function(t){function n(n,e){var r=t.call(this,n)||this;return r.parent=e,r}return r.a(n,t),n.prototype._next=function(t){this.parent.nextB(t)},n.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},n.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},n}(v.a);function Be(){return new oe.a}function Ve(){return function(t){return Object(Ne.a)()(Wn(Be)(t))}}function Le(t,n,e){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:n,refCount:!1,scheduler:e},function(t){return t.lift(function(t){var n,e,r=t.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=t.windowTime,u=void 0===o?Number.POSITIVE_INFINITY:o,a=t.refCount,c=t.scheduler,f=0,s=!1,l=!1;return function(t){f++,n&&!s||(s=!1,n=new le.a(i,u,c),e=t.subscribe({next:function(t){n.next(t)},error:function(t){s=!0,n.error(t)},complete:function(){l=!0,e=void 0,n.complete()}}));var r=n.subscribe(this);this.add((function(){f--,r.unsubscribe(),e&&!l&&a&&0===f&&(e.unsubscribe(),e=void 0,n=void 0)}))}}(r))}}function Ue(t){return function(n){return n.lift(new qe(t,n))}}var qe=function(){function t(t,n){this.predicate=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Ye(t,this.predicate,this.source))},t}(),Ye=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.source=r,i.seenValue=!1,i.index=0,i}return r.a(n,t),n.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},n.prototype._next=function(t){var n=this.index++;this.predicate?this.tryNext(t,n):this.applySingleValue(t)},n.prototype.tryNext=function(t,n){try{this.predicate(t,n,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new Ot.a)},n}(v.a);function He(t){return function(n){return n.lift(new We(t))}}var We=function(){function t(t){this.total=t}return t.prototype.call=function(t,n){return n.subscribe(new $e(t,this.total))},t}(),$e=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.count=0,r}return r.a(n,t),n.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},n}(v.a);function Xe(t){return function(n){return n.lift(new Ge(t))}}var Ge=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new Ct.a}return t.prototype.call=function(t,n){return 0===this._skipCount?n.subscribe(new v.a(t)):n.subscribe(new Ze(t,this._skipCount))},t}(),Ze=function(t){function n(n,e){var r=t.call(this,n)||this;return r._skipCount=e,r._count=0,r._ring=new Array(e),r}return r.a(n,t),n.prototype._next=function(t){var n=this._skipCount,e=this._count++;if(e<n)this._ring[e]=t;else{var r=e%n,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},n}(v.a);function Ke(t){return function(n){return n.lift(new Qe(t))}}var Qe=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){return n.subscribe(new Je(t,this.notifier))},t}(),Je=function(t){function n(n,e){var r=t.call(this,n)||this;r.hasValue=!1;var i=new P.a(r,void 0,void 0);r.add(i),r.innerSubscription=i;var u=Object(o.a)(r,e,void 0,void 0,i);return u!==i&&(r.add(u),r.innerSubscription=u),r}return r.a(n,t),n.prototype._next=function(n){this.hasValue&&t.prototype._next.call(this,n)},n.prototype.notifyNext=function(t,n,e,r,i){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},n.prototype.notifyComplete=function(){},n}(i.a);function tr(t){return function(n){return n.lift(new nr(t))}}var nr=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,n){return n.subscribe(new er(t,this.predicate))},t}(),er=function(t){function n(n,e){var r=t.call(this,n)||this;return r.predicate=e,r.skipping=!0,r.index=0,r}return r.a(n,t),n.prototype._next=function(t){var n=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||n.next(t)},n.prototype.tryCallPredicate=function(t){try{var n=this.predicate(t,this.index++);this.skipping=Boolean(n)}catch(t){this.destination.error(t)}},n}(v.a);function rr(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return Object(m.a)(e)?(t.pop(),function(n){return Object(Y.a)(t,n,e)}):function(n){return Object(Y.a)(t,n)}}var ir=e(48),or=e(30),ur=function(t){function n(n,e,r){void 0===e&&(e=0),void 0===r&&(r=ir.a);var i=t.call(this)||this;return i.source=n,i.delayTime=e,i.scheduler=r,(!Object(or.a)(e)||e<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=ir.a),i}return r.a(n,t),n.create=function(t,e,r){return void 0===e&&(e=0),void 0===r&&(r=ir.a),new n(t,e,r)},n.dispatch=function(t){var n=t.source,e=t.subscriber;return this.add(n.subscribe(e))},n.prototype._subscribe=function(t){var e=this.delayTime,r=this.source;return this.scheduler.schedule(n.dispatch,e,{source:r,subscriber:t})},n}(vt.a);function ar(t,n){return void 0===n&&(n=0),function(e){return e.lift(new cr(t,n))}}var cr=function(){function t(t,n){this.scheduler=t,this.delay=n}return t.prototype.call=function(t,n){return new ur(n,this.delay,this.scheduler).subscribe(t)},t}();function fr(t,n){return"function"==typeof n?function(e){return e.pipe(fr((function(e,r){return Object(U.a)(t(e,r)).pipe(Object(Kt.a)((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new sr(t))}}var sr=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new lr(t,this.project))},t}(),lr=function(t){function n(n,e){var r=t.call(this,n)||this;return r.project=e,r.index=0,r}return r.a(n,t),n.prototype._next=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=this.innerSubscription;r&&r.unsubscribe();var i=new P.a(this,n,e),u=this.destination;u.add(i),this.innerSubscription=Object(o.a)(this,t,void 0,void 0,i),this.innerSubscription!==i&&u.add(this.innerSubscription)},n.prototype._complete=function(){var n=this.innerSubscription;n&&!n.closed||t.prototype._complete.call(this),this.unsubscribe()},n.prototype._unsubscribe=function(){this.innerSubscription=null},n.prototype.notifyComplete=function(n){this.destination.remove(n),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n}(i.a);function hr(){return fr(hn.a)}function dr(t,n){return n?fr((function(){return t}),n):fr((function(){return t}))}function pr(t){return function(n){return n.lift(new vr(t))}}var vr=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new br(t),r=Object(o.a)(e,this.notifier);return r&&!e.seenValue?(e.add(r),n.subscribe(e)):e},t}(),br=function(t){function n(n){var e=t.call(this,n)||this;return e.seenValue=!1,e}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.seenValue=!0,this.complete()},n.prototype.notifyComplete=function(){},n}(i.a);function yr(t,n){return void 0===n&&(n=!1),function(e){return e.lift(new gr(t,n))}}var gr=function(){function t(t,n){this.predicate=t,this.inclusive=n}return t.prototype.call=function(t,n){return n.subscribe(new _r(t,this.predicate,this.inclusive))},t}(),_r=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.inclusive=r,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){var n,e=this.destination;try{n=this.predicate(t,this.index++)}catch(t){return void e.error(t)}this.nextOrComplete(t,n)},n.prototype.nextOrComplete=function(t,n){var e=this.destination;Boolean(n)?e.next(t):(this.inclusive&&e.next(t),e.complete())},n}(v.a),mr=e(19),xr=e(24);function wr(t,n,e){return function(r){return r.lift(new Sr(t,n,e))}}var Sr=function(){function t(t,n,e){this.nextOrObserver=t,this.error=n,this.complete=e}return t.prototype.call=function(t,n){return n.subscribe(new Mr(t,this.nextOrObserver,this.error,this.complete))},t}(),Mr=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o._tapNext=mr.a,o._tapError=mr.a,o._tapComplete=mr.a,o._tapError=r||mr.a,o._tapComplete=i||mr.a,Object(xr.a)(e)?(o._context=o,o._tapNext=e):e&&(o._context=e,o._tapNext=e.next||mr.a,o._tapError=e.error||mr.a,o._tapComplete=e.complete||mr.a),o}return r.a(n,t),n.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},n.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},n.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},n}(v.a),Er={leading:!0,trailing:!1};function Ar(t,n){return void 0===n&&(n=Er),function(e){return e.lift(new Nr(t,n.leading,n.trailing))}}var Nr=function(){function t(t,n,e){this.durationSelector=t,this.leading=n,this.trailing=e}return t.prototype.call=function(t,n){return n.subscribe(new Tr(t,this.durationSelector,this.leading,this.trailing))},t}(),Tr=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.destination=n,o.durationSelector=e,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.a(n,t),n.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},n.prototype.send=function(){var t=this._hasValue,n=this._sendValue;t&&(this.destination.next(n),this.throttle(n)),this._hasValue=!1,this._sendValue=null},n.prototype.throttle=function(t){var n=this.tryDurationSelector(t);n&&this.add(this._throttled=Object(o.a)(this,n))},n.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},n.prototype.throttlingDone=function(){var t=this._throttled,n=this._trailing;t&&t.unsubscribe(),this._throttled=null,n&&this.send()},n.prototype.notifyNext=function(t,n,e,r,i){this.throttlingDone()},n.prototype.notifyComplete=function(){this.throttlingDone()},n}(i.a);function Ir(t,n,e){return void 0===n&&(n=f.a),void 0===e&&(e=Er),function(r){return r.lift(new kr(t,n,e.leading,e.trailing))}}var kr=function(){function t(t,n,e,r){this.duration=t,this.scheduler=n,this.leading=e,this.trailing=r}return t.prototype.call=function(t,n){return n.subscribe(new Cr(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),Cr=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.duration=e,u.scheduler=r,u.leading=i,u.trailing=o,u._hasTrailingValue=!1,u._trailingValue=null,u}return r.a(n,t),n.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(jr,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},n.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},n.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},n}(v.a);function jr(t){t.subscriber.clearThrottle()}var Or=e(43);function Fr(t){return void 0===t&&(t=f.a),function(n){return Object(Or.a)((function(){return n.pipe(Cn((function(n,e){var r=n.current;return{value:e,current:t.now(),last:r}}),{current:t.now(),value:void 0,last:void 0}),Object(Kt.a)((function(t){var n=t.current,e=t.last,r=t.value;return new Pr(r,n-e)})))}))}}var Pr=function(){return function(t,n){this.value=t,this.interval=n}}(),zr=e(65);function Dr(t,n,e){return void 0===e&&(e=f.a),function(r){var i=ft(t),o=i?+t-e.now():Math.abs(t);return r.lift(new Rr(o,i,n,e))}}var Rr=function(){function t(t,n,e,r){this.waitFor=t,this.absoluteTimeout=n,this.withObservable=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new Br(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Br=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.absoluteTimeout=e,u.waitFor=r,u.withObservable=i,u.scheduler=o,u.action=null,u.scheduleTimeout(),u}return r.a(n,t),n.dispatchTimeout=function(t){var n=t.withObservable;t._unsubscribeAndRecycle(),t.add(Object(o.a)(t,n))},n.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(n.dispatchTimeout,this.waitFor,this))},n.prototype._next=function(n){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,n)},n.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},n}(i.a),Vr=e(40);function Lr(t,n){return void 0===n&&(n=f.a),Dr(t,Object(Vr.a)(new zr.a),n)}function Ur(t){return void 0===t&&(t=f.a),Object(Kt.a)((function(n){return new qr(n,t.now())}))}var qr=function(){return function(t,n){this.value=t,this.timestamp=n}}();function Yr(t,n,e){return 0===e?[n]:(t.push(n),t)}function Hr(){return Pn(Yr,[])}function Wr(t){return function(n){return n.lift(new $r(t))}}var $r=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,n){var e=new Xr(t),r=n.subscribe(e);return r.closed||e.add(Object(o.a)(e,this.windowBoundaries)),r},t}(),Xr=function(t){function n(n){var e=t.call(this,n)||this;return e.window=new oe.a,n.next(e.window),e}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.openWindow()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){this._complete()},n.prototype._next=function(t){this.window.next(t)},n.prototype._error=function(t){this.window.error(t),this.destination.error(t)},n.prototype._complete=function(){this.window.complete(),this.destination.complete()},n.prototype._unsubscribe=function(){this.window=null},n.prototype.openWindow=function(){var t=this.window;t&&t.complete();var n=this.destination,e=this.window=new oe.a;n.next(e)},n}(i.a);function Gr(t,n){return void 0===n&&(n=0),function(e){return e.lift(new Zr(t,n))}}var Zr=function(){function t(t,n){this.windowSize=t,this.startWindowEvery=n}return t.prototype.call=function(t,n){return n.subscribe(new Kr(t,this.windowSize,this.startWindowEvery))},t}(),Kr=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.destination=n,i.windowSize=e,i.startWindowEvery=r,i.windows=[new oe.a],i.count=0,n.next(i.windows[0]),i}return r.a(n,t),n.prototype._next=function(t){for(var n=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,e=this.destination,r=this.windowSize,i=this.windows,o=i.length,u=0;u<o&&!this.closed;u++)i[u].next(t);var a=this.count-r+1;if(a>=0&&a%n==0&&!this.closed&&i.shift().complete(),++this.count%n==0&&!this.closed){var c=new oe.a;i.push(c),e.next(c)}},n.prototype._error=function(t){var n=this.windows;if(n)for(;n.length>0&&!this.closed;)n.shift().error(t);this.destination.error(t)},n.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},n.prototype._unsubscribe=function(){this.count=0,this.windows=null},n}(v.a);function Qr(t){var n=f.a,e=null,r=Number.POSITIVE_INFINITY;return Object(m.a)(arguments[3])&&(n=arguments[3]),Object(m.a)(arguments[2])?n=arguments[2]:Object(or.a)(arguments[2])&&(r=arguments[2]),Object(m.a)(arguments[1])?n=arguments[1]:Object(or.a)(arguments[1])&&(e=arguments[1]),function(i){return i.lift(new Jr(t,e,r,n))}}var Jr=function(){function t(t,n,e,r){this.windowTimeSpan=t,this.windowCreationInterval=n,this.maxWindowSize=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new ni(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),ti=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._numberOfNextedValues=0,n}return r.a(n,t),n.prototype.next=function(n){this._numberOfNextedValues++,t.prototype.next.call(this,n)},Object.defineProperty(n.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),n}(oe.a),ni=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;u.destination=n,u.windowTimeSpan=e,u.windowCreationInterval=r,u.maxWindowSize=i,u.scheduler=o,u.windows=[];var a=u.openWindow();if(null!==r&&r>=0){var c={subscriber:u,window:a,context:null},f={windowTimeSpan:e,windowCreationInterval:r,subscriber:u,scheduler:o};u.add(o.schedule(ii,e,c)),u.add(o.schedule(ri,r,f))}else{var s={subscriber:u,window:a,windowTimeSpan:e};u.add(o.schedule(ei,e,s))}return u}return r.a(n,t),n.prototype._next=function(t){for(var n=this.windows,e=n.length,r=0;r<e;r++){var i=n[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},n.prototype._error=function(t){for(var n=this.windows;n.length>0;)n.shift().error(t);this.destination.error(t)},n.prototype._complete=function(){for(var t=this.windows;t.length>0;){var n=t.shift();n.closed||n.complete()}this.destination.complete()},n.prototype.openWindow=function(){var t=new ti;return this.windows.push(t),this.destination.next(t),t},n.prototype.closeWindow=function(t){t.complete();var n=this.windows;n.splice(n.indexOf(t),1)},n}(v.a);function ei(t){var n=t.subscriber,e=t.windowTimeSpan,r=t.window;r&&n.closeWindow(r),t.window=n.openWindow(),this.schedule(t,e)}function ri(t){var n=t.windowTimeSpan,e=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=e.openWindow(),u={action:this,subscription:null},a={subscriber:e,window:o,context:u};u.subscription=r.schedule(ii,n,a),this.add(u.subscription),this.schedule(t,i)}function ii(t){var n=t.subscriber,e=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),n.closeWindow(e)}function oi(t,n){return function(e){return e.lift(new ui(t,n))}}var ui=function(){function t(t,n){this.openings=t,this.closingSelector=n}return t.prototype.call=function(t,n){return n.subscribe(new ai(t,this.openings,this.closingSelector))},t}(),ai=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.openings=e,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=Object(o.a)(i,e,e)),i}return r.a(n,t),n.prototype._next=function(t){var n=this.contexts;if(n)for(var e=n.length,r=0;r<e;r++)n[r].window.next(t)},n.prototype._error=function(n){var e=this.contexts;if(this.contexts=null,e)for(var r=e.length,i=-1;++i<r;){var o=e[i];o.window.error(n),o.subscription.unsubscribe()}t.prototype._error.call(this,n)},n.prototype._complete=function(){var n=this.contexts;if(this.contexts=null,n)for(var e=n.length,r=-1;++r<e;){var i=n[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var n=t.length,e=-1;++e<n;){var r=t[e];r.window.unsubscribe(),r.subscription.unsubscribe()}},n.prototype.notifyNext=function(t,n,e,r,i){if(t===this.openings){var u=void 0;try{u=(0,this.closingSelector)(n)}catch(t){return this.error(t)}var a=new oe.a,c=new T.a,f={window:a,subscription:c};this.contexts.push(f);var s=Object(o.a)(this,u,f);s.closed?this.closeWindow(this.contexts.length-1):(s.context=f,c.add(s)),this.destination.next(a)}else this.closeWindow(this.contexts.indexOf(t))},n.prototype.notifyError=function(t){this.error(t)},n.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},n.prototype.closeWindow=function(t){if(-1!==t){var n=this.contexts,e=n[t],r=e.window,i=e.subscription;n.splice(t,1),r.complete(),i.unsubscribe()}},n}(i.a);function ci(t){return function(n){return n.lift(new fi(t))}}var fi=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new si(t,this.closingSelector))},t}(),si=function(t){function n(n,e){var r=t.call(this,n)||this;return r.destination=n,r.closingSelector=e,r.openWindow(),r}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.openWindow(i)},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){this.openWindow(t)},n.prototype._next=function(t){this.window.next(t)},n.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},n.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},n.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},n.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var n=this.window;n&&n.complete();var e,r=this.window=new oe.a;this.destination.next(r);try{e=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=Object(o.a)(this,e))},n}(i.a);function li(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e;"function"==typeof t[t.length-1]&&(e=t.pop());var r=t;return n.lift(new hi(r,e))}}var hi=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new di(t,this.observables,this.project))},t}(),di=function(t){function n(n,e,r){var i=t.call(this,n)||this;i.observables=e,i.project=r,i.toRespond=[];var u=e.length;i.values=new Array(u);for(var a=0;a<u;a++)i.toRespond.push(a);for(a=0;a<u;a++){var c=e[a];i.add(Object(o.a)(i,c,c,a))}return i}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.values[e]=n;var o=this.toRespond;if(o.length>0){var u=o.indexOf(e);-1!==u&&o.splice(u,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(i.a),pi=e(44);function vi(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(pi.b.apply(void 0,[n].concat(t)))}}function bi(t){return function(n){return n.lift(new pi.a(t))}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(52),i=e(51);function o(t){return isFinite(t)?t:0}n.drawFacetForceLayout=function(t,n,e){void 0===e&&(e=12);var u=r.select(n).append("g"),a=function(t){for(var n=[],e=[],r=t.childrenNumber,i=0;i<r;i++){var o=Object.assign({},t.children[i],{id:t.children[i].facetId});n.push(o)}for(i=0;i<r-1;i++){var u={source:n[i].id,target:n[i+1].id,value:1};e.push(u)}return e.push({source:n[r-1].id,target:n[0].id,value:1}),{nodes:n,links:e}}(t),c=a.nodes,f=a.links,s=u.attr("class",t.facetId).append("g").selectAll("line").data(f).enter().append("line").attr("stroke","#aaa").attr("stroke-width","1px"),l=u.append("g").selectAll("circle").data(c).enter().append("circle").attr("r",t.r/3).attr("fill",t.color).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.facetId,expandedFacetId:r+","+t.facetId.toString()}))})),h=u.append("g").selectAll("text").data(c).enter().append("text").attr("r",t.r/3).attr("fill","#000").attr("font-size","15px").text((function(t){return t.facetName})).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.facetId,expandedFacetId:r+","+t.facetId.toString()}))}));function d(t){t.attr("x1",(function(t){return o(t.source.x)})).attr("y1",(function(t){return o(t.source.y)})).attr("x2",(function(t){return o(t.target.x)})).attr("y2",(function(t){return o(t.target.y)}))}function p(t){t.attr("transform",(function(t){return"translate("+o(t.x)+","+o(t.y)+")"}))}function v(t){t.attr("transform",(function(t){return"translate("+o(t.x-e*t.facetName.length/2)+","+o(t.y)+")"}))}u.append("g").selectAll("text").data(c).enter().append("text").attr("r",t.r/3).attr("fill","#99FF66").attr("font-size","15px").text((function(t){return t.childrenNumber})).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.facetId,expandedFacetId:r+","+t.facetId.toString()}))}));var b=r.forceSimulation(c).force("charge",r.forceManyBody().strength(-500)).force("center",r.forceCenter(t.cx,t.cy)).force("x",r.forceX(t.cx).strength(1)).force("y",r.forceY(t.cy).strength(1)).force("link",r.forceLink(f).id((function(t){return t.id})).distance(2*t.r)).on("tick",(function(){l.call(p),s.call(d),h.call(v)}));l.call(r.drag().on("start",(function(t){r.event.sourceEvent.stopPropagation(),r.event.active||b.alphaTarget(.3).restart(),t.fx=t.x,t.fy=t.y})).on("drag",(function(t){t.fx=r.event.x,t.fy=r.event.y})).on("end",(function(t){r.event.active||b.alphaTarget(0),t.fx=null,t.fy=null})))}},function(t,n,e){"use strict";function r(t){for(var e in t)n.hasOwnProperty(e)||(n[e]=t[e])}Object.defineProperty(n,"__esModule",{value:!0}),r(e(73)),r(e(83)),r(e(76)),r(e(50)),r(e(56)),r(e(76)),r(e(50)),r(e(84))},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n,e){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var i=r(e(81));n.generate=i.default;var o={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"};n.presetPrimaryColors=o;var u={};n.presetPalettes=u,Object.keys(o).forEach((function(t){u[t]=i.default(o[t]),u[t].primary=u[t][5]}));var a=u.red;n.red=a;var c=u.volcano;n.volcano=c;var f=u.gold;n.gold=f;var s=u.orange;n.orange=s;var l=u.yellow;n.yellow=l;var h=u.lime;n.lime=h;var d=u.green;n.green=d;var p=u.cyan;n.cyan=p;var v=u.blue;n.blue=v;var b=u.geekblue;n.geekblue=b;var y=u.purple;n.purple=y;var g=u.magenta;n.magenta=g;var _=u.grey;n.grey=_},function(t,n,e){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var i=r(e(82));function o(t,n,e){var r;return(r=Math.round(t.h)>=60&&Math.round(t.h)<=240?e?Math.round(t.h)-2*n:Math.round(t.h)+2*n:e?Math.round(t.h)+2*n:Math.round(t.h)-2*n)<0?r+=360:r>=360&&(r-=360),r}function u(t,n,e){return 0===t.h&&0===t.s?t.s:((r=e?Math.round(100*t.s)-16*n:4===n?Math.round(100*t.s)+16:Math.round(100*t.s)+5*n)>100&&(r=100),e&&5===n&&r>10&&(r=10),r<6&&(r=6),r);var r}function a(t,n,e){return e?Math.round(100*t.v)+5*n:Math.round(100*t.v)-15*n}n.default=function(t){for(var n=[],e=i.default(t),r=5;r>0;r-=1){var c=e.toHsv(),f=i.default({h:o(c,r,!0),s:u(c,r,!0),v:a(c,r,!0)}).toHexString();n.push(f)}for(n.push(e.toHexString()),r=1;r<=4;r+=1){c=e.toHsv(),f=i.default({h:o(c,r),s:u(c,r),v:a(c,r)}).toHexString();n.push(f)}return n}},function(t,n,e){var r;!function(i){var o=/^\s+/,u=/\s+$/,a=0,c=i.round,f=i.min,s=i.max,l=i.random;function h(t,n){if(n=n||{},(t=t||"")instanceof h)return t;if(!(this instanceof h))return new h(t,n);var e=function(t){var n={r:0,g:0,b:0},e=1,r=null,a=null,c=null,l=!1,h=!1;"string"==typeof t&&(t=function(t){t=t.replace(o,"").replace(u,"").toLowerCase();var n,e=!1;if(k[t])t=k[t],e=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};if(n=q.rgb.exec(t))return{r:n[1],g:n[2],b:n[3]};if(n=q.rgba.exec(t))return{r:n[1],g:n[2],b:n[3],a:n[4]};if(n=q.hsl.exec(t))return{h:n[1],s:n[2],l:n[3]};if(n=q.hsla.exec(t))return{h:n[1],s:n[2],l:n[3],a:n[4]};if(n=q.hsv.exec(t))return{h:n[1],s:n[2],v:n[3]};if(n=q.hsva.exec(t))return{h:n[1],s:n[2],v:n[3],a:n[4]};if(n=q.hex8.exec(t))return{r:P(n[1]),g:P(n[2]),b:P(n[3]),a:B(n[4]),format:e?"name":"hex8"};if(n=q.hex6.exec(t))return{r:P(n[1]),g:P(n[2]),b:P(n[3]),format:e?"name":"hex"};if(n=q.hex4.exec(t))return{r:P(n[1]+""+n[1]),g:P(n[2]+""+n[2]),b:P(n[3]+""+n[3]),a:B(n[4]+""+n[4]),format:e?"name":"hex8"};if(n=q.hex3.exec(t))return{r:P(n[1]+""+n[1]),g:P(n[2]+""+n[2]),b:P(n[3]+""+n[3]),format:e?"name":"hex"};return!1}(t));"object"==typeof t&&(Y(t.r)&&Y(t.g)&&Y(t.b)?(d=t.r,p=t.g,v=t.b,n={r:255*O(d,255),g:255*O(p,255),b:255*O(v,255)},l=!0,h="%"===String(t.r).substr(-1)?"prgb":"rgb"):Y(t.h)&&Y(t.s)&&Y(t.v)?(r=D(t.s),a=D(t.v),n=function(t,n,e){t=6*O(t,360),n=O(n,100),e=O(e,100);var r=i.floor(t),o=t-r,u=e*(1-n),a=e*(1-o*n),c=e*(1-(1-o)*n),f=r%6;return{r:255*[e,a,u,u,c,e][f],g:255*[c,e,e,a,u,u][f],b:255*[u,u,c,e,e,a][f]}}(t.h,r,a),l=!0,h="hsv"):Y(t.h)&&Y(t.s)&&Y(t.l)&&(r=D(t.s),c=D(t.l),n=function(t,n,e){var r,i,o;function u(t,n,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?t+6*(n-t)*e:e<.5?n:e<2/3?t+(n-t)*(2/3-e)*6:t}if(t=O(t,360),n=O(n,100),e=O(e,100),0===n)r=i=o=e;else{var a=e<.5?e*(1+n):e+n-e*n,c=2*e-a;r=u(c,a,t+1/3),i=u(c,a,t),o=u(c,a,t-1/3)}return{r:255*r,g:255*i,b:255*o}}(t.h,r,c),l=!0,h="hsl"),t.hasOwnProperty("a")&&(e=t.a));var d,p,v;return e=j(e),{ok:l,format:t.format||h,r:f(255,s(n.r,0)),g:f(255,s(n.g,0)),b:f(255,s(n.b,0)),a:e}}(t);this._originalInput=t,this._r=e.r,this._g=e.g,this._b=e.b,this._a=e.a,this._roundA=c(100*this._a)/100,this._format=n.format||e.format,this._gradientType=n.gradientType,this._r<1&&(this._r=c(this._r)),this._g<1&&(this._g=c(this._g)),this._b<1&&(this._b=c(this._b)),this._ok=e.ok,this._tc_id=a++}function d(t,n,e){t=O(t,255),n=O(n,255),e=O(e,255);var r,i,o=s(t,n,e),u=f(t,n,e),a=(o+u)/2;if(o==u)r=i=0;else{var c=o-u;switch(i=a>.5?c/(2-o-u):c/(o+u),o){case t:r=(n-e)/c+(n<e?6:0);break;case n:r=(e-t)/c+2;break;case e:r=(t-n)/c+4}r/=6}return{h:r,s:i,l:a}}function p(t,n,e){t=O(t,255),n=O(n,255),e=O(e,255);var r,i,o=s(t,n,e),u=f(t,n,e),a=o,c=o-u;if(i=0===o?0:c/o,o==u)r=0;else{switch(o){case t:r=(n-e)/c+(n<e?6:0);break;case n:r=(e-t)/c+2;break;case e:r=(t-n)/c+4}r/=6}return{h:r,s:i,v:a}}function v(t,n,e,r){var i=[z(c(t).toString(16)),z(c(n).toString(16)),z(c(e).toString(16))];return r&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function b(t,n,e,r){return[z(R(r)),z(c(t).toString(16)),z(c(n).toString(16)),z(c(e).toString(16))].join("")}function y(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.s-=n/100,e.s=F(e.s),h(e)}function g(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.s+=n/100,e.s=F(e.s),h(e)}function _(t){return h(t).desaturate(100)}function m(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.l+=n/100,e.l=F(e.l),h(e)}function x(t,n){n=0===n?0:n||10;var e=h(t).toRgb();return e.r=s(0,f(255,e.r-c(-n/100*255))),e.g=s(0,f(255,e.g-c(-n/100*255))),e.b=s(0,f(255,e.b-c(-n/100*255))),h(e)}function w(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.l-=n/100,e.l=F(e.l),h(e)}function S(t,n){var e=h(t).toHsl(),r=(e.h+n)%360;return e.h=r<0?360+r:r,h(e)}function M(t){var n=h(t).toHsl();return n.h=(n.h+180)%360,h(n)}function E(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+120)%360,s:n.s,l:n.l}),h({h:(e+240)%360,s:n.s,l:n.l})]}function A(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+90)%360,s:n.s,l:n.l}),h({h:(e+180)%360,s:n.s,l:n.l}),h({h:(e+270)%360,s:n.s,l:n.l})]}function N(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+72)%360,s:n.s,l:n.l}),h({h:(e+216)%360,s:n.s,l:n.l})]}function T(t,n,e){n=n||6,e=e||30;var r=h(t).toHsl(),i=360/e,o=[h(t)];for(r.h=(r.h-(i*n>>1)+720)%360;--n;)r.h=(r.h+i)%360,o.push(h(r));return o}function I(t,n){n=n||6;for(var e=h(t).toHsv(),r=e.h,i=e.s,o=e.v,u=[],a=1/n;n--;)u.push(h({h:r,s:i,v:o})),o=(o+a)%1;return u}h.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,n,e,r=this.toRgb();return t=r.r/255,n=r.g/255,e=r.b/255,.2126*(t<=.03928?t/12.92:i.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:i.pow((n+.055)/1.055,2.4))+.0722*(e<=.03928?e/12.92:i.pow((e+.055)/1.055,2.4))},setAlpha:function(t){return this._a=j(t),this._roundA=c(100*this._a)/100,this},toHsv:function(){var t=p(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=p(this._r,this._g,this._b),n=c(360*t.h),e=c(100*t.s),r=c(100*t.v);return 1==this._a?"hsv("+n+", "+e+"%, "+r+"%)":"hsva("+n+", "+e+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var t=d(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=d(this._r,this._g,this._b),n=c(360*t.h),e=c(100*t.s),r=c(100*t.l);return 1==this._a?"hsl("+n+", "+e+"%, "+r+"%)":"hsla("+n+", "+e+"%, "+r+"%, "+this._roundA+")"},toHex:function(t){return v(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,n,e,r,i){var o=[z(c(t).toString(16)),z(c(n).toString(16)),z(c(e).toString(16)),z(R(r))];if(i&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)&&o[3].charAt(0)==o[3].charAt(1))return o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0)+o[3].charAt(0);return o.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:c(this._r),g:c(this._g),b:c(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+c(this._r)+", "+c(this._g)+", "+c(this._b)+")":"rgba("+c(this._r)+", "+c(this._g)+", "+c(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:c(100*O(this._r,255))+"%",g:c(100*O(this._g,255))+"%",b:c(100*O(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+c(100*O(this._r,255))+"%, "+c(100*O(this._g,255))+"%, "+c(100*O(this._b,255))+"%)":"rgba("+c(100*O(this._r,255))+"%, "+c(100*O(this._g,255))+"%, "+c(100*O(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(C[v(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var n="#"+b(this._r,this._g,this._b,this._a),e=n,r=this._gradientType?"GradientType = 1, ":"";if(t){var i=h(t);e="#"+b(i._r,i._g,i._b,i._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+n+",endColorstr="+e+")"},toString:function(t){var n=!!t;t=t||this._format;var e=!1,r=this._a<1&&this._a>=0;return n||!r||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(e=this.toRgbString()),"prgb"===t&&(e=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(e=this.toHexString()),"hex3"===t&&(e=this.toHexString(!0)),"hex4"===t&&(e=this.toHex8String(!0)),"hex8"===t&&(e=this.toHex8String()),"name"===t&&(e=this.toName()),"hsl"===t&&(e=this.toHslString()),"hsv"===t&&(e=this.toHsvString()),e||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return h(this.toString())},_applyModification:function(t,n){var e=t.apply(null,[this].concat([].slice.call(n)));return this._r=e._r,this._g=e._g,this._b=e._b,this.setAlpha(e._a),this},lighten:function(){return this._applyModification(m,arguments)},brighten:function(){return this._applyModification(x,arguments)},darken:function(){return this._applyModification(w,arguments)},desaturate:function(){return this._applyModification(y,arguments)},saturate:function(){return this._applyModification(g,arguments)},greyscale:function(){return this._applyModification(_,arguments)},spin:function(){return this._applyModification(S,arguments)},_applyCombination:function(t,n){return t.apply(null,[this].concat([].slice.call(n)))},analogous:function(){return this._applyCombination(T,arguments)},complement:function(){return this._applyCombination(M,arguments)},monochromatic:function(){return this._applyCombination(I,arguments)},splitcomplement:function(){return this._applyCombination(N,arguments)},triad:function(){return this._applyCombination(E,arguments)},tetrad:function(){return this._applyCombination(A,arguments)}},h.fromRatio=function(t,n){if("object"==typeof t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]="a"===r?t[r]:D(t[r]));t=e}return h(t,n)},h.equals=function(t,n){return!(!t||!n)&&h(t).toRgbString()==h(n).toRgbString()},h.random=function(){return h.fromRatio({r:l(),g:l(),b:l()})},h.mix=function(t,n,e){e=0===e?0:e||50;var r=h(t).toRgb(),i=h(n).toRgb(),o=e/100;return h({r:(i.r-r.r)*o+r.r,g:(i.g-r.g)*o+r.g,b:(i.b-r.b)*o+r.b,a:(i.a-r.a)*o+r.a})},h.readability=function(t,n){var e=h(t),r=h(n);return(i.max(e.getLuminance(),r.getLuminance())+.05)/(i.min(e.getLuminance(),r.getLuminance())+.05)},h.isReadable=function(t,n,e){var r,i,o=h.readability(t,n);switch(i=!1,(r=function(t){var n,e;n=((t=t||{level:"AA",size:"small"}).level||"AA").toUpperCase(),e=(t.size||"small").toLowerCase(),"AA"!==n&&"AAA"!==n&&(n="AA");"small"!==e&&"large"!==e&&(e="small");return{level:n,size:e}}(e)).level+r.size){case"AAsmall":case"AAAlarge":i=o>=4.5;break;case"AAlarge":i=o>=3;break;case"AAAsmall":i=o>=7}return i},h.mostReadable=function(t,n,e){var r,i,o,u,a=null,c=0;i=(e=e||{}).includeFallbackColors,o=e.level,u=e.size;for(var f=0;f<n.length;f++)(r=h.readability(t,n[f]))>c&&(c=r,a=h(n[f]));return h.isReadable(t,a,{level:o,size:u})||!i?a:(e.includeFallbackColors=!1,h.mostReadable(t,["#fff","#000"],e))};var k=h.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},C=h.hexNames=function(t){var n={};for(var e in t)t.hasOwnProperty(e)&&(n[t[e]]=e);return n}(k);function j(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function O(t,n){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var e=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(t);return t=f(n,s(0,parseFloat(t))),e&&(t=parseInt(t*n,10)/100),i.abs(t-n)<1e-6?1:t%n/parseFloat(n)}function F(t){return f(1,s(0,t))}function P(t){return parseInt(t,16)}function z(t){return 1==t.length?"0"+t:""+t}function D(t){return t<=1&&(t=100*t+"%"),t}function R(t){return i.round(255*parseFloat(t)).toString(16)}function B(t){return P(t)/255}var V,L,U,q=(L="[\\s|\\(]+("+(V="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+V+")[,|\\s]+("+V+")\\s*\\)?",U="[\\s|\\(]+("+V+")[,|\\s]+("+V+")[,|\\s]+("+V+")[,|\\s]+("+V+")\\s*\\)?",{CSS_UNIT:new RegExp(V),rgb:new RegExp("rgb"+L),rgba:new RegExp("rgba"+U),hsl:new RegExp("hsl"+L),hsla:new RegExp("hsla"+U),hsv:new RegExp("hsv"+L),hsva:new RegExp("hsva"+U),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function Y(t){return!!q.CSS_UNIT.exec(t)}t.exports?t.exports=h:void 0===(r=function(){return h}.call(n,e,n,t))||(t.exports=r)}(Math)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(52),i=e(75),o=e(57),u=e(55),a=e(56),c=e(50),f=e(51),s=e(74),l=e(73),h="",d="";function p(t){if(1===t){var n=h;setTimeout((function(){d||n!==h||(r.select(document.getElementById("ListMenuFacet")).transition().transition().duration(500).style("opacity",0),h="")}),3e3)}}n.drawTreeNumber=function(t,n,e,v,b){s.emptyChildren(t);var y=r.select(t),g=a.buildTree(n,t);if(console.log("传入数据",g),document.getElementById("facet-tree-tooltip")||r.select("body").append("div").attr("id","facet-tree-tooltip").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px"),document.getElementById("ListMenuFacet")||(r.select("body").append("div").attr("id","ListMenuFacet").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","12px").style("color","white").style("padding","5px 3px").style("width","100px").style("height","90px").style("background","#7B7B7B").style("border-radius","6px").on("mouseover",(function(){d="yes"})).on("mouseout",(function(){d="",p(1)})),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionDeleteFacet").style("height","25px").style("margin-top","10px").on("mouseover",(function(){r.select(document.getElementById("optionDeleteFacet")).transition().duration(300).style("background","#ADADAD"),d="yes"})).on("mouseout",(function(){r.select(document.getElementById("optionDeleteFacet")).transition().duration(300).style("background","#7B7B7B")})).style("padding-top","5px").text("删除该主题"),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionAddFacet").style("height","25px").on("mouseover",(function(){r.select(document.getElementById("optionAddFacet")).transition().duration(300).style("background","#ADADAD"),d="yes"})).on("mouseout",(function(){r.select(document.getElementById("optionAddFacet")).transition().duration(300).style("background","#7B7B7B")})).style("padding-top","5px").text("添加新主题").on("click",(function(){console.log("insert callback start")}))),f.globalData.treeData=g,f.globalState.getValue().init)f.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});else{f.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});var _={currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!1};f.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.currentFacetId,_.currentFacetId)})),i.map((function(t){return t.currentFacetId}))).subscribe((function(t){e(t),_.currentFacetId=t})),f.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.branchFacetId,_.branchFacetId)})),i.map((function(t){return t.branchFacetId}))).subscribe((function(t){v(t),_.branchFacetId=t})),f.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.expandedFacetId})),i.filter((function(t){var n=t.split(",");return n[0]!==n[1]}))).subscribe((function(n){var e=n.split(","),r=e[0],i=e[1];if("-2"!==r&&f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0]){for(var o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}if("-2"!==i&&f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0]){for(o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}}))}y.append("g").selectAll("rect").data(g.branches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("cursor","pointer").on("mouseover",(function(t){""===h&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){console.log("Test message!"),r.event.preventDefault(),h=n+"select";var e=document.getElementById("ListMenuFacet");r.select(e).transition().style("opacity",.9).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px");var i=document.getElementById("optionDeleteFacet"),o=document.getElementById("optionAddFacet");i.onclick=function(){var t=f.globalState.getValue().expandedFacetId.split(","),e=(t[0],t[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{branchFacetId:g.branches[n].facetId,expandedFacetId:e+",-2"})),console.log("branchFacetId",f.globalState.getValue().branchFacetId),console.log("expandedFacetId",f.globalState.getValue().expandedFacetId),console.log("Use your FacetDelete function here!")},o.onclick=function(){b(),console.log("Use your FacetAdd function here!")},p(1)})),y.append("g").selectAll("rect").data(g.foldBranches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("cursor","pointer").attr("transform",(function(t){return t.transform})).on("mouseover",(function(t){""===h&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){console.log("Test message!"),r.event.preventDefault(),h=n+"select";var e=document.getElementById("ListMenuFacet");r.select(e).transition().style("opacity",.9).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px");var i=document.getElementById("optionDeleteFacet"),o=document.getElementById("optionAddFacet");i.onclick=function(){var t=f.globalState.getValue().expandedFacetId.split(","),e=(t[0],t[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{branchFacetId:g.branches[n].facetId,expandedFacetId:e+",-2"})),console.log("branchFacetId",f.globalState.getValue().branchFacetId),console.log("expandedFacetId",f.globalState.getValue().expandedFacetId),console.log("Use your FacetDelete function here!")},o.onclick=function(){b(),console.log("Use your FacetAdd function here!")},p(1)})),y.append("g").selectAll("circle").data(g.leaves).enter().append("circle").attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("r",(function(t,n){return g.treeData[n].containChildrenFacet?0:1.5*t.r})).attr("fill",(function(t){return t.color})).style("cursor","pointer").on("click",(function(t,n){var e=f.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{currentFacetId:g.branches[n].facetId,expandedFacetId:r+",-2"})),console.log("currentFacetId",f.globalState.getValue().currentFacetId),console.log("expandedFacetId",f.globalState.getValue().expandedFacetId)})),y.append("g").selectAll("text").data(g.texts_leaf).enter().append("text").attr("font-size",(function(t){return t.fontSize})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("fill","#fff").style("cursor","pointer").on("click",(function(t,n){var e=f.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{currentFacetId:g.branches[n].facetId,expandedFacetId:r+",-2"}))})),g.facetChart.forEach((function(n){c.drawFacetPieChart(n,t)}));var m=y.append("g").selectAll("text").data(g.texts).enter().append("text").attr("font-family","Times New Roman").attr("font-size",(function(t){return t.fontSize+"px"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("fill","#fff").attr("cursor","pointer").on("contextmenu",(function(t,n){console.log("Test message!"),r.event.preventDefault(),h=n+"select";var e=document.getElementById("ListMenuFacet");r.select(e).transition().style("opacity",.9).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px");var i=document.getElementById("OptionDelete"),o=document.getElementById("OptionAdd");i.onclick=function(){console.log("Use your FacetDelete function here!")},o.onclick=function(){console.log("Use your FacetAdd function here!")},p(1)}));g.texts.forEach((function(t,n){r.select(m._groups[0][n]).selectAll("tspan").data(t.text.split("")).enter().append("tspan").attr("x",t.x).attr("dy","1.2em").text((function(t){return t}))})),y.append("g").append("text").attr("x",t.clientWidth/2-24*l.judgementStringLengthWithChinese(n.topicName)/2).attr("y",t.clientHeight-10).text(n.topicName).attr("fill","#000").attr("font-size","24px")}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(52),i=e(75),o=e(57),u=e(55),a=e(56),c=e(50),f=e(51),s=e(74),l=e(73);n.drawTreeDel=function(t,n,e){s.emptyChildren(t);var h=r.select(t),d=a.buildTree(n,t);console.log("传入数据",d),document.getElementById("facet-tree-tooltip")||r.select("body").append("div").attr("id","facet-tree-tooltip").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px"),f.globalData.treeData=d,f.globalState.getValue().init?f.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0}):(f.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0}),f.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.currentFacetId}))).subscribe((function(t){e(t)})),f.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.expandedFacetId})),i.filter((function(t){var n=t.split(",");return n[0]!==n[1]}))).subscribe((function(n){var e=n.split(","),r=e[0],i=e[1];if("-2"!==r&&f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0]){for(var o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}if("-2"!==i&&f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0]){for(o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(f.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}}))),h.append("g").selectAll("rect").data(d.branches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html("双击删除该分面").style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("click",(function(t,n){var e=f.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{currentFacetId:d.branches[n].facetId,expandedFacetId:r+",-2"})),console.log("currentFacetId",f.globalState.getValue().currentFacetId),console.log("expandedFacetId",f.globalState.getValue().expandedFacetId)})),h.append("g").selectAll("rect").data(d.foldBranches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("transform",(function(t){return t.transform})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html("双击删除该分面").style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("click",(function(t,n){var e=f.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);f.globalState.next(Object.assign({},f.globalState.getValue(),{currentFacetId:d.branches[n].facetId,expandedFacetId:r+",-2"})),console.log("currentFacetId",f.globalState.getValue().currentFacetId),console.log("expandedFacetId",f.globalState.getValue().expandedFacetId)})),h.append("g").selectAll("circle").data(d.leaves).enter().append("circle").attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("r",(function(t,n){return d.treeData[n].containChildrenFacet?0:1.5*t.r})).attr("fill",(function(t){return t.color})).style("cursor","pointer"),h.append("g").selectAll("text").data(d.texts_leaf).enter().append("text").attr("font-size","20px").attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).text((function(t){return t.text})).attr("fill","#fff").style("cursor","pointer"),d.facetChart.forEach((function(n){c.drawFacetPieChart(n,t)}));var p=h.append("g").selectAll("text").data(d.texts).enter().append("text").attr("font-family","Times New Roman").attr("font-size",(function(t){return t.fontSize+"px"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("fill","#fff");d.texts.forEach((function(t,n){r.select(p._groups[0][n]).selectAll("tspan").data(t.text.split("")).enter().append("tspan").attr("x",t.x).attr("dy","1.2em").text((function(t){return t}))})),h.append("g").append("text").attr("x",t.clientWidth/2-24*l.judgementStringLengthWithChinese(n.topicName)/2).attr("y",t.clientHeight-10).text(n.topicName).attr("fill","#000").attr("font-size","24px")}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,