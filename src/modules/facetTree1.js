/*! For license information please see facetTree.js.LICENSE.txt */
/*eslint-disable*/Â 
!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.facetTree=n():t.facetTree=n()}(self,(function(){return(()=>{var t={4778:function(t,n,e){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var i=r(e(7621));function o(t,n,e){var r;return(r=Math.round(t.h)>=60&&Math.round(t.h)<=240?e?Math.round(t.h)-2*n:Math.round(t.h)+2*n:e?Math.round(t.h)+2*n:Math.round(t.h)-2*n)<0?r+=360:r>=360&&(r-=360),r}function u(t,n,e){return 0===t.h&&0===t.s?t.s:((r=e?Math.round(100*t.s)-16*n:4===n?Math.round(100*t.s)+16:Math.round(100*t.s)+5*n)>100&&(r=100),e&&5===n&&r>10&&(r=10),r<6&&(r=6),r);var r}function a(t,n,e){return e?Math.round(100*t.v)+5*n:Math.round(100*t.v)-15*n}n.default=function(t){for(var n=[],e=i.default(t),r=5;r>0;r-=1){var c=e.toHsv(),s=i.default({h:o(c,r,!0),s:u(c,r,!0),v:a(c,r,!0)}).toHexString();n.push(s)}for(n.push(e.toHexString()),r=1;r<=4;r+=1)c=e.toHsv(),s=i.default({h:o(c,r),s:u(c,r),v:a(c,r)}).toHexString(),n.push(s);return n}},9086:function(t,n,e){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var i=r(e(4778));n.generate=i.default;var o={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"};n.presetPrimaryColors=o;var u={};n.presetPalettes=u,Object.keys(o).forEach((function(t){u[t]=i.default(o[t]),u[t].primary=u[t][5]}));var a=u.red;n.red=a;var c=u.volcano;n.volcano=c;var s=u.gold;n.gold=s;var f=u.orange;n.orange=f;var l=u.yellow;n.yellow=l;var h=u.lime;n.lime=h;var p=u.green;n.green=p;var d=u.cyan;n.cyan=d;var v=u.blue;n.blue=v;var y=u.geekblue;n.geekblue=y;var b=u.purple;n.purple=b;var g=u.magenta;n.magenta=g;var _=u.grey;n.grey=_},9362:(t,n,e)=>{"use strict";e.r(n),e.d(n,{FormatSpecifier:()=>cc,active:()=>Jr,arc:()=>ix,area:()=>fx,areaRadial:()=>_x,ascending:()=>i,autoType:()=>Lu,axisBottom:()=>it,axisLeft:()=>ot,axisRight:()=>rt,axisTop:()=>et,bisect:()=>s,bisectLeft:()=>c,bisectRight:()=>a,bisector:()=>o,blob:()=>ya,brush:()=>Ai,brushSelection:()=>Ti,brushX:()=>Ni,brushY:()=>Ei,buffer:()=>ga,chord:()=>Li,clientPoint:()=>Ie,cluster:()=>Tp,color:()=>Xn,contourDensity:()=>au,contours:()=>nu,create:()=>Im,creator:()=>on,cross:()=>h,csv:()=>Sa,csvFormat:()=>Mu,csvFormatBody:()=>Tu,csvFormatRow:()=>Eu,csvFormatRows:()=>Nu,csvFormatValue:()=>Au,csvParse:()=>wu,csvParseRows:()=>Su,cubehelix:()=>Yo,curveBasis:()=>Jx,curveBasisClosed:()=>nw,curveBasisOpen:()=>rw,curveBundle:()=>ow,curveCardinal:()=>cw,curveCardinalClosed:()=>fw,curveCardinalOpen:()=>hw,curveCatmullRom:()=>vw,curveCatmullRomClosed:()=>bw,curveCatmullRomOpen:()=>_w,curveLinear:()=>ux,curveLinearClosed:()=>xw,curveMonotoneX:()=>kw,curveMonotoneY:()=>Cw,curveNatural:()=>Pw,curveStep:()=>jw,curveStepAfter:()=>Lw,curveStepBefore:()=>Ow,customEvent:()=>bn,descending:()=>p,deviation:()=>y,dispatch:()=>ht,drag:()=>du,dragDisable:()=>An,dragEnable:()=>kn,dsv:()=>wa,dsvFormat:()=>mu,easeBack:()=>fa,easeBackIn:()=>ca,easeBackInOut:()=>fa,easeBackOut:()=>sa,easeBounce:()=>oa,easeBounceIn:()=>ia,easeBounceInOut:()=>ua,easeBounceOut:()=>oa,easeCircle:()=>ea,easeCircleIn:()=>ta,easeCircleInOut:()=>ea,easeCircleOut:()=>na,easeCubic:()=>$r,easeCubicIn:()=>Hr,easeCubicInOut:()=>$r,easeCubicOut:()=>Xr,easeElastic:()=>pa,easeElasticIn:()=>ha,easeElasticInOut:()=>da,easeElasticOut:()=>pa,easeExp:()=>Ju,easeExpIn:()=>Ku,easeExpInOut:()=>Ju,easeExpOut:()=>Qu,easeLinear:()=>Ru,easePoly:()=>Yu,easePolyIn:()=>qu,easePolyInOut:()=>Yu,easePolyOut:()=>Zu,easeQuad:()=>Uu,easeQuadIn:()=>Vu,easeQuadInOut:()=>Uu,easeQuadOut:()=>Bu,easeSin:()=>Gu,easeSinIn:()=>Xu,easeSinInOut:()=>Gu,easeSinOut:()=>$u,entries:()=>vo,event:()=>ln,extent:()=>b,forceCenter:()=>Fa,forceCollide:()=>Ya,forceLink:()=>Xa,forceManyBody:()=>Ja,forceRadial:()=>tc,forceSimulation:()=>Qa,forceX:()=>nc,forceY:()=>ec,format:()=>pc,formatDefaultLocale:()=>gc,formatLocale:()=>bc,formatPrefix:()=>dc,formatSpecifier:()=>ac,geoAlbers:()=>Vh,geoAlbersUsa:()=>Bh,geoArea:()=>ds,geoAzimuthalEqualArea:()=>Yh,geoAzimuthalEqualAreaRaw:()=>Zh,geoAzimuthalEquidistant:()=>Hh,geoAzimuthalEquidistantRaw:()=>Wh,geoBounds:()=>af,geoCentroid:()=>_f,geoCircle:()=>Cf,geoClipAntimeridian:()=>Uf,geoClipCircle:()=>qf,geoClipExtent:()=>Hf,geoClipRectangle:()=>Wf,geoConicConformal:()=>Jh,geoConicConformalRaw:()=>Qh,geoConicEqualArea:()=>Rh,geoConicEqualAreaRaw:()=>Dh,geoConicEquidistant:()=>rp,geoConicEquidistantRaw:()=>ep,geoContains:()=>dl,geoDistance:()=>ol,geoEqualEarth:()=>fp,geoEqualEarthRaw:()=>sp,geoEquirectangular:()=>np,geoEquirectangularRaw:()=>tp,geoGnomonic:()=>hp,geoGnomonicRaw:()=>lp,geoGraticule:()=>bl,geoGraticule10:()=>gl,geoIdentity:()=>pp,geoInterpolate:()=>_l,geoLength:()=>el,geoMercator:()=>$h,geoMercatorRaw:()=>Xh,geoNaturalEarth1:()=>vp,geoNaturalEarth1Raw:()=>dp,geoOrthographic:()=>bp,geoOrthographicRaw:()=>yp,geoPath:()=>xh,geoProjection:()=>jh,geoProjectionMutator:()=>Oh,geoRotation:()=>Ef,geoStereographic:()=>_p,geoStereographicRaw:()=>gp,geoStream:()=>ns,geoTransform:()=>wh,geoTransverseMercator:()=>xp,geoTransverseMercatorRaw:()=>mp,gray:()=>Mo,hcl:()=>Po,hierarchy:()=>Ep,histogram:()=>I,hsl:()=>oe,html:()=>Ca,image:()=>Ta,interpolate:()=>ke,interpolateArray:()=>xe,interpolateBasis:()=>se,interpolateBasisClosed:()=>fe,interpolateBlues:()=>im,interpolateBrBG:()=>y_,interpolateBuGn:()=>z_,interpolateBuPu:()=>O_,interpolateCividis:()=>vm,interpolateCool:()=>gm,interpolateCubehelix:()=>Rd,interpolateCubehelixDefault:()=>ym,interpolateCubehelixLong:()=>Vd,interpolateDate:()=>Se,interpolateDiscrete:()=>Td,interpolateGnBu:()=>D_,interpolateGreens:()=>um,interpolateGreys:()=>cm,interpolateHcl:()=>Od,interpolateHclLong:()=>Ld,interpolateHsl:()=>Fd,interpolateHslLong:()=>Pd,interpolateHue:()=>Nd,interpolateInferno:()=>km,interpolateLab:()=>zd,interpolateMagma:()=>Am,interpolateNumber:()=>Me,interpolateNumberArray:()=>_e,interpolateObject:()=>Te,interpolateOrRd:()=>V_,interpolateOranges:()=>dm,interpolatePRGn:()=>g_,interpolatePiYG:()=>m_,interpolatePlasma:()=>Cm,interpolatePuBu:()=>Z_,interpolatePuBuGn:()=>U_,interpolatePuOr:()=>w_,interpolatePuRd:()=>W_,interpolatePurples:()=>fm,interpolateRainbow:()=>mm,interpolateRdBu:()=>M_,interpolateRdGy:()=>N_,interpolateRdPu:()=>X_,interpolateRdYlBu:()=>A_,interpolateRdYlGn:()=>C_,interpolateReds:()=>hm,interpolateRgb:()=>ve,interpolateRgbBasis:()=>be,interpolateRgbBasisClosed:()=>ge,interpolateRound:()=>Ed,interpolateSinebow:()=>Mm,interpolateSpectral:()=>F_,interpolateString:()=>Ae,interpolateTransformCss:()=>dr,interpolateTransformSvg:()=>vr,interpolateTurbo:()=>Tm,interpolateViridis:()=>Em,interpolateWarm:()=>bm,interpolateYlGn:()=>Q_,interpolateYlGnBu:()=>G_,interpolateYlOrBr:()=>tm,interpolateYlOrRd:()=>em,interpolateZoom:()=>Cd,interrupt:()=>or,interval:()=>eS,isoFormat:()=>tS,isoParse:()=>nS,json:()=>Ea,keys:()=>ho,lab:()=>To,lch:()=>Fo,line:()=>sx,lineRadial:()=>gx,linkHorizontal:()=>Ax,linkRadial:()=>Cx,linkVertical:()=>kx,local:()=>Pm,map:()=>eo,matcher:()=>bt,max:()=>j,mean:()=>O,median:()=>L,merge:()=>D,min:()=>R,mouse:()=>Pe,namespace:()=>Tt,namespaces:()=>Mt,nest:()=>ro,now:()=>Ze,pack:()=>Qp,packEnclose:()=>Pp,packSiblings:()=>Wp,pairs:()=>f,partition:()=>id,path:()=>Wi,permute:()=>V,pie:()=>px,piecewise:()=>Bd,pointRadial:()=>mx,polygonArea:()=>qd,polygonCentroid:()=>Zd,polygonContains:()=>$d,polygonHull:()=>Xd,polygonLength:()=>Gd,precisionFixed:()=>_c,precisionPrefix:()=>mc,precisionRound:()=>xc,quadtree:()=>Ra,quantile:()=>F,quantize:()=>Ud,radialArea:()=>_x,radialLine:()=>gx,randomBates:()=>ev,randomExponential:()=>rv,randomIrwinHall:()=>nv,randomLogNormal:()=>tv,randomNormal:()=>Jd,randomUniform:()=>Qd,range:()=>S,rgb:()=>Qn,ribbon:()=>Qi,scaleBand:()=>lv,scaleDiverging:()=>Qg,scaleDivergingLog:()=>Jg,scaleDivergingPow:()=>n_,scaleDivergingSqrt:()=>e_,scaleDivergingSymlog:()=>t_,scaleIdentity:()=>Ev,scaleImplicit:()=>sv,scaleLinear:()=>Nv,scaleLog:()=>Ov,scaleOrdinal:()=>fv,scalePoint:()=>pv,scalePow:()=>Yv,scaleQuantile:()=>Hv,scaleQuantize:()=>Xv,scaleSequential:()=>Yg,scaleSequentialLog:()=>Wg,scaleSequentialPow:()=>Xg,scaleSequentialQuantile:()=>Gg,scaleSequentialSqrt:()=>$g,scaleSequentialSymlog:()=>Hg,scaleSqrt:()=>Wv,scaleSymlog:()=>Vv,scaleThreshold:()=>$v,scaleTime:()=>Fg,scaleUtc:()=>Ug,scan:()=>B,schemeAccent:()=>o_,schemeBlues:()=>rm,schemeBrBG:()=>v_,schemeBuGn:()=>P_,schemeBuPu:()=>j_,schemeCategory10:()=>i_,schemeDark2:()=>u_,schemeGnBu:()=>L_,schemeGreens:()=>om,schemeGreys:()=>am,schemeOrRd:()=>R_,schemeOranges:()=>pm,schemePRGn:()=>b_,schemePaired:()=>a_,schemePastel1:()=>c_,schemePastel2:()=>s_,schemePiYG:()=>__,schemePuBu:()=>q_,schemePuBuGn:()=>B_,schemePuOr:()=>x_,schemePuRd:()=>Y_,schemePurples:()=>sm,schemeRdBu:()=>S_,schemeRdGy:()=>T_,schemeRdPu:()=>H_,schemeRdYlBu:()=>E_,schemeRdYlGn:()=>k_,schemeReds:()=>lm,schemeSet1:()=>f_,schemeSet2:()=>l_,schemeSet3:()=>h_,schemeSpectral:()=>I_,schemeTableau10:()=>p_,schemeYlGn:()=>K_,schemeYlGnBu:()=>$_,schemeYlOrBr:()=>J_,schemeYlOrRd:()=>nm,select:()=>Tn,selectAll:()=>jm,selection:()=>Mn,selector:()=>dt,selectorAll:()=>yt,set:()=>lo,shuffle:()=>U,stack:()=>Bw,stackOffsetDiverging:()=>qw,stackOffsetExpand:()=>Uw,stackOffsetNone:()=>Dw,stackOffsetSilhouette:()=>Zw,stackOffsetWiggle:()=>Yw,stackOrderAppearance:()=>Ww,stackOrderAscending:()=>Xw,stackOrderDescending:()=>Gw,stackOrderInsideOut:()=>Kw,stackOrderNone:()=>Rw,stackOrderReverse:()=>Qw,stratify:()=>sd,style:()=>Ot,sum:()=>q,svg:()=>Ia,symbol:()=>$x,symbolCircle:()=>Ix,symbolCross:()=>Fx,symbolDiamond:()=>jx,symbolSquare:()=>Vx,symbolStar:()=>Rx,symbolTriangle:()=>Ux,symbolWye:()=>Hx,symbols:()=>Xx,text:()=>ma,thresholdFreedmanDiaconis:()=>P,thresholdScott:()=>z,thresholdSturges:()=>C,tickFormat:()=>Mv,tickIncrement:()=>A,tickStep:()=>k,ticks:()=>E,timeDay:()=>Ny,timeDays:()=>Ey,timeFormat:()=>hb,timeFormatDefaultLocale:()=>Eg,timeFormatLocale:()=>fb,timeFriday:()=>yy,timeFridays:()=>Sy,timeHour:()=>ky,timeHours:()=>Cy,timeInterval:()=>Qv,timeMillisecond:()=>Dy,timeMilliseconds:()=>Ry,timeMinute:()=>Fy,timeMinutes:()=>Py,timeMonday:()=>hy,timeMondays:()=>_y,timeMonth:()=>ry,timeMonths:()=>iy,timeParse:()=>pb,timeSaturday:()=>by,timeSaturdays:()=>My,timeSecond:()=>jy,timeSeconds:()=>Oy,timeSunday:()=>ly,timeSundays:()=>gy,timeThursday:()=>vy,timeThursdays:()=>wy,timeTuesday:()=>py,timeTuesdays:()=>my,timeWednesday:()=>dy,timeWednesdays:()=>xy,timeWeek:()=>ly,timeWeeks:()=>gy,timeYear:()=>ty,timeYears:()=>ny,timeout:()=>Qe,timer:()=>He,timerFlush:()=>Xe,touch:()=>Fe,touches:()=>Om,transition:()=>Zr,transpose:()=>Z,tree:()=>yd,treemap:()=>xd,treemapBinary:()=>wd,treemapDice:()=>rd,treemapResquarify:()=>Md,treemapSlice:()=>bd,treemapSliceDice:()=>Sd,treemapSquarify:()=>md,tsv:()=>Ma,tsvFormat:()=>Fu,tsvFormatBody:()=>Pu,tsvFormatRow:()=>ju,tsvFormatRows:()=>zu,tsvFormatValue:()=>Ou,tsvParse:()=>Cu,tsvParseRows:()=>Iu,utcDay:()=>eb,utcDays:()=>rb,utcFormat:()=>db,utcFriday:()=>Wy,utcFridays:()=>Jy,utcHour:()=>Lg,utcHours:()=>Dg,utcMillisecond:()=>Dy,utcMilliseconds:()=>Ry,utcMinute:()=>Vg,utcMinutes:()=>Bg,utcMonday:()=>Uy,utcMondays:()=>$y,utcMonth:()=>zg,utcMonths:()=>jg,utcParse:()=>vb,utcSaturday:()=>Hy,utcSaturdays:()=>tb,utcSecond:()=>jy,utcSeconds:()=>Oy,utcSunday:()=>By,utcSundays:()=>Xy,utcThursday:()=>Yy,utcThursdays:()=>Qy,utcTuesday:()=>qy,utcTuesdays:()=>Gy,utcWednesday:()=>Zy,utcWednesdays:()=>Ky,utcWeek:()=>By,utcWeeks:()=>Xy,utcYear:()=>ob,utcYears:()=>ub,values:()=>po,variance:()=>v,version:()=>r,voronoi:()=>US,window:()=>Ft,xml:()=>ka,zip:()=>W,zoom:()=>eM,zoomIdentity:()=>WS,zoomTransform:()=>HS});var r="5.16.0";function i(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function o(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}}var u=o(i),a=u.right,c=u.left;const s=a;function f(t,n){null==n&&(n=l);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o}function l(t,n){return[t,n]}function h(t,n,e){var r,i,o,u,a=t.length,c=n.length,s=new Array(a*c);for(null==e&&(e=l),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)s[o]=e(u,n[i]);return s}function p(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function d(t){return null===t?NaN:+t}function v(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=d(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=d(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)}function y(t,n){var e=v(t,n);return e?Math.sqrt(e):e}function b(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}var g=Array.prototype,_=g.slice,m=g.map;function x(t){return function(){return t}}function w(t){return t}function S(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var M=Math.sqrt(50),T=Math.sqrt(10),N=Math.sqrt(2);function E(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=A(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o}function A(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=M?10:o>=T?5:o>=N?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=M?10:o>=T?5:o>=N?2:1)}function k(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=M?i*=10:o>=T?i*=5:o>=N&&(i*=2),n<t?-i:i}function C(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}function I(){var t=w,n=b,e=C;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var c=n(a),f=c[0],l=c[1],h=e(a,f,l);Array.isArray(h)||(h=k(f,l,h),h=S(Math.ceil(f/h)*h,l,h));for(var p=h.length;h[0]<=f;)h.shift(),--p;for(;h[p-1]>l;)h.pop(),--p;var d,v=new Array(p+1);for(i=0;i<=p;++i)(d=v[i]=[]).x0=i>0?h[i-1]:f,d.x1=i<p?h[i]:l;for(i=0;i<u;++i)f<=(o=a[i])&&o<=l&&v[s(h,o,0,p)].push(r[i]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:x(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:x([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?x(_.call(t)):x(t),r):e},r}function F(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}}function P(t,n,e){return t=m.call(t,d).sort(i),Math.ceil((e-n)/(2*(F(t,.75)-F(t,.25))*Math.pow(t.length,-1/3)))}function z(t,n,e){return Math.ceil((e-n)/(3.5*y(t)*Math.pow(t.length,-1/3)))}function j(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function O(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:u+=e;if(i)return u/i}function L(t,n){var e,r=t.length,o=-1,u=[];if(null==n)for(;++o<r;)isNaN(e=d(t[o]))||u.push(e);else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))||u.push(e);return F(u.sort(i),.5)}function D(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e}function R(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}function V(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r}function B(t,n){if(e=t.length){var e,r,o=0,u=0,a=t[u];for(null==n&&(n=i);++o<e;)(n(r=t[o],a)<0||0!==n(a,a))&&(a=r,u=o);return 0===n(a,a)?u:void 0}}function U(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t}function q(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o}function Z(t){if(!(i=t.length))return[];for(var n=-1,e=R(t,Y),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r}function Y(t){return t.length}function W(){return Z(arguments)}var H=Array.prototype.slice;function X(t){return t}var $=1e-6;function G(t){return"translate("+(t+.5)+",0)"}function K(t){return"translate(0,"+(t+.5)+")"}function Q(t){return function(n){return+t(n)}}function J(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function tt(){return!this.__axis}function nt(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=1===t||4===t?-1:1,s=4===t||2===t?"x":"y",f=1===t||3===t?G:K;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):X:i,d=Math.max(o,0)+a,v=n.range(),y=+v[0]+.5,b=+v[v.length-1]+.5,g=(n.bandwidth?J:Q)(n.copy()),_=l.selection?l.selection():l,m=_.selectAll(".domain").data([null]),x=_.selectAll(".tick").data(h,n).order(),w=x.exit(),S=x.enter().append("g").attr("class","tick"),M=x.select("line"),T=x.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(s+"2",c*o)),T=T.merge(S.append("text").attr("fill","currentColor").attr(s,c*d).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),l!==_&&(m=m.transition(l),x=x.transition(l),M=M.transition(l),T=T.transition(l),w=w.transition(l).attr("opacity",$).attr("transform",(function(t){return isFinite(t=g(t))?f(t):this.getAttribute("transform")})),S.attr("opacity",$).attr("transform",(function(t){var n=this.parentNode.__axis;return f(n&&isFinite(n=n(t))?n:g(t))}))),w.remove(),m.attr("d",4===t||2==t?u?"M"+c*u+","+y+"H0.5V"+b+"H"+c*u:"M0.5,"+y+"V"+b:u?"M"+y+","+c*u+"V0.5H"+b+"V"+c*u:"M"+y+",0.5H"+b),x.attr("opacity",1).attr("transform",(function(t){return f(g(t))})),M.attr(s+"2",c*o),T.attr(s,c*d).text(p),_.filter(tt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),_.each((function(){this.__axis=g}))}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=H.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:H.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:H.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=u=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(u=+t,l):u},l.tickPadding=function(t){return arguments.length?(a=+t,l):a},l}function et(t){return nt(1,t)}function rt(t){return nt(2,t)}function it(t){return nt(3,t)}function ot(t){return nt(4,t)}var ut={value:function(){}};function at(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function st(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function ft(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function lt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ut,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ct.prototype=at.prototype={constructor:ct,on:function(t,n){var e,r=this._,i=st(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=lt(r[e],t.name,n);else if(null==n)for(e in r)r[e]=lt(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=ft(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ct(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const ht=at;function pt(){}function dt(t){return null==t?pt:function(){return this.querySelector(t)}}function vt(){return[]}function yt(t){return null==t?vt:function(){return this.querySelectorAll(t)}}function bt(t){return function(){return this.matches(t)}}function gt(t){return new Array(t.length)}function _t(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function mt(t,n,e,r,i,o){for(var u,a=0,c=n.length,s=o.length;a<s;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new _t(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function xt(t,n,e,r,i,o,u){var a,c,s,f={},l=n.length,h=o.length,p=new Array(l);for(a=0;a<l;++a)(c=n[a])&&(p[a]=s="$"+u.call(c,c.__data__,a,n),s in f?i[a]=c:f[s]=c);for(a=0;a<h;++a)(c=f[s="$"+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],f[s]=null):e[a]=new _t(t,o[a]);for(a=0;a<l;++a)(c=n[a])&&f[p[a]]===c&&(i[a]=c)}function wt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}_t.prototype={constructor:_t,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var St="http://www.w3.org/1999/xhtml";const Mt={svg:"http://www.w3.org/2000/svg",xhtml:St,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Tt(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Mt.hasOwnProperty(n)?{space:Mt[n],local:t}:t}function Nt(t){return function(){this.removeAttribute(t)}}function Et(t){return function(){this.removeAttributeNS(t.space,t.local)}}function At(t,n){return function(){this.setAttribute(t,n)}}function kt(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Ct(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function It(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function Ft(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Pt(t){return function(){this.style.removeProperty(t)}}function zt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function jt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function Ot(t,n){return t.style.getPropertyValue(n)||Ft(t).getComputedStyle(t,null).getPropertyValue(n)}function Lt(t){return function(){delete this[t]}}function Dt(t,n){return function(){this[t]=n}}function Rt(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Vt(t){return t.trim().split(/^|\s+/)}function Bt(t){return t.classList||new Ut(t)}function Ut(t){this._node=t,this._names=Vt(t.getAttribute("class")||"")}function qt(t,n){for(var e=Bt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Zt(t,n){for(var e=Bt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Yt(t){return function(){qt(this,t)}}function Wt(t){return function(){Zt(this,t)}}function Ht(t,n){return function(){(n.apply(this,arguments)?qt:Zt)(this,t)}}function Xt(){this.textContent=""}function $t(t){return function(){this.textContent=t}}function Gt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Kt(){this.innerHTML=""}function Qt(t){return function(){this.innerHTML=t}}function Jt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function tn(){this.nextSibling&&this.parentNode.appendChild(this)}function nn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function en(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===St&&n.documentElement.namespaceURI===St?n.createElement(t):n.createElementNS(e,t)}}function rn(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function on(t){var n=Tt(t);return(n.local?rn:en)(n)}function un(){return null}function an(){var t=this.parentNode;t&&t.removeChild(this)}function cn(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function sn(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}Ut.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var fn={},ln=null;function hn(t,n,e){return t=pn(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function pn(t,n,e){return function(r){var i=ln;ln=r;try{t.call(this,this.__data__,n,e)}finally{ln=i}}}function dn(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function vn(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function yn(t,n,e){var r=fn.hasOwnProperty(t.type)?hn:pn;return function(i,o,u){var a,c=this.__on,s=r(n,o,u);if(c)for(var f=0,l=c.length;f<l;++f)if((a=c[f]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=s,a.capture=e),void(a.value=n);this.addEventListener(t.type,s,e),a={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(a):this.__on=[a]}}function bn(t,n,e,r){var i=ln;t.sourceEvent=ln,ln=t;try{return n.apply(e,r)}finally{ln=i}}function gn(t,n,e){var r=Ft(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function _n(t,n){return function(){return gn(this,t,n)}}function mn(t,n){return function(){return gn(this,t,n.apply(this,arguments))}}"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(fn={mouseenter:"mouseover",mouseleave:"mouseout"}));var xn=[null];function wn(t,n){this._groups=t,this._parents=n}function Sn(){return new wn([[document.documentElement]],xn)}wn.prototype=Sn.prototype={constructor:wn,select:function(t){"function"!=typeof t&&(t=dt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,s=r[i]=new Array(c),f=0;f<c;++f)(o=a[f])&&(u=t.call(o,o.__data__,f,a))&&("__data__"in o&&(u.__data__=o.__data__),s[f]=u);return new wn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=yt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,s=0;s<c;++s)(u=a[s])&&(r.push(t.call(u,u.__data__,s,a)),i.push(u));return new wn(r,i)},filter:function(t){"function"!=typeof t&&(t=bt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new wn(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),f=-1,this.each((function(t){d[++f]=t})),d;var e,r=n?xt:mt,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),s=new Array(u),f=0;f<u;++f){var l=i[f],h=o[f],p=h.length,d=t.call(l,l&&l.__data__,f,i),v=d.length,y=c[f]=new Array(v),b=a[f]=new Array(v);r(l,h,y,b,s[f]=new Array(p),d,n);for(var g,_,m=0,x=0;m<v;++m)if(g=y[m]){for(m>=x&&(x=m+1);!(_=b[x])&&++x<v;);g._next=_||null}}return(a=new wn(a,i))._enter=c,a._exit=s,a},enter:function(){return new wn(this._enter||this._groups.map(gt),this._parents)},exit:function(){return new wn(this._exit||this._groups.map(gt),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],f=e[a],l=s.length,h=u[a]=new Array(l),p=0;p<l;++p)(c=s[p]||f[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new wn(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=wt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,s=i[o]=new Array(c),f=0;f<c;++f)(u=a[f])&&(s[f]=u);s.sort(n)}return new wn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=Tt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?Et:Nt:"function"==typeof n?e.local?It:Ct:e.local?kt:At)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Pt:"function"==typeof n?jt:zt)(t,n,null==e?"":e)):Ot(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?Lt:"function"==typeof n?Rt:Dt)(t,n)):this.node()[t]},classed:function(t,n){var e=Vt(t+"");if(arguments.length<2){for(var r=Bt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Ht:n?Yt:Wt)(e,n))},text:function(t){return arguments.length?this.each(null==t?Xt:("function"==typeof t?Gt:$t)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Kt:("function"==typeof t?Jt:Qt)(t)):this.node().innerHTML},raise:function(){return this.each(tn)},lower:function(){return this.each(nn)},append:function(t){var n="function"==typeof t?t:on(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:on(t),r=null==n?un:"function"==typeof n?n:dt(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(an)},clone:function(t){return this.select(t?sn:cn)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=dn(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?yn:vn,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,s=0,f=a.length;s<f;++s)for(r=0,c=a[s];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?mn:_n)(t,n))}};const Mn=Sn;function Tn(t){return"string"==typeof t?new wn([[document.querySelector(t)]],[document.documentElement]):new wn([[t]],xn)}function Nn(){ln.stopImmediatePropagation()}function En(){ln.preventDefault(),ln.stopImmediatePropagation()}function An(t){var n=t.document.documentElement,e=Tn(t).on("dragstart.drag",En,!0);"onselectstart"in n?e.on("selectstart.drag",En,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function kn(t,n){var e=t.document.documentElement,r=Tn(t).on("dragstart.drag",null);n&&(r.on("click.drag",En,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function Cn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function In(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Fn(){}var Pn=.7,zn=1/Pn,jn="\\s*([+-]?\\d+)\\s*",On="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ln="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Dn=/^#([0-9a-f]{3,8})$/,Rn=new RegExp("^rgb\\("+[jn,jn,jn]+"\\)$"),Vn=new RegExp("^rgb\\("+[Ln,Ln,Ln]+"\\)$"),Bn=new RegExp("^rgba\\("+[jn,jn,jn,On]+"\\)$"),Un=new RegExp("^rgba\\("+[Ln,Ln,Ln,On]+"\\)$"),qn=new RegExp("^hsl\\("+[On,Ln,Ln]+"\\)$"),Zn=new RegExp("^hsla\\("+[On,Ln,Ln,On]+"\\)$"),Yn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Wn(){return this.rgb().formatHex()}function Hn(){return this.rgb().formatRgb()}function Xn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Dn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?$n(n):3===e?new Jn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Gn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Gn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Rn.exec(t))?new Jn(n[1],n[2],n[3],1):(n=Vn.exec(t))?new Jn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Bn.exec(t))?Gn(n[1],n[2],n[3],n[4]):(n=Un.exec(t))?Gn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=qn.exec(t))?re(n[1],n[2]/100,n[3]/100,1):(n=Zn.exec(t))?re(n[1],n[2]/100,n[3]/100,n[4]):Yn.hasOwnProperty(t)?$n(Yn[t]):"transparent"===t?new Jn(NaN,NaN,NaN,0):null}function $n(t){return new Jn(t>>16&255,t>>8&255,255&t,1)}function Gn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Jn(t,n,e,r)}function Kn(t){return t instanceof Fn||(t=Xn(t)),t?new Jn((t=t.rgb()).r,t.g,t.b,t.opacity):new Jn}function Qn(t,n,e,r){return 1===arguments.length?Kn(t):new Jn(t,n,e,null==r?1:r)}function Jn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function te(){return"#"+ee(this.r)+ee(this.g)+ee(this.b)}function ne(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function ee(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function re(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new ue(t,n,e,r)}function ie(t){if(t instanceof ue)return new ue(t.h,t.s,t.l,t.opacity);if(t instanceof Fn||(t=Xn(t)),!t)return new ue;if(t instanceof ue)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new ue(u,a,c,t.opacity)}function oe(t,n,e,r){return 1===arguments.length?ie(t):new ue(t,n,e,null==r?1:r)}function ue(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ae(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function ce(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}function se(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return ce((e-r/n)*n,u,i,o,a)}}function fe(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return ce((e-r/n)*n,i,o,u,a)}}function le(t){return function(){return t}}function he(t,n){return function(e){return t+e*n}}function pe(t,n){var e=n-t;return e?he(t,e>180||e<-180?e-360*Math.round(e/360):e):le(isNaN(t)?n:t)}function de(t,n){var e=n-t;return e?he(t,e):le(isNaN(t)?n:t)}Cn(Fn,Xn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Wn,formatHex:Wn,formatHsl:function(){return ie(this).formatHsl()},formatRgb:Hn,toString:Hn}),Cn(Jn,Qn,In(Fn,{brighter:function(t){return t=null==t?zn:Math.pow(zn,t),new Jn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?Pn:Math.pow(Pn,t),new Jn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:te,formatHex:te,formatRgb:ne,toString:ne})),Cn(ue,oe,In(Fn,{brighter:function(t){return t=null==t?zn:Math.pow(zn,t),new ue(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Pn:Math.pow(Pn,t),new ue(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Jn(ae(t>=240?t-240:t+120,i,r),ae(t,i,r),ae(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const ve=function t(n){var e=function(t){return 1==(t=+t)?de:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):le(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Qn(t)).r,(n=Qn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=de(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function ye(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Qn(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}var be=ye(se),ge=ye(fe);function _e(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function me(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function xe(t,n){return(me(n)?_e:we)(t,n)}function we(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=ke(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}function Se(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function Me(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function Te(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=ke(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var Ne=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ee=new RegExp(Ne.source,"g");function Ae(t,n){var e,r,i,o=Ne.lastIndex=Ee.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=Ne.exec(t))&&(r=Ee.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:Me(e,r)})),o=Ee.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})}function ke(t,n){var e,r=typeof n;return null==n||"boolean"===r?le(n):("number"===r?Me:"string"===r?(e=Xn(n))?(n=e,ve):Ae:n instanceof Xn?ve:n instanceof Date?Se:me(n)?_e:Array.isArray(n)?we:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Te:Me)(t,n)}function Ce(){for(var t,n=ln;t=n.sourceEvent;)n=t;return n}function Ie(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function Fe(t,n,e){arguments.length<3&&(e=n,n=Ce().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return Ie(t,r);return null}function Pe(t){var n=Ce();return n.changedTouches&&(n=n.changedTouches[0]),Ie(t,n)}var ze,je,Oe=0,Le=0,De=0,Re=0,Ve=0,Be=0,Ue="object"==typeof performance&&performance.now?performance:Date,qe="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ze(){return Ve||(qe(Ye),Ve=Ue.now()+Be)}function Ye(){Ve=0}function We(){this._call=this._time=this._next=null}function He(t,n,e){var r=new We;return r.restart(t,n,e),r}function Xe(){Ze(),++Oe;for(var t,n=ze;n;)(t=Ve-n._time)>=0&&n._call.call(null,t),n=n._next;--Oe}function $e(){Ve=(Re=Ue.now())+Be,Oe=Le=0;try{Xe()}finally{Oe=0,function(){for(var t,n,e=ze,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:ze=n);je=t,Ke(r)}(),Ve=0}}function Ge(){var t=Ue.now(),n=t-Re;n>1e3&&(Be-=n,Re=t)}function Ke(t){Oe||(Le&&(Le=clearTimeout(Le)),t-Ve>24?(t<1/0&&(Le=setTimeout($e,t-Ue.now()-Be)),De&&(De=clearInterval(De))):(De||(Re=Ue.now(),De=setInterval(Ge,1e3)),Oe=1,qe($e)))}function Qe(t,n,e){var r=new We;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}We.prototype=He.prototype={constructor:We,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Ze():+e)+(null==n?0:+n),this._next||je===this||(je?je._next=this:ze=this,je=this),this._call=t,this._time=e,Ke()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ke())}};var Je=ht("start","end","cancel","interrupt"),tr=[];function nr(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var s,f,l,h;if(1!==e.state)return a();for(s in i)if((h=i[s]).name===e.name){if(3===h.state)return Qe(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(Qe((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),s=0,f=-1;s<l;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++f]=h);r.length=f+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=He((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Je,tween:tr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function er(t,n){var e=ir(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function rr(t,n){var e=ir(t,n);if(e.state>3)throw new Error("too late; already running");return e}function ir(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function or(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}}var ur,ar,cr,sr,fr=180/Math.PI,lr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function hr(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*fr,skewX:Math.atan(c)*fr,scaleX:u,scaleY:a}}function pr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:Me(t,i)},{i:c-2,x:Me(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Me(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Me(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:Me(t,e)},{i:a-2,x:Me(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var dr=pr((function(t){return"none"===t?lr:(ur||(ur=document.createElement("DIV"),ar=document.documentElement,cr=document.defaultView),ur.style.transform=t,t=cr.getComputedStyle(ar.appendChild(ur),null).getPropertyValue("transform"),ar.removeChild(ur),hr(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),vr=pr((function(t){return null==t?lr:(sr||(sr=document.createElementNS("http://www.w3.org/2000/svg","g")),sr.setAttribute("transform",t),(t=sr.transform.baseVal.consolidate())?hr((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):lr)}),", ",")",")");function yr(t,n){var e,r;return function(){var i=rr(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function br(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=rr(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=a;break}c===s&&i.push(a)}o.tween=i}}function gr(t,n,e){var r=t._id;return t.each((function(){var t=rr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return ir(t,r).value[n]}}function _r(t,n){var e;return("number"==typeof n?Me:n instanceof Xn?ve:(e=Xn(n))?(n=e,ve):Ae)(t,n)}function mr(t){return function(){this.removeAttribute(t)}}function xr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function wr(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}}function Sr(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}function Mr(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttribute(t))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttribute(t)}}function Tr(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttributeNS(t.space,t.local))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttributeNS(t.space,t.local)}}function Nr(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Er(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Ar(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Er(t,i)),e}return i._value=n,i}function kr(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Nr(t,i)),e}return i._value=n,i}function Cr(t,n){return function(){er(this,t).delay=+n.apply(this,arguments)}}function Ir(t,n){return n=+n,function(){er(this,t).delay=n}}function Fr(t,n){return function(){rr(this,t).duration=+n.apply(this,arguments)}}function Pr(t,n){return n=+n,function(){rr(this,t).duration=n}}function zr(t,n){if("function"!=typeof n)throw new Error;return function(){rr(this,t).ease=n}}function jr(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?er:rr;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var Or=Mn.prototype.constructor;function Lr(t){return function(){this.style.removeProperty(t)}}function Dr(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Rr(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Dr(t,o,e)),r}return o._value=n,o}function Vr(t){return function(n){this.textContent=t.call(this,n)}}function Br(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Vr(r)),n}return r._value=t,r}var Ur=0;function qr(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Zr(t){return Mn().transition(t)}function Yr(){return++Ur}var Wr=Mn.prototype;function Hr(t){return t*t*t}function Xr(t){return--t*t*t+1}function $r(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}qr.prototype=Zr.prototype={constructor:qr,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=dt(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,s=r[u],f=s.length,l=o[u]=new Array(f),h=0;h<f;++h)(a=s[h])&&(c=t.call(a,a.__data__,h,s))&&("__data__"in a&&(c.__data__=a.__data__),l[h]=c,nr(l[h],n,e,h,l,ir(a,e)));return new qr(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=yt(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,s=r[a],f=s.length,l=0;l<f;++l)if(c=s[l]){for(var h,p=t.call(c,c.__data__,l,s),d=ir(c,e),v=0,y=p.length;v<y;++v)(h=p[v])&&nr(h,n,e,v,p,d);o.push(p),u.push(c)}return new qr(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=bt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new qr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],f=e[a],l=s.length,h=u[a]=new Array(l),p=0;p<l;++p)(c=s[p]||f[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new qr(u,this._parents,this._name,this._id)},selection:function(){return new Or(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Yr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)if(u=a[s]){var f=ir(u,n);nr(u,t,e,s,a,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new qr(r,this._parents,t,e)},call:Wr.call,nodes:Wr.nodes,node:Wr.node,size:Wr.size,empty:Wr.empty,each:Wr.each,on:function(t,n){var e=this._id;return arguments.length<2?ir(this.node(),e).on.on(t):this.each(jr(e,t,n))},attr:function(t,n){var e=Tt(t),r="transform"===e?vr:_r;return this.attrTween(t,"function"==typeof n?(e.local?Tr:Mr)(e,r,gr(this,"attr."+t,n)):null==n?(e.local?xr:mr)(e):(e.local?Sr:wr)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Tt(t);return this.tween(e,(r.local?Ar:kr)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?dr:_r;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Ot(this,t),u=(this.style.removeProperty(t),Ot(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,Lr(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Ot(this,t),a=e(this),c=a+"";return null==a&&(this.style.removeProperty(t),c=a=Ot(this,t)),u===c?null:u===r&&c===i?o:(i=c,o=n(r=u,a))}}(t,r,gr(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var c=rr(this,t),s=c.on,f=null==c.value[u]?o||(o=Lr(n)):void 0;s===e&&i===f||(r=(e=s).copy()).on(a,i=f),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Ot(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Rr(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(gr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Br(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ir(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?yr:br)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Cr:Ir)(n,t)):ir(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Fr:Pr)(n,t)):ir(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(zr(n,t)):ir(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,u){var a={value:u},c={value:function(){0==--i&&o()}};e.each((function(){var e=rr(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(c)),e.on=n}))}))}};var Gr={time:null,delay:0,duration:250,ease:$r};function Kr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Gr.time=Ze(),Gr;return e}Mn.prototype.interrupt=function(t){return this.each((function(){or(this,t)}))},Mn.prototype.transition=function(t){var n,e;t instanceof qr?(n=t._id,t=t._name):(n=Yr(),(e=Gr).time=Ze(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)(u=a[s])&&nr(u,t,n,s,a,e||Kr(u,n));return new qr(r,this._parents,t,n)};var Qr=[null];function Jr(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new qr([[t]],Qr,n,+r);return null}function ti(t){return function(){return t}}function ni(t,n,e){this.target=t,this.type=n,this.selection=e}function ei(){ln.stopImmediatePropagation()}function ri(){ln.preventDefault(),ln.stopImmediatePropagation()}var ii={name:"drag"},oi={name:"space"},ui={name:"handle"},ai={name:"center"};function ci(t){return[+t[0],+t[1]]}function si(t){return[ci(t[0]),ci(t[1])]}function fi(t){return function(n){return Fe(n,ln.touches,t)}}var li={name:"x",handles:["w","e"].map(_i),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},hi={name:"y",handles:["n","s"].map(_i),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},pi={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(_i),input:function(t){return null==t?null:si(t)},output:function(t){return t}},di={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},vi={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},yi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},bi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},gi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function _i(t){return{type:t}}function mi(){return!ln.ctrlKey&&!ln.button}function xi(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function wi(){return navigator.maxTouchPoints||"ontouchstart"in this}function Si(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Mi(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Ti(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Ni(){return ki(li)}function Ei(){return ki(hi)}function Ai(){return ki(pi)}function ki(t){var n,e=xi,r=mi,i=wi,o=!0,u=ht("start","brush","end"),a=6;function c(n){var e=n.property("__brush",v).selectAll(".overlay").data([_i("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",di.overlay).merge(e).each((function(){var t=Si(this).extent;Tn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([_i("selection")]).enter().append("rect").attr("class","selection").attr("cursor",di.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return di[t.type]})),n.each(s).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",p).on("touchend.brush touchcancel.brush",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function s(){var t=Tn(this),n=Si(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-a/2:n[0][0]-a/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-a/2:n[0][1]-a/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+a:a})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+a:a}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function f(t,n,e){return!e&&t.__brush.emitter||new l(t,n)}function l(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function h(){if((!n||ln.touches)&&r.apply(this,arguments)){var e,i,u,a,c,l,h,p,d,v,y,b=this,g=ln.target.__data__.type,_="selection"===(o&&ln.metaKey?g="overlay":g)?ii:o&&ln.altKey?ai:ui,m=t===hi?null:bi[g],x=t===li?null:gi[g],w=Si(b),S=w.extent,M=w.selection,T=S[0][0],N=S[0][1],E=S[1][0],A=S[1][1],k=0,C=0,I=m&&x&&o&&ln.shiftKey,F=ln.touches?fi(ln.changedTouches[0].identifier):Pe,P=F(b),z=P,j=f(b,arguments,!0).beforestart();"overlay"===g?(M&&(d=!0),w.selection=M=[[e=t===hi?T:P[0],u=t===li?N:P[1]],[c=t===hi?E:e,h=t===li?A:u]]):(e=M[0][0],u=M[0][1],c=M[1][0],h=M[1][1]),i=e,a=u,l=c,p=h;var O=Tn(b).attr("pointer-events","none"),L=O.selectAll(".overlay").attr("cursor",di[g]);if(ln.touches)j.moved=R,j.ended=B;else{var D=Tn(ln.view).on("mousemove.brush",R,!0).on("mouseup.brush",B,!0);o&&D.on("keydown.brush",U,!0).on("keyup.brush",q,!0),An(ln.view)}ei(),or(b),s.call(b),j.start()}function R(){var t=F(b);!I||v||y||(Math.abs(t[0]-z[0])>Math.abs(t[1]-z[1])?y=!0:v=!0),z=t,d=!0,ri(),V()}function V(){var t;switch(k=z[0]-P[0],C=z[1]-P[1],_){case oi:case ii:m&&(k=Math.max(T-e,Math.min(E-c,k)),i=e+k,l=c+k),x&&(C=Math.max(N-u,Math.min(A-h,C)),a=u+C,p=h+C);break;case ui:m<0?(k=Math.max(T-e,Math.min(E-e,k)),i=e+k,l=c):m>0&&(k=Math.max(T-c,Math.min(E-c,k)),i=e,l=c+k),x<0?(C=Math.max(N-u,Math.min(A-u,C)),a=u+C,p=h):x>0&&(C=Math.max(N-h,Math.min(A-h,C)),a=u,p=h+C);break;case ai:m&&(i=Math.max(T,Math.min(E,e-k*m)),l=Math.max(T,Math.min(E,c+k*m))),x&&(a=Math.max(N,Math.min(A,u-C*x)),p=Math.max(N,Math.min(A,h+C*x)))}l<i&&(m*=-1,t=e,e=c,c=t,t=i,i=l,l=t,g in vi&&L.attr("cursor",di[g=vi[g]])),p<a&&(x*=-1,t=u,u=h,h=t,t=a,a=p,p=t,g in yi&&L.attr("cursor",di[g=yi[g]])),w.selection&&(M=w.selection),v&&(i=M[0][0],l=M[1][0]),y&&(a=M[0][1],p=M[1][1]),M[0][0]===i&&M[0][1]===a&&M[1][0]===l&&M[1][1]===p||(w.selection=[[i,a],[l,p]],s.call(b),j.brush())}function B(){if(ei(),ln.touches){if(ln.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else kn(ln.view,d),D.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);O.attr("pointer-events","all"),L.attr("cursor",di.overlay),w.selection&&(M=w.selection),Mi(M)&&(w.selection=null,s.call(b)),j.end()}function U(){switch(ln.keyCode){case 16:I=m&&x;break;case 18:_===ui&&(m&&(c=l-k*m,e=i+k*m),x&&(h=p-C*x,u=a+C*x),_=ai,V());break;case 32:_!==ui&&_!==ai||(m<0?c=l-k:m>0&&(e=i-k),x<0?h=p-C:x>0&&(u=a-C),_=oi,L.attr("cursor",di.selection),V());break;default:return}ri()}function q(){switch(ln.keyCode){case 16:I&&(v=y=I=!1,V());break;case 18:_===ai&&(m<0?c=l:m>0&&(e=i),x<0?h=p:x>0&&(u=a),_=ui,V());break;case 32:_===oi&&(ln.altKey?(m&&(c=l-k*m,e=i+k*m),x&&(h=p-C*x,u=a+C*x),_=ai):(m<0?c=l:m>0&&(e=i),x<0?h=p:x>0&&(u=a),_=ui),L.attr("cursor",di[g]),V());break;default:return}ri()}}function p(){f(this,arguments).moved()}function d(){f(this,arguments).ended()}function v(){var n=this.__brush||{selection:null};return n.extent=si(e.apply(this,arguments)),n.dim=t,n}return c.move=function(n,e){n.selection?n.on("start.brush",(function(){f(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){f(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=f(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),a=ke(o,u);function c(t){r.selection=1===t&&null===u?null:a(t),s.call(n),i.brush()}return null!==o&&null!==u?c:c(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),u=f(n,r).beforestart();or(n),i.selection=null===o?null:o,s.call(n),u.start().brush().end()}))},c.clear=function(t){c.move(t,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){bn(new ni(c,n,t.output(this.state.selection)),u.apply,u,[n,this.that,this.args])}},c.extent=function(t){return arguments.length?(e="function"==typeof t?t:ti(si(t)),c):e},c.filter=function(t){return arguments.length?(r="function"==typeof t?t:ti(!!t),c):r},c.touchable=function(t){return arguments.length?(i="function"==typeof t?t:ti(!!t),c):i},c.handleSize=function(t){return arguments.length?(a=+t,c):a},c.keyModifiers=function(t){return arguments.length?(o=!!t,c):o},c.on=function(){var t=u.on.apply(u,arguments);return t===u?c:t},c}var Ci=Math.cos,Ii=Math.sin,Fi=Math.PI,Pi=Fi/2,zi=2*Fi,ji=Math.max;function Oi(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function Li(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,s,f,l=i.length,h=[],p=S(l),d=[],v=[],y=v.groups=new Array(l),b=new Array(l*l);for(o=0,s=-1;++s<l;){for(u=0,f=-1;++f<l;)u+=i[s][f];h.push(u),d.push(S(l)),o+=u}for(n&&p.sort((function(t,e){return n(h[t],h[e])})),e&&d.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),c=(o=ji(0,zi-t*l)/o)?t:zi/l,u=0,s=-1;++s<l;){for(a=u,f=-1;++f<l;){var g=p[s],_=d[g][f],m=i[g][_],x=u,w=u+=m*o;b[_*l+g]={index:g,subindex:_,startAngle:x,endAngle:w,value:m}}y[g]={index:g,startAngle:a,endAngle:u,value:h[g]},u+=c}for(s=-1;++s<l;)for(f=s-1;++f<l;){var M=b[f*l+s],T=b[s*l+f];(M.value||T.value)&&v.push(M.value<T.value?{source:T,target:M}:{source:M,target:T})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=ji(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Oi(t))._=t,i):r&&r._},i}var Di=Array.prototype.slice;function Ri(t){return function(){return t}}var Vi=Math.PI,Bi=2*Vi,Ui=1e-6,qi=Bi-Ui;function Zi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Yi(){return new Zi}Zi.prototype=Yi.prototype={constructor:Zi,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,s=o-t,f=u-n,l=s*s+f*f;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>Ui)if(Math.abs(f*a-c*s)>Ui&&i){var h=e-o,p=r-u,d=a*a+c*c,v=h*h+p*p,y=Math.sqrt(d),b=Math.sqrt(l),g=i*Math.tan((Vi-Math.acos((d+l-v)/(2*y*b)))/2),_=g/b,m=g/y;Math.abs(_-1)>Ui&&(this._+="L"+(t+_*s)+","+(n+_*f)),this._+="A"+i+","+i+",0,0,"+ +(f*h>s*p)+","+(this._x1=t+m*a)+","+(this._y1=n+m*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,s=n+a,f=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>Ui||Math.abs(this._y1-s)>Ui)&&(this._+="L"+c+","+s),e&&(l<0&&(l=l%Bi+Bi),l>qi?this._+="A"+e+","+e+",0,1,"+f+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+f+","+(this._x1=c)+","+(this._y1=s):l>Ui&&(this._+="A"+e+","+e+",0,"+ +(l>=Vi)+","+f+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const Wi=Yi;function Hi(t){return t.source}function Xi(t){return t.target}function $i(t){return t.radius}function Gi(t){return t.startAngle}function Ki(t){return t.endAngle}function Qi(){var t=Hi,n=Xi,e=$i,r=Gi,i=Ki,o=null;function u(){var u,a=Di.call(arguments),c=t.apply(this,a),s=n.apply(this,a),f=+e.apply(this,(a[0]=c,a)),l=r.apply(this,a)-Pi,h=i.apply(this,a)-Pi,p=f*Ci(l),d=f*Ii(l),v=+e.apply(this,(a[0]=s,a)),y=r.apply(this,a)-Pi,b=i.apply(this,a)-Pi;if(o||(o=u=Wi()),o.moveTo(p,d),o.arc(0,0,f,l,h),l===y&&h===b||(o.quadraticCurveTo(0,0,v*Ci(y),v*Ii(y)),o.arc(0,0,v,y,b)),o.quadraticCurveTo(0,0,p,d),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:Ri(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Ri(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Ri(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}var Ji="$";function to(){}function no(t,n){var e=new to;if(t instanceof to)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}to.prototype=no.prototype={constructor:to,has:function(t){return Ji+t in this},get:function(t){return this[Ji+t]},set:function(t,n){return this[Ji+t]=n,this},remove:function(t){var n=Ji+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===Ji&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===Ji&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===Ji&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===Ji&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===Ji&&++t;return t},empty:function(){for(var t in this)if(t[0]===Ji)return!1;return!0},each:function(t){for(var n in this)n[0]===Ji&&t(this[n],n.slice(1),this)}};const eo=no;function ro(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,s,f,l=-1,h=e.length,p=r[i++],d=eo(),v=u();++l<h;)(f=d.get(c=p(s=e[l])+""))?f.push(s):d.set(c,[s]);return d.each((function(t,n){a(v,n,o(t,i,u,a))})),v}function u(t,e){if(++e>r.length)return t;var o,a=i[e-1];return null!=n&&e>=r.length?o=t.entries():(o=[],t.each((function(t,n){o.push({key:n,values:u(t,e)})}))),null!=a?o.sort((function(t,n){return a(t.key,n.key)})):o}return e={object:function(t){return o(t,0,io,oo)},map:function(t){return o(t,0,uo,ao)},entries:function(t){return u(o(t,0,uo,ao),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function io(){return{}}function oo(t,n,e){t[n]=e}function uo(){return eo()}function ao(t,n,e){t.set(n,e)}function co(){}var so=eo.prototype;function fo(t,n){var e=new co;if(t instanceof co)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}co.prototype=fo.prototype={constructor:co,has:so.has,add:function(t){return this[Ji+(t+="")]=t,this},remove:so.remove,clear:so.clear,values:so.keys,size:so.size,empty:so.empty,each:so.each};const lo=fo;function ho(t){var n=[];for(var e in t)n.push(e);return n}function po(t){var n=[];for(var e in t)n.push(t[e]);return n}function vo(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n}var yo=Math.PI/180,bo=180/Math.PI,go=.96422,_o=.82521,mo=4/29,xo=6/29,wo=3*xo*xo;function So(t){if(t instanceof No)return new No(t.l,t.a,t.b,t.opacity);if(t instanceof zo)return jo(t);t instanceof Jn||(t=Kn(t));var n,e,r=Co(t.r),i=Co(t.g),o=Co(t.b),u=Eo((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=u:(n=Eo((.4360747*r+.3850649*i+.1430804*o)/go),e=Eo((.0139322*r+.0971045*i+.7141733*o)/_o)),new No(116*u-16,500*(n-u),200*(u-e),t.opacity)}function Mo(t,n){return new No(t,0,0,null==n?1:n)}function To(t,n,e,r){return 1===arguments.length?So(t):new No(t,n,e,null==r?1:r)}function No(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Eo(t){return t>.008856451679035631?Math.pow(t,1/3):t/wo+mo}function Ao(t){return t>xo?t*t*t:wo*(t-mo)}function ko(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Co(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Io(t){if(t instanceof zo)return new zo(t.h,t.c,t.l,t.opacity);if(t instanceof No||(t=So(t)),0===t.a&&0===t.b)return new zo(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*bo;return new zo(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Fo(t,n,e,r){return 1===arguments.length?Io(t):new zo(e,n,t,null==r?1:r)}function Po(t,n,e,r){return 1===arguments.length?Io(t):new zo(t,n,e,null==r?1:r)}function zo(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function jo(t){if(isNaN(t.h))return new No(t.l,0,0,t.opacity);var n=t.h*yo;return new No(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}Cn(No,To,In(Fn,{brighter:function(t){return new No(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new No(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Jn(ko(3.1338561*(n=go*Ao(n))-1.6168667*(t=1*Ao(t))-.4906146*(e=_o*Ao(e))),ko(-.9787684*n+1.9161415*t+.033454*e),ko(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Cn(zo,Po,In(Fn,{brighter:function(t){return new zo(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new zo(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return jo(this).rgb()}}));var Oo=-.14861,Lo=1.78277,Do=-.29227,Ro=-.90649,Vo=1.97294,Bo=Vo*Ro,Uo=Vo*Lo,qo=Lo*Do-Ro*Oo;function Zo(t){if(t instanceof Wo)return new Wo(t.h,t.s,t.l,t.opacity);t instanceof Jn||(t=Kn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(qo*r+Bo*n-Uo*e)/(qo+Bo-Uo),o=r-i,u=(Vo*(e-i)-Do*o)/Ro,a=Math.sqrt(u*u+o*o)/(Vo*i*(1-i)),c=a?Math.atan2(u,o)*bo-120:NaN;return new Wo(c<0?c+360:c,a,i,t.opacity)}function Yo(t,n,e,r){return 1===arguments.length?Zo(t):new Wo(t,n,e,null==r?1:r)}function Wo(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}Cn(Wo,Yo,In(Fn,{brighter:function(t){return t=null==t?zn:Math.pow(zn,t),new Wo(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Pn:Math.pow(Pn,t),new Wo(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*yo,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Jn(255*(n+e*(Oo*r+Lo*i)),255*(n+e*(Do*r+Ro*i)),255*(n+e*(Vo*r)),this.opacity)}}));var Ho=Array.prototype.slice;function Xo(t,n){return t-n}function $o(t){return function(){return t}}function Go(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=Ko(t,n[r]))return e;return 0}function Ko(t,n){for(var e=n[0],r=n[1],i=-1,o=0,u=t.length,a=u-1;o<u;a=o++){var c=t[o],s=c[0],f=c[1],l=t[a],h=l[0],p=l[1];if(Qo(c,l,n))return 0;f>r!=p>r&&e<(h-s)*(r-f)/(p-f)+s&&(i=-i)}return i}function Qo(t,n,e){var r,i,o,u;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],u=n[r],i<=o&&o<=u||u<=o&&o<=i)}function Jo(){}var tu=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function nu(){var t=1,n=1,e=C,r=a;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(Xo);else{var r=b(t),i=r[0],u=r[1];n=k(i,u,n),n=S(Math.floor(i/n)*n,Math.floor(u/n)*n,n)}return n.map((function(n){return o(t,n)}))}function o(e,i){var o=[],a=[];return function(e,r,i){var o,a,c,s,f,l,h=new Array,p=new Array;for(o=a=-1,s=e[0]>=r,tu[s<<1].forEach(d);++o<t-1;)c=s,s=e[o+1]>=r,tu[c|s<<1].forEach(d);for(tu[s<<0].forEach(d);++a<n-1;){for(o=-1,s=e[a*t+t]>=r,f=e[a*t]>=r,tu[s<<1|f<<2].forEach(d);++o<t-1;)c=s,s=e[a*t+t+o+1]>=r,l=f,f=e[a*t+o+1]>=r,tu[c|s<<1|f<<2|l<<3].forEach(d);tu[s|f<<3].forEach(d)}for(o=-1,f=e[a*t]>=r,tu[f<<2].forEach(d);++o<t-1;)l=f,f=e[a*t+o+1]>=r,tu[f<<2|l<<3].forEach(d);function d(t){var n,e,r=[t[0][0]+o,t[0][1]+a],c=[t[1][0]+o,t[1][1]+a],s=u(r),f=u(c);(n=p[s])?(e=h[f])?(delete p[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=p[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete p[n.end],n.ring.push(c),p[n.end=f]=n):(n=h[f])?(e=p[s])?(delete h[n.start],delete p[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=p[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=s]=n):h[s]=p[f]={start:s,end:f,ring:[r,c]}}tu[f<<3].forEach(d)}(e,i,(function(t){r(t,e,i),function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r}(t)>0?o.push([t]):a.push(t)})),a.forEach((function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==Go((n=o[e])[0],t))return void n.push(t)})),{type:"MultiPolygon",value:i,coordinates:o}}function u(n){return 2*n[0]+n[1]*(t+1)*4}function a(e,r,i){e.forEach((function(e){var o,u=e[0],a=e[1],c=0|u,s=0|a,f=r[s*t+c];u>0&&u<t&&c===u&&(o=r[s*t+c-1],e[0]=u+(i-o)/(f-o)-.5),a>0&&a<n&&s===a&&(o=r[(s-1)*t+c],e[1]=a+(i-o)/(f-o)-.5)}))}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?$o(Ho.call(t)):$o(t),i):e},i.smooth=function(t){return arguments.length?(r=t?a:Jo,i):r===a},i}function eu(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<i;++u)for(var a=0,c=0;a<r+e;++a)a<r&&(c+=t.data[a+u*r]),a>=e&&(a>=o&&(c-=t.data[a-o+u*r]),n.data[a-e+u*r]=c/Math.min(a+1,r-1+o-a,o))}function ru(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<r;++u)for(var a=0,c=0;a<i+e;++a)a<i&&(c+=t.data[u+a*r]),a>=e&&(a>=o&&(c-=t.data[u+(a-o)*r]),n.data[u+(a-e)*r]=c/Math.min(a+1,i-1+o-a,o))}function iu(t){return t[0]}function ou(t){return t[1]}function uu(){return 1}function au(){var t=iu,n=ou,e=uu,r=960,i=500,o=20,u=2,a=3*o,c=r+2*a>>u,s=i+2*a>>u,f=$o(20);function l(r){var i=new Float32Array(c*s),l=new Float32Array(c*s);r.forEach((function(r,o,f){var l=+t(r,o,f)+a>>u,h=+n(r,o,f)+a>>u,p=+e(r,o,f);l>=0&&l<c&&h>=0&&h<s&&(i[l+h*c]+=p)})),eu({width:c,height:s,data:i},{width:c,height:s,data:l},o>>u),ru({width:c,height:s,data:l},{width:c,height:s,data:i},o>>u),eu({width:c,height:s,data:i},{width:c,height:s,data:l},o>>u),ru({width:c,height:s,data:l},{width:c,height:s,data:i},o>>u),eu({width:c,height:s,data:i},{width:c,height:s,data:l},o>>u),ru({width:c,height:s,data:l},{width:c,height:s,data:i},o>>u);var p=f(i);if(!Array.isArray(p)){var d=j(i);p=k(0,d,p),(p=S(0,Math.floor(d/p)*p,p)).shift()}return nu().thresholds(p).size([c,s])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*u),t.coordinates.forEach(p),t}function p(t){t.forEach(d)}function d(t){t.forEach(v)}function v(t){t[0]=t[0]*Math.pow(2,u)-a,t[1]=t[1]*Math.pow(2,u)-a}function y(){return c=r+2*(a=3*o)>>u,s=i+2*a>>u,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:$o(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:$o(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:$o(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,y()},l.cellSize=function(t){if(!arguments.length)return 1<<u;if(!((t=+t)>=1))throw new Error("invalid cell size");return u=Math.floor(Math.log(t)/Math.LN2),y()},l.thresholds=function(t){return arguments.length?(f="function"==typeof t?t:Array.isArray(t)?$o(Ho.call(t)):$o(t),l):f},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),y()},l}function cu(t){return function(){return t}}function su(t,n,e,r,i,o,u,a,c,s){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=s}function fu(){return!ln.ctrlKey&&!ln.button}function lu(){return this.parentNode}function hu(t){return null==t?{x:ln.x,y:ln.y}:t}function pu(){return navigator.maxTouchPoints||"ontouchstart"in this}function du(){var t,n,e,r,i=fu,o=lu,u=hu,a=pu,c={},s=ht("start","drag","end"),f=0,l=0;function h(t){t.on("mousedown.drag",p).filter(a).on("touchstart.drag",y).on("touchmove.drag",b).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!r&&i.apply(this,arguments)){var u=_("mouse",o.apply(this,arguments),Pe,this,arguments);u&&(Tn(ln.view).on("mousemove.drag",d,!0).on("mouseup.drag",v,!0),An(ln.view),Nn(),e=!1,t=ln.clientX,n=ln.clientY,u("start"))}}function d(){if(En(),!e){var r=ln.clientX-t,i=ln.clientY-n;e=r*r+i*i>l}c.mouse("drag")}function v(){Tn(ln.view).on("mousemove.drag mouseup.drag",null),kn(ln.view,e),En(),c.mouse("end")}function y(){if(i.apply(this,arguments)){var t,n,e=ln.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=_(e[t].identifier,r,Fe,this,arguments))&&(Nn(),n("start"))}}function b(){var t,n,e=ln.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(En(),n("drag"))}function g(){var t,n,e=ln.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=c[e[t].identifier])&&(Nn(),n("end"))}function _(t,n,e,r,i){var o,a,l,p=e(n,t),d=s.copy();if(bn(new su(h,"beforestart",o,t,f,p[0],p[1],0,0,d),(function(){return null!=(ln.subject=o=u.apply(r,i))&&(a=o.x-p[0]||0,l=o.y-p[1]||0,!0)})))return function u(s){var v,y=p;switch(s){case"start":c[t]=u,v=f++;break;case"end":delete c[t],--f;case"drag":p=e(n,t),v=f}bn(new su(h,s,o,t,v,p[0]+a,p[1]+l,p[0]-y[0],p[1]-y[1],d),d.apply,d,[s,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:cu(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:cu(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:cu(t),h):u},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:cu(!!t),h):a},h.on=function(){var t=s.on.apply(s,arguments);return t===s?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h}su.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var vu={},yu={};function bu(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function gu(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function _u(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function mu(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,s=!1;function f(){if(c)return yu;if(s)return s=!1,vu;var n,r,i=u;if(34===t.charCodeAt(i)){for(;u++<o&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=o?c=!0:10===(r=t.charCodeAt(u++))?s=!0:13===r&&(s=!0,10===t.charCodeAt(u)&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if(10===(r=t.charCodeAt(n=u++)))s=!0;else if(13===r)s=!0,10===t.charCodeAt(u)&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=f())!==yu;){for(var l=[];r!==vu&&r!==yu;)l.push(r),r=f();n&&null==(l=n(l,a++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return u(n[t])})).join(t)}))}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?function(t){var n=t.getUTCHours(),e=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+_u(-t,6):t>9999?"+"+_u(t,6):_u(t,4)}(t.getUTCFullYear())+"-"+_u(t.getUTCMonth()+1,2)+"-"+_u(t.getUTCDate(),2)+(i?"T"+_u(n,2)+":"+_u(e,2)+":"+_u(r,2)+"."+_u(i,3)+"Z":r?"T"+_u(n,2)+":"+_u(e,2)+":"+_u(r,2)+"Z":e||n?"T"+_u(n,2)+":"+_u(e,2)+"Z":"")}(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=bu(t);return function(r,i){return n(e(r),i,t)}}(t,n):bu(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=gu(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=gu(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:u}}var xu=mu(","),wu=xu.parse,Su=xu.parseRows,Mu=xu.format,Tu=xu.formatBody,Nu=xu.formatRows,Eu=xu.formatRow,Au=xu.formatValue,ku=mu("\t"),Cu=ku.parse,Iu=ku.parseRows,Fu=ku.format,Pu=ku.formatBody,zu=ku.formatRows,ju=ku.formatRow,Ou=ku.formatValue;function Lu(t){for(var n in t){var e,r,i=t[n].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(e=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Du&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=e;else i=null;t[n]=i}return t}var Du=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function Ru(t){return+t}function Vu(t){return t*t}function Bu(t){return t*(2-t)}function Uu(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var qu=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),Zu=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Yu=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Wu=Math.PI,Hu=Wu/2;function Xu(t){return 1-Math.cos(t*Hu)}function $u(t){return Math.sin(t*Hu)}function Gu(t){return(1-Math.cos(Wu*t))/2}function Ku(t){return Math.pow(2,10*t-10)}function Qu(t){return 1-Math.pow(2,-10*t)}function Ju(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function ta(t){return 1-Math.sqrt(1-t*t)}function na(t){return Math.sqrt(1- --t*t)}function ea(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var ra=7.5625;function ia(t){return 1-oa(1-t)}function oa(t){return(t=+t)<.36363636363636365?ra*t*t:t<.7272727272727273?ra*(t-=.5454545454545454)*t+.75:t<.9090909090909091?ra*(t-=.8181818181818182)*t+.9375:ra*(t-=.9545454545454546)*t+.984375}function ua(t){return((t*=2)<=1?1-oa(1-t):oa(t-1)+1)/2}var aa=1.70158,ca=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(aa),sa=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(aa),fa=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(aa),la=2*Math.PI,ha=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=la);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*la)},i.period=function(e){return t(n,e)},i}(1,.3),pa=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=la);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*la)},i.period=function(e){return t(n,e)},i}(1,.3),da=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=la);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*la)},i.period=function(e){return t(n,e)},i}(1,.3);function va(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}function ya(t,n){return fetch(t,n).then(va)}function ba(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}function ga(t,n){return fetch(t,n).then(ba)}function _a(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function ma(t,n){return fetch(t,n).then(_a)}function xa(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),ma(n,e).then((function(n){return t(n,r)}))}}function wa(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=mu(t);return ma(n,e).then((function(t){return i.parse(t,r)}))}var Sa=xa(wu),Ma=xa(Cu);function Ta(t,n){return new Promise((function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t}))}function Na(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function Ea(t,n){return fetch(t,n).then(Na)}function Aa(t){return function(n,e){return ma(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}const ka=Aa("application/xml");var Ca=Aa("text/html"),Ia=Aa("image/svg+xml");function Fa(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r}function Pa(t){return function(){return t}}function za(){return 1e-6*(Math.random()-.5)}function ja(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,s,f,l,h,p=t._root,d={data:r},v=t._x0,y=t._y0,b=t._x1,g=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((s=n>=(o=(v+b)/2))?v=o:b=o,(f=e>=(u=(y+g)/2))?y=u:g=u,i=p,!(p=p[l=f<<1|s]))return i[l]=d,t;if(a=+t._x.call(null,p.data),c=+t._y.call(null,p.data),n===a&&e===c)return d.next=p,i?i[l]=d:t._root=d,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(s=n>=(o=(v+b)/2))?v=o:b=o,(f=e>=(u=(y+g)/2))?y=u:g=u}while((l=f<<1|s)==(h=(c>=u)<<1|a>=o));return i[h]=p,i[l]=d,t}function Oa(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function La(t){return t[0]}function Da(t){return t[1]}function Ra(t,n,e){var r=new Va(null==n?La:n,null==e?Da:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Va(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Ba(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Ua=Ra.prototype=Va.prototype;function qa(t){return t.x+t.vx}function Za(t){return t.y+t.vy}function Ya(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,s,f,l,h=n.length,p=0;p<i;++p)for(o=Ra(n,qa,Za).visitAfter(u),t=0;t<h;++t)a=n[t],f=e[a.index],l=f*f,c=a.x+a.vx,s=a.y+a.vy,o.visit(d);function d(t,n,e,i,o){var u=t.data,h=t.r,p=f+h;if(!u)return n>c+p||i<c-p||e>s+p||o<s-p;if(u.index>a.index){var d=c-u.x-u.vx,v=s-u.y-u.vy,y=d*d+v*v;y<p*p&&(0===d&&(y+=(d=za())*d),0===v&&(y+=(v=za())*v),y=(p-(y=Math.sqrt(y)))/y*r,a.vx+=(d*=y)*(p=(h*=h)/(l+h)),a.vy+=(v*=y)*p,u.vx-=d*(p=1-p),u.vy-=v*p)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=Pa(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:Pa(+n),a(),o):t},o}function Wa(t){return t.index}function Ha(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function Xa(t){var n,e,r,i,o,u=Wa,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=Pa(30),s=1;function f(r){for(var i=0,u=t.length;i<s;++i)for(var a,c,f,l,h,p,d,v=0;v<u;++v)c=(a=t[v]).source,l=(f=a.target).x+f.vx-c.x-c.vx||za(),h=f.y+f.vy-c.y-c.vy||za(),l*=p=((p=Math.sqrt(l*l+h*h))-e[v])/p*r*n[v],h*=p,f.vx-=l*(d=o[v]),f.vy-=h*d,c.vx+=l*(d=1-d),c.vy+=h*d}function l(){if(r){var a,c,s=r.length,f=t.length,l=eo(r,u);for(a=0,i=new Array(s);a<f;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=Ha(l,c.source)),"object"!=typeof c.target&&(c.target=Ha(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(f);a<f;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(f),h(),e=new Array(f),p()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function p(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),f.initialize=function(t){r=t,l()},f.links=function(n){return arguments.length?(t=n,l(),f):t},f.id=function(t){return arguments.length?(u=t,f):u},f.iterations=function(t){return arguments.length?(s=+t,f):s},f.strength=function(t){return arguments.length?(a="function"==typeof t?t:Pa(+t),h(),f):a},f.distance=function(t){return arguments.length?(c="function"==typeof t?t:Pa(+t),p(),f):c},f}function $a(t){return t.x}function Ga(t){return t.y}Ua.copy=function(){var t,n,e=new Va(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Ba(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Ba(n));return e},Ua.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return ja(this.cover(n,e),n,e,t)},Ua.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,s=1/0,f=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>f&&(f=r),i<s&&(s=i),i>l&&(l=i));if(c>f||s>l)return this;for(this.cover(c,s).cover(f,l),e=0;e<o;++e)ja(this,u[e],a[e],t[e]);return this},Ua.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var u,a,c=i-e,s=this._root;e>t||t>=i||r>n||n>=o;)switch(a=(n<r)<<1|t<e,(u=new Array(4))[a]=s,s=u,c*=2,a){case 0:i=e+c,o=r+c;break;case 1:e=i-c,o=r+c;break;case 2:i=e+c,r=o-c;break;case 3:e=i-c,r=o-c}this._root&&this._root.length&&(this._root=s)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Ua.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Ua.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Ua.find=function(t,n,e){var r,i,o,u,a,c,s,f=this._x0,l=this._y0,h=this._x1,p=this._y1,d=[],v=this._root;for(v&&d.push(new Oa(v,f,l,h,p)),null==e?e=1/0:(f=t-e,l=n-e,h=t+e,p=n+e,e*=e);c=d.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>p||(u=c.x1)<f||(a=c.y1)<l))if(v.length){var y=(i+u)/2,b=(o+a)/2;d.push(new Oa(v[3],y,b,u,a),new Oa(v[2],i,b,y,a),new Oa(v[1],y,o,u,b),new Oa(v[0],i,o,y,b)),(s=(n>=b)<<1|t>=y)&&(c=d[d.length-1],d[d.length-1]=d[d.length-1-s],d[d.length-1-s]=c)}else{var g=t-+this._x.call(null,v.data),_=n-+this._y.call(null,v.data),m=g*g+_*_;if(m<e){var x=Math.sqrt(e=m);f=t-x,l=n-x,h=t+x,p=n+x,r=v.data}}return r},Ua.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,s,f,l,h,p=this._root,d=this._x0,v=this._y0,y=this._x1,b=this._y1;if(!p)return this;if(p.length)for(;;){if((s=o>=(a=(d+y)/2))?d=a:y=a,(f=u>=(c=(v+b)/2))?v=c:b=c,n=p,!(p=p[l=f<<1|s]))return this;if(!p.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},Ua.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Ua.root=function(){return this._root},Ua.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Ua.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new Oa(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var s=(r+o)/2,f=(i+u)/2;(e=c[3])&&a.push(new Oa(e,s,f,o,u)),(e=c[2])&&a.push(new Oa(e,r,f,s,u)),(e=c[1])&&a.push(new Oa(e,s,i,o,f)),(e=c[0])&&a.push(new Oa(e,r,i,s,f))}return this},Ua.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Oa(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,s=n.y1,f=(u+c)/2,l=(a+s)/2;(o=i[0])&&e.push(new Oa(o,u,a,f,l)),(o=i[1])&&e.push(new Oa(o,f,a,c,l)),(o=i[2])&&e.push(new Oa(o,u,l,f,s)),(o=i[3])&&e.push(new Oa(o,f,l,c,s))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Ua.x=function(t){return arguments.length?(this._x=t,this):this._x},Ua.y=function(t){return arguments.length?(this._y=t,this):this._y};var Ka=Math.PI*(3-Math.sqrt(5));function Qa(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=eo(),c=He(f),s=ht("tick","end");function f(){l(),s.call("tick",n),e<r&&(c.stop(),s.call("end",n))}function l(r){var c,s,f=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,a.each((function(t){t(e)})),c=0;c<f;++c)null==(s=t[c]).fx?s.x+=s.vx*=u:(s.x=s.fx,s.vx=0),null==s.fy?s.y+=s.vy*=u:(s.y=s.fy,s.vy=0);return n}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*Ka;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function p(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return c.restart(f),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(p),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,p(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,s=0,f=t.length;for(null==r?r=1/0:r*=r,s=0;s<f;++s)(u=(i=n-(a=t[s]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(s.on(t,e),n):s.on(t)}}}function Ja(){var t,n,e,r,i=Pa(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=Ra(t,$a,Ga).visitAfter(f);for(e=r,i=0;i<o;++i)n=t[i],u.visit(l)}function s(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function f(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function l(t,i,c,s){if(!t.value)return!0;var f=t.x-n.x,l=t.y-n.y,h=s-i,p=f*f+l*l;if(h*h/a<p)return p<u&&(0===f&&(p+=(f=za())*f),0===l&&(p+=(l=za())*l),p<o&&(p=Math.sqrt(o*p)),n.vx+=f*t.value*e/p,n.vy+=l*t.value*e/p),!0;if(!(t.length||p>=u)){(t.data!==n||t.next)&&(0===f&&(p+=(f=za())*f),0===l&&(p+=(l=za())*l),p<o&&(p=Math.sqrt(o*p)));do{t.data!==n&&(h=r[t.data.index]*e/p,n.vx+=f*h,n.vy+=l*h)}while(t=t.next)}}return c.initialize=function(n){t=n,s()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:Pa(+t),s(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c}function tc(t,n,e){var r,i,o,u=Pa(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],s=c.x-n||1e-6,f=c.y-e||1e-6,l=Math.sqrt(s*s+f*f),h=(o[u]-l)*i[u]*t/l;c.vx+=s*h,c.vy+=f*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=Pa(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:Pa(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:Pa(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a}function nc(t){var n,e,r,i=Pa(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=Pa(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:Pa(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:Pa(+n),u(),o):t},o}function ec(t){var n,e,r,i=Pa(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=Pa(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:Pa(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:Pa(+n),u(),o):t},o}function rc(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function ic(t){return(t=rc(Math.abs(t)))?t[1]:NaN}var oc,uc=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ac(t){if(!(n=uc.exec(t)))throw new Error("invalid format: "+t);var n;return new cc({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function cc(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function sc(t,n){var e=rc(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}ac.prototype=cc.prototype,cc.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const fc={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return sc(100*t,n)},r:sc,s:function(t,n){var e=rc(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(oc=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+rc(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function lc(t){return t}var hc,pc,dc,vc=Array.prototype.map,yc=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];function bc(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?lc:(n=vc.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?lc:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(vc.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"-":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=ac(t)).fill,e=t.align,l=t.sign,h=t.symbol,p=t.zero,d=t.width,v=t.comma,y=t.precision,b=t.trim,g=t.type;"n"===g?(v=!0,g="g"):fc[g]||(void 0===y&&(y=12),b=!0,g="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===h?o:/[%p]/.test(g)?c:"",x=fc[g],w=/[defgprs%]/.test(g);function S(t){var i,o,c,h=_,S=m;if("c"===g)S=x(t)+S,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:x(Math.abs(t),y),b&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),M&&0==+t&&"+"!==l&&(M=!1),h=(M?"("===l?l:s:"-"===l||"("===l?"":l)+h,S=("s"===g?yc[8+oc/3]:"")+S+(M&&"("===l?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){S=(46===c?u+t.slice(i+1):t.slice(i))+S,t=t.slice(0,i);break}}v&&!p&&(t=r(t,1/0));var T=h.length+t.length+S.length,N=T<d?new Array(d-T+1).join(n):"";switch(v&&p&&(t=r(N+t,N.length?d-S.length:1/0),N=""),e){case"<":t=h+t+S+N;break;case"=":t=h+N+t+S;break;case"^":t=N.slice(0,T=N.length>>1)+h+t+S+N.slice(T);break;default:t=N+h+t+S}return a(t)}return y=void 0===y?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),S.toString=function(){return t+""},S}return{format:l,formatPrefix:function(t,n){var e=l(((t=ac(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ic(n)/3))),i=Math.pow(10,-r),o=yc[8+r/3];return function(t){return e(i*t)+o}}}}function gc(t){return hc=bc(t),pc=hc.format,dc=hc.formatPrefix,hc}function _c(t){return Math.max(0,-ic(Math.abs(t)))}function mc(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ic(n)/3)))-ic(Math.abs(t)))}function xc(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,ic(n)-ic(t))+1}function wc(){return new Sc}function Sc(){this.reset()}gc({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Sc.prototype={constructor:Sc,reset:function(){this.s=this.t=0},add:function(t){Tc(Mc,t,this.t),Tc(this,Mc.s,this.s),this.s?this.t+=Mc.t:this.s=Mc.t},valueOf:function(){return this.s}};var Mc=new Sc;function Tc(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var Nc=1e-6,Ec=1e-12,Ac=Math.PI,kc=Ac/2,Cc=Ac/4,Ic=2*Ac,Fc=180/Ac,Pc=Ac/180,zc=Math.abs,jc=Math.atan,Oc=Math.atan2,Lc=Math.cos,Dc=Math.ceil,Rc=Math.exp,Vc=(Math.floor,Math.log),Bc=Math.pow,Uc=Math.sin,qc=Math.sign||function(t){return t>0?1:t<0?-1:0},Zc=Math.sqrt,Yc=Math.tan;function Wc(t){return t>1?0:t<-1?Ac:Math.acos(t)}function Hc(t){return t>1?kc:t<-1?-kc:Math.asin(t)}function Xc(t){return(t=Uc(t/2))*t}function $c(){}function Gc(t,n){t&&Qc.hasOwnProperty(t.type)&&Qc[t.type](t,n)}var Kc={Feature:function(t,n){Gc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Gc(e[r].geometry,n)}},Qc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Jc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Jc(e[r],n,0)},Polygon:function(t,n){ts(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)ts(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Gc(e[r],n)}};function Jc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function ts(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Jc(t[e],n,1);n.polygonEnd()}function ns(t,n){t&&Kc.hasOwnProperty(t.type)?Kc[t.type](t,n):Gc(t,n)}var es,rs,is,os,us,as=wc(),cs=wc(),ss={point:$c,lineStart:$c,lineEnd:$c,polygonStart:function(){as.reset(),ss.lineStart=fs,ss.lineEnd=ls},polygonEnd:function(){var t=+as;cs.add(t<0?Ic+t:t),this.lineStart=this.lineEnd=this.point=$c},sphere:function(){cs.add(Ic)}};function fs(){ss.point=hs}function ls(){ps(es,rs)}function hs(t,n){ss.point=ps,es=t,rs=n,is=t*=Pc,os=Lc(n=(n*=Pc)/2+Cc),us=Uc(n)}function ps(t,n){var e=(t*=Pc)-is,r=e>=0?1:-1,i=r*e,o=Lc(n=(n*=Pc)/2+Cc),u=Uc(n),a=us*u,c=os*o+a*Lc(i),s=a*r*Uc(i);as.add(Oc(s,c)),is=t,os=o,us=u}function ds(t){return cs.reset(),ns(t,ss),2*cs}function vs(t){return[Oc(t[1],t[0]),Hc(t[2])]}function ys(t){var n=t[0],e=t[1],r=Lc(e);return[r*Lc(n),r*Uc(n),Uc(e)]}function bs(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function gs(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function _s(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function ms(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function xs(t){var n=Zc(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var ws,Ss,Ms,Ts,Ns,Es,As,ks,Cs,Is,Fs,Ps,zs,js,Os,Ls,Ds,Rs,Vs,Bs,Us,qs,Zs,Ys,Ws,Hs,Xs=wc(),$s={point:Gs,lineStart:Qs,lineEnd:Js,polygonStart:function(){$s.point=tf,$s.lineStart=nf,$s.lineEnd=ef,Xs.reset(),ss.polygonStart()},polygonEnd:function(){ss.polygonEnd(),$s.point=Gs,$s.lineStart=Qs,$s.lineEnd=Js,as<0?(ws=-(Ms=180),Ss=-(Ts=90)):Xs>Nc?Ts=90:Xs<-1e-6&&(Ss=-90),Is[0]=ws,Is[1]=Ms},sphere:function(){ws=-(Ms=180),Ss=-(Ts=90)}};function Gs(t,n){Cs.push(Is=[ws=t,Ms=t]),n<Ss&&(Ss=n),n>Ts&&(Ts=n)}function Ks(t,n){var e=ys([t*Pc,n*Pc]);if(ks){var r=gs(ks,e),i=gs([r[1],-r[0],0],r);xs(i),i=vs(i);var o,u=t-Ns,a=u>0?1:-1,c=i[0]*Fc*a,s=zc(u)>180;s^(a*Ns<c&&c<a*t)?(o=i[1]*Fc)>Ts&&(Ts=o):s^(a*Ns<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*Fc)<Ss&&(Ss=o):(n<Ss&&(Ss=n),n>Ts&&(Ts=n)),s?t<Ns?rf(ws,t)>rf(ws,Ms)&&(Ms=t):rf(t,Ms)>rf(ws,Ms)&&(ws=t):Ms>=ws?(t<ws&&(ws=t),t>Ms&&(Ms=t)):t>Ns?rf(ws,t)>rf(ws,Ms)&&(Ms=t):rf(t,Ms)>rf(ws,Ms)&&(ws=t)}else Cs.push(Is=[ws=t,Ms=t]);n<Ss&&(Ss=n),n>Ts&&(Ts=n),ks=e,Ns=t}function Qs(){$s.point=Ks}function Js(){Is[0]=ws,Is[1]=Ms,$s.point=Gs,ks=null}function tf(t,n){if(ks){var e=t-Ns;Xs.add(zc(e)>180?e+(e>0?360:-360):e)}else Es=t,As=n;ss.point(t,n),Ks(t,n)}function nf(){ss.lineStart()}function ef(){tf(Es,As),ss.lineEnd(),zc(Xs)>Nc&&(ws=-(Ms=180)),Is[0]=ws,Is[1]=Ms,ks=null}function rf(t,n){return(n-=t)<0?n+360:n}function of(t,n){return t[0]-n[0]}function uf(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function af(t){var n,e,r,i,o,u,a;if(Ts=Ms=-(ws=Ss=1/0),Cs=[],ns(t,$s),e=Cs.length){for(Cs.sort(of),n=1,o=[r=Cs[0]];n<e;++n)uf(r,(i=Cs[n])[0])||uf(r,i[1])?(rf(r[0],i[1])>rf(r[0],r[1])&&(r[1]=i[1]),rf(i[0],r[1])>rf(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=rf(r[1],i[0]))>u&&(u=a,ws=i[0],Ms=r[1])}return Cs=Is=null,ws===1/0||Ss===1/0?[[NaN,NaN],[NaN,NaN]]:[[ws,Ss],[Ms,Ts]]}var cf={sphere:$c,point:sf,lineStart:lf,lineEnd:df,polygonStart:function(){cf.lineStart=vf,cf.lineEnd=yf},polygonEnd:function(){cf.lineStart=lf,cf.lineEnd=df}};function sf(t,n){t*=Pc;var e=Lc(n*=Pc);ff(e*Lc(t),e*Uc(t),Uc(n))}function ff(t,n,e){++Fs,zs+=(t-zs)/Fs,js+=(n-js)/Fs,Os+=(e-Os)/Fs}function lf(){cf.point=hf}function hf(t,n){t*=Pc;var e=Lc(n*=Pc);Ys=e*Lc(t),Ws=e*Uc(t),Hs=Uc(n),cf.point=pf,ff(Ys,Ws,Hs)}function pf(t,n){t*=Pc;var e=Lc(n*=Pc),r=e*Lc(t),i=e*Uc(t),o=Uc(n),u=Oc(Zc((u=Ws*o-Hs*i)*u+(u=Hs*r-Ys*o)*u+(u=Ys*i-Ws*r)*u),Ys*r+Ws*i+Hs*o);Ps+=u,Ls+=u*(Ys+(Ys=r)),Ds+=u*(Ws+(Ws=i)),Rs+=u*(Hs+(Hs=o)),ff(Ys,Ws,Hs)}function df(){cf.point=sf}function vf(){cf.point=bf}function yf(){gf(qs,Zs),cf.point=sf}function bf(t,n){qs=t,Zs=n,t*=Pc,n*=Pc,cf.point=gf;var e=Lc(n);Ys=e*Lc(t),Ws=e*Uc(t),Hs=Uc(n),ff(Ys,Ws,Hs)}function gf(t,n){t*=Pc;var e=Lc(n*=Pc),r=e*Lc(t),i=e*Uc(t),o=Uc(n),u=Ws*o-Hs*i,a=Hs*r-Ys*o,c=Ys*i-Ws*r,s=Zc(u*u+a*a+c*c),f=Hc(s),l=s&&-f/s;Vs+=l*u,Bs+=l*a,Us+=l*c,Ps+=f,Ls+=f*(Ys+(Ys=r)),Ds+=f*(Ws+(Ws=i)),Rs+=f*(Hs+(Hs=o)),ff(Ys,Ws,Hs)}function _f(t){Fs=Ps=zs=js=Os=Ls=Ds=Rs=Vs=Bs=Us=0,ns(t,cf);var n=Vs,e=Bs,r=Us,i=n*n+e*e+r*r;return i<Ec&&(n=Ls,e=Ds,r=Rs,Ps<Nc&&(n=zs,e=js,r=Os),(i=n*n+e*e+r*r)<Ec)?[NaN,NaN]:[Oc(e,n)*Fc,Hc(r/Zc(i))*Fc]}function mf(t){return function(){return t}}function xf(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function wf(t,n){return[zc(t)>Ac?t+Math.round(-t/Ic)*Ic:t,n]}function Sf(t,n,e){return(t%=Ic)?n||e?xf(Tf(t),Nf(n,e)):Tf(t):n||e?Nf(n,e):wf}function Mf(t){return function(n,e){return[(n+=t)>Ac?n-Ic:n<-Ac?n+Ic:n,e]}}function Tf(t){var n=Mf(t);return n.invert=Mf(-t),n}function Nf(t,n){var e=Lc(t),r=Uc(t),i=Lc(n),o=Uc(n);function u(t,n){var u=Lc(n),a=Lc(t)*u,c=Uc(t)*u,s=Uc(n),f=s*e+a*r;return[Oc(c*i-f*o,a*e-s*r),Hc(f*i+c*o)]}return u.invert=function(t,n){var u=Lc(n),a=Lc(t)*u,c=Uc(t)*u,s=Uc(n),f=s*i-c*o;return[Oc(c*i+s*o,a*e+f*r),Hc(f*e-a*r)]},u}function Ef(t){function n(n){return(n=t(n[0]*Pc,n[1]*Pc))[0]*=Fc,n[1]*=Fc,n}return t=Sf(t[0]*Pc,t[1]*Pc,t.length>2?t[2]*Pc:0),n.invert=function(n){return(n=t.invert(n[0]*Pc,n[1]*Pc))[0]*=Fc,n[1]*=Fc,n},n}function Af(t,n,e,r,i,o){if(e){var u=Lc(n),a=Uc(n),c=r*e;null==i?(i=n+r*Ic,o=n-c/2):(i=kf(u,i),o=kf(u,o),(r>0?i<o:i>o)&&(i+=r*Ic));for(var s,f=i;r>0?f>o:f<o;f-=c)s=vs([u,-a*Lc(f),-a*Uc(f)]),t.point(s[0],s[1])}}function kf(t,n){(n=ys(n))[0]-=t,xs(n);var e=Wc(-n[1]);return((-n[2]<0?-e:e)+Ic-Nc)%Ic}function Cf(){var t,n,e=mf([0,0]),r=mf(90),i=mf(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=Fc,e[1]*=Fc}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*Pc,c=i.apply(this,arguments)*Pc;return t=[],n=Sf(-u[0]*Pc,-u[1]*Pc,0).invert,Af(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:mf([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:mf(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:mf(+t),u):i},u}function If(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:$c,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function Ff(t,n){return zc(t[0]-n[0])<Nc&&zc(t[1]-n[1])<Nc}function Pf(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function zf(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(Ff(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new Pf(r,t,null,!0)),c.push(e.o=new Pf(r,null,e,!1)),a.push(e=new Pf(u,t,null,!1)),c.push(e.o=new Pf(u,null,e,!0))}})),a.length){for(c.sort(n),jf(a),jf(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var s,f,l=a[0];;){for(var h=l,p=!0;h.v;)if((h=h.n)===l)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=s.length;o<u;++o)i.point((f=s[o])[0],f[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(s=h.p.z,o=s.length-1;o>=0;--o)i.point((f=s[o])[0],f[1]);else r(h.x,h.p.x,-1,i);h=h.p}s=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}}function jf(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}wf.invert=wf;var Of=wc();function Lf(t){return zc(t[0])<=Ac?t[0]:qc(t[0])*((zc(t[0])+Ac)%Ic-Ac)}function Df(t,n){var e=Lf(n),r=n[1],i=Uc(r),o=[Uc(e),-Lc(e),0],u=0,a=0;Of.reset(),1===i?r=kc+Nc:-1===i&&(r=-kc-Nc);for(var c=0,s=t.length;c<s;++c)if(l=(f=t[c]).length)for(var f,l,h=f[l-1],p=Lf(h),d=h[1]/2+Cc,v=Uc(d),y=Lc(d),b=0;b<l;++b,p=_,v=x,y=w,h=g){var g=f[b],_=Lf(g),m=g[1]/2+Cc,x=Uc(m),w=Lc(m),S=_-p,M=S>=0?1:-1,T=M*S,N=T>Ac,E=v*x;if(Of.add(Oc(E*M*Uc(T),y*w+E*Lc(T))),u+=N?S+M*Ic:S,N^p>=e^_>=e){var A=gs(ys(h),ys(g));xs(A);var k=gs(o,A);xs(k);var C=(N^S>=0?-1:1)*Hc(k[2]);(r>C||r===C&&(A[0]||A[1]))&&(a+=N^S>=0?1:-1)}}return(u<-1e-6||u<Nc&&Of<-1e-6)^1&a}function Rf(t,n,e,r){return function(i){var o,u,a,c=n(i),s=If(),f=n(s),l=!1,h={point:p,lineStart:v,lineEnd:y,polygonStart:function(){h.point=b,h.lineStart=g,h.lineEnd=_,u=[],o=[]},polygonEnd:function(){h.point=p,h.lineStart=v,h.lineEnd=y,u=D(u);var t=Df(o,r);u.length?(l||(i.polygonStart(),l=!0),zf(u,Bf,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function d(t,n){c.point(t,n)}function v(){h.point=d,c.lineStart()}function y(){h.point=p,c.lineEnd()}function b(t,n){a.push([t,n]),f.point(t,n)}function g(){f.lineStart(),a=[]}function _(){b(a[0][0],a[0][1]),f.lineEnd();var t,n,e,r,c=f.clean(),h=s.result(),p=h.length;if(a.pop(),o.push(a),a=null,p)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(Vf))}return h}}function Vf(t){return t.length>1}function Bf(t,n){return((t=t.x)[0]<0?t[1]-kc-Nc:kc-t[1])-((n=n.x)[0]<0?n[1]-kc-Nc:kc-n[1])}const Uf=Rf((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?Ac:-Ac,c=zc(o-e);zc(c-Ac)<Nc?(t.point(e,r=(r+u)/2>0?kc:-kc),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=Ac&&(zc(e-i)<Nc&&(e-=i*Nc),zc(o-a)<Nc&&(o-=a*Nc),r=function(t,n,e,r){var i,o,u=Uc(t-e);return zc(u)>Nc?jc((Uc(n)*(o=Lc(r))*Uc(e)-Uc(r)*(i=Lc(n))*Uc(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*kc,r.point(-Ac,i),r.point(0,i),r.point(Ac,i),r.point(Ac,0),r.point(Ac,-i),r.point(0,-i),r.point(-Ac,-i),r.point(-Ac,0),r.point(-Ac,i);else if(zc(t[0]-n[0])>Nc){var o=t[0]<n[0]?Ac:-Ac;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-Ac,-kc]);function qf(t){var n=Lc(t),e=6*Pc,r=n>0,i=zc(n)>Nc;function o(t,e){return Lc(t)*Lc(e)>n}function u(t,e,r){var i=[1,0,0],o=gs(ys(t),ys(e)),u=bs(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var s=n*u/c,f=-n*a/c,l=gs(i,o),h=ms(i,s);_s(h,ms(o,f));var p=l,d=bs(h,p),v=bs(p,p),y=d*d-v*(bs(h,h)-1);if(!(y<0)){var b=Zc(y),g=ms(p,(-d-b)/v);if(_s(g,h),g=vs(g),!r)return g;var _,m=t[0],x=e[0],w=t[1],S=e[1];x<m&&(_=m,m=x,x=_);var M=x-m,T=zc(M-Ac)<Nc;if(!T&&S<w&&(_=w,w=S,S=_),T||M<Nc?T?w+S>0^g[1]<(zc(g[0]-m)<Nc?w:S):w<=g[1]&&g[1]<=S:M>Ac^(m<=g[0]&&g[0]<=x)){var N=ms(p,(-d+b)/v);return _s(N,h),[g,vs(N)]}}}function a(n,e){var i=r?t:Ac-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return Rf(o,(function(t){var n,e,c,s,f;return{lineStart:function(){s=c=!1,f=1},point:function(l,h){var p,d=[l,h],v=o(l,h),y=r?v?0:a(l,h):v?a(l+(l<0?Ac:-Ac),h):0;if(!n&&(s=c=v)&&t.lineStart(),v!==c&&(!(p=u(n,d))||Ff(n,p)||Ff(d,p))&&(d[0]+=Nc,d[1]+=Nc,v=o(d[0],d[1])),v!==c)f=0,v?(t.lineStart(),p=u(d,n),t.point(p[0],p[1])):(p=u(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(i&&n&&r^v){var b;y&e||!(b=u(d,n,!0))||(f=0,r?(t.lineStart(),t.point(b[0][0],b[0][1]),t.point(b[1][0],b[1][1]),t.lineEnd()):(t.point(b[1][0],b[1][1]),t.lineEnd(),t.lineStart(),t.point(b[0][0],b[0][1])))}!v||n&&Ff(n,d)||t.point(d[0],d[1]),n=d,c=v,e=y},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return f|(s&&c)<<1}}}),(function(n,r,i,o){Af(o,t,e,i,n,r)}),r?[0,-t]:[-Ac,t-Ac])}var Zf=1e9,Yf=-Zf;function Wf(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,s){var f=0,l=0;if(null==i||(f=u(i,a))!==(l=u(o,a))||c(i,o)<0^a>0)do{s.point(0===f||3===f?t:e,f>1?r:n)}while((f=(f+a+4)%4)!==l);else s.point(o[0],o[1])}function u(r,i){return zc(r[0]-t)<Nc?i>0?0:3:zc(r[0]-e)<Nc?i>0?2:1:zc(r[1]-n)<Nc?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,s,f,l,h,p,d,v,y,b,g,_=u,m=If(),x={point:w,lineStart:function(){x.point=S,s&&s.push(f=[]),b=!0,y=!1,d=v=NaN},lineEnd:function(){c&&(S(l,h),p&&y&&m.rejoin(),c.push(m.result())),x.point=w,y&&_.lineEnd()},polygonStart:function(){_=m,c=[],s=[],g=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=s.length;e<i;++e)for(var o,u,a=s[e],c=1,f=a.length,l=a[0],h=l[0],p=l[1];c<f;++c)o=h,u=p,h=(l=a[c])[0],p=l[1],u<=r?p>r&&(h-o)*(r-u)>(p-u)*(t-o)&&++n:p<=r&&(h-o)*(r-u)<(p-u)*(t-o)&&--n;return n}(),e=g&&n,i=(c=D(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&zf(c,a,n,o,u),u.polygonEnd()),_=u,c=s=f=null}};function w(t,n){i(t,n)&&_.point(t,n)}function S(o,u){var a=i(o,u);if(s&&f.push([o,u]),b)l=o,h=u,p=a,b=!1,a&&(_.lineStart(),_.point(o,u));else if(a&&y)_.point(o,u);else{var c=[d=Math.max(Yf,Math.min(Zf,d)),v=Math.max(Yf,Math.min(Zf,v))],m=[o=Math.max(Yf,Math.min(Zf,o)),u=Math.max(Yf,Math.min(Zf,u))];!function(t,n,e,r,i,o){var u,a=t[0],c=t[1],s=0,f=1,l=n[0]-a,h=n[1]-c;if(u=e-a,l||!(u>0)){if(u/=l,l<0){if(u<s)return;u<f&&(f=u)}else if(l>0){if(u>f)return;u>s&&(s=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>f)return;u>s&&(s=u)}else if(l>0){if(u<s)return;u<f&&(f=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<s)return;u<f&&(f=u)}else if(h>0){if(u>f)return;u>s&&(s=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>f)return;u>s&&(s=u)}else if(h>0){if(u<s)return;u<f&&(f=u)}return s>0&&(t[0]=a+s*l,t[1]=c+s*h),f<1&&(n[0]=a+f*l,n[1]=c+f*h),!0}}}}}(c,m,t,n,e,r)?a&&(_.lineStart(),_.point(o,u),g=!1):(y||(_.lineStart(),_.point(c[0],c[1])),_.point(m[0],m[1]),a||_.lineEnd(),g=!1)}d=o,v=u,y=a}return x}}function Hf(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=Wf(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}}var Xf,$f,Gf,Kf=wc(),Qf={sphere:$c,point:$c,lineStart:function(){Qf.point=tl,Qf.lineEnd=Jf},lineEnd:$c,polygonStart:$c,polygonEnd:$c};function Jf(){Qf.point=Qf.lineEnd=$c}function tl(t,n){Xf=t*=Pc,$f=Uc(n*=Pc),Gf=Lc(n),Qf.point=nl}function nl(t,n){t*=Pc;var e=Uc(n*=Pc),r=Lc(n),i=zc(t-Xf),o=Lc(i),u=r*Uc(i),a=Gf*e-$f*r*o,c=$f*e+Gf*r*o;Kf.add(Oc(Zc(u*u+a*a),c)),Xf=t,$f=e,Gf=r}function el(t){return Kf.reset(),ns(t,Qf),+Kf}var rl=[null,null],il={type:"LineString",coordinates:rl};function ol(t,n){return rl[0]=t,rl[1]=n,el(il)}var ul={Feature:function(t,n){return cl(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(cl(e[r].geometry,n))return!0;return!1}},al={Sphere:function(){return!0},Point:function(t,n){return sl(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(sl(e[r],n))return!0;return!1},LineString:function(t,n){return fl(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(fl(e[r],n))return!0;return!1},Polygon:function(t,n){return ll(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(ll(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(cl(e[r],n))return!0;return!1}};function cl(t,n){return!(!t||!al.hasOwnProperty(t.type))&&al[t.type](t,n)}function sl(t,n){return 0===ol(t,n)}function fl(t,n){for(var e,r,i,o=0,u=t.length;o<u;o++){if(0===(r=ol(t[o],n)))return!0;if(o>0&&(i=ol(t[o],t[o-1]))>0&&e<=i&&r<=i&&(e+r-i)*(1-Math.pow((e-r)/i,2))<Ec*i)return!0;e=r}return!1}function ll(t,n){return!!Df(t.map(hl),pl(n))}function hl(t){return(t=t.map(pl)).pop(),t}function pl(t){return[t[0]*Pc,t[1]*Pc]}function dl(t,n){return(t&&ul.hasOwnProperty(t.type)?ul[t.type]:cl)(t,n)}function vl(t,n,e){var r=S(t,n-Nc,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function yl(t,n,e){var r=S(t,n-Nc,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function bl(){var t,n,e,r,i,o,u,a,c,s,f,l,h=10,p=h,d=90,v=360,y=2.5;function b(){return{type:"MultiLineString",coordinates:g()}}function g(){return S(Dc(r/d)*d,e,d).map(f).concat(S(Dc(a/v)*v,u,v).map(l)).concat(S(Dc(n/h)*h,t,h).filter((function(t){return zc(t%d)>Nc})).map(c)).concat(S(Dc(o/p)*p,i,p).filter((function(t){return zc(t%v)>Nc})).map(s))}return b.lines=function(){return g().map((function(t){return{type:"LineString",coordinates:t}}))},b.outline=function(){return{type:"Polygon",coordinates:[f(r).concat(l(u).slice(1),f(e).reverse().slice(1),l(a).reverse().slice(1))]}},b.extent=function(t){return arguments.length?b.extentMajor(t).extentMinor(t):b.extentMinor()},b.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),b.precision(y)):[[r,a],[e,u]]},b.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),b.precision(y)):[[n,o],[t,i]]},b.step=function(t){return arguments.length?b.stepMajor(t).stepMinor(t):b.stepMinor()},b.stepMajor=function(t){return arguments.length?(d=+t[0],v=+t[1],b):[d,v]},b.stepMinor=function(t){return arguments.length?(h=+t[0],p=+t[1],b):[h,p]},b.precision=function(h){return arguments.length?(y=+h,c=vl(o,i,90),s=yl(n,t,y),f=vl(a,u,90),l=yl(r,e,y),b):y},b.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function gl(){return bl()()}function _l(t,n){var e=t[0]*Pc,r=t[1]*Pc,i=n[0]*Pc,o=n[1]*Pc,u=Lc(r),a=Uc(r),c=Lc(o),s=Uc(o),f=u*Lc(e),l=u*Uc(e),h=c*Lc(i),p=c*Uc(i),d=2*Hc(Zc(Xc(o-r)+u*c*Xc(i-e))),v=Uc(d),y=d?function(t){var n=Uc(t*=d)/v,e=Uc(d-t)/v,r=e*f+n*h,i=e*l+n*p,o=e*a+n*s;return[Oc(i,r)*Fc,Oc(o,Zc(r*r+i*i))*Fc]}:function(){return[e*Fc,r*Fc]};return y.distance=d,y}function ml(t){return t}var xl,wl,Sl,Ml,Tl=wc(),Nl=wc(),El={point:$c,lineStart:$c,lineEnd:$c,polygonStart:function(){El.lineStart=Al,El.lineEnd=Il},polygonEnd:function(){El.lineStart=El.lineEnd=El.point=$c,Tl.add(zc(Nl)),Nl.reset()},result:function(){var t=Tl/2;return Tl.reset(),t}};function Al(){El.point=kl}function kl(t,n){El.point=Cl,xl=Sl=t,wl=Ml=n}function Cl(t,n){Nl.add(Ml*t-Sl*n),Sl=t,Ml=n}function Il(){Cl(xl,wl)}const Fl=El;var Pl=1/0,zl=Pl,jl=-Pl,Ol=jl;const Ll={point:function(t,n){t<Pl&&(Pl=t),t>jl&&(jl=t),n<zl&&(zl=n),n>Ol&&(Ol=n)},lineStart:$c,lineEnd:$c,polygonStart:$c,polygonEnd:$c,result:function(){var t=[[Pl,zl],[jl,Ol]];return jl=Ol=-(zl=Pl=1/0),t}};var Dl,Rl,Vl,Bl,Ul=0,ql=0,Zl=0,Yl=0,Wl=0,Hl=0,Xl=0,$l=0,Gl=0,Kl={point:Ql,lineStart:Jl,lineEnd:eh,polygonStart:function(){Kl.lineStart=rh,Kl.lineEnd=ih},polygonEnd:function(){Kl.point=Ql,Kl.lineStart=Jl,Kl.lineEnd=eh},result:function(){var t=Gl?[Xl/Gl,$l/Gl]:Hl?[Yl/Hl,Wl/Hl]:Zl?[Ul/Zl,ql/Zl]:[NaN,NaN];return Ul=ql=Zl=Yl=Wl=Hl=Xl=$l=Gl=0,t}};function Ql(t,n){Ul+=t,ql+=n,++Zl}function Jl(){Kl.point=th}function th(t,n){Kl.point=nh,Ql(Vl=t,Bl=n)}function nh(t,n){var e=t-Vl,r=n-Bl,i=Zc(e*e+r*r);Yl+=i*(Vl+t)/2,Wl+=i*(Bl+n)/2,Hl+=i,Ql(Vl=t,Bl=n)}function eh(){Kl.point=Ql}function rh(){Kl.point=oh}function ih(){uh(Dl,Rl)}function oh(t,n){Kl.point=uh,Ql(Dl=Vl=t,Rl=Bl=n)}function uh(t,n){var e=t-Vl,r=n-Bl,i=Zc(e*e+r*r);Yl+=i*(Vl+t)/2,Wl+=i*(Bl+n)/2,Hl+=i,Xl+=(i=Bl*t-Vl*n)*(Vl+t),$l+=i*(Bl+n),Gl+=3*i,Ql(Vl=t,Bl=n)}const ah=Kl;function ch(t){this._context=t}ch.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Ic)}},result:$c};var sh,fh,lh,hh,ph,dh=wc(),vh={point:$c,lineStart:function(){vh.point=yh},lineEnd:function(){sh&&bh(fh,lh),vh.point=$c},polygonStart:function(){sh=!0},polygonEnd:function(){sh=null},result:function(){var t=+dh;return dh.reset(),t}};function yh(t,n){vh.point=bh,fh=hh=t,lh=ph=n}function bh(t,n){hh-=t,ph-=n,dh.add(Zc(hh*hh+ph*ph)),hh=t,ph=n}const gh=vh;function _h(){this._string=[]}function mh(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function xh(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),ns(t,e(r))),r.result()}return o.area=function(t){return ns(t,e(Fl)),Fl.result()},o.measure=function(t){return ns(t,e(gh)),gh.result()},o.bounds=function(t){return ns(t,e(Ll)),Ll.result()},o.centroid=function(t){return ns(t,e(ah)),ah.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,ml):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new _h):new ch(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)}function wh(t){return{stream:Sh(t)}}function Sh(t){return function(n){var e=new Mh;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Mh(){}function Th(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),ns(e,t.stream(Ll)),n(Ll.result()),null!=r&&t.clipExtent(r),t}function Nh(t,n,e){return Th(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])}),e)}function Eh(t,n,e){return Nh(t,[[0,0],n],e)}function Ah(t,n,e){return Th(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])}),e)}function kh(t,n,e){return Th(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])}),e)}_h.prototype={_radius:4.5,_circle:mh(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=mh(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},Mh.prototype={constructor:Mh,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Ch=Lc(30*Pc);function Ih(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,s,f,l,h,p,d,v,y){var b=s-r,g=f-i,_=b*b+g*g;if(_>4*n&&v--){var m=u+h,x=a+p,w=c+d,S=Zc(m*m+x*x+w*w),M=Hc(w/=S),T=zc(zc(w)-1)<Nc||zc(o-l)<Nc?(o+l)/2:Oc(x,m),N=t(T,M),E=N[0],A=N[1],k=E-r,C=A-i,I=g*k-b*C;(I*I/_>n||zc((b*k+g*C)/_-.5)>.3||u*h+a*p+c*d<Ch)&&(e(r,i,o,u,a,c,E,A,T,m/=S,x/=S,w,v,y),y.point(E,A),e(E,A,T,m,x,w,s,f,l,h,p,d,v,y))}}return function(n){var r,i,o,u,a,c,s,f,l,h,p,d,v={point:y,lineStart:b,lineEnd:_,polygonStart:function(){n.polygonStart(),v.lineStart=m},polygonEnd:function(){n.polygonEnd(),v.lineStart=b}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function b(){f=NaN,v.point=g,n.lineStart()}function g(r,i){var o=ys([r,i]),u=t(r,i);e(f,l,s,h,p,d,f=u[0],l=u[1],s=r,h=o[0],p=o[1],d=o[2],16,n),n.point(f,l)}function _(){v.point=y,n.lineEnd()}function m(){b(),v.point=x,v.lineEnd=w}function x(t,n){g(r=t,n),i=f,o=l,u=h,a=p,c=d,v.point=g}function w(){e(f,l,s,h,p,d,i,o,r,u,a,c,16,n),v.lineEnd=_,_()}return v}}(t,n):function(t){return Sh({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var Fh=Sh({point:function(t,n){this.stream.point(t*Pc,n*Pc)}});function Ph(t,n,e,r,i){function o(o,u){return[n+t*(o*=r),e-t*(u*=i)]}return o.invert=function(o,u){return[(o-n)/t*r,(e-u)/t*i]},o}function zh(t,n,e,r,i,o){var u=Lc(o),a=Uc(o),c=u*t,s=a*t,f=u/t,l=a/t,h=(a*e-u*n)/t,p=(a*n+u*e)/t;function d(t,o){return[c*(t*=r)-s*(o*=i)+n,e-s*t-c*o]}return d.invert=function(t,n){return[r*(f*t-l*n+h),i*(p-l*t-f*n)]},d}function jh(t){return Oh((function(){return t}))()}function Oh(t){var n,e,r,i,o,u,a,c,s,f,l=150,h=480,p=250,d=0,v=0,y=0,b=0,g=0,_=0,m=1,x=1,w=null,S=Uf,M=null,T=ml,N=.5;function E(t){return c(t[0]*Pc,t[1]*Pc)}function A(t){return(t=c.invert(t[0],t[1]))&&[t[0]*Fc,t[1]*Fc]}function k(){var t=zh(l,0,0,m,x,_).apply(null,n(d,v)),r=(_?zh:Ph)(l,h-t[0],p-t[1],m,x,_);return e=Sf(y,b,g),a=xf(n,r),c=xf(e,a),u=Ih(a,N),C()}function C(){return s=f=null,E}return E.stream=function(t){return s&&f===t?s:s=Fh(function(t){return Sh({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(S(u(T(f=t)))))},E.preclip=function(t){return arguments.length?(S=t,w=void 0,C()):S},E.postclip=function(t){return arguments.length?(T=t,M=r=i=o=null,C()):T},E.clipAngle=function(t){return arguments.length?(S=+t?qf(w=t*Pc):(w=null,Uf),C()):w*Fc},E.clipExtent=function(t){return arguments.length?(T=null==t?(M=r=i=o=null,ml):Wf(M=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),C()):null==M?null:[[M,r],[i,o]]},E.scale=function(t){return arguments.length?(l=+t,k()):l},E.translate=function(t){return arguments.length?(h=+t[0],p=+t[1],k()):[h,p]},E.center=function(t){return arguments.length?(d=t[0]%360*Pc,v=t[1]%360*Pc,k()):[d*Fc,v*Fc]},E.rotate=function(t){return arguments.length?(y=t[0]%360*Pc,b=t[1]%360*Pc,g=t.length>2?t[2]%360*Pc:0,k()):[y*Fc,b*Fc,g*Fc]},E.angle=function(t){return arguments.length?(_=t%360*Pc,k()):_*Fc},E.reflectX=function(t){return arguments.length?(m=t?-1:1,k()):m<0},E.reflectY=function(t){return arguments.length?(x=t?-1:1,k()):x<0},E.precision=function(t){return arguments.length?(u=Ih(a,N=t*t),C()):Zc(N)},E.fitExtent=function(t,n){return Nh(E,t,n)},E.fitSize=function(t,n){return Eh(E,t,n)},E.fitWidth=function(t,n){return Ah(E,t,n)},E.fitHeight=function(t,n){return kh(E,t,n)},function(){return n=t.apply(this,arguments),E.invert=n.invert&&A,k()}}function Lh(t){var n=0,e=Ac/3,r=Oh(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Pc,e=t[1]*Pc):[n*Fc,e*Fc]},i}function Dh(t,n){var e=Uc(t),r=(e+Uc(n))/2;if(zc(r)<Nc)return function(t){var n=Lc(t);function e(t,e){return[t*n,Uc(e)/n]}return e.invert=function(t,e){return[t/n,Hc(e*n)]},e}(t);var i=1+e*(2*r-e),o=Zc(i)/r;function u(t,n){var e=Zc(i-2*r*Uc(n))/r;return[e*Uc(t*=r),o-e*Lc(t)]}return u.invert=function(t,n){var e=o-n,u=Oc(t,zc(e))*qc(e);return e*r<0&&(u-=Ac*qc(t)*qc(e)),[u/r,Hc((i-(t*t+e*e)*r*r)/(2*r))]},u}function Rh(){return Lh(Dh).scale(155.424).center([0,33.6442])}function Vh(){return Rh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function Bh(){var t,n,e,r,i,o,u=Vh(),a=Rh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Rh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,n){o=[t,n]}};function f(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function l(){return t=n=null,f}return f.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},f.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},f.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),l()):u.precision()},f.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),f.translate(u.translate())):u.scale()},f.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],f=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,f-.238*n],[o+.455*n,f+.238*n]]).stream(s),r=a.translate([o-.307*n,f+.201*n]).clipExtent([[o-.425*n+Nc,f+.12*n+Nc],[o-.214*n-Nc,f+.234*n-Nc]]).stream(s),i=c.translate([o-.205*n,f+.212*n]).clipExtent([[o-.214*n+Nc,f+.166*n+Nc],[o-.115*n-Nc,f+.234*n-Nc]]).stream(s),l()},f.fitExtent=function(t,n){return Nh(f,t,n)},f.fitSize=function(t,n){return Eh(f,t,n)},f.fitWidth=function(t,n){return Ah(f,t,n)},f.fitHeight=function(t,n){return kh(f,t,n)},f.scale(1070)}function Uh(t){return function(n,e){var r=Lc(n),i=Lc(e),o=t(r*i);return[o*i*Uc(n),o*Uc(e)]}}function qh(t){return function(n,e){var r=Zc(n*n+e*e),i=t(r),o=Uc(i),u=Lc(i);return[Oc(n*o,r*u),Hc(r&&e*o/r)]}}var Zh=Uh((function(t){return Zc(2/(1+t))}));function Yh(){return jh(Zh).scale(124.75).clipAngle(179.999)}Zh.invert=qh((function(t){return 2*Hc(t/2)}));var Wh=Uh((function(t){return(t=Wc(t))&&t/Uc(t)}));function Hh(){return jh(Wh).scale(79.4188).clipAngle(179.999)}function Xh(t,n){return[t,Vc(Yc((kc+n)/2))]}function $h(){return Gh(Xh).scale(961/Ic)}function Gh(t){var n,e,r,i=jh(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,s=null;function f(){var o=Ac*u(),a=i(Ef(i.rotate()).invert([0,0]));return c(null==s?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===Xh?[[Math.max(a[0]-o,s),n],[Math.min(a[0]+o,e),r]]:[[s,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),f()):u()},i.translate=function(t){return arguments.length?(a(t),f()):a()},i.center=function(t){return arguments.length?(o(t),f()):o()},i.clipExtent=function(t){return arguments.length?(null==t?s=n=e=r=null:(s=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),f()):null==s?null:[[s,n],[e,r]]},f()}function Kh(t){return Yc((kc+t)/2)}function Qh(t,n){var e=Lc(t),r=t===n?Uc(t):Vc(e/Lc(n))/Vc(Kh(n)/Kh(t)),i=e*Bc(Kh(t),r)/r;if(!r)return Xh;function o(t,n){i>0?n<-kc+Nc&&(n=-kc+Nc):n>kc-Nc&&(n=kc-Nc);var e=i/Bc(Kh(n),r);return[e*Uc(r*t),i-e*Lc(r*t)]}return o.invert=function(t,n){var e=i-n,o=qc(r)*Zc(t*t+e*e),u=Oc(t,zc(e))*qc(e);return e*r<0&&(u-=Ac*qc(t)*qc(e)),[u/r,2*jc(Bc(i/o,1/r))-kc]},o}function Jh(){return Lh(Qh).scale(109.5).parallels([30,30])}function tp(t,n){return[t,n]}function np(){return jh(tp).scale(152.63)}function ep(t,n){var e=Lc(t),r=t===n?Uc(t):(e-Lc(n))/(n-t),i=e/r+t;if(zc(r)<Nc)return tp;function o(t,n){var e=i-n,o=r*t;return[e*Uc(o),i-e*Lc(o)]}return o.invert=function(t,n){var e=i-n,o=Oc(t,zc(e))*qc(e);return e*r<0&&(o-=Ac*qc(t)*qc(e)),[o/r,i-qc(r)*Zc(t*t+e*e)]},o}function rp(){return Lh(ep).scale(131.154).center([0,13.9389])}Wh.invert=qh((function(t){return t})),Xh.invert=function(t,n){return[t,2*jc(Rc(n))-kc]},tp.invert=tp;var ip=1.340264,op=-.081106,up=893e-6,ap=.003796,cp=Zc(3)/2;function sp(t,n){var e=Hc(cp*Uc(n)),r=e*e,i=r*r*r;return[t*Lc(e)/(cp*(ip+3*op*r+i*(7*up+9*ap*r))),e*(ip+op*r+i*(up+ap*r))]}function fp(){return jh(sp).scale(177.158)}function lp(t,n){var e=Lc(n),r=Lc(t)*e;return[e*Uc(t)/r,Uc(n)/r]}function hp(){return jh(lp).scale(144.049).clipAngle(60)}function pp(){var t,n,e,r,i,o,u,a=1,c=0,s=0,f=1,l=1,h=0,p=null,d=1,v=1,y=Sh({point:function(t,n){var e=_([t,n]);this.stream.point(e[0],e[1])}}),b=ml;function g(){return d=a*f,v=a*l,o=u=null,_}function _(e){var r=e[0]*d,i=e[1]*v;if(h){var o=i*t-r*n;r=r*t+i*n,i=o}return[r+c,i+s]}return _.invert=function(e){var r=e[0]-c,i=e[1]-s;if(h){var o=i*t+r*n;r=r*t-i*n,i=o}return[r/d,i/v]},_.stream=function(t){return o&&u===t?o:o=y(b(u=t))},_.postclip=function(t){return arguments.length?(b=t,p=e=r=i=null,g()):b},_.clipExtent=function(t){return arguments.length?(b=null==t?(p=e=r=i=null,ml):Wf(p=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),g()):null==p?null:[[p,e],[r,i]]},_.scale=function(t){return arguments.length?(a=+t,g()):a},_.translate=function(t){return arguments.length?(c=+t[0],s=+t[1],g()):[c,s]},_.angle=function(e){return arguments.length?(n=Uc(h=e%360*Pc),t=Lc(h),g()):h*Fc},_.reflectX=function(t){return arguments.length?(f=t?-1:1,g()):f<0},_.reflectY=function(t){return arguments.length?(l=t?-1:1,g()):l<0},_.fitExtent=function(t,n){return Nh(_,t,n)},_.fitSize=function(t,n){return Eh(_,t,n)},_.fitWidth=function(t,n){return Ah(_,t,n)},_.fitHeight=function(t,n){return kh(_,t,n)},_}function dp(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function vp(){return jh(dp).scale(175.295)}function yp(t,n){return[Lc(n)*Uc(t),Uc(n)]}function bp(){return jh(yp).scale(249.5).clipAngle(90.000001)}function gp(t,n){var e=Lc(n),r=1+Lc(t)*e;return[e*Uc(t)/r,Uc(n)/r]}function _p(){return jh(gp).scale(250).clipAngle(142)}function mp(t,n){return[Vc(Yc((kc+n)/2)),-t]}function xp(){var t=Gh(mp),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}function wp(t,n){return t.parent===n.parent?1:2}function Sp(t,n){return t+n.x}function Mp(t,n){return Math.max(t,n.y)}function Tp(){var t=wp,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Sp,0)/t.length}(e),n.y=function(t){return 1+t.reduce(Mp,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)}));var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),s=a.x-t(a,c)/2,f=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-s)/(f-s)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function Np(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Ep(t,n){var e,r,i,o,u,a=new Ip(t),c=+t.value&&(a.value=t.value),s=[a];for(null==n&&(n=Ap);e=s.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)s.push(r=e.children[o]=new Ip(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(Cp)}function Ap(t){return t.children}function kp(t){t.data=t.data.data}function Cp(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Ip(t){this.data=t,this.depth=this.height=0,this.parent=null}sp.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(ip+op*i+o*(up+ap*i))-n)/(ip+3*op*i+o*(7*up+9*ap*i)))*r)*i*i,!(zc(e)<Ec));++u);return[cp*t*(ip+3*op*i+o*(7*up+9*ap*i))/Lc(r),Hc(Uc(r)/cp)]},lp.invert=qh(jc),dp.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(zc(e)>Nc&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]},yp.invert=qh(Hc),gp.invert=qh((function(t){return 2*jc(t)})),mp.invert=function(t,n){return[-n,2*jc(Rc(t))-kc]},Ip.prototype=Ep.prototype={constructor:Ip,count:function(){return this.eachAfter(Np)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return Ep(this).eachBefore(kp)}};var Fp=Array.prototype.slice;function Pp(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Fp.call(t))).length,o=[];r<i;)n=t[r],e&&Op(e,n)?++r:(e=Dp(o=zp(o,n)),r=0);return e}function zp(t,n){var e,r;if(Lp(n,t))return[n];for(e=0;e<t.length;++e)if(jp(n,t[e])&&Lp(Rp(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(jp(Rp(t[e],t[r]),n)&&jp(Rp(t[e],n),t[r])&&jp(Rp(t[r],n),t[e])&&Lp(Vp(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function jp(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Op(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Lp(t,n){for(var e=0;e<n.length;++e)if(!Op(t,n[e]))return!1;return!0}function Dp(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return Rp(t[0],t[1]);case 3:return Vp(t[0],t[1],t[2])}}function Rp(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,s=u-r,f=a-i,l=Math.sqrt(c*c+s*s);return{x:(e+o+c/l*f)/2,y:(r+u+s/l*f)/2,r:(l+i+a)/2}}function Vp(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,s=e.x,f=e.y,l=e.r,h=r-u,p=r-s,d=i-a,v=i-f,y=c-o,b=l-o,g=r*r+i*i-o*o,_=g-u*u-a*a+c*c,m=g-s*s-f*f+l*l,x=p*d-h*v,w=(d*m-v*_)/(2*x)-r,S=(v*y-d*b)/x,M=(p*_-h*m)/(2*x)-i,T=(h*b-p*y)/x,N=S*S+T*T-1,E=2*(o+w*S+M*T),A=w*w+M*M-o*o,k=-(N?(E+Math.sqrt(E*E-4*N*A))/(2*N):A/E);return{x:r+w+S*k,y:i+M+T*k,r:k}}function Bp(t,n,e){var r,i,o,u,a=t.x-n.x,c=t.y-n.y,s=a*a+c*c;s?(i=n.r+e.r,i*=i,u=t.r+e.r,i>(u*=u)?(r=(s+u-i)/(2*s),o=Math.sqrt(Math.max(0,u/s-r*r)),e.x=t.x-r*a-o*c,e.y=t.y-r*c+o*a):(r=(s+i-u)/(2*s),o=Math.sqrt(Math.max(0,i/s-r*r)),e.x=n.x+r*a-o*c,e.y=n.y+r*c+o*a)):(e.x=n.x+e.r,e.y=n.y)}function Up(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function qp(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Zp(t){this._=t,this.next=null,this.previous=null}function Yp(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,s,f,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Bp(e,n,r=t[2]),n=new Zp(n),e=new Zp(e),r=new Zp(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){Bp(n._,e._,r=t[a]),r=new Zp(r),c=e.next,s=n.previous,f=e._.r,l=n._.r;do{if(f<=l){if(Up(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}f+=c._.r,c=c.next}else{if(Up(s._,r._)){(n=s).next=e,e.previous=n,--a;continue t}l+=s._.r,s=s.previous}}while(c!==s.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=qp(n);(r=r.next)!==e;)(u=qp(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=Pp(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}function Wp(t){return Yp(t),t}function Hp(t){return null==t?null:Xp(t)}function Xp(t){if("function"!=typeof t)throw new Error;return t}function $p(){return 0}function Gp(t){return function(){return t}}function Kp(t){return Math.sqrt(t.value)}function Qp(){var t=null,n=1,e=1,r=$p;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Jp(t)).eachAfter(td(r,.5)).eachBefore(nd(1)):i.eachBefore(Jp(Kp)).eachAfter(td($p,1)).eachAfter(td(r,i.r/Math.min(n,e))).eachBefore(nd(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Hp(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Gp(+t),i):r},i}function Jp(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function td(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Yp(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function nd(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function ed(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function rd(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,s=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*s}function id(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&rd(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(ed),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i}var od={depth:-1},ud={};function ad(t){return t.id}function cd(t){return t.parentId}function sd(){var t=ad,n=cd;function e(e){var r,i,o,u,a,c,s,f=e.length,l=new Array(f),h={};for(i=0;i<f;++i)r=e[i],a=l[i]=new Ip(r),null!=(c=t(r,i,e))&&(c+="")&&(h[s="$"+(a.id=c)]=s in h?ud:a);for(i=0;i<f;++i)if(a=l[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h["$"+c]))throw new Error("missing: "+c);if(u===ud)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=od,o.eachBefore((function(t){t.depth=t.parent.depth+1,--f})).eachBefore(Cp),o.parent=null,f>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Xp(n),e):t},e.parentId=function(t){return arguments.length?(n=Xp(t),e):n},e}function fd(t,n){return t.parent===n.parent?1:2}function ld(t){var n=t.children;return n?n[0]:t.t}function hd(t){var n=t.children;return n?n[n.length-1]:t.t}function pd(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function dd(t,n,e){return t.a.parent===n.parent?t.a:e}function vd(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function yd(){var t=fd,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new vd(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new vd(r[i],i)),e.parent=n;return(u.parent=new vd(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var s=i,f=i,l=i;i.eachBefore((function(t){t.x<s.x&&(s=t),t.x>f.x&&(f=t),t.depth>l.depth&&(l=t)}));var h=s===f?1:t(s,f)/2,p=h-s.x,d=n/(f.x+h+p),v=e/(l.depth||1);i.eachBefore((function(t){t.x=(t.x+p)*d,t.y=t.depth*v}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],s=o.m,f=u.m,l=a.m,h=c.m;a=hd(a),o=ld(o),a&&o;)c=ld(c),(u=hd(u)).a=n,(i=a.z+l-o.z-s+t(a._,o._))>0&&(pd(dd(a,n,r),n,i),s+=i,f+=i),l+=a.m,s+=o.m,h+=c.m,f+=u.m;a&&!hd(u)&&(u.t=a,u.m+=l-f),o&&!ld(c)&&(c.t=o,c.m+=s-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function bd(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,s=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*s}vd.prototype=Object.create(Ip.prototype);var gd=(1+Math.sqrt(5))/2;function _d(t,n,e,r,i,o){for(var u,a,c,s,f,l,h,p,d,v,y,b=[],g=n.children,_=0,m=0,x=g.length,w=n.value;_<x;){c=i-e,s=o-r;do{f=g[m++].value}while(!f&&m<x);for(l=h=f,y=f*f*(v=Math.max(s/c,c/s)/(w*t)),d=Math.max(h/y,y/l);m<x;++m){if(f+=a=g[m].value,a<l&&(l=a),a>h&&(h=a),y=f*f*v,(p=Math.max(h/y,y/l))>d){f-=a;break}d=p}b.push(u={value:f,dice:c<s,children:g.slice(_,m)}),u.dice?rd(u,e,r,i,w?r+=s*f/w:o):bd(u,e,r,w?e+=c*f/w:i,o),w-=f,_=m}return b}const md=function t(n){function e(t,e,r,i,o){_d(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(gd);function xd(){var t=md,n=!1,e=1,r=1,i=[0],o=$p,u=$p,a=$p,c=$p,s=$p;function f(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(ed),t}function l(n){var e=i[n.depth],r=n.x0+e,f=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<f&&(f=h=(f+h)/2),n.x0=r,n.y0=f,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=s(n)-e,f+=u(n)-e,(l-=a(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<f&&(f=h=(f+h)/2),t(n,r,f,l,h))}return f.round=function(t){return arguments.length?(n=!!t,f):n},f.size=function(t){return arguments.length?(e=+t[0],r=+t[1],f):[e,r]},f.tile=function(n){return arguments.length?(t=Xp(n),f):t},f.padding=function(t){return arguments.length?f.paddingInner(t).paddingOuter(t):f.paddingInner()},f.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Gp(+t),f):o},f.paddingOuter=function(t){return arguments.length?f.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):f.paddingTop()},f.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:Gp(+t),f):u},f.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Gp(+t),f):a},f.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Gp(+t),f):c},f.paddingLeft=function(t){return arguments.length?(s="function"==typeof t?t:Gp(+t),f):s},f}function wd(t,n,e,r,i){var o,u,a=t.children,c=a.length,s=new Array(c+1);for(s[0]=u=o=0;o<c;++o)s[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var f=a[n];return f.x0=i,f.y0=o,f.x1=u,void(f.y1=c)}for(var l=s[n],h=r/2+l,p=n+1,d=e-1;p<d;){var v=p+d>>>1;s[v]<h?p=v+1:d=v}h-s[p-1]<s[p]-h&&n+1<p&&--p;var y=s[p]-l,b=r-y;if(u-i>c-o){var g=(i*b+u*y)/r;t(n,p,y,i,o,g,c),t(p,e,b,g,o,u,c)}else{var _=(o*b+c*y)/r;t(n,p,y,i,o,u,_),t(p,e,b,i,_,u,c)}}(0,c,t.value,n,e,r,i)}function Sd(t,n,e,r,i){(1&t.depth?bd:rd)(t,n,e,r,i)}const Md=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,s,f,l=-1,h=u.length,p=t.value;++l<h;){for(c=(a=u[l]).children,s=a.value=0,f=c.length;s<f;++s)a.value+=c[s].value;a.dice?rd(a,e,r,i,r+=(o-r)*a.value/p):bd(a,e,r,e+=(i-e)*a.value/p,o),p-=a.value}else t._squarify=u=_d(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(gd);function Td(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}function Nd(t,n){var e=pe(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}}function Ed(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}var Ad=Math.SQRT2;function kd(t){return((t=Math.exp(t))+1/t)/2}function Cd(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],s=n[2],f=a-i,l=c-o,h=f*f+l*l;if(h<1e-12)r=Math.log(s/u)/Ad,e=function(t){return[i+t*f,o+t*l,u*Math.exp(Ad*t*r)]};else{var p=Math.sqrt(h),d=(s*s-u*u+4*h)/(2*u*2*p),v=(s*s-u*u-4*h)/(2*s*2*p),y=Math.log(Math.sqrt(d*d+1)-d),b=Math.log(Math.sqrt(v*v+1)-v);r=(b-y)/Ad,e=function(t){var n,e=t*r,a=kd(y),c=u/(2*p)*(a*(n=Ad*e+y,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(y));return[i+c*f,o+c*l,u*a/kd(Ad*e+y)]}}return e.duration=1e3*r,e}function Id(t){return function(n,e){var r=t((n=oe(n)).h,(e=oe(e)).h),i=de(n.s,e.s),o=de(n.l,e.l),u=de(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}const Fd=Id(pe);var Pd=Id(de);function zd(t,n){var e=de((t=To(t)).l,(n=To(n)).l),r=de(t.a,n.a),i=de(t.b,n.b),o=de(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function jd(t){return function(n,e){var r=t((n=Po(n)).h,(e=Po(e)).h),i=de(n.c,e.c),o=de(n.l,e.l),u=de(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}const Od=jd(pe);var Ld=jd(de);function Dd(t){return function n(e){function r(n,r){var i=t((n=Yo(n)).h,(r=Yo(r)).h),o=de(n.s,r.s),u=de(n.l,r.l),a=de(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}const Rd=Dd(pe);var Vd=Dd(de);function Bd(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}function Ud(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e}function qd(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2}function Zd(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]}function Yd(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function Wd(t,n){return t[0]-n[0]||t[1]-n[1]}function Hd(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&Yd(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function Xd(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Wd),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Hd(r),u=Hd(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],s=[];for(n=o.length-1;n>=0;--n)s.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)s.push(t[r[u[n]][2]]);return s}function $d(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],s=o[1],f=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>a!=s>a&&u<(c-e)*(a-r)/(s-r)+e&&(f=!f),c=e,s=r;return f}function Gd(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c}function Kd(){return Math.random()}const Qd=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Kd),Jd=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Kd),tv=function t(n){function e(){var t=Jd.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Kd),nv=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Kd),ev=function t(n){function e(t){var e=nv.source(n)(t);return function(){return e()/t}}return e.source=t,e}(Kd),rv=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Kd);function iv(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function ov(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var uv=Array.prototype,av=uv.map,cv=uv.slice,sv={name:"implicit"};function fv(){var t=eo(),n=[],e=[],r=sv;function i(i){var o=i+"",u=t.get(o);if(!u){if(r!==sv)return r;t.set(o,u=n.push(i))}return e[(u-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=eo();for(var r,o,u=-1,a=e.length;++u<a;)t.has(o=(r=e[u])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=cv.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return fv(n,e).unknown(r)},iv.apply(i,arguments),i}function lv(){var t,n,e=fv().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,s=.5;function f(){var e=r().length,f=o[1]<o[0],l=o[f-0],h=o[1-f];t=(h-l)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),l+=(h-l-t*(e-a))*s,n=t*(1-a),u&&(l=Math.round(l),n=Math.round(n));var p=S(e).map((function(n){return l+t*n}));return i(f?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),f()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],f()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,f()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,f()):u},e.padding=function(t){return arguments.length?(a=Math.min(1,c=+t),f()):a},e.paddingInner=function(t){return arguments.length?(a=Math.min(1,t),f()):a},e.paddingOuter=function(t){return arguments.length?(c=+t,f()):c},e.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),f()):s},e.copy=function(){return lv(r(),o).round(u).paddingInner(a).paddingOuter(c).align(s)},iv.apply(f(),arguments)}function hv(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return hv(n())},t}function pv(){return hv(lv.apply(null,arguments).paddingInner(1))}function dv(t){return+t}var vv=[0,1];function yv(t){return t}function bv(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function gv(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function _v(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=bv(i,r),o=e(u,o)):(r=bv(r,i),o=e(o,u)),function(t){return o(r(t))}}function mv(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=bv(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=s(t,n,1,r)-1;return o[e](i[e](n))}}function xv(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function wv(){var t,n,e,r,i,o,u=vv,a=vv,c=ke,s=yv;function f(){return r=Math.min(u.length,a.length)>2?mv:_v,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,c)))(t(s(n)))}return l.invert=function(e){return s(n((o||(o=r(a,u.map(t),Me)))(e)))},l.domain=function(t){return arguments.length?(u=av.call(t,dv),s===yv||(s=gv(u)),f()):u.slice()},l.range=function(t){return arguments.length?(a=cv.call(t),f()):a.slice()},l.rangeRound=function(t){return a=cv.call(t),c=Ed,f()},l.clamp=function(t){return arguments.length?(s=t?gv(u):yv,l):s!==yv},l.interpolate=function(t){return arguments.length?(c=t,f()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,f()}}function Sv(t,n){return wv()(t,n)}function Mv(t,n,e,r){var i,o=k(t,n,e);switch((r=ac(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=mc(o,u))||(r.precision=i),dc(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=xc(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=_c(o))||(r.precision=i-2*("%"===r.type))}return pc(r)}function Tv(t){var n=t.domain;return t.ticks=function(t){var e=n();return E(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Mv(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=A(a,c,e))>0?r=A(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=A(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function Nv(){var t=Sv(yv,yv);return t.copy=function(){return xv(t,Nv())},iv.apply(t,arguments),Tv(t)}function Ev(t){var n;function e(t){return isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=av.call(n,dv),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Ev(t).unknown(n)},t=arguments.length?av.call(t,dv):[0,1],Tv(e)}function Av(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t}function kv(t){return Math.log(t)}function Cv(t){return Math.exp(t)}function Iv(t){return-Math.log(-t)}function Fv(t){return-Math.exp(-t)}function Pv(t){return isFinite(t)?+("1e"+t):t<0?0:t}function zv(t){return function(n){return-t(-n)}}function jv(t){var n,e,r=t(kv,Cv),i=r.domain,o=10;function u(){return n=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}(o),e=function(t){return 10===t?Pv:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}(o),i()[0]<0?(n=zv(n),e=zv(e),t(Iv,Fv)):t(kv,Cv),r}return r.base=function(t){return arguments.length?(o=+t,u()):o},r.domain=function(t){return arguments.length?(i(t),u()):i()},r.ticks=function(t){var r,u=i(),a=u[0],c=u[u.length-1];(r=c<a)&&(h=a,a=c,c=h);var s,f,l,h=n(a),p=n(c),d=null==t?10:+t,v=[];if(!(o%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,a>0){for(;h<p;++h)for(f=1,s=e(h);f<o;++f)if(!((l=s*f)<a)){if(l>c)break;v.push(l)}}else for(;h<p;++h)for(f=o-1,s=e(h);f>=1;--f)if(!((l=s*f)<a)){if(l>c)break;v.push(l)}}else v=E(h,p,Math.min(p-h,d)).map(e);return r?v.reverse():v},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=pc(i)),t===1/0)return i;null==t&&(t=10);var u=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/e(Math.round(n(t)));return r*o<o-.5&&(r*=o),r<=u?i(t):""}},r.nice=function(){return i(Av(i(),{floor:function(t){return e(Math.floor(n(t)))},ceil:function(t){return e(Math.ceil(n(t)))}}))},r}function Ov(){var t=jv(wv()).domain([1,10]);return t.copy=function(){return xv(t,Ov()).base(t.base())},iv.apply(t,arguments),t}function Lv(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function Dv(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function Rv(t){var n=1,e=t(Lv(n),Dv(n));return e.constant=function(e){return arguments.length?t(Lv(n=+e),Dv(n)):n},Tv(e)}function Vv(){var t=Rv(wv());return t.copy=function(){return xv(t,Vv()).constant(t.constant())},iv.apply(t,arguments)}function Bv(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function Uv(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function qv(t){return t<0?-t*t:t*t}function Zv(t){var n=t(yv,yv),e=1;function r(){return 1===e?t(yv,yv):.5===e?t(Uv,qv):t(Bv(e),Bv(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},Tv(n)}function Yv(){var t=Zv(wv());return t.copy=function(){return xv(t,Yv()).exponent(t.exponent())},iv.apply(t,arguments),t}function Wv(){return Yv.apply(null,arguments).exponent(.5)}function Hv(){var t,n=[],e=[],r=[];function o(){var t=0,i=Math.max(1,e.length);for(r=new Array(i-1);++t<i;)r[t-1]=F(n,t/i);return u}function u(n){return isNaN(n=+n)?t:e[s(r,n)]}return u.invertExtent=function(t){var i=e.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:n[0],i<r.length?r[i]:n[n.length-1]]},u.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var e,r=0,u=t.length;r<u;++r)null==(e=t[r])||isNaN(e=+e)||n.push(e);return n.sort(i),o()},u.range=function(t){return arguments.length?(e=cv.call(t),o()):e.slice()},u.unknown=function(n){return arguments.length?(t=n,u):t},u.quantiles=function(){return r.slice()},u.copy=function(){return Hv().domain(n).range(e).unknown(t)},iv.apply(u,arguments)}function Xv(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function u(n){return n<=n?o[s(i,n,0,r)]:t}function a(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return u}return u.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],a()):[n,e]},u.range=function(t){return arguments.length?(r=(o=cv.call(t)).length-1,a()):o.slice()},u.invertExtent=function(t){var u=o.indexOf(t);return u<0?[NaN,NaN]:u<1?[n,i[0]]:u>=r?[i[r-1],e]:[i[u-1],i[u]]},u.unknown=function(n){return arguments.length?(t=n,u):u},u.thresholds=function(){return i.slice()},u.copy=function(){return Xv().domain([n,e]).range(o).unknown(t)},iv.apply(Tv(u),arguments)}function $v(){var t,n=[.5],e=[0,1],r=1;function i(i){return i<=i?e[s(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=cv.call(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=cv.call(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return $v().domain(n).range(e).unknown(t)},iv.apply(i,arguments)}var Gv=new Date,Kv=new Date;function Qv(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return Qv((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Gv.setTime(+n),Kv.setTime(+r),t(Gv),t(Kv),Math.floor(e(Gv,Kv))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Jv=Qv((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Jv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Qv((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};const ty=Jv;var ny=Jv.range,ey=Qv((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}));const ry=ey;var iy=ey.range,oy=1e3,uy=6e4,ay=36e5,cy=864e5,sy=6048e5;function fy(t){return Qv((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*uy)/sy}))}var ly=fy(0),hy=fy(1),py=fy(2),dy=fy(3),vy=fy(4),yy=fy(5),by=fy(6),gy=ly.range,_y=hy.range,my=py.range,xy=dy.range,wy=vy.range,Sy=yy.range,My=by.range,Ty=Qv((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*uy)/cy}),(function(t){return t.getDate()-1}));const Ny=Ty;var Ey=Ty.range,Ay=Qv((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*oy-t.getMinutes()*uy)}),(function(t,n){t.setTime(+t+n*ay)}),(function(t,n){return(n-t)/ay}),(function(t){return t.getHours()}));const ky=Ay;var Cy=Ay.range,Iy=Qv((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*oy)}),(function(t,n){t.setTime(+t+n*uy)}),(function(t,n){return(n-t)/uy}),(function(t){return t.getMinutes()}));const Fy=Iy;var Py=Iy.range,zy=Qv((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+n*oy)}),(function(t,n){return(n-t)/oy}),(function(t){return t.getUTCSeconds()}));const jy=zy;var Oy=zy.range,Ly=Qv((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));Ly.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Qv((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Ly:null};const Dy=Ly;var Ry=Ly.range;function Vy(t){return Qv((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/sy}))}var By=Vy(0),Uy=Vy(1),qy=Vy(2),Zy=Vy(3),Yy=Vy(4),Wy=Vy(5),Hy=Vy(6),Xy=By.range,$y=Uy.range,Gy=qy.range,Ky=Zy.range,Qy=Yy.range,Jy=Wy.range,tb=Hy.range,nb=Qv((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/cy}),(function(t){return t.getUTCDate()-1}));const eb=nb;var rb=nb.range,ib=Qv((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));ib.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Qv((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};const ob=ib;var ub=ib.range;function ab(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function cb(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function sb(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}function fb(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,s=wb(i),f=Sb(i),l=wb(o),h=Sb(o),p=wb(u),d=Sb(u),v=wb(a),y=Sb(a),b=wb(c),g=Sb(c),_={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Zb,e:Zb,f:$b,H:Yb,I:Wb,j:Hb,L:Xb,m:Gb,M:Kb,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Tg,s:Ng,S:Qb,u:Jb,U:tg,V:ng,w:eg,W:rg,x:null,X:null,y:ig,Y:og,Z:ug,"%":Mg},m={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:ag,e:ag,f:hg,H:cg,I:sg,j:fg,L:lg,m:pg,M:dg,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Tg,s:Ng,S:vg,u:yg,U:bg,V:gg,w:_g,W:mg,x:null,X:null,y:xg,Y:wg,Z:Sg,"%":Mg},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=b.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return M(t,n,e,r)},d:zb,e:zb,f:Vb,H:Ob,I:Ob,j:jb,L:Rb,m:Pb,M:Lb,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=f[r[0].toLowerCase()],e+r[0].length):-1},q:Fb,Q:Ub,s:qb,S:Db,u:Tb,U:Nb,V:Eb,w:Mb,W:Ab,x:function(t,n,r){return M(t,e,n,r)},X:function(t,n,e){return M(t,r,n,e)},y:Cb,Y:kb,Z:Ib,"%":Bb};function w(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++a<s;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=yb[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function S(t,n){return function(e){var r,i,o=sb(1900,void 0,1);if(M(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=cb(sb(o.y,0,1))).getUTCDay(),r=i>4||0===i?Uy.ceil(r):Uy(r),r=eb.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=ab(sb(o.y,0,1))).getDay(),r=i>4||0===i?hy.ceil(r):hy(r),r=Ny.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?cb(sb(o.y,0,1)).getUTCDay():ab(sb(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,cb(o)):ab(o)}}function M(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in yb?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=w(e,_),_.X=w(r,_),_.c=w(n,_),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=S(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=S(t+="",!0);return n.toString=function(){return t},n}}}var lb,hb,pb,db,vb,yb={"-":"",_:" ",0:"0"},bb=/^\s*\d+/,gb=/^%/,_b=/[\\^$*+?|[\]().{}]/g;function mb(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function xb(t){return t.replace(_b,"\\$&")}function wb(t){return new RegExp("^(?:"+t.map(xb).join("|")+")","i")}function Sb(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Mb(t,n,e){var r=bb.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Tb(t,n,e){var r=bb.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Nb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Eb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Ab(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function kb(t,n,e){var r=bb.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Cb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Ib(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Fb(t,n,e){var r=bb.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Pb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function zb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function jb(t,n,e){var r=bb.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Ob(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Lb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Db(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Rb(t,n,e){var r=bb.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Vb(t,n,e){var r=bb.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Bb(t,n,e){var r=gb.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Ub(t,n,e){var r=bb.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function qb(t,n,e){var r=bb.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Zb(t,n){return mb(t.getDate(),n,2)}function Yb(t,n){return mb(t.getHours(),n,2)}function Wb(t,n){return mb(t.getHours()%12||12,n,2)}function Hb(t,n){return mb(1+Ny.count(ty(t),t),n,3)}function Xb(t,n){return mb(t.getMilliseconds(),n,3)}function $b(t,n){return Xb(t,n)+"000"}function Gb(t,n){return mb(t.getMonth()+1,n,2)}function Kb(t,n){return mb(t.getMinutes(),n,2)}function Qb(t,n){return mb(t.getSeconds(),n,2)}function Jb(t){var n=t.getDay();return 0===n?7:n}function tg(t,n){return mb(ly.count(ty(t)-1,t),n,2)}function ng(t,n){var e=t.getDay();return t=e>=4||0===e?vy(t):vy.ceil(t),mb(vy.count(ty(t),t)+(4===ty(t).getDay()),n,2)}function eg(t){return t.getDay()}function rg(t,n){return mb(hy.count(ty(t)-1,t),n,2)}function ig(t,n){return mb(t.getFullYear()%100,n,2)}function og(t,n){return mb(t.getFullYear()%1e4,n,4)}function ug(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+mb(n/60|0,"0",2)+mb(n%60,"0",2)}function ag(t,n){return mb(t.getUTCDate(),n,2)}function cg(t,n){return mb(t.getUTCHours(),n,2)}function sg(t,n){return mb(t.getUTCHours()%12||12,n,2)}function fg(t,n){return mb(1+eb.count(ob(t),t),n,3)}function lg(t,n){return mb(t.getUTCMilliseconds(),n,3)}function hg(t,n){return lg(t,n)+"000"}function pg(t,n){return mb(t.getUTCMonth()+1,n,2)}function dg(t,n){return mb(t.getUTCMinutes(),n,2)}function vg(t,n){return mb(t.getUTCSeconds(),n,2)}function yg(t){var n=t.getUTCDay();return 0===n?7:n}function bg(t,n){return mb(By.count(ob(t)-1,t),n,2)}function gg(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Yy(t):Yy.ceil(t),mb(Yy.count(ob(t),t)+(4===ob(t).getUTCDay()),n,2)}function _g(t){return t.getUTCDay()}function mg(t,n){return mb(Uy.count(ob(t)-1,t),n,2)}function xg(t,n){return mb(t.getUTCFullYear()%100,n,2)}function wg(t,n){return mb(t.getUTCFullYear()%1e4,n,4)}function Sg(){return"+0000"}function Mg(){return"%"}function Tg(t){return+t}function Ng(t){return Math.floor(+t/1e3)}function Eg(t){return lb=fb(t),hb=lb.format,pb=lb.parse,db=lb.utcFormat,vb=lb.utcParse,lb}Eg({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Ag=31536e6;function kg(t){return new Date(t)}function Cg(t){return t instanceof Date?+t:+new Date(+t)}function Ig(t,n,e,r,i,u,a,c,s){var f=Sv(yv,yv),l=f.invert,h=f.domain,p=s(".%L"),d=s(":%S"),v=s("%I:%M"),y=s("%I %p"),b=s("%a %d"),g=s("%b %d"),_=s("%B"),m=s("%Y"),x=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[u,1,6e4],[u,5,3e5],[u,15,9e5],[u,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,Ag]];function w(o){return(a(o)<o?p:u(o)<o?d:i(o)<o?v:r(o)<o?y:n(o)<o?e(o)<o?b:g:t(o)<o?_:m)(o)}function S(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=o((function(t){return t[2]})).right(x,u);a===x.length?(i=k(e/Ag,r/Ag,n),n=t):a?(i=(a=x[u/x[a-1][2]<x[a][2]/u?a-1:a])[1],n=a[0]):(i=Math.max(k(e,r,n),1),n=c)}return null==i?n:n.every(i)}return f.invert=function(t){return new Date(l(t))},f.domain=function(t){return arguments.length?h(av.call(t,Cg)):h().map(kg)},f.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=S(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},f.tickFormat=function(t,n){return null==n?w:s(n)},f.nice=function(t,n){var e=h();return(t=S(t,e[0],e[e.length-1],n))?h(Av(e,t)):f},f.copy=function(){return xv(f,Ig(t,n,e,r,i,u,a,c,s))},f}function Fg(){return iv.apply(Ig(ty,ry,ly,Ny,ky,Fy,jy,Dy,hb).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}var Pg=Qv((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));const zg=Pg;var jg=Pg.range,Og=Qv((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+n*ay)}),(function(t,n){return(n-t)/ay}),(function(t){return t.getUTCHours()}));const Lg=Og;var Dg=Og.range,Rg=Qv((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*uy)}),(function(t,n){return(n-t)/uy}),(function(t){return t.getUTCMinutes()}));const Vg=Rg;var Bg=Rg.range;function Ug(){return iv.apply(Ig(ob,zg,By,eb,Lg,Vg,jy,Dy,db).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function qg(){var t,n,e,r,i,o=0,u=1,a=yv,c=!1;function s(n){return isNaN(n=+n)?i:a(0===e?.5:(n=(r(n)-t)*e,c?Math.max(0,Math.min(1,n)):n))}return s.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(u=+i[1]),e=t===n?0:1/(n-t),s):[o,u]},s.clamp=function(t){return arguments.length?(c=!!t,s):c},s.interpolator=function(t){return arguments.length?(a=t,s):a},s.unknown=function(t){return arguments.length?(i=t,s):i},function(i){return r=i,t=i(o),n=i(u),e=t===n?0:1/(n-t),s}}function Zg(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function Yg(){var t=Tv(qg()(yv));return t.copy=function(){return Zg(t,Yg())},ov.apply(t,arguments)}function Wg(){var t=jv(qg()).domain([1,10]);return t.copy=function(){return Zg(t,Wg()).base(t.base())},ov.apply(t,arguments)}function Hg(){var t=Rv(qg());return t.copy=function(){return Zg(t,Hg()).constant(t.constant())},ov.apply(t,arguments)}function Xg(){var t=Zv(qg());return t.copy=function(){return Zg(t,Xg()).exponent(t.exponent())},ov.apply(t,arguments)}function $g(){return Xg.apply(null,arguments).exponent(.5)}function Gg(){var t=[],n=yv;function e(e){if(!isNaN(e=+e))return n((s(t,e)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var r,o=0,u=n.length;o<u;++o)null==(r=n[o])||isNaN(r=+r)||t.push(r);return t.sort(i),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Gg(n).domain(t)},ov.apply(e,arguments)}function Kg(){var t,n,e,r,i,o,u,a=0,c=.5,s=1,f=yv,l=!1;function h(t){return isNaN(t=+t)?u:(t=.5+((t=+o(t))-n)*(t<n?r:i),f(l?Math.max(0,Math.min(1,t)):t))}return h.domain=function(u){return arguments.length?(t=o(a=+u[0]),n=o(c=+u[1]),e=o(s=+u[2]),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h):[a,c,s]},h.clamp=function(t){return arguments.length?(l=!!t,h):l},h.interpolator=function(t){return arguments.length?(f=t,h):f},h.unknown=function(t){return arguments.length?(u=t,h):u},function(u){return o=u,t=u(a),n=u(c),e=u(s),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h}}function Qg(){var t=Tv(Kg()(yv));return t.copy=function(){return Zg(t,Qg())},ov.apply(t,arguments)}function Jg(){var t=jv(Kg()).domain([.1,1,10]);return t.copy=function(){return Zg(t,Jg()).base(t.base())},ov.apply(t,arguments)}function t_(){var t=Rv(Kg());return t.copy=function(){return Zg(t,t_()).constant(t.constant())},ov.apply(t,arguments)}function n_(){var t=Zv(Kg());return t.copy=function(){return Zg(t,n_()).exponent(t.exponent())},ov.apply(t,arguments)}function e_(){return n_.apply(null,arguments).exponent(.5)}function r_(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e}const i_=r_("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),o_=r_("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),u_=r_("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),a_=r_("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),c_=r_("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),s_=r_("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),f_=r_("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),l_=r_("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),h_=r_("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),p_=r_("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");function d_(t){return be(t[t.length-1])}var v_=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(r_);const y_=d_(v_);var b_=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(r_);const g_=d_(b_);var __=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(r_);const m_=d_(__);var x_=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(r_);const w_=d_(x_);var S_=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(r_);const M_=d_(S_);var T_=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(r_);const N_=d_(T_);var E_=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(r_);const A_=d_(E_);var k_=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(r_);const C_=d_(k_);var I_=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(r_);const F_=d_(I_);var P_=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(r_);const z_=d_(P_);var j_=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(r_);const O_=d_(j_);var L_=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(r_);const D_=d_(L_);var R_=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(r_);const V_=d_(R_);var B_=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(r_);const U_=d_(B_);var q_=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(r_);const Z_=d_(q_);var Y_=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(r_);const W_=d_(Y_);var H_=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(r_);const X_=d_(H_);var $_=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(r_);const G_=d_($_);var K_=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(r_);const Q_=d_(K_);var J_=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(r_);const tm=d_(J_);var nm=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(r_);const em=d_(nm);var rm=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(r_);const im=d_(rm);var om=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(r_);const um=d_(om);var am=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(r_);const cm=d_(am);var sm=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(r_);const fm=d_(sm);var lm=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(r_);const hm=d_(lm);var pm=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(r_);const dm=d_(pm);function vm(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"}const ym=Vd(Yo(300,.5,0),Yo(-240,.5,1));var bm=Vd(Yo(-100,.75,.35),Yo(80,1.5,.8)),gm=Vd(Yo(260,.75,.35),Yo(80,1.5,.8)),_m=Yo();function mm(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return _m.h=360*t-100,_m.s=1.5-1.5*n,_m.l=.8-.9*n,_m+""}var xm=Qn(),wm=Math.PI/3,Sm=2*Math.PI/3;function Mm(t){var n;return t=(.5-t)*Math.PI,xm.r=255*(n=Math.sin(t))*n,xm.g=255*(n=Math.sin(t+wm))*n,xm.b=255*(n=Math.sin(t+Sm))*n,xm+""}function Tm(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"}function Nm(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}const Em=Nm(r_("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var Am=Nm(r_("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),km=Nm(r_("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Cm=Nm(r_("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Im(t){return Tn(on(t).call(document.documentElement))}var Fm=0;function Pm(){return new zm}function zm(){this._="@"+(++Fm).toString(36)}function jm(t){return"string"==typeof t?new wn([document.querySelectorAll(t)],[document.documentElement]):new wn([null==t?[]:t],xn)}function Om(t,n){null==n&&(n=Ce().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=Ie(t,n[e]);return i}function Lm(t){return function(){return t}}zm.prototype=Pm.prototype={constructor:zm,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Dm=Math.abs,Rm=Math.atan2,Vm=Math.cos,Bm=Math.max,Um=Math.min,qm=Math.sin,Zm=Math.sqrt,Ym=1e-12,Wm=Math.PI,Hm=Wm/2,Xm=2*Wm;function $m(t){return t>1?0:t<-1?Wm:Math.acos(t)}function Gm(t){return t>=1?Hm:t<=-1?-Hm:Math.asin(t)}function Km(t){return t.innerRadius}function Qm(t){return t.outerRadius}function Jm(t){return t.startAngle}function tx(t){return t.endAngle}function nx(t){return t&&t.padAngle}function ex(t,n,e,r,i,o,u,a){var c=e-t,s=r-n,f=u-i,l=a-o,h=l*c-f*s;if(!(h*h<Ym))return[t+(h=(f*(n-o)-l*(t-i))/h)*c,n+h*s]}function rx(t,n,e,r,i,o,u){var a=t-e,c=n-r,s=(u?o:-o)/Zm(a*a+c*c),f=s*c,l=-s*a,h=t+f,p=n+l,d=e+f,v=r+l,y=(h+d)/2,b=(p+v)/2,g=d-h,_=v-p,m=g*g+_*_,x=i-o,w=h*v-d*p,S=(_<0?-1:1)*Zm(Bm(0,x*x*m-w*w)),M=(w*_-g*S)/m,T=(-w*g-_*S)/m,N=(w*_+g*S)/m,E=(-w*g+_*S)/m,A=M-y,k=T-b,C=N-y,I=E-b;return A*A+k*k>C*C+I*I&&(M=N,T=E),{cx:M,cy:T,x01:-f,y01:-l,x11:M*(i/x-1),y11:T*(i/x-1)}}function ix(){var t=Km,n=Qm,e=Lm(0),r=null,i=Jm,o=tx,u=nx,a=null;function c(){var c,s,f=+t.apply(this,arguments),l=+n.apply(this,arguments),h=i.apply(this,arguments)-Hm,p=o.apply(this,arguments)-Hm,d=Dm(p-h),v=p>h;if(a||(a=c=Wi()),l<f&&(s=l,l=f,f=s),l>Ym)if(d>Xm-Ym)a.moveTo(l*Vm(h),l*qm(h)),a.arc(0,0,l,h,p,!v),f>Ym&&(a.moveTo(f*Vm(p),f*qm(p)),a.arc(0,0,f,p,h,v));else{var y,b,g=h,_=p,m=h,x=p,w=d,S=d,M=u.apply(this,arguments)/2,T=M>Ym&&(r?+r.apply(this,arguments):Zm(f*f+l*l)),N=Um(Dm(l-f)/2,+e.apply(this,arguments)),E=N,A=N;if(T>Ym){var k=Gm(T/f*qm(M)),C=Gm(T/l*qm(M));(w-=2*k)>Ym?(m+=k*=v?1:-1,x-=k):(w=0,m=x=(h+p)/2),(S-=2*C)>Ym?(g+=C*=v?1:-1,_-=C):(S=0,g=_=(h+p)/2)}var I=l*Vm(g),F=l*qm(g),P=f*Vm(x),z=f*qm(x);if(N>Ym){var j,O=l*Vm(_),L=l*qm(_),D=f*Vm(m),R=f*qm(m);if(d<Wm&&(j=ex(I,F,D,R,O,L,P,z))){var V=I-j[0],B=F-j[1],U=O-j[0],q=L-j[1],Z=1/qm($m((V*U+B*q)/(Zm(V*V+B*B)*Zm(U*U+q*q)))/2),Y=Zm(j[0]*j[0]+j[1]*j[1]);E=Um(N,(f-Y)/(Z-1)),A=Um(N,(l-Y)/(Z+1))}}S>Ym?A>Ym?(y=rx(D,R,I,F,l,A,v),b=rx(O,L,P,z,l,A,v),a.moveTo(y.cx+y.x01,y.cy+y.y01),A<N?a.arc(y.cx,y.cy,A,Rm(y.y01,y.x01),Rm(b.y01,b.x01),!v):(a.arc(y.cx,y.cy,A,Rm(y.y01,y.x01),Rm(y.y11,y.x11),!v),a.arc(0,0,l,Rm(y.cy+y.y11,y.cx+y.x11),Rm(b.cy+b.y11,b.cx+b.x11),!v),a.arc(b.cx,b.cy,A,Rm(b.y11,b.x11),Rm(b.y01,b.x01),!v))):(a.moveTo(I,F),a.arc(0,0,l,g,_,!v)):a.moveTo(I,F),f>Ym&&w>Ym?E>Ym?(y=rx(P,z,O,L,f,-E,v),b=rx(I,F,D,R,f,-E,v),a.lineTo(y.cx+y.x01,y.cy+y.y01),E<N?a.arc(y.cx,y.cy,E,Rm(y.y01,y.x01),Rm(b.y01,b.x01),!v):(a.arc(y.cx,y.cy,E,Rm(y.y01,y.x01),Rm(y.y11,y.x11),!v),a.arc(0,0,f,Rm(y.cy+y.y11,y.cx+y.x11),Rm(b.cy+b.y11,b.cx+b.x11),v),a.arc(b.cx,b.cy,E,Rm(b.y11,b.x11),Rm(b.y01,b.x01),!v))):a.arc(0,0,f,x,m,v):a.lineTo(P,z)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Wm/2;return[Vm(r)*e,qm(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:Lm(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Lm(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Lm(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Lm(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Lm(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Lm(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:Lm(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c}function ox(t){this._context=t}function ux(t){return new ox(t)}function ax(t){return t[0]}function cx(t){return t[1]}function sx(){var t=ax,n=cx,e=Lm(!0),r=null,i=ux,o=null;function u(u){var a,c,s,f=u.length,l=!1;for(null==r&&(o=i(s=Wi())),a=0;a<=f;++a)!(a<f&&e(c=u[a],a,u))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,a,u),+n(c,a,u));if(s)return o=null,s+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:Lm(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:Lm(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:Lm(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u}function fx(){var t=ax,n=null,e=Lm(0),r=cx,i=Lm(!0),o=null,u=ux,a=null;function c(c){var s,f,l,h,p,d=c.length,v=!1,y=new Array(d),b=new Array(d);for(null==o&&(a=u(p=Wi())),s=0;s<=d;++s){if(!(s<d&&i(h=c[s],s,c))===v)if(v=!v)f=s,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),l=s-1;l>=f;--l)a.point(y[l],b[l]);a.lineEnd(),a.areaEnd()}v&&(y[s]=+t(h,s,c),b[s]=+e(h,s,c),a.point(n?+n(h,s,c):y[s],r?+r(h,s,c):b[s]))}if(p)return a=null,p+""||null}function s(){return sx().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:Lm(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:Lm(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Lm(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:Lm(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:Lm(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Lm(+t),c):r},c.lineX0=c.lineY0=function(){return s().x(t).y(e)},c.lineY1=function(){return s().x(t).y(r)},c.lineX1=function(){return s().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:Lm(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c}function lx(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function hx(t){return t}function px(){var t=hx,n=lx,e=null,r=Lm(0),i=Lm(Xm),o=Lm(0);function u(u){var a,c,s,f,l,h=u.length,p=0,d=new Array(h),v=new Array(h),y=+r.apply(this,arguments),b=Math.min(Xm,Math.max(-Xm,i.apply(this,arguments)-y)),g=Math.min(Math.abs(b)/h,o.apply(this,arguments)),_=g*(b<0?-1:1);for(a=0;a<h;++a)(l=v[d[a]=a]=+t(u[a],a,u))>0&&(p+=l);for(null!=n?d.sort((function(t,e){return n(v[t],v[e])})):null!=e&&d.sort((function(t,n){return e(u[t],u[n])})),a=0,s=p?(b-h*_)/p:0;a<h;++a,y=f)c=d[a],f=y+((l=v[c])>0?l*s:0)+_,v[c]={data:u[c],index:a,value:l,startAngle:y,endAngle:f,padAngle:g};return v}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:Lm(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Lm(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Lm(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Lm(+t),u):o},u}ox.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var dx=yx(ux);function vx(t){this._curve=t}function yx(t){function n(n){return new vx(t(n))}return n._curve=t,n}function bx(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(yx(t)):n()._curve},t}function gx(){return bx(sx().curve(dx))}function _x(){var t=fx().curve(dx),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return bx(e())},delete t.lineX0,t.lineEndAngle=function(){return bx(r())},delete t.lineX1,t.lineInnerRadius=function(){return bx(i())},delete t.lineY0,t.lineOuterRadius=function(){return bx(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(yx(t)):n()._curve},t}function mx(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}vx.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var xx=Array.prototype.slice;function wx(t){return t.source}function Sx(t){return t.target}function Mx(t){var n=wx,e=Sx,r=ax,i=cx,o=null;function u(){var u,a=xx.call(arguments),c=n.apply(this,a),s=e.apply(this,a);if(o||(o=u=Wi()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=s,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:Lm(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:Lm(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function Tx(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function Nx(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function Ex(t,n,e,r,i){var o=mx(n,e),u=mx(n,e=(e+i)/2),a=mx(r,e),c=mx(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function Ax(){return Mx(Tx)}function kx(){return Mx(Nx)}function Cx(){var t=Mx(Ex);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const Ix={draw:function(t,n){var e=Math.sqrt(n/Wm);t.moveTo(e,0),t.arc(0,0,e,0,Xm)}},Fx={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}};var Px=Math.sqrt(1/3),zx=2*Px;const jx={draw:function(t,n){var e=Math.sqrt(n/zx),r=e*Px;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}};var Ox=Math.sin(Wm/10)/Math.sin(7*Wm/10),Lx=Math.sin(Xm/10)*Ox,Dx=-Math.cos(Xm/10)*Ox;const Rx={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=Lx*e,i=Dx*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=Xm*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},Vx={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}};var Bx=Math.sqrt(3);const Ux={draw:function(t,n){var e=-Math.sqrt(n/(3*Bx));t.moveTo(0,2*e),t.lineTo(-Bx*e,-e),t.lineTo(Bx*e,-e),t.closePath()}};var qx=-.5,Zx=Math.sqrt(3)/2,Yx=1/Math.sqrt(12),Wx=3*(Yx/2+1);const Hx={draw:function(t,n){var e=Math.sqrt(n/Wx),r=e/2,i=e*Yx,o=r,u=e*Yx+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(qx*r-Zx*i,Zx*r+qx*i),t.lineTo(qx*o-Zx*u,Zx*o+qx*u),t.lineTo(qx*a-Zx*c,Zx*a+qx*c),t.lineTo(qx*r+Zx*i,qx*i-Zx*r),t.lineTo(qx*o+Zx*u,qx*u-Zx*o),t.lineTo(qx*a+Zx*c,qx*c-Zx*a),t.closePath()}};var Xx=[Ix,Fx,jx,Vx,Rx,Ux,Hx];function $x(){var t=Lm(Ix),n=Lm(64),e=null;function r(){var r;if(e||(e=r=Wi()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:Lm(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:Lm(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r}function Gx(){}function Kx(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Qx(t){this._context=t}function Jx(t){return new Qx(t)}function tw(t){this._context=t}function nw(t){return new tw(t)}function ew(t){this._context=t}function rw(t){return new ew(t)}function iw(t,n){this._basis=new Qx(t),this._beta=n}Qx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Kx(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Kx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},tw.prototype={areaStart:Gx,areaEnd:Gx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Kx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},ew.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Kx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},iw.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};const ow=function t(n){function e(t){return 1===n?new Qx(t):new iw(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function uw(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function aw(t,n){this._context=t,this._k=(1-n)/6}aw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:uw(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:uw(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const cw=function t(n){function e(t){return new aw(t,n)}return e.tension=function(n){return t(+n)},e}(0);function sw(t,n){this._context=t,this._k=(1-n)/6}sw.prototype={areaStart:Gx,areaEnd:Gx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:uw(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const fw=function t(n){function e(t){return new sw(t,n)}return e.tension=function(n){return t(+n)},e}(0);function lw(t,n){this._context=t,this._k=(1-n)/6}lw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:uw(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const hw=function t(n){function e(t){return new lw(t,n)}return e.tension=function(n){return t(+n)},e}(0);function pw(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>Ym){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>Ym){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,f=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*s+t._x1*t._l23_2a-n*t._l12_2a)/f,u=(u*s+t._y1*t._l23_2a-e*t._l12_2a)/f}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function dw(t,n){this._context=t,this._alpha=n}dw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:pw(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const vw=function t(n){function e(t){return n?new dw(t,n):new aw(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function yw(t,n){this._context=t,this._alpha=n}yw.prototype={areaStart:Gx,areaEnd:Gx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:pw(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const bw=function t(n){function e(t){return n?new yw(t,n):new sw(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function gw(t,n){this._context=t,this._alpha=n}gw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:pw(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const _w=function t(n){function e(t){return n?new gw(t,n):new lw(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function mw(t){this._context=t}function xw(t){return new mw(t)}function ww(t){return t<0?-1:1}function Sw(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(ww(o)+ww(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function Mw(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Tw(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Nw(t){this._context=t}function Ew(t){this._context=new Aw(t)}function Aw(t){this._context=t}function kw(t){return new Nw(t)}function Cw(t){return new Ew(t)}function Iw(t){this._context=t}function Fw(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function Pw(t){return new Iw(t)}function zw(t,n){this._context=t,this._t=n}function jw(t){return new zw(t,.5)}function Ow(t){return new zw(t,0)}function Lw(t){return new zw(t,1)}function Dw(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function Rw(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}function Vw(t,n){return t[n]}function Bw(){var t=Lm([]),n=Rw,e=Dw,r=Vw;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,s=a.length,f=new Array(s);for(o=0;o<s;++o){for(var l,h=a[o],p=f[o]=new Array(c),d=0;d<c;++d)p[d]=l=[0,+r(i[d],h,d,i)],l.data=i[d];p.key=h}for(o=0,u=n(f);o<s;++o)f[u[o]].index=o;return e(f,u),f}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:Lm(xx.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:Lm(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Rw:"function"==typeof t?t:Lm(xx.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?Dw:t,i):e},i}function Uw(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}Dw(t,n)}}function qw(t,n){if((a=t.length)>0)for(var e,r,i,o,u,a,c=0,s=t[n[0]].length;c<s;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):(r[0]=0,r[1]=i)}function Zw(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}Dw(t,n)}}function Yw(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,s=0;a<i;++a){for(var f=t[n[a]],l=f[u][1]||0,h=(l-(f[u-1][1]||0))/2,p=0;p<a;++p){var d=t[n[p]];h+=(d[u][1]||0)-(d[u-1][1]||0)}c+=l,s+=h*l}e[u-1][1]+=e[u-1][0]=o,c&&(o-=s/c)}e[u-1][1]+=e[u-1][0]=o,Dw(t,n)}}function Ww(t){var n=t.map(Hw);return Rw(t).sort((function(t,e){return n[t]-n[e]}))}function Hw(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}function Xw(t){var n=t.map($w);return Rw(t).sort((function(t,e){return n[t]-n[e]}))}function $w(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function Gw(t){return Xw(t).reverse()}function Kw(t){var n,e,r=t.length,i=t.map($w),o=Ww(t),u=0,a=0,c=[],s=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],s.push(e));return s.reverse().concat(c)}function Qw(t){return Rw(t).reverse()}mw.prototype={areaStart:Gx,areaEnd:Gx,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},Nw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Tw(this,this._t0,Mw(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Tw(this,Mw(this,e=Sw(this,t,n)),e);break;default:Tw(this,this._t0,e=Sw(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Ew.prototype=Object.create(Nw.prototype)).point=function(t,n){Nw.prototype.point.call(this,n,t)},Aw.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},Iw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Fw(t),i=Fw(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},zw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var Jw="%Y-%m-%dT%H:%M:%S.%LZ";const tS=Date.prototype.toISOString?function(t){return t.toISOString()}:db(Jw),nS=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:vb(Jw);function eS(t,n,e){var r=new We,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?Ze():+e,r.restart((function o(u){u+=i,r.restart(o,i+=n,e),t(u)}),n,e),r)}function rS(t){return function(){return t}}function iS(t){return t[0]}function oS(t){return t[1]}function uS(){this._=null}function aS(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function cS(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function sS(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function fS(t){for(;t.L;)t=t.L;return t}uS.prototype={constructor:uS,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=fS(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(cS(this,e),e=(t=e).U),e.C=!1,r.C=!0,sS(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(sS(this,e),e=(t=e).U),e.C=!1,r.C=!0,cS(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?fS(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,cS(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,sS(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,cS(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,sS(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,cS(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,sS(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};const lS=uS;function hS(t,n,e,r){var i=[null,null],o=OS.push(i)-1;return i.left=t,i.right=n,e&&dS(i,t,n,e),r&&dS(i,n,t,r),zS[t.index].halfedges.push(o),zS[n.index].halfedges.push(o),i}function pS(t,n,e){var r=[n,e];return r.left=t,r}function dS(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function vS(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],s=u[1],f=0,l=1,h=a[0]-c,p=a[1]-s;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<f)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>f&&(f=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>f&&(f=o)}else if(h>0){if(o<f)return;o<l&&(l=o)}if(o=e-s,p||!(o>0)){if(o/=p,p<0){if(o<f)return;o<l&&(l=o)}else if(p>0){if(o>l)return;o>f&&(f=o)}if(o=i-s,p||!(o<0)){if(o/=p,p<0){if(o>l)return;o>f&&(f=o)}else if(p>0){if(o<f)return;o<l&&(l=o)}return!(f>0||l<1)||(f>0&&(t[0]=[c+f*h,s+f*p]),l<1&&(t[1]=[c+l*h,s+l*p]),!0)}}}}}function yS(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],s=t.left,f=t.right,l=s[0],h=s[1],p=f[0],d=f[1],v=(l+p)/2,y=(h+d)/2;if(d===h){if(v<n||v>=r)return;if(l>p){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(a=y-(u=(l-p)/(d-h))*v,u<-1||u>1)if(l>p){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<d){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function bS(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function gS(t,n){return n[+(n.left!==t.site)]}function _S(t,n){return n[+(n.left===t.site)]}var mS,xS=[];function wS(){aS(this),this.x=this.y=this.arc=this.site=this.cy=null}function SS(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,s=r[1]-a,f=o[0]-u,l=o[1]-a,h=2*(c*l-s*f);if(!(h>=-DS)){var p=c*c+s*s,d=f*f+l*l,v=(l*p-s*d)/h,y=(c*d-f*p)/h,b=xS.pop()||new wS;b.arc=t,b.site=i,b.x=v+u,b.y=(b.cy=y+a)+Math.sqrt(v*v+y*y),t.circle=b;for(var g=null,_=jS._;_;)if(b.y<_.y||b.y===_.y&&b.x<=_.x){if(!_.L){g=_.P;break}_=_.L}else{if(!_.R){g=_;break}_=_.R}jS.insert(g,b),g||(mS=b)}}}}function MS(t){var n=t.circle;n&&(n.P||(mS=n.N),jS.remove(n),xS.push(n),aS(n),t.circle=null)}var TS=[];function NS(){aS(this),this.edge=this.site=this.circle=null}function ES(t){var n=TS.pop()||new NS;return n.site=t,n}function AS(t){MS(t),PS.remove(t),TS.push(t),aS(t)}function kS(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];AS(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<LS&&Math.abs(r-c.circle.cy)<LS;)o=c.P,a.unshift(c),AS(c),c=o;a.unshift(c),MS(c);for(var s=u;s.circle&&Math.abs(e-s.circle.x)<LS&&Math.abs(r-s.circle.cy)<LS;)u=s.N,a.push(s),AS(s),s=u;a.push(s),MS(s);var f,l=a.length;for(f=1;f<l;++f)s=a[f],c=a[f-1],dS(s.edge,c.site,s.site,i);c=a[0],(s=a[l-1]).edge=hS(c.site,s.site,null,i),SS(c),SS(s)}function CS(t){for(var n,e,r,i,o=t[0],u=t[1],a=PS._;a;)if((r=IS(a,u)-o)>LS)a=a.L;else{if(!((i=o-FS(a,u))>LS)){r>-LS?(n=a.P,e=a):i>-LS?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){zS[t.index]={site:t,halfedges:[]}}(t);var c=ES(t);if(PS.insert(n,c),n||e){if(n===e)return MS(n),e=ES(n.site),PS.insert(c,e),c.edge=e.edge=hS(n.site,c.site),SS(n),void SS(e);if(e){MS(n),MS(e);var s=n.site,f=s[0],l=s[1],h=t[0]-f,p=t[1]-l,d=e.site,v=d[0]-f,y=d[1]-l,b=2*(h*y-p*v),g=h*h+p*p,_=v*v+y*y,m=[(y*g-p*_)/b+f,(h*_-v*g)/b+l];dS(e.edge,s,d,m),c.edge=hS(s,t,null,m),e.edge=hS(t,d,null,m),SS(n),SS(e)}else c.edge=hS(n.site,c.site)}}function IS(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],s=c-n;if(!s)return a;var f=a-r,l=1/o-1/s,h=f/s;return l?(-h+Math.sqrt(h*h-2*l*(f*f/(-2*s)-c+s/2+i-o/2)))/l+r:(r+a)/2}function FS(t,n){var e=t.N;if(e)return IS(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var PS,zS,jS,OS,LS=1e-6,DS=1e-12;function RS(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function VS(t,n){return n[1]-t[1]||n[0]-t[0]}function BS(t,n){var e,r,i,o=t.sort(VS).pop();for(OS=[],zS=new Array(t.length),PS=new lS,jS=new lS;;)if(i=mS,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(CS(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;kS(i.arc)}if(function(){for(var t,n,e,r,i=0,o=zS.length;i<o;++i)if((t=zS[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=bS(t,OS[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],s=+n[1][1];!function(t,n,e,r){for(var i,o=OS.length;o--;)yS(i=OS[o],t,n,e,r)&&vS(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>LS||Math.abs(i[0][1]-i[1][1])>LS)||delete OS[o]}(u,a,c,s),function(t,n,e,r){var i,o,u,a,c,s,f,l,h,p,d,v,y=zS.length,b=!0;for(i=0;i<y;++i)if(o=zS[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)OS[c[a]]||c.splice(a,1);for(a=0,s=c.length;a<s;)d=(p=_S(o,OS[c[a]]))[0],v=p[1],l=(f=gS(o,OS[c[++a%s]]))[0],h=f[1],(Math.abs(d-l)>LS||Math.abs(v-h)>LS)&&(c.splice(a,0,OS.push(pS(u,p,Math.abs(d-t)<LS&&r-v>LS?[t,Math.abs(l-t)<LS?h:r]:Math.abs(v-r)<LS&&e-d>LS?[Math.abs(h-r)<LS?l:e,r]:Math.abs(d-e)<LS&&v-n>LS?[e,Math.abs(l-e)<LS?h:n]:Math.abs(v-n)<LS&&d-t>LS?[Math.abs(h-n)<LS?l:t,n]:null))-1),++s);s&&(b=!1)}if(b){var g,_,m,x=1/0;for(i=0,b=null;i<y;++i)(o=zS[i])&&(m=(g=(u=o.site)[0]-t)*g+(_=u[1]-n)*_)<x&&(x=m,b=o);if(b){var w=[t,n],S=[t,r],M=[e,r],T=[e,n];b.halfedges.push(OS.push(pS(u=b.site,w,S))-1,OS.push(pS(u,S,M))-1,OS.push(pS(u,M,T))-1,OS.push(pS(u,T,w))-1)}}for(i=0;i<y;++i)(o=zS[i])&&(o.halfedges.length||delete zS[i])}(u,a,c,s)}this.edges=OS,this.cells=zS,PS=jS=OS=zS=null}function US(){var t=iS,n=oS,e=null;function r(r){return new BS(r.map((function(e,i){var o=[Math.round(t(e,i,r)/LS)*LS,Math.round(n(e,i,r)/LS)*LS];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:rS(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:rS(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r}function qS(t){return function(){return t}}function ZS(t,n,e){this.target=t,this.type=n,this.transform=e}function YS(t,n,e){this.k=t,this.x=n,this.y=e}BS.prototype={constructor:BS,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return gS(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a=e.site,c=-1,s=n[i[o-1]],f=s.left===a?s.right:s.left;++c<o;)u=f,f=(s=n[i[c]]).left===a?s.right:s.left,u&&f&&r<u.index&&r<f.index&&RS(a,u,f)<0&&t.push([a.data,u.data,f.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],s=n-i.site[1],f=c*c+s*s;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],s=n-a[1],l=c*c+s*s;l<f&&(f=l,u=a.index)}}))}while(null!==u);return o._found=r,null==e||f<=e*e?i.site:null}},YS.prototype={constructor:YS,scale:function(t){return 1===t?this:new YS(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new YS(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var WS=new YS(1,0,0);function HS(t){for(;!t.__zoom;)if(!(t=t.parentNode))return WS;return t.__zoom}function XS(){ln.stopImmediatePropagation()}function $S(){ln.preventDefault(),ln.stopImmediatePropagation()}function GS(){return!ln.ctrlKey&&!ln.button}function KS(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function QS(){return this.__zoom||WS}function JS(){return-ln.deltaY*(1===ln.deltaMode?.05:ln.deltaMode?1:.002)}function tM(){return navigator.maxTouchPoints||"ontouchstart"in this}function nM(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],u=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),u>o?(o+u)/2:Math.min(0,o)||Math.max(0,u))}function eM(){var t,n,e=GS,r=KS,i=nM,o=JS,u=tM,a=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],s=250,f=Cd,l=ht("start","zoom","end"),h=500,p=0;function d(t){t.property("__zoom",QS).on("wheel.zoom",x).on("mousedown.zoom",w).on("dblclick.zoom",S).filter(u).on("touchstart.zoom",M).on("touchmove.zoom",T).on("touchend.zoom touchcancel.zoom",N).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function v(t,n){return(n=Math.max(a[0],Math.min(a[1],n)))===t.k?t:new YS(n,t.x,t.y)}function y(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new YS(t.k,r,i)}function b(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function g(t,n,e){t.on("start.zoom",(function(){_(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){_(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,o=_(t,i),u=r.apply(t,i),a=null==e?b(u):"function"==typeof e?e.apply(t,i):e,c=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),s=t.__zoom,l="function"==typeof n?n.apply(t,i):n,h=f(s.invert(a).concat(c/s.k),l.invert(a).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=h(t),e=c/n[2];t=new YS(e,a[0]-n[0]*e,a[1]-n[1]*e)}o.zoom(null,t)}}))}function _(t,n,e){return!e&&t.__zooming||new m(t,n)}function m(t,n){this.that=t,this.args=n,this.active=0,this.extent=r.apply(t,n),this.taps=0}function x(){if(e.apply(this,arguments)){var t=_(this,arguments),n=this.__zoom,r=Math.max(a[0],Math.min(a[1],n.k*Math.pow(2,o.apply(this,arguments)))),u=Pe(this);if(t.wheel)t.mouse[0][0]===u[0]&&t.mouse[0][1]===u[1]||(t.mouse[1]=n.invert(t.mouse[0]=u)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[u,n.invert(u)],or(this),t.start()}$S(),t.wheel=setTimeout(s,150),t.zoom("mouse",i(y(v(n,r),t.mouse[0],t.mouse[1]),t.extent,c))}function s(){t.wheel=null,t.end()}}function w(){if(!n&&e.apply(this,arguments)){var t=_(this,arguments,!0),r=Tn(ln.view).on("mousemove.zoom",s,!0).on("mouseup.zoom",f,!0),o=Pe(this),u=ln.clientX,a=ln.clientY;An(ln.view),XS(),t.mouse=[o,this.__zoom.invert(o)],or(this),t.start()}function s(){if($S(),!t.moved){var n=ln.clientX-u,e=ln.clientY-a;t.moved=n*n+e*e>p}t.zoom("mouse",i(y(t.that.__zoom,t.mouse[0]=Pe(t.that),t.mouse[1]),t.extent,c))}function f(){r.on("mousemove.zoom mouseup.zoom",null),kn(ln.view,t.moved),$S(),t.end()}}function S(){if(e.apply(this,arguments)){var t=this.__zoom,n=Pe(this),o=t.invert(n),u=t.k*(ln.shiftKey?.5:2),a=i(y(v(t,u),n,o),r.apply(this,arguments),c);$S(),s>0?Tn(this).transition().duration(s).call(g,a,n):Tn(this).call(d.transform,a)}}function M(){if(e.apply(this,arguments)){var n,r,i,o,u=ln.touches,a=u.length,c=_(this,arguments,ln.changedTouches.length===a);for(XS(),r=0;r<a;++r)o=[o=Fe(this,u,(i=u[r]).identifier),this.__zoom.invert(o),i.identifier],c.touch0?c.touch1||c.touch0[2]===o[2]||(c.touch1=o,c.taps=0):(c.touch0=o,n=!0,c.taps=1+!!t);t&&(t=clearTimeout(t)),n&&(c.taps<2&&(t=setTimeout((function(){t=null}),h)),or(this),c.start())}}function T(){if(this.__zooming){var n,e,r,o,u=_(this,arguments),a=ln.changedTouches,s=a.length;for($S(),t&&(t=clearTimeout(t)),u.taps=0,n=0;n<s;++n)r=Fe(this,a,(e=a[n]).identifier),u.touch0&&u.touch0[2]===e.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===e.identifier&&(u.touch1[0]=r);if(e=u.that.__zoom,u.touch1){var f=u.touch0[0],l=u.touch0[1],h=u.touch1[0],p=u.touch1[1],d=(d=h[0]-f[0])*d+(d=h[1]-f[1])*d,b=(b=p[0]-l[0])*b+(b=p[1]-l[1])*b;e=v(e,Math.sqrt(d/b)),r=[(f[0]+h[0])/2,(f[1]+h[1])/2],o=[(l[0]+p[0])/2,(l[1]+p[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],o=u.touch0[1]}u.zoom("touch",i(y(e,r,o),u.extent,c))}}function N(){if(this.__zooming){var t,e,r=_(this,arguments),i=ln.changedTouches,o=i.length;for(XS(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),h),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var u=Tn(this).on("dblclick.zoom");u&&u.apply(this,arguments)}}}return d.transform=function(t,n,e){var r=t.selection?t.selection():t;r.property("__zoom",QS),t!==r?g(t,n,e):r.interrupt().each((function(){_(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},d.scaleBy=function(t,n,e){d.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}),e)},d.scaleTo=function(t,n,e){d.transform(t,(function(){var t=r.apply(this,arguments),o=this.__zoom,u=null==e?b(t):"function"==typeof e?e.apply(this,arguments):e,a=o.invert(u),s="function"==typeof n?n.apply(this,arguments):n;return i(y(v(o,s),u,a),t,c)}),e)},d.translateBy=function(t,n,e){d.transform(t,(function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments),c)}))},d.translateTo=function(t,n,e,o){d.transform(t,(function(){var t=r.apply(this,arguments),u=this.__zoom,a=null==o?b(t):"function"==typeof o?o.apply(this,arguments):o;return i(WS.translate(a[0],a[1]).scale(u.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)}),o)},m.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){bn(new ZS(d,t,this.that.__zoom),l.apply,l,[t,this.that,this.args])}},d.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:qS(+t),d):o},d.filter=function(t){return arguments.length?(e="function"==typeof t?t:qS(!!t),d):e},d.touchable=function(t){return arguments.length?(u="function"==typeof t?t:qS(!!t),d):u},d.extent=function(t){return arguments.length?(r="function"==typeof t?t:qS([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),d):r},d.scaleExtent=function(t){return arguments.length?(a[0]=+t[0],a[1]=+t[1],d):[a[0],a[1]]},d.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],d):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},d.constrain=function(t){return arguments.length?(i=t,d):i},d.duration=function(t){return arguments.length?(s=+t,d):s},d.interpolate=function(t){return arguments.length?(f=t,d):f},d.on=function(){var t=l.on.apply(l,arguments);return t===l?d:t},d.clickDistance=function(t){return arguments.length?(p=(t=+t)*t,d):Math.sqrt(p)},d}HS.prototype=YS.prototype},6486:function(t,n,e){var r;t=e.nmd(t),function(){var i,o="Expected a function",u="__lodash_hash_undefined__",a="__lodash_placeholder__",c=32,s=128,f=1/0,l=9007199254740991,h=NaN,p=4294967295,d=[["ary",s],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",c],["partialRight",64],["rearg",256]],v="[object Arguments]",y="[object Array]",b="[object Boolean]",g="[object Date]",_="[object Error]",m="[object Function]",x="[object GeneratorFunction]",w="[object Map]",S="[object Number]",M="[object Object]",T="[object Promise]",N="[object RegExp]",E="[object Set]",A="[object String]",k="[object Symbol]",C="[object WeakMap]",I="[object ArrayBuffer]",F="[object DataView]",P="[object Float32Array]",z="[object Float64Array]",j="[object Int8Array]",O="[object Int16Array]",L="[object Int32Array]",D="[object Uint8Array]",R="[object Uint8ClampedArray]",V="[object Uint16Array]",B="[object Uint32Array]",U=/\b__p \+= '';/g,q=/\b(__p \+=) '' \+/g,Z=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Y=/&(?:amp|lt|gt|quot|#39);/g,W=/[&<>"']/g,H=RegExp(Y.source),X=RegExp(W.source),$=/<%-([\s\S]+?)%>/g,G=/<%([\s\S]+?)%>/g,K=/<%=([\s\S]+?)%>/g,Q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,J=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,nt=/[\\^$.*+?()[\]{}|]/g,et=RegExp(nt.source),rt=/^\s+|\s+$/g,it=/^\s+/,ot=/\s+$/,ut=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,at=/\{\n\/\* \[wrapped with (.+)\] \*/,ct=/,? & /,st=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ft=/\\(\\)?/g,lt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ht=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,dt=/^0b[01]+$/i,vt=/^\[object .+?Constructor\]$/,yt=/^0o[0-7]+$/i,bt=/^(?:0|[1-9]\d*)$/,gt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,_t=/($^)/,mt=/['\n\r\u2028\u2029\\]/g,xt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",wt="a-z\\xdf-\\xf6\\xf8-\\xff",St="A-Z\\xc0-\\xd6\\xd8-\\xde",Mt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Tt="["+Mt+"]",Nt="["+xt+"]",Et="\\d+",At="["+wt+"]",kt="[^\\ud800-\\udfff"+Mt+Et+"\\u2700-\\u27bf"+wt+St+"]",Ct="\\ud83c[\\udffb-\\udfff]",It="[^\\ud800-\\udfff]",Ft="(?:\\ud83c[\\udde6-\\uddff]){2}",Pt="[\\ud800-\\udbff][\\udc00-\\udfff]",zt="["+St+"]",jt="(?:"+At+"|"+kt+")",Ot="(?:"+zt+"|"+kt+")",Lt="(?:['â](?:d|ll|m|re|s|t|ve))?",Dt="(?:['â](?:D|LL|M|RE|S|T|VE))?",Rt="(?:"+Nt+"|"+Ct+")?",Vt="[\\ufe0e\\ufe0f]?",Bt=Vt+Rt+"(?:\\u200d(?:"+[It,Ft,Pt].join("|")+")"+Vt+Rt+")*",Ut="(?:"+["[\\u2700-\\u27bf]",Ft,Pt].join("|")+")"+Bt,qt="(?:"+[It+Nt+"?",Nt,Ft,Pt,"[\\ud800-\\udfff]"].join("|")+")",Zt=RegExp("['â]","g"),Yt=RegExp(Nt,"g"),Wt=RegExp(Ct+"(?="+Ct+")|"+qt+Bt,"g"),Ht=RegExp([zt+"?"+At+"+"+Lt+"(?="+[Tt,zt,"$"].join("|")+")",Ot+"+"+Dt+"(?="+[Tt,zt+jt,"$"].join("|")+")",zt+"?"+jt+"+"+Lt,zt+"+"+Dt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Et,Ut].join("|"),"g"),Xt=RegExp("[\\u200d\\ud800-\\udfff"+xt+"\\ufe0e\\ufe0f]"),$t=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Gt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Kt=-1,Qt={};Qt[P]=Qt[z]=Qt[j]=Qt[O]=Qt[L]=Qt[D]=Qt[R]=Qt[V]=Qt[B]=!0,Qt[v]=Qt[y]=Qt[I]=Qt[b]=Qt[F]=Qt[g]=Qt[_]=Qt[m]=Qt[w]=Qt[S]=Qt[M]=Qt[N]=Qt[E]=Qt[A]=Qt[C]=!1;var Jt={};Jt[v]=Jt[y]=Jt[I]=Jt[F]=Jt[b]=Jt[g]=Jt[P]=Jt[z]=Jt[j]=Jt[O]=Jt[L]=Jt[w]=Jt[S]=Jt[M]=Jt[N]=Jt[E]=Jt[A]=Jt[k]=Jt[D]=Jt[R]=Jt[V]=Jt[B]=!0,Jt[_]=Jt[m]=Jt[C]=!1;var tn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},nn=parseFloat,en=parseInt,rn="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,on="object"==typeof self&&self&&self.Object===Object&&self,un=rn||on||Function("return this")(),an=n&&!n.nodeType&&n,cn=an&&t&&!t.nodeType&&t,sn=cn&&cn.exports===an,fn=sn&&rn.process,ln=function(){try{return cn&&cn.require&&cn.require("util").types||fn&&fn.binding&&fn.binding("util")}catch(t){}}(),hn=ln&&ln.isArrayBuffer,pn=ln&&ln.isDate,dn=ln&&ln.isMap,vn=ln&&ln.isRegExp,yn=ln&&ln.isSet,bn=ln&&ln.isTypedArray;function gn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function _n(t,n,e,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];n(r,u,e(u),t)}return r}function mn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function xn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function wn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function Sn(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var u=t[e];n(u,e,t)&&(o[i++]=u)}return o}function Mn(t,n){return!(null==t||!t.length)&&zn(t,n,0)>-1}function Tn(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function Nn(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function En(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function An(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}function kn(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function Cn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var In=Dn("length");function Fn(t,n,e){var r;return e(t,(function(t,e,i){if(n(t,e,i))return r=e,!1})),r}function Pn(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function zn(t,n,e){return n==n?function(t,n,e){for(var r=e-1,i=t.length;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):Pn(t,On,e)}function jn(t,n,e,r){for(var i=e-1,o=t.length;++i<o;)if(r(t[i],n))return i;return-1}function On(t){return t!=t}function Ln(t,n){var e=null==t?0:t.length;return e?Bn(t,n)/e:h}function Dn(t){return function(n){return null==n?i:n[t]}}function Rn(t){return function(n){return null==t?i:t[n]}}function Vn(t,n,e,r,i){return i(t,(function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)})),e}function Bn(t,n){for(var e,r=-1,o=t.length;++r<o;){var u=n(t[r]);u!==i&&(e=e===i?u:e+u)}return e}function Un(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function qn(t){return function(n){return t(n)}}function Zn(t,n){return Nn(n,(function(n){return t[n]}))}function Yn(t,n){return t.has(n)}function Wn(t,n){for(var e=-1,r=t.length;++e<r&&zn(n,t[e],0)>-1;);return e}function Hn(t,n){for(var e=t.length;e--&&zn(n,t[e],0)>-1;);return e}function Xn(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}var $n=Rn({Ã:"A",Ã:"A",Ã:"A",Ã:"A",Ã:"A",Ã:"A",Ã :"a",Ã¡:"a",Ã¢:"a",Ã£:"a",Ã¤:"a",Ã¥:"a",Ã:"C",Ã§:"c",Ã:"D",Ã°:"d",Ã:"E",Ã:"E",Ã:"E",Ã:"E",Ã¨:"e",Ã©:"e",Ãª:"e",Ã«:"e",Ã:"I",Ã:"I",Ã:"I",Ã:"I",Ã¬:"i",Ã­:"i",Ã®:"i",Ã¯:"i",Ã:"N",Ã±:"n",Ã:"O",Ã:"O",Ã:"O",Ã:"O",Ã:"O",Ã:"O",Ã²:"o",Ã³:"o",Ã´:"o",Ãµ:"o",Ã¶:"o",Ã¸:"o",Ã:"U",Ã:"U",Ã:"U",Ã:"U",Ã¹:"u",Ãº:"u",Ã»:"u",Ã¼:"u",Ã:"Y",Ã½:"y",Ã¿:"y",Ã:"Ae",Ã¦:"ae",Ã:"Th",Ã¾:"th",Ã:"ss",Ä:"A",Ä:"A",Ä:"A",Ä:"a",Ä:"a",Ä:"a",Ä:"C",Ä:"C",Ä:"C",Ä:"C",Ä:"c",Ä:"c",Ä:"c",Ä:"c",Ä:"D",Ä:"D",Ä:"d",Ä:"d",Ä:"E",Ä:"E",Ä:"E",Ä:"E",Ä:"E",Ä:"e",Ä:"e",Ä:"e",Ä:"e",Ä:"e",Ä:"G",Ä:"G",Ä :"G",Ä¢:"G",Ä:"g",Ä:"g",Ä¡:"g",Ä£:"g",Ä¤:"H",Ä¦:"H",Ä¥:"h",Ä§:"h",Ä¨:"I",Äª:"I",Ä¬:"I",Ä®:"I",Ä°:"I",Ä©:"i",Ä«:"i",Ä­:"i",Ä¯:"i",Ä±:"i",Ä´:"J",Äµ:"j",Ä¶:"K",Ä·:"k",Ä¸:"k",Ä¹:"L",Ä»:"L",Ä½:"L",Ä¿:"L",Å:"L",Äº:"l",Ä¼:"l",Ä¾:"l",Å:"l",Å:"l",Å:"N",Å:"N",Å:"N",Å:"N",Å:"n",Å:"n",Å:"n",Å:"n",Å:"O",Å:"O",Å:"O",Å:"o",Å:"o",Å:"o",Å:"R",Å:"R",Å:"R",Å:"r",Å:"r",Å:"r",Å:"S",Å:"S",Å:"S",Å :"S",Å:"s",Å:"s",Å:"s",Å¡:"s",Å¢:"T",Å¤:"T",Å¦:"T",Å£:"t",Å¥:"t",Å§:"t",Å¨:"U",Åª:"U",Å¬:"U",Å®:"U",Å°:"U",Å²:"U",Å©:"u",Å«:"u",Å­:"u",Å¯:"u",Å±:"u",Å³:"u",Å´:"W",Åµ:"w",Å¶:"Y",Å·:"y",Å¸:"Y",Å¹:"Z",Å»:"Z",Å½:"Z",Åº:"z",Å¼:"z",Å¾:"z",Ä²:"IJ",Ä³:"ij",Å:"Oe",Å:"oe",Å:"'n",Å¿:"s"}),Gn=Rn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Kn(t){return"\\"+tn[t]}function Qn(t){return Xt.test(t)}function Jn(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function te(t,n){return function(e){return t(n(e))}}function ne(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e];u!==n&&u!==a||(t[e]=a,o[i++]=e)}return o}function ee(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function re(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function ie(t){return Qn(t)?function(t){for(var n=Wt.lastIndex=0;Wt.test(t);)++n;return n}(t):In(t)}function oe(t){return Qn(t)?function(t){return t.match(Wt)||[]}(t):function(t){return t.split("")}(t)}var ue=Rn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ae=function t(n){var e,r=(n=null==n?un:ae.defaults(un.Object(),n,ae.pick(un,Gt))).Array,xt=n.Date,wt=n.Error,St=n.Function,Mt=n.Math,Tt=n.Object,Nt=n.RegExp,Et=n.String,At=n.TypeError,kt=r.prototype,Ct=St.prototype,It=Tt.prototype,Ft=n["__core-js_shared__"],Pt=Ct.toString,zt=It.hasOwnProperty,jt=0,Ot=(e=/[^.]+$/.exec(Ft&&Ft.keys&&Ft.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",Lt=It.toString,Dt=Pt.call(Tt),Rt=un._,Vt=Nt("^"+Pt.call(zt).replace(nt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Bt=sn?n.Buffer:i,Ut=n.Symbol,qt=n.Uint8Array,Wt=Bt?Bt.allocUnsafe:i,Xt=te(Tt.getPrototypeOf,Tt),tn=Tt.create,rn=It.propertyIsEnumerable,on=kt.splice,an=Ut?Ut.isConcatSpreadable:i,cn=Ut?Ut.iterator:i,fn=Ut?Ut.toStringTag:i,ln=function(){try{var t=co(Tt,"defineProperty");return t({},"",{}),t}catch(t){}}(),In=n.clearTimeout!==un.clearTimeout&&n.clearTimeout,Rn=xt&&xt.now!==un.Date.now&&xt.now,ce=n.setTimeout!==un.setTimeout&&n.setTimeout,se=Mt.ceil,fe=Mt.floor,le=Tt.getOwnPropertySymbols,he=Bt?Bt.isBuffer:i,pe=n.isFinite,de=kt.join,ve=te(Tt.keys,Tt),ye=Mt.max,be=Mt.min,ge=xt.now,_e=n.parseInt,me=Mt.random,xe=kt.reverse,we=co(n,"DataView"),Se=co(n,"Map"),Me=co(n,"Promise"),Te=co(n,"Set"),Ne=co(n,"WeakMap"),Ee=co(Tt,"create"),Ae=Ne&&new Ne,ke={},Ce=Do(we),Ie=Do(Se),Fe=Do(Me),Pe=Do(Te),ze=Do(Ne),je=Ut?Ut.prototype:i,Oe=je?je.valueOf:i,Le=je?je.toString:i;function De(t){if(na(t)&&!Zu(t)&&!(t instanceof Ue)){if(t instanceof Be)return t;if(zt.call(t,"__wrapped__"))return Ro(t)}return new Be(t)}var Re=function(){function t(){}return function(n){if(!ta(n))return{};if(tn)return tn(n);t.prototype=n;var e=new t;return t.prototype=i,e}}();function Ve(){}function Be(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=i}function Ue(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function qe(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ze(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ye(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function We(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new Ye;++n<e;)this.add(t[n])}function He(t){var n=this.__data__=new Ze(t);this.size=n.size}function Xe(t,n){var e=Zu(t),r=!e&&qu(t),i=!e&&!r&&Xu(t),o=!e&&!r&&!i&&sa(t),u=e||r||i||o,a=u?Un(t.length,Et):[],c=a.length;for(var s in t)!n&&!zt.call(t,s)||u&&("length"==s||i&&("offset"==s||"parent"==s)||o&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||yo(s,c))||a.push(s);return a}function $e(t){var n=t.length;return n?t[Yr(0,n-1)]:i}function Ge(t,n){return Po(Ni(t),or(n,0,t.length))}function Ke(t){return Po(Ni(t))}function Qe(t,n,e){(e!==i&&!Vu(t[n],e)||e===i&&!(n in t))&&rr(t,n,e)}function Je(t,n,e){var r=t[n];zt.call(t,n)&&Vu(r,e)&&(e!==i||n in t)||rr(t,n,e)}function tr(t,n){for(var e=t.length;e--;)if(Vu(t[e][0],n))return e;return-1}function nr(t,n,e,r){return fr(t,(function(t,i,o){n(r,t,e(t),o)})),r}function er(t,n){return t&&Ei(n,Ia(n),t)}function rr(t,n,e){"__proto__"==n&&ln?ln(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function ir(t,n){for(var e=-1,o=n.length,u=r(o),a=null==t;++e<o;)u[e]=a?i:Na(t,n[e]);return u}function or(t,n,e){return t==t&&(e!==i&&(t=t<=e?t:e),n!==i&&(t=t>=n?t:n)),t}function ur(t,n,e,r,o,u){var a,c=1&n,s=2&n,f=4&n;if(e&&(a=o?e(t,r,o,u):e(t)),a!==i)return a;if(!ta(t))return t;var l=Zu(t);if(l){if(a=function(t){var n=t.length,e=new t.constructor(n);return n&&"string"==typeof t[0]&&zt.call(t,"index")&&(e.index=t.index,e.input=t.input),e}(t),!c)return Ni(t,a)}else{var h=lo(t),p=h==m||h==x;if(Xu(t))return mi(t,c);if(h==M||h==v||p&&!o){if(a=s||p?{}:po(t),!c)return s?function(t,n){return Ei(t,fo(t),n)}(t,function(t,n){return t&&Ei(n,Fa(n),t)}(a,t)):function(t,n){return Ei(t,so(t),n)}(t,er(a,t))}else{if(!Jt[h])return o?t:{};a=function(t,n,e){var r,i=t.constructor;switch(n){case I:return xi(t);case b:case g:return new i(+t);case F:return function(t,n){var e=n?xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case P:case z:case j:case O:case L:case D:case R:case V:case B:return wi(t,e);case w:return new i;case S:case A:return new i(t);case N:return function(t){var n=new t.constructor(t.source,ht.exec(t));return n.lastIndex=t.lastIndex,n}(t);case E:return new i;case k:return r=t,Oe?Tt(Oe.call(r)):{}}}(t,h,c)}}u||(u=new He);var d=u.get(t);if(d)return d;u.set(t,a),ua(t)?t.forEach((function(r){a.add(ur(r,n,e,r,t,u))})):ea(t)&&t.forEach((function(r,i){a.set(i,ur(r,n,e,i,t,u))}));var y=l?i:(f?s?no:to:s?Fa:Ia)(t);return mn(y||t,(function(r,i){y&&(r=t[i=r]),Je(a,i,ur(r,n,e,i,t,u))})),a}function ar(t,n,e){var r=e.length;if(null==t)return!r;for(t=Tt(t);r--;){var o=e[r],u=n[o],a=t[o];if(a===i&&!(o in t)||!u(a))return!1}return!0}function cr(t,n,e){if("function"!=typeof t)throw new At(o);return ko((function(){t.apply(i,e)}),n)}function sr(t,n,e,r){var i=-1,o=Mn,u=!0,a=t.length,c=[],s=n.length;if(!a)return c;e&&(n=Nn(n,qn(e))),r?(o=Tn,u=!1):n.length>=200&&(o=Yn,u=!1,n=new We(n));t:for(;++i<a;){var f=t[i],l=null==e?f:e(f);if(f=r||0!==f?f:0,u&&l==l){for(var h=s;h--;)if(n[h]===l)continue t;c.push(f)}else o(n,l,r)||c.push(f)}return c}De.templateSettings={escape:$,evaluate:G,interpolate:K,variable:"",imports:{_:De}},De.prototype=Ve.prototype,De.prototype.constructor=De,Be.prototype=Re(Ve.prototype),Be.prototype.constructor=Be,Ue.prototype=Re(Ve.prototype),Ue.prototype.constructor=Ue,qe.prototype.clear=function(){this.__data__=Ee?Ee(null):{},this.size=0},qe.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},qe.prototype.get=function(t){var n=this.__data__;if(Ee){var e=n[t];return e===u?i:e}return zt.call(n,t)?n[t]:i},qe.prototype.has=function(t){var n=this.__data__;return Ee?n[t]!==i:zt.call(n,t)},qe.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=Ee&&n===i?u:n,this},Ze.prototype.clear=function(){this.__data__=[],this.size=0},Ze.prototype.delete=function(t){var n=this.__data__,e=tr(n,t);return!(e<0||(e==n.length-1?n.pop():on.call(n,e,1),--this.size,0))},Ze.prototype.get=function(t){var n=this.__data__,e=tr(n,t);return e<0?i:n[e][1]},Ze.prototype.has=function(t){return tr(this.__data__,t)>-1},Ze.prototype.set=function(t,n){var e=this.__data__,r=tr(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},Ye.prototype.clear=function(){this.size=0,this.__data__={hash:new qe,map:new(Se||Ze),string:new qe}},Ye.prototype.delete=function(t){var n=uo(this,t).delete(t);return this.size-=n?1:0,n},Ye.prototype.get=function(t){return uo(this,t).get(t)},Ye.prototype.has=function(t){return uo(this,t).has(t)},Ye.prototype.set=function(t,n){var e=uo(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},We.prototype.add=We.prototype.push=function(t){return this.__data__.set(t,u),this},We.prototype.has=function(t){return this.__data__.has(t)},He.prototype.clear=function(){this.__data__=new Ze,this.size=0},He.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},He.prototype.get=function(t){return this.__data__.get(t)},He.prototype.has=function(t){return this.__data__.has(t)},He.prototype.set=function(t,n){var e=this.__data__;if(e instanceof Ze){var r=e.__data__;if(!Se||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new Ye(r)}return e.set(t,n),this.size=e.size,this};var fr=Ci(gr),lr=Ci(_r,!0);function hr(t,n){var e=!0;return fr(t,(function(t,r,i){return e=!!n(t,r,i)})),e}function pr(t,n,e){for(var r=-1,o=t.length;++r<o;){var u=t[r],a=n(u);if(null!=a&&(c===i?a==a&&!ca(a):e(a,c)))var c=a,s=u}return s}function dr(t,n){var e=[];return fr(t,(function(t,r,i){n(t,r,i)&&e.push(t)})),e}function vr(t,n,e,r,i){var o=-1,u=t.length;for(e||(e=vo),i||(i=[]);++o<u;){var a=t[o];n>0&&e(a)?n>1?vr(a,n-1,e,r,i):En(i,a):r||(i[i.length]=a)}return i}var yr=Ii(),br=Ii(!0);function gr(t,n){return t&&yr(t,n,Ia)}function _r(t,n){return t&&br(t,n,Ia)}function mr(t,n){return Sn(n,(function(n){return Ku(t[n])}))}function xr(t,n){for(var e=0,r=(n=yi(n,t)).length;null!=t&&e<r;)t=t[Lo(n[e++])];return e&&e==r?t:i}function wr(t,n,e){var r=n(t);return Zu(t)?r:En(r,e(t))}function Sr(t){return null==t?t===i?"[object Undefined]":"[object Null]":fn&&fn in Tt(t)?function(t){var n=zt.call(t,fn),e=t[fn];try{t[fn]=i;var r=!0}catch(t){}var o=Lt.call(t);return r&&(n?t[fn]=e:delete t[fn]),o}(t):function(t){return Lt.call(t)}(t)}function Mr(t,n){return t>n}function Tr(t,n){return null!=t&&zt.call(t,n)}function Nr(t,n){return null!=t&&n in Tt(t)}function Er(t,n,e){for(var o=e?Tn:Mn,u=t[0].length,a=t.length,c=a,s=r(a),f=1/0,l=[];c--;){var h=t[c];c&&n&&(h=Nn(h,qn(n))),f=be(h.length,f),s[c]=!e&&(n||u>=120&&h.length>=120)?new We(c&&h):i}h=t[0];var p=-1,d=s[0];t:for(;++p<u&&l.length<f;){var v=h[p],y=n?n(v):v;if(v=e||0!==v?v:0,!(d?Yn(d,y):o(l,y,e))){for(c=a;--c;){var b=s[c];if(!(b?Yn(b,y):o(t[c],y,e)))continue t}d&&d.push(y),l.push(v)}}return l}function Ar(t,n,e){var r=null==(t=To(t,n=yi(n,t)))?t:t[Lo(Go(n))];return null==r?i:gn(r,t,e)}function kr(t){return na(t)&&Sr(t)==v}function Cr(t,n,e,r,o){return t===n||(null==t||null==n||!na(t)&&!na(n)?t!=t&&n!=n:function(t,n,e,r,o,u){var a=Zu(t),c=Zu(n),s=a?y:lo(t),f=c?y:lo(n),l=(s=s==v?M:s)==M,h=(f=f==v?M:f)==M,p=s==f;if(p&&Xu(t)){if(!Xu(n))return!1;a=!0,l=!1}if(p&&!l)return u||(u=new He),a||sa(t)?Qi(t,n,e,r,o,u):function(t,n,e,r,i,o,u){switch(e){case F:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case I:return!(t.byteLength!=n.byteLength||!o(new qt(t),new qt(n)));case b:case g:case S:return Vu(+t,+n);case _:return t.name==n.name&&t.message==n.message;case N:case A:return t==n+"";case w:var a=Jn;case E:var c=1&r;if(a||(a=ee),t.size!=n.size&&!c)return!1;var s=u.get(t);if(s)return s==n;r|=2,u.set(t,n);var f=Qi(a(t),a(n),r,i,o,u);return u.delete(t),f;case k:if(Oe)return Oe.call(t)==Oe.call(n)}return!1}(t,n,s,e,r,o,u);if(!(1&e)){var d=l&&zt.call(t,"__wrapped__"),m=h&&zt.call(n,"__wrapped__");if(d||m){var x=d?t.value():t,T=m?n.value():n;return u||(u=new He),o(x,T,e,r,u)}}return!!p&&(u||(u=new He),function(t,n,e,r,o,u){var a=1&e,c=to(t),s=c.length;if(s!=to(n).length&&!a)return!1;for(var f=s;f--;){var l=c[f];if(!(a?l in n:zt.call(n,l)))return!1}var h=u.get(t);if(h&&u.get(n))return h==n;var p=!0;u.set(t,n),u.set(n,t);for(var d=a;++f<s;){var v=t[l=c[f]],y=n[l];if(r)var b=a?r(y,v,l,n,t,u):r(v,y,l,t,n,u);if(!(b===i?v===y||o(v,y,e,r,u):b)){p=!1;break}d||(d="constructor"==l)}if(p&&!d){var g=t.constructor,_=n.constructor;g==_||!("constructor"in t)||!("constructor"in n)||"function"==typeof g&&g instanceof g&&"function"==typeof _&&_ instanceof _||(p=!1)}return u.delete(t),u.delete(n),p}(t,n,e,r,o,u))}(t,n,e,r,Cr,o))}function Ir(t,n,e,r){var o=e.length,u=o,a=!r;if(null==t)return!u;for(t=Tt(t);o--;){var c=e[o];if(a&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++o<u;){var s=(c=e[o])[0],f=t[s],l=c[1];if(a&&c[2]){if(f===i&&!(s in t))return!1}else{var h=new He;if(r)var p=r(f,l,s,t,n,h);if(!(p===i?Cr(l,f,3,r,h):p))return!1}}return!0}function Fr(t){return!(!ta(t)||(n=t,Ot&&Ot in n))&&(Ku(t)?Vt:vt).test(Do(t));var n}function Pr(t){return"function"==typeof t?t:null==t?rc:"object"==typeof t?Zu(t)?Dr(t[0],t[1]):Lr(t):hc(t)}function zr(t){if(!xo(t))return ve(t);var n=[];for(var e in Tt(t))zt.call(t,e)&&"constructor"!=e&&n.push(e);return n}function jr(t,n){return t<n}function Or(t,n){var e=-1,i=Wu(t)?r(t.length):[];return fr(t,(function(t,r,o){i[++e]=n(t,r,o)})),i}function Lr(t){var n=ao(t);return 1==n.length&&n[0][2]?So(n[0][0],n[0][1]):function(e){return e===t||Ir(e,t,n)}}function Dr(t,n){return go(t)&&wo(n)?So(Lo(t),n):function(e){var r=Na(e,t);return r===i&&r===n?Ea(e,t):Cr(n,r,3)}}function Rr(t,n,e,r,o){t!==n&&yr(n,(function(u,a){if(o||(o=new He),ta(u))!function(t,n,e,r,o,u,a){var c=Eo(t,e),s=Eo(n,e),f=a.get(s);if(f)Qe(t,e,f);else{var l=u?u(c,s,e+"",t,n,a):i,h=l===i;if(h){var p=Zu(s),d=!p&&Xu(s),v=!p&&!d&&sa(s);l=s,p||d||v?Zu(c)?l=c:Hu(c)?l=Ni(c):d?(h=!1,l=mi(s,!0)):v?(h=!1,l=wi(s,!0)):l=[]:ia(s)||qu(s)?(l=c,qu(c)?l=ba(c):ta(c)&&!Ku(c)||(l=po(s))):h=!1}h&&(a.set(s,l),o(l,s,r,u,a),a.delete(s)),Qe(t,e,l)}}(t,n,a,e,Rr,r,o);else{var c=r?r(Eo(t,a),u,a+"",t,n,o):i;c===i&&(c=u),Qe(t,a,c)}}),Fa)}function Vr(t,n){var e=t.length;if(e)return yo(n+=n<0?e:0,e)?t[n]:i}function Br(t,n,e){var r=-1;return n=Nn(n.length?n:[rc],qn(oo())),function(t,n){var r=t.length;for(t.sort((function(t,n){return function(t,n,e){for(var r=-1,i=t.criteria,o=n.criteria,u=i.length,a=e.length;++r<u;){var c=Si(i[r],o[r]);if(c)return r>=a?c:c*("desc"==e[r]?-1:1)}return t.index-n.index}(t,n,e)}));r--;)t[r]=t[r].value;return t}(Or(t,(function(t,e,i){return{criteria:Nn(n,(function(n){return n(t)})),index:++r,value:t}})))}function Ur(t,n,e){for(var r=-1,i=n.length,o={};++r<i;){var u=n[r],a=xr(t,u);e(a,u)&&Gr(o,yi(u,t),a)}return o}function qr(t,n,e,r){var i=r?jn:zn,o=-1,u=n.length,a=t;for(t===n&&(n=Ni(n)),e&&(a=Nn(t,qn(e)));++o<u;)for(var c=0,s=n[o],f=e?e(s):s;(c=i(a,f,c,r))>-1;)a!==t&&on.call(a,c,1),on.call(t,c,1);return t}function Zr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==o){var o=i;yo(i)?on.call(t,i,1):ci(t,i)}}return t}function Yr(t,n){return t+fe(me()*(n-t+1))}function Wr(t,n){var e="";if(!t||n<1||n>l)return e;do{n%2&&(e+=t),(n=fe(n/2))&&(t+=t)}while(n);return e}function Hr(t,n){return Co(Mo(t,n,rc),t+"")}function Xr(t){return $e(Va(t))}function $r(t,n){var e=Va(t);return Po(e,or(n,0,e.length))}function Gr(t,n,e,r){if(!ta(t))return t;for(var o=-1,u=(n=yi(n,t)).length,a=u-1,c=t;null!=c&&++o<u;){var s=Lo(n[o]),f=e;if(o!=a){var l=c[s];(f=r?r(l,s,c):i)===i&&(f=ta(l)?l:yo(n[o+1])?[]:{})}Je(c,s,f),c=c[s]}return t}var Kr=Ae?function(t,n){return Ae.set(t,n),t}:rc,Qr=ln?function(t,n){return ln(t,"toString",{configurable:!0,enumerable:!1,value:tc(n),writable:!0})}:rc;function Jr(t){return Po(Va(t))}function ti(t,n,e){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var u=r(o);++i<o;)u[i]=t[i+n];return u}function ni(t,n){var e;return fr(t,(function(t,r,i){return!(e=n(t,r,i))})),!!e}function ei(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;r<i;){var o=r+i>>>1,u=t[o];null!==u&&!ca(u)&&(e?u<=n:u<n)?r=o+1:i=o}return i}return ri(t,n,rc,e)}function ri(t,n,e,r){n=e(n);for(var o=0,u=null==t?0:t.length,a=n!=n,c=null===n,s=ca(n),f=n===i;o<u;){var l=fe((o+u)/2),h=e(t[l]),p=h!==i,d=null===h,v=h==h,y=ca(h);if(a)var b=r||v;else b=f?v&&(r||p):c?v&&p&&(r||!d):s?v&&p&&!d&&(r||!y):!d&&!y&&(r?h<=n:h<n);b?o=l+1:u=l}return be(u,4294967294)}function ii(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e],a=n?n(u):u;if(!e||!Vu(a,c)){var c=a;o[i++]=0===u?0:u}}return o}function oi(t){return"number"==typeof t?t:ca(t)?h:+t}function ui(t){if("string"==typeof t)return t;if(Zu(t))return Nn(t,ui)+"";if(ca(t))return Le?Le.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ai(t,n,e){var r=-1,i=Mn,o=t.length,u=!0,a=[],c=a;if(e)u=!1,i=Tn;else if(o>=200){var s=n?null:Wi(t);if(s)return ee(s);u=!1,i=Yn,c=new We}else c=n?[]:a;t:for(;++r<o;){var f=t[r],l=n?n(f):f;if(f=e||0!==f?f:0,u&&l==l){for(var h=c.length;h--;)if(c[h]===l)continue t;n&&c.push(l),a.push(f)}else i(c,l,e)||(c!==a&&c.push(l),a.push(f))}return a}function ci(t,n){return null==(t=To(t,n=yi(n,t)))||delete t[Lo(Go(n))]}function si(t,n,e,r){return Gr(t,n,e(xr(t,n)),r)}function fi(t,n,e,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&n(t[o],o,t););return e?ti(t,r?0:o,r?o+1:i):ti(t,r?o+1:0,r?i:o)}function li(t,n){var e=t;return e instanceof Ue&&(e=e.value()),An(n,(function(t,n){return n.func.apply(n.thisArg,En([t],n.args))}),e)}function hi(t,n,e){var i=t.length;if(i<2)return i?ai(t[0]):[];for(var o=-1,u=r(i);++o<i;)for(var a=t[o],c=-1;++c<i;)c!=o&&(u[o]=sr(u[o]||a,t[c],n,e));return ai(vr(u,1),n,e)}function pi(t,n,e){for(var r=-1,o=t.length,u=n.length,a={};++r<o;){var c=r<u?n[r]:i;e(a,t[r],c)}return a}function di(t){return Hu(t)?t:[]}function vi(t){return"function"==typeof t?t:rc}function yi(t,n){return Zu(t)?t:go(t,n)?[t]:Oo(ga(t))}var bi=Hr;function gi(t,n,e){var r=t.length;return e=e===i?r:e,!n&&e>=r?t:ti(t,n,e)}var _i=In||function(t){return un.clearTimeout(t)};function mi(t,n){if(n)return t.slice();var e=t.length,r=Wt?Wt(e):new t.constructor(e);return t.copy(r),r}function xi(t){var n=new t.constructor(t.byteLength);return new qt(n).set(new qt(t)),n}function wi(t,n){var e=n?xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function Si(t,n){if(t!==n){var e=t!==i,r=null===t,o=t==t,u=ca(t),a=n!==i,c=null===n,s=n==n,f=ca(n);if(!c&&!f&&!u&&t>n||u&&a&&s&&!c&&!f||r&&a&&s||!e&&s||!o)return 1;if(!r&&!u&&!f&&t<n||f&&e&&o&&!r&&!u||c&&e&&o||!a&&o||!s)return-1}return 0}function Mi(t,n,e,i){for(var o=-1,u=t.length,a=e.length,c=-1,s=n.length,f=ye(u-a,0),l=r(s+f),h=!i;++c<s;)l[c]=n[c];for(;++o<a;)(h||o<u)&&(l[e[o]]=t[o]);for(;f--;)l[c++]=t[o++];return l}function Ti(t,n,e,i){for(var o=-1,u=t.length,a=-1,c=e.length,s=-1,f=n.length,l=ye(u-c,0),h=r(l+f),p=!i;++o<l;)h[o]=t[o];for(var d=o;++s<f;)h[d+s]=n[s];for(;++a<c;)(p||o<u)&&(h[d+e[a]]=t[o++]);return h}function Ni(t,n){var e=-1,i=t.length;for(n||(n=r(i));++e<i;)n[e]=t[e];return n}function Ei(t,n,e,r){var o=!e;e||(e={});for(var u=-1,a=n.length;++u<a;){var c=n[u],s=r?r(e[c],t[c],c,e,t):i;s===i&&(s=t[c]),o?rr(e,c,s):Je(e,c,s)}return e}function Ai(t,n){return function(e,r){var i=Zu(e)?_n:nr,o=n?n():{};return i(e,t,oo(r,2),o)}}function ki(t){return Hr((function(n,e){var r=-1,o=e.length,u=o>1?e[o-1]:i,a=o>2?e[2]:i;for(u=t.length>3&&"function"==typeof u?(o--,u):i,a&&bo(e[0],e[1],a)&&(u=o<3?i:u,o=1),n=Tt(n);++r<o;){var c=e[r];c&&t(n,c,r,u)}return n}))}function Ci(t,n){return function(e,r){if(null==e)return e;if(!Wu(e))return t(e,r);for(var i=e.length,o=n?i:-1,u=Tt(e);(n?o--:++o<i)&&!1!==r(u[o],o,u););return e}}function Ii(t){return function(n,e,r){for(var i=-1,o=Tt(n),u=r(n),a=u.length;a--;){var c=u[t?a:++i];if(!1===e(o[c],c,o))break}return n}}function Fi(t){return function(n){var e=Qn(n=ga(n))?oe(n):i,r=e?e[0]:n.charAt(0),o=e?gi(e,1).join(""):n.slice(1);return r[t]()+o}}function Pi(t){return function(n){return An(Ka(qa(n).replace(Zt,"")),t,"")}}function zi(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=Re(t.prototype),r=t.apply(e,n);return ta(r)?r:e}}function ji(t){return function(n,e,r){var o=Tt(n);if(!Wu(n)){var u=oo(e,3);n=Ia(n),e=function(t){return u(o[t],t,o)}}var a=t(n,e,r);return a>-1?o[u?n[a]:a]:i}}function Oi(t){return Ji((function(n){var e=n.length,r=e,u=Be.prototype.thru;for(t&&n.reverse();r--;){var a=n[r];if("function"!=typeof a)throw new At(o);if(u&&!c&&"wrapper"==ro(a))var c=new Be([],!0)}for(r=c?r:e;++r<e;){var s=ro(a=n[r]),f="wrapper"==s?eo(a):i;c=f&&_o(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?c[ro(f[0])].apply(c,f[3]):1==a.length&&_o(a)?c[s]():c.thru(a)}return function(){var t=arguments,r=t[0];if(c&&1==t.length&&Zu(r))return c.plant(r).value();for(var i=0,o=e?n[i].apply(this,t):r;++i<e;)o=n[i].call(this,o);return o}}))}function Li(t,n,e,o,u,a,c,f,l,h){var p=n&s,d=1&n,v=2&n,y=24&n,b=512&n,g=v?i:zi(t);return function i(){for(var s=arguments.length,_=r(s),m=s;m--;)_[m]=arguments[m];if(y)var x=io(i),w=Xn(_,x);if(o&&(_=Mi(_,o,u,y)),a&&(_=Ti(_,a,c,y)),s-=w,y&&s<h){var S=ne(_,x);return Zi(t,n,Li,i.placeholder,e,_,S,f,l,h-s)}var M=d?e:this,T=v?M[t]:t;return s=_.length,f?_=No(_,f):b&&s>1&&_.reverse(),p&&l<s&&(_.length=l),this&&this!==un&&this instanceof i&&(T=g||zi(T)),T.apply(M,_)}}function Di(t,n){return function(e,r){return function(t,n,e,r){return gr(t,(function(t,i,o){n(r,e(t),i,o)})),r}(e,t,n(r),{})}}function Ri(t,n){return function(e,r){var o;if(e===i&&r===i)return n;if(e!==i&&(o=e),r!==i){if(o===i)return r;"string"==typeof e||"string"==typeof r?(e=ui(e),r=ui(r)):(e=oi(e),r=oi(r)),o=t(e,r)}return o}}function Vi(t){return Ji((function(n){return n=Nn(n,qn(oo())),Hr((function(e){var r=this;return t(n,(function(t){return gn(t,r,e)}))}))}))}function Bi(t,n){var e=(n=n===i?" ":ui(n)).length;if(e<2)return e?Wr(n,t):n;var r=Wr(n,se(t/ie(n)));return Qn(n)?gi(oe(r),0,t).join(""):r.slice(0,t)}function Ui(t){return function(n,e,o){return o&&"number"!=typeof o&&bo(n,e,o)&&(e=o=i),n=pa(n),e===i?(e=n,n=0):e=pa(e),function(t,n,e,i){for(var o=-1,u=ye(se((n-t)/(e||1)),0),a=r(u);u--;)a[i?u:++o]=t,t+=e;return a}(n,e,o=o===i?n<e?1:-1:pa(o),t)}}function qi(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=ya(n),e=ya(e)),t(n,e)}}function Zi(t,n,e,r,o,u,a,s,f,l){var h=8&n;n|=h?c:64,4&(n&=~(h?64:c))||(n&=-4);var p=[t,n,o,h?u:i,h?a:i,h?i:u,h?i:a,s,f,l],d=e.apply(i,p);return _o(t)&&Ao(d,p),d.placeholder=r,Io(d,t,n)}function Yi(t){var n=Mt[t];return function(t,e){if(t=ya(t),(e=null==e?0:be(da(e),292))&&pe(t)){var r=(ga(t)+"e").split("e");return+((r=(ga(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Wi=Te&&1/ee(new Te([,-0]))[1]==f?function(t){return new Te(t)}:cc;function Hi(t){return function(n){var e=lo(n);return e==w?Jn(n):e==E?re(n):function(t,n){return Nn(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function Xi(t,n,e,u,f,l,h,p){var d=2&n;if(!d&&"function"!=typeof t)throw new At(o);var v=u?u.length:0;if(v||(n&=-97,u=f=i),h=h===i?h:ye(da(h),0),p=p===i?p:da(p),v-=f?f.length:0,64&n){var y=u,b=f;u=f=i}var g=d?i:eo(t),_=[t,n,e,u,f,y,b,l,h,p];if(g&&function(t,n){var e=t[1],r=n[1],i=e|r,o=i<131,u=r==s&&8==e||r==s&&256==e&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!o&&!u)return t;1&r&&(t[2]=n[2],i|=1&e?0:4);var c=n[3];if(c){var f=t[3];t[3]=f?Mi(f,c,n[4]):c,t[4]=f?ne(t[3],a):n[4]}(c=n[5])&&(f=t[5],t[5]=f?Ti(f,c,n[6]):c,t[6]=f?ne(t[5],a):n[6]),(c=n[7])&&(t[7]=c),r&s&&(t[8]=null==t[8]?n[8]:be(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(_,g),t=_[0],n=_[1],e=_[2],u=_[3],f=_[4],!(p=_[9]=_[9]===i?d?0:t.length:ye(_[9]-v,0))&&24&n&&(n&=-25),n&&1!=n)m=8==n||16==n?function(t,n,e){var o=zi(t);return function u(){for(var a=arguments.length,c=r(a),s=a,f=io(u);s--;)c[s]=arguments[s];var l=a<3&&c[0]!==f&&c[a-1]!==f?[]:ne(c,f);return(a-=l.length)<e?Zi(t,n,Li,u.placeholder,i,c,l,i,i,e-a):gn(this&&this!==un&&this instanceof u?o:t,this,c)}}(t,n,p):n!=c&&33!=n||f.length?Li.apply(i,_):function(t,n,e,i){var o=1&n,u=zi(t);return function n(){for(var a=-1,c=arguments.length,s=-1,f=i.length,l=r(f+c),h=this&&this!==un&&this instanceof n?u:t;++s<f;)l[s]=i[s];for(;c--;)l[s++]=arguments[++a];return gn(h,o?e:this,l)}}(t,n,e,u);else var m=function(t,n,e){var r=1&n,i=zi(t);return function n(){return(this&&this!==un&&this instanceof n?i:t).apply(r?e:this,arguments)}}(t,n,e);return Io((g?Kr:Ao)(m,_),t,n)}function $i(t,n,e,r){return t===i||Vu(t,It[e])&&!zt.call(r,e)?n:t}function Gi(t,n,e,r,o,u){return ta(t)&&ta(n)&&(u.set(n,t),Rr(t,n,i,Gi,u),u.delete(n)),t}function Ki(t){return ia(t)?i:t}function Qi(t,n,e,r,o,u){var a=1&e,c=t.length,s=n.length;if(c!=s&&!(a&&s>c))return!1;var f=u.get(t);if(f&&u.get(n))return f==n;var l=-1,h=!0,p=2&e?new We:i;for(u.set(t,n),u.set(n,t);++l<c;){var d=t[l],v=n[l];if(r)var y=a?r(v,d,l,n,t,u):r(d,v,l,t,n,u);if(y!==i){if(y)continue;h=!1;break}if(p){if(!Cn(n,(function(t,n){if(!Yn(p,n)&&(d===t||o(d,t,e,r,u)))return p.push(n)}))){h=!1;break}}else if(d!==v&&!o(d,v,e,r,u)){h=!1;break}}return u.delete(t),u.delete(n),h}function Ji(t){return Co(Mo(t,i,Yo),t+"")}function to(t){return wr(t,Ia,so)}function no(t){return wr(t,Fa,fo)}var eo=Ae?function(t){return Ae.get(t)}:cc;function ro(t){for(var n=t.name+"",e=ke[n],r=zt.call(ke,n)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==t)return i.name}return n}function io(t){return(zt.call(De,"placeholder")?De:t).placeholder}function oo(){var t=De.iteratee||ic;return t=t===ic?Pr:t,arguments.length?t(arguments[0],arguments[1]):t}function uo(t,n){var e,r,i=t.__data__;return("string"==(r=typeof(e=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof n?"string":"hash"]:i.map}function ao(t){for(var n=Ia(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,wo(i)]}return n}function co(t,n){var e=function(t,n){return null==t?i:t[n]}(t,n);return Fr(e)?e:i}var so=le?function(t){return null==t?[]:(t=Tt(t),Sn(le(t),(function(n){return rn.call(t,n)})))}:vc,fo=le?function(t){for(var n=[];t;)En(n,so(t)),t=Xt(t);return n}:vc,lo=Sr;function ho(t,n,e){for(var r=-1,i=(n=yi(n,t)).length,o=!1;++r<i;){var u=Lo(n[r]);if(!(o=null!=t&&e(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Ju(i)&&yo(u,i)&&(Zu(t)||qu(t))}function po(t){return"function"!=typeof t.constructor||xo(t)?{}:Re(Xt(t))}function vo(t){return Zu(t)||qu(t)||!!(an&&t&&t[an])}function yo(t,n){var e=typeof t;return!!(n=null==n?l:n)&&("number"==e||"symbol"!=e&&bt.test(t))&&t>-1&&t%1==0&&t<n}function bo(t,n,e){if(!ta(e))return!1;var r=typeof n;return!!("number"==r?Wu(e)&&yo(n,e.length):"string"==r&&n in e)&&Vu(e[n],t)}function go(t,n){if(Zu(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!ca(t))||J.test(t)||!Q.test(t)||null!=n&&t in Tt(n)}function _o(t){var n=ro(t),e=De[n];if("function"!=typeof e||!(n in Ue.prototype))return!1;if(t===e)return!0;var r=eo(e);return!!r&&t===r[0]}(we&&lo(new we(new ArrayBuffer(1)))!=F||Se&&lo(new Se)!=w||Me&&lo(Me.resolve())!=T||Te&&lo(new Te)!=E||Ne&&lo(new Ne)!=C)&&(lo=function(t){var n=Sr(t),e=n==M?t.constructor:i,r=e?Do(e):"";if(r)switch(r){case Ce:return F;case Ie:return w;case Fe:return T;case Pe:return E;case ze:return C}return n});var mo=Ft?Ku:yc;function xo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||It)}function wo(t){return t==t&&!ta(t)}function So(t,n){return function(e){return null!=e&&e[t]===n&&(n!==i||t in Tt(e))}}function Mo(t,n,e){return n=ye(n===i?t.length-1:n,0),function(){for(var i=arguments,o=-1,u=ye(i.length-n,0),a=r(u);++o<u;)a[o]=i[n+o];o=-1;for(var c=r(n+1);++o<n;)c[o]=i[o];return c[n]=e(a),gn(t,this,c)}}function To(t,n){return n.length<2?t:xr(t,ti(n,0,-1))}function No(t,n){for(var e=t.length,r=be(n.length,e),o=Ni(t);r--;){var u=n[r];t[r]=yo(u,e)?o[u]:i}return t}function Eo(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var Ao=Fo(Kr),ko=ce||function(t,n){return un.setTimeout(t,n)},Co=Fo(Qr);function Io(t,n,e){var r=n+"";return Co(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(ut,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return mn(d,(function(e){var r="_."+e[0];n&e[1]&&!Mn(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(at);return n?n[1].split(ct):[]}(r),e)))}function Fo(t){var n=0,e=0;return function(){var r=ge(),o=16-(r-e);if(e=r,o>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(i,arguments)}}function Po(t,n){var e=-1,r=t.length,o=r-1;for(n=n===i?r:n;++e<n;){var u=Yr(e,o),a=t[u];t[u]=t[e],t[e]=a}return t.length=n,t}var zo,jo,Oo=(zo=zu((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(tt,(function(t,e,r,i){n.push(r?i.replace(ft,"$1"):e||t)})),n}),(function(t){return 500===jo.size&&jo.clear(),t})),jo=zo.cache,zo);function Lo(t){if("string"==typeof t||ca(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Do(t){if(null!=t){try{return Pt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Ro(t){if(t instanceof Ue)return t.clone();var n=new Be(t.__wrapped__,t.__chain__);return n.__actions__=Ni(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Vo=Hr((function(t,n){return Hu(t)?sr(t,vr(n,1,Hu,!0)):[]})),Bo=Hr((function(t,n){var e=Go(n);return Hu(e)&&(e=i),Hu(t)?sr(t,vr(n,1,Hu,!0),oo(e,2)):[]})),Uo=Hr((function(t,n){var e=Go(n);return Hu(e)&&(e=i),Hu(t)?sr(t,vr(n,1,Hu,!0),i,e):[]}));function qo(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:da(e);return i<0&&(i=ye(r+i,0)),Pn(t,oo(n,3),i)}function Zo(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return e!==i&&(o=da(e),o=e<0?ye(r+o,0):be(o,r-1)),Pn(t,oo(n,3),o,!0)}function Yo(t){return null!=t&&t.length?vr(t,1):[]}function Wo(t){return t&&t.length?t[0]:i}var Ho=Hr((function(t){var n=Nn(t,di);return n.length&&n[0]===t[0]?Er(n):[]})),Xo=Hr((function(t){var n=Go(t),e=Nn(t,di);return n===Go(e)?n=i:e.pop(),e.length&&e[0]===t[0]?Er(e,oo(n,2)):[]})),$o=Hr((function(t){var n=Go(t),e=Nn(t,di);return(n="function"==typeof n?n:i)&&e.pop(),e.length&&e[0]===t[0]?Er(e,i,n):[]}));function Go(t){var n=null==t?0:t.length;return n?t[n-1]:i}var Ko=Hr(Qo);function Qo(t,n){return t&&t.length&&n&&n.length?qr(t,n):t}var Jo=Ji((function(t,n){var e=null==t?0:t.length,r=ir(t,n);return Zr(t,Nn(n,(function(t){return yo(t,e)?+t:t})).sort(Si)),r}));function tu(t){return null==t?t:xe.call(t)}var nu=Hr((function(t){return ai(vr(t,1,Hu,!0))})),eu=Hr((function(t){var n=Go(t);return Hu(n)&&(n=i),ai(vr(t,1,Hu,!0),oo(n,2))})),ru=Hr((function(t){var n=Go(t);return n="function"==typeof n?n:i,ai(vr(t,1,Hu,!0),i,n)}));function iu(t){if(!t||!t.length)return[];var n=0;return t=Sn(t,(function(t){if(Hu(t))return n=ye(t.length,n),!0})),Un(n,(function(n){return Nn(t,Dn(n))}))}function ou(t,n){if(!t||!t.length)return[];var e=iu(t);return null==n?e:Nn(e,(function(t){return gn(n,i,t)}))}var uu=Hr((function(t,n){return Hu(t)?sr(t,n):[]})),au=Hr((function(t){return hi(Sn(t,Hu))})),cu=Hr((function(t){var n=Go(t);return Hu(n)&&(n=i),hi(Sn(t,Hu),oo(n,2))})),su=Hr((function(t){var n=Go(t);return n="function"==typeof n?n:i,hi(Sn(t,Hu),i,n)})),fu=Hr(iu),lu=Hr((function(t){var n=t.length,e=n>1?t[n-1]:i;return e="function"==typeof e?(t.pop(),e):i,ou(t,e)}));function hu(t){var n=De(t);return n.__chain__=!0,n}function pu(t,n){return n(t)}var du=Ji((function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,o=function(n){return ir(n,t)};return!(n>1||this.__actions__.length)&&r instanceof Ue&&yo(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:pu,args:[o],thisArg:i}),new Be(r,this.__chain__).thru((function(t){return n&&!t.length&&t.push(i),t}))):this.thru(o)})),vu=Ai((function(t,n,e){zt.call(t,e)?++t[e]:rr(t,e,1)})),yu=ji(qo),bu=ji(Zo);function gu(t,n){return(Zu(t)?mn:fr)(t,oo(n,3))}function _u(t,n){return(Zu(t)?xn:lr)(t,oo(n,3))}var mu=Ai((function(t,n,e){zt.call(t,e)?t[e].push(n):rr(t,e,[n])})),xu=Hr((function(t,n,e){var i=-1,o="function"==typeof n,u=Wu(t)?r(t.length):[];return fr(t,(function(t){u[++i]=o?gn(n,t,e):Ar(t,n,e)})),u})),wu=Ai((function(t,n,e){rr(t,e,n)}));function Su(t,n){return(Zu(t)?Nn:Or)(t,oo(n,3))}var Mu=Ai((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]})),Tu=Hr((function(t,n){if(null==t)return[];var e=n.length;return e>1&&bo(t,n[0],n[1])?n=[]:e>2&&bo(n[0],n[1],n[2])&&(n=[n[0]]),Br(t,vr(n,1),[])})),Nu=Rn||function(){return un.Date.now()};function Eu(t,n,e){return n=e?i:n,n=t&&null==n?t.length:n,Xi(t,s,i,i,i,i,n)}function Au(t,n){var e;if("function"!=typeof n)throw new At(o);return t=da(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=i),e}}var ku=Hr((function(t,n,e){var r=1;if(e.length){var i=ne(e,io(ku));r|=c}return Xi(t,r,n,e,i)})),Cu=Hr((function(t,n,e){var r=3;if(e.length){var i=ne(e,io(Cu));r|=c}return Xi(n,r,t,e,i)}));function Iu(t,n,e){var r,u,a,c,s,f,l=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new At(o);function v(n){var e=r,o=u;return r=u=i,l=n,c=t.apply(o,e)}function y(t){return l=t,s=ko(g,n),h?v(t):c}function b(t){var e=t-f;return f===i||e>=n||e<0||p&&t-l>=a}function g(){var t=Nu();if(b(t))return _(t);s=ko(g,function(t){var e=n-(t-f);return p?be(e,a-(t-l)):e}(t))}function _(t){return s=i,d&&r?v(t):(r=u=i,c)}function m(){var t=Nu(),e=b(t);if(r=arguments,u=this,f=t,e){if(s===i)return y(f);if(p)return _i(s),s=ko(g,n),v(f)}return s===i&&(s=ko(g,n)),c}return n=ya(n)||0,ta(e)&&(h=!!e.leading,a=(p="maxWait"in e)?ye(ya(e.maxWait)||0,n):a,d="trailing"in e?!!e.trailing:d),m.cancel=function(){s!==i&&_i(s),l=0,r=f=u=s=i},m.flush=function(){return s===i?c:_(Nu())},m}var Fu=Hr((function(t,n){return cr(t,1,n)})),Pu=Hr((function(t,n,e){return cr(t,ya(n)||0,e)}));function zu(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new At(o);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return e.cache=o.set(i,u)||o,u};return e.cache=new(zu.Cache||Ye),e}function ju(t){if("function"!=typeof t)throw new At(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}zu.Cache=Ye;var Ou=bi((function(t,n){var e=(n=1==n.length&&Zu(n[0])?Nn(n[0],qn(oo())):Nn(vr(n,1),qn(oo()))).length;return Hr((function(r){for(var i=-1,o=be(r.length,e);++i<o;)r[i]=n[i].call(this,r[i]);return gn(t,this,r)}))})),Lu=Hr((function(t,n){var e=ne(n,io(Lu));return Xi(t,c,i,n,e)})),Du=Hr((function(t,n){var e=ne(n,io(Du));return Xi(t,64,i,n,e)})),Ru=Ji((function(t,n){return Xi(t,256,i,i,i,n)}));function Vu(t,n){return t===n||t!=t&&n!=n}var Bu=qi(Mr),Uu=qi((function(t,n){return t>=n})),qu=kr(function(){return arguments}())?kr:function(t){return na(t)&&zt.call(t,"callee")&&!rn.call(t,"callee")},Zu=r.isArray,Yu=hn?qn(hn):function(t){return na(t)&&Sr(t)==I};function Wu(t){return null!=t&&Ju(t.length)&&!Ku(t)}function Hu(t){return na(t)&&Wu(t)}var Xu=he||yc,$u=pn?qn(pn):function(t){return na(t)&&Sr(t)==g};function Gu(t){if(!na(t))return!1;var n=Sr(t);return n==_||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!ia(t)}function Ku(t){if(!ta(t))return!1;var n=Sr(t);return n==m||n==x||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Qu(t){return"number"==typeof t&&t==da(t)}function Ju(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=l}function ta(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function na(t){return null!=t&&"object"==typeof t}var ea=dn?qn(dn):function(t){return na(t)&&lo(t)==w};function ra(t){return"number"==typeof t||na(t)&&Sr(t)==S}function ia(t){if(!na(t)||Sr(t)!=M)return!1;var n=Xt(t);if(null===n)return!0;var e=zt.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&Pt.call(e)==Dt}var oa=vn?qn(vn):function(t){return na(t)&&Sr(t)==N},ua=yn?qn(yn):function(t){return na(t)&&lo(t)==E};function aa(t){return"string"==typeof t||!Zu(t)&&na(t)&&Sr(t)==A}function ca(t){return"symbol"==typeof t||na(t)&&Sr(t)==k}var sa=bn?qn(bn):function(t){return na(t)&&Ju(t.length)&&!!Qt[Sr(t)]},fa=qi(jr),la=qi((function(t,n){return t<=n}));function ha(t){if(!t)return[];if(Wu(t))return aa(t)?oe(t):Ni(t);if(cn&&t[cn])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[cn]());var n=lo(t);return(n==w?Jn:n==E?ee:Va)(t)}function pa(t){return t?(t=ya(t))===f||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function da(t){var n=pa(t),e=n%1;return n==n?e?n-e:n:0}function va(t){return t?or(da(t),0,p):0}function ya(t){if("number"==typeof t)return t;if(ca(t))return h;if(ta(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=ta(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(rt,"");var e=dt.test(t);return e||yt.test(t)?en(t.slice(2),e?2:8):pt.test(t)?h:+t}function ba(t){return Ei(t,Fa(t))}function ga(t){return null==t?"":ui(t)}var _a=ki((function(t,n){if(xo(n)||Wu(n))Ei(n,Ia(n),t);else for(var e in n)zt.call(n,e)&&Je(t,e,n[e])})),ma=ki((function(t,n){Ei(n,Fa(n),t)})),xa=ki((function(t,n,e,r){Ei(n,Fa(n),t,r)})),wa=ki((function(t,n,e,r){Ei(n,Ia(n),t,r)})),Sa=Ji(ir),Ma=Hr((function(t,n){t=Tt(t);var e=-1,r=n.length,o=r>2?n[2]:i;for(o&&bo(n[0],n[1],o)&&(r=1);++e<r;)for(var u=n[e],a=Fa(u),c=-1,s=a.length;++c<s;){var f=a[c],l=t[f];(l===i||Vu(l,It[f])&&!zt.call(t,f))&&(t[f]=u[f])}return t})),Ta=Hr((function(t){return t.push(i,Gi),gn(za,i,t)}));function Na(t,n,e){var r=null==t?i:xr(t,n);return r===i?e:r}function Ea(t,n){return null!=t&&ho(t,n,Nr)}var Aa=Di((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Lt.call(n)),t[n]=e}),tc(rc)),ka=Di((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Lt.call(n)),zt.call(t,n)?t[n].push(e):t[n]=[e]}),oo),Ca=Hr(Ar);function Ia(t){return Wu(t)?Xe(t):zr(t)}function Fa(t){return Wu(t)?Xe(t,!0):function(t){if(!ta(t))return function(t){var n=[];if(null!=t)for(var e in Tt(t))n.push(e);return n}(t);var n=xo(t),e=[];for(var r in t)("constructor"!=r||!n&&zt.call(t,r))&&e.push(r);return e}(t)}var Pa=ki((function(t,n,e){Rr(t,n,e)})),za=ki((function(t,n,e,r){Rr(t,n,e,r)})),ja=Ji((function(t,n){var e={};if(null==t)return e;var r=!1;n=Nn(n,(function(n){return n=yi(n,t),r||(r=n.length>1),n})),Ei(t,no(t),e),r&&(e=ur(e,7,Ki));for(var i=n.length;i--;)ci(e,n[i]);return e})),Oa=Ji((function(t,n){return null==t?{}:function(t,n){return Ur(t,n,(function(n,e){return Ea(t,e)}))}(t,n)}));function La(t,n){if(null==t)return{};var e=Nn(no(t),(function(t){return[t]}));return n=oo(n),Ur(t,e,(function(t,e){return n(t,e[0])}))}var Da=Hi(Ia),Ra=Hi(Fa);function Va(t){return null==t?[]:Zn(t,Ia(t))}var Ba=Pi((function(t,n,e){return n=n.toLowerCase(),t+(e?Ua(n):n)}));function Ua(t){return Ga(ga(t).toLowerCase())}function qa(t){return(t=ga(t))&&t.replace(gt,$n).replace(Yt,"")}var Za=Pi((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),Ya=Pi((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),Wa=Fi("toLowerCase"),Ha=Pi((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()})),Xa=Pi((function(t,n,e){return t+(e?" ":"")+Ga(n)})),$a=Pi((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Ga=Fi("toUpperCase");function Ka(t,n,e){return t=ga(t),(n=e?i:n)===i?function(t){return $t.test(t)}(t)?function(t){return t.match(Ht)||[]}(t):function(t){return t.match(st)||[]}(t):t.match(n)||[]}var Qa=Hr((function(t,n){try{return gn(t,i,n)}catch(t){return Gu(t)?t:new wt(t)}})),Ja=Ji((function(t,n){return mn(n,(function(n){n=Lo(n),rr(t,n,ku(t[n],t))})),t}));function tc(t){return function(){return t}}var nc=Oi(),ec=Oi(!0);function rc(t){return t}function ic(t){return Pr("function"==typeof t?t:ur(t,1))}var oc=Hr((function(t,n){return function(e){return Ar(e,t,n)}})),uc=Hr((function(t,n){return function(e){return Ar(t,e,n)}}));function ac(t,n,e){var r=Ia(n),i=mr(n,r);null!=e||ta(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=mr(n,Ia(n)));var o=!(ta(e)&&"chain"in e&&!e.chain),u=Ku(t);return mn(i,(function(e){var r=n[e];t[e]=r,u&&(t.prototype[e]=function(){var n=this.__chain__;if(o||n){var e=t(this.__wrapped__),i=e.__actions__=Ni(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,En([this.value()],arguments))})})),t}function cc(){}var sc=Vi(Nn),fc=Vi(wn),lc=Vi(Cn);function hc(t){return go(t)?Dn(Lo(t)):function(t){return function(n){return xr(n,t)}}(t)}var pc=Ui(),dc=Ui(!0);function vc(){return[]}function yc(){return!1}var bc,gc=Ri((function(t,n){return t+n}),0),_c=Yi("ceil"),mc=Ri((function(t,n){return t/n}),1),xc=Yi("floor"),wc=Ri((function(t,n){return t*n}),1),Sc=Yi("round"),Mc=Ri((function(t,n){return t-n}),0);return De.after=function(t,n){if("function"!=typeof n)throw new At(o);return t=da(t),function(){if(--t<1)return n.apply(this,arguments)}},De.ary=Eu,De.assign=_a,De.assignIn=ma,De.assignInWith=xa,De.assignWith=wa,De.at=Sa,De.before=Au,De.bind=ku,De.bindAll=Ja,De.bindKey=Cu,De.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Zu(t)?t:[t]},De.chain=hu,De.chunk=function(t,n,e){n=(e?bo(t,n,e):n===i)?1:ye(da(n),0);var o=null==t?0:t.length;if(!o||n<1)return[];for(var u=0,a=0,c=r(se(o/n));u<o;)c[a++]=ti(t,u,u+=n);return c},De.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var o=t[n];o&&(i[r++]=o)}return i},De.concat=function(){var t=arguments.length;if(!t)return[];for(var n=r(t-1),e=arguments[0],i=t;i--;)n[i-1]=arguments[i];return En(Zu(e)?Ni(e):[e],vr(n,1))},De.cond=function(t){var n=null==t?0:t.length,e=oo();return t=n?Nn(t,(function(t){if("function"!=typeof t[1])throw new At(o);return[e(t[0]),t[1]]})):[],Hr((function(e){for(var r=-1;++r<n;){var i=t[r];if(gn(i[0],this,e))return gn(i[1],this,e)}}))},De.conforms=function(t){return function(t){var n=Ia(t);return function(e){return ar(e,t,n)}}(ur(t,1))},De.constant=tc,De.countBy=vu,De.create=function(t,n){var e=Re(t);return null==n?e:er(e,n)},De.curry=function t(n,e,r){var o=Xi(n,8,i,i,i,i,i,e=r?i:e);return o.placeholder=t.placeholder,o},De.curryRight=function t(n,e,r){var o=Xi(n,16,i,i,i,i,i,e=r?i:e);return o.placeholder=t.placeholder,o},De.debounce=Iu,De.defaults=Ma,De.defaultsDeep=Ta,De.defer=Fu,De.delay=Pu,De.difference=Vo,De.differenceBy=Bo,De.differenceWith=Uo,De.drop=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,(n=e||n===i?1:da(n))<0?0:n,r):[]},De.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,0,(n=r-(n=e||n===i?1:da(n)))<0?0:n):[]},De.dropRightWhile=function(t,n){return t&&t.length?fi(t,oo(n,3),!0,!0):[]},De.dropWhile=function(t,n){return t&&t.length?fi(t,oo(n,3),!0):[]},De.fill=function(t,n,e,r){var o=null==t?0:t.length;return o?(e&&"number"!=typeof e&&bo(t,n,e)&&(e=0,r=o),function(t,n,e,r){var o=t.length;for((e=da(e))<0&&(e=-e>o?0:o+e),(r=r===i||r>o?o:da(r))<0&&(r+=o),r=e>r?0:va(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},De.filter=function(t,n){return(Zu(t)?Sn:dr)(t,oo(n,3))},De.flatMap=function(t,n){return vr(Su(t,n),1)},De.flatMapDeep=function(t,n){return vr(Su(t,n),f)},De.flatMapDepth=function(t,n,e){return e=e===i?1:da(e),vr(Su(t,n),e)},De.flatten=Yo,De.flattenDeep=function(t){return null!=t&&t.length?vr(t,f):[]},De.flattenDepth=function(t,n){return null!=t&&t.length?vr(t,n=n===i?1:da(n)):[]},De.flip=function(t){return Xi(t,512)},De.flow=nc,De.flowRight=ec,De.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},De.functions=function(t){return null==t?[]:mr(t,Ia(t))},De.functionsIn=function(t){return null==t?[]:mr(t,Fa(t))},De.groupBy=mu,De.initial=function(t){return null!=t&&t.length?ti(t,0,-1):[]},De.intersection=Ho,De.intersectionBy=Xo,De.intersectionWith=$o,De.invert=Aa,De.invertBy=ka,De.invokeMap=xu,De.iteratee=ic,De.keyBy=wu,De.keys=Ia,De.keysIn=Fa,De.map=Su,De.mapKeys=function(t,n){var e={};return n=oo(n,3),gr(t,(function(t,r,i){rr(e,n(t,r,i),t)})),e},De.mapValues=function(t,n){var e={};return n=oo(n,3),gr(t,(function(t,r,i){rr(e,r,n(t,r,i))})),e},De.matches=function(t){return Lr(ur(t,1))},De.matchesProperty=function(t,n){return Dr(t,ur(n,1))},De.memoize=zu,De.merge=Pa,De.mergeWith=za,De.method=oc,De.methodOf=uc,De.mixin=ac,De.negate=ju,De.nthArg=function(t){return t=da(t),Hr((function(n){return Vr(n,t)}))},De.omit=ja,De.omitBy=function(t,n){return La(t,ju(oo(n)))},De.once=function(t){return Au(2,t)},De.orderBy=function(t,n,e,r){return null==t?[]:(Zu(n)||(n=null==n?[]:[n]),Zu(e=r?i:e)||(e=null==e?[]:[e]),Br(t,n,e))},De.over=sc,De.overArgs=Ou,De.overEvery=fc,De.overSome=lc,De.partial=Lu,De.partialRight=Du,De.partition=Mu,De.pick=Oa,De.pickBy=La,De.property=hc,De.propertyOf=function(t){return function(n){return null==t?i:xr(t,n)}},De.pull=Ko,De.pullAll=Qo,De.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?qr(t,n,oo(e,2)):t},De.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?qr(t,n,i,e):t},De.pullAt=Jo,De.range=pc,De.rangeRight=dc,De.rearg=Ru,De.reject=function(t,n){return(Zu(t)?Sn:dr)(t,ju(oo(n,3)))},De.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],o=t.length;for(n=oo(n,3);++r<o;){var u=t[r];n(u,r,t)&&(e.push(u),i.push(r))}return Zr(t,i),e},De.rest=function(t,n){if("function"!=typeof t)throw new At(o);return Hr(t,n=n===i?n:da(n))},De.reverse=tu,De.sampleSize=function(t,n,e){return n=(e?bo(t,n,e):n===i)?1:da(n),(Zu(t)?Ge:$r)(t,n)},De.set=function(t,n,e){return null==t?t:Gr(t,n,e)},De.setWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:Gr(t,n,e,r)},De.shuffle=function(t){return(Zu(t)?Ke:Jr)(t)},De.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&bo(t,n,e)?(n=0,e=r):(n=null==n?0:da(n),e=e===i?r:da(e)),ti(t,n,e)):[]},De.sortBy=Tu,De.sortedUniq=function(t){return t&&t.length?ii(t):[]},De.sortedUniqBy=function(t,n){return t&&t.length?ii(t,oo(n,2)):[]},De.split=function(t,n,e){return e&&"number"!=typeof e&&bo(t,n,e)&&(n=e=i),(e=e===i?p:e>>>0)?(t=ga(t))&&("string"==typeof n||null!=n&&!oa(n))&&!(n=ui(n))&&Qn(t)?gi(oe(t),0,e):t.split(n,e):[]},De.spread=function(t,n){if("function"!=typeof t)throw new At(o);return n=null==n?0:ye(da(n),0),Hr((function(e){var r=e[n],i=gi(e,0,n);return r&&En(i,r),gn(t,this,i)}))},De.tail=function(t){var n=null==t?0:t.length;return n?ti(t,1,n):[]},De.take=function(t,n,e){return t&&t.length?ti(t,0,(n=e||n===i?1:da(n))<0?0:n):[]},De.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,(n=r-(n=e||n===i?1:da(n)))<0?0:n,r):[]},De.takeRightWhile=function(t,n){return t&&t.length?fi(t,oo(n,3),!1,!0):[]},De.takeWhile=function(t,n){return t&&t.length?fi(t,oo(n,3)):[]},De.tap=function(t,n){return n(t),t},De.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new At(o);return ta(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),Iu(t,n,{leading:r,maxWait:n,trailing:i})},De.thru=pu,De.toArray=ha,De.toPairs=Da,De.toPairsIn=Ra,De.toPath=function(t){return Zu(t)?Nn(t,Lo):ca(t)?[t]:Ni(Oo(ga(t)))},De.toPlainObject=ba,De.transform=function(t,n,e){var r=Zu(t),i=r||Xu(t)||sa(t);if(n=oo(n,4),null==e){var o=t&&t.constructor;e=i?r?new o:[]:ta(t)&&Ku(o)?Re(Xt(t)):{}}return(i?mn:gr)(t,(function(t,r,i){return n(e,t,r,i)})),e},De.unary=function(t){return Eu(t,1)},De.union=nu,De.unionBy=eu,De.unionWith=ru,De.uniq=function(t){return t&&t.length?ai(t):[]},De.uniqBy=function(t,n){return t&&t.length?ai(t,oo(n,2)):[]},De.uniqWith=function(t,n){return n="function"==typeof n?n:i,t&&t.length?ai(t,i,n):[]},De.unset=function(t,n){return null==t||ci(t,n)},De.unzip=iu,De.unzipWith=ou,De.update=function(t,n,e){return null==t?t:si(t,n,vi(e))},De.updateWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:si(t,n,vi(e),r)},De.values=Va,De.valuesIn=function(t){return null==t?[]:Zn(t,Fa(t))},De.without=uu,De.words=Ka,De.wrap=function(t,n){return Lu(vi(n),t)},De.xor=au,De.xorBy=cu,De.xorWith=su,De.zip=fu,De.zipObject=function(t,n){return pi(t||[],n||[],Je)},De.zipObjectDeep=function(t,n){return pi(t||[],n||[],Gr)},De.zipWith=lu,De.entries=Da,De.entriesIn=Ra,De.extend=ma,De.extendWith=xa,ac(De,De),De.add=gc,De.attempt=Qa,De.camelCase=Ba,De.capitalize=Ua,De.ceil=_c,De.clamp=function(t,n,e){return e===i&&(e=n,n=i),e!==i&&(e=(e=ya(e))==e?e:0),n!==i&&(n=(n=ya(n))==n?n:0),or(ya(t),n,e)},De.clone=function(t){return ur(t,4)},De.cloneDeep=function(t){return ur(t,5)},De.cloneDeepWith=function(t,n){return ur(t,5,n="function"==typeof n?n:i)},De.cloneWith=function(t,n){return ur(t,4,n="function"==typeof n?n:i)},De.conformsTo=function(t,n){return null==n||ar(t,n,Ia(n))},De.deburr=qa,De.defaultTo=function(t,n){return null==t||t!=t?n:t},De.divide=mc,De.endsWith=function(t,n,e){t=ga(t),n=ui(n);var r=t.length,o=e=e===i?r:or(da(e),0,r);return(e-=n.length)>=0&&t.slice(e,o)==n},De.eq=Vu,De.escape=function(t){return(t=ga(t))&&X.test(t)?t.replace(W,Gn):t},De.escapeRegExp=function(t){return(t=ga(t))&&et.test(t)?t.replace(nt,"\\$&"):t},De.every=function(t,n,e){var r=Zu(t)?wn:hr;return e&&bo(t,n,e)&&(n=i),r(t,oo(n,3))},De.find=yu,De.findIndex=qo,De.findKey=function(t,n){return Fn(t,oo(n,3),gr)},De.findLast=bu,De.findLastIndex=Zo,De.findLastKey=function(t,n){return Fn(t,oo(n,3),_r)},De.floor=xc,De.forEach=gu,De.forEachRight=_u,De.forIn=function(t,n){return null==t?t:yr(t,oo(n,3),Fa)},De.forInRight=function(t,n){return null==t?t:br(t,oo(n,3),Fa)},De.forOwn=function(t,n){return t&&gr(t,oo(n,3))},De.forOwnRight=function(t,n){return t&&_r(t,oo(n,3))},De.get=Na,De.gt=Bu,De.gte=Uu,De.has=function(t,n){return null!=t&&ho(t,n,Tr)},De.hasIn=Ea,De.head=Wo,De.identity=rc,De.includes=function(t,n,e,r){t=Wu(t)?t:Va(t),e=e&&!r?da(e):0;var i=t.length;return e<0&&(e=ye(i+e,0)),aa(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&zn(t,n,e)>-1},De.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:da(e);return i<0&&(i=ye(r+i,0)),zn(t,n,i)},De.inRange=function(t,n,e){return n=pa(n),e===i?(e=n,n=0):e=pa(e),function(t,n,e){return t>=be(n,e)&&t<ye(n,e)}(t=ya(t),n,e)},De.invoke=Ca,De.isArguments=qu,De.isArray=Zu,De.isArrayBuffer=Yu,De.isArrayLike=Wu,De.isArrayLikeObject=Hu,De.isBoolean=function(t){return!0===t||!1===t||na(t)&&Sr(t)==b},De.isBuffer=Xu,De.isDate=$u,De.isElement=function(t){return na(t)&&1===t.nodeType&&!ia(t)},De.isEmpty=function(t){if(null==t)return!0;if(Wu(t)&&(Zu(t)||"string"==typeof t||"function"==typeof t.splice||Xu(t)||sa(t)||qu(t)))return!t.length;var n=lo(t);if(n==w||n==E)return!t.size;if(xo(t))return!zr(t).length;for(var e in t)if(zt.call(t,e))return!1;return!0},De.isEqual=function(t,n){return Cr(t,n)},De.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:i)?e(t,n):i;return r===i?Cr(t,n,i,e):!!r},De.isError=Gu,De.isFinite=function(t){return"number"==typeof t&&pe(t)},De.isFunction=Ku,De.isInteger=Qu,De.isLength=Ju,De.isMap=ea,De.isMatch=function(t,n){return t===n||Ir(t,n,ao(n))},De.isMatchWith=function(t,n,e){return e="function"==typeof e?e:i,Ir(t,n,ao(n),e)},De.isNaN=function(t){return ra(t)&&t!=+t},De.isNative=function(t){if(mo(t))throw new wt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Fr(t)},De.isNil=function(t){return null==t},De.isNull=function(t){return null===t},De.isNumber=ra,De.isObject=ta,De.isObjectLike=na,De.isPlainObject=ia,De.isRegExp=oa,De.isSafeInteger=function(t){return Qu(t)&&t>=-9007199254740991&&t<=l},De.isSet=ua,De.isString=aa,De.isSymbol=ca,De.isTypedArray=sa,De.isUndefined=function(t){return t===i},De.isWeakMap=function(t){return na(t)&&lo(t)==C},De.isWeakSet=function(t){return na(t)&&"[object WeakSet]"==Sr(t)},De.join=function(t,n){return null==t?"":de.call(t,n)},De.kebabCase=Za,De.last=Go,De.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=r;return e!==i&&(o=(o=da(e))<0?ye(r+o,0):be(o,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,o):Pn(t,On,o,!0)},De.lowerCase=Ya,De.lowerFirst=Wa,De.lt=fa,De.lte=la,De.max=function(t){return t&&t.length?pr(t,rc,Mr):i},De.maxBy=function(t,n){return t&&t.length?pr(t,oo(n,2),Mr):i},De.mean=function(t){return Ln(t,rc)},De.meanBy=function(t,n){return Ln(t,oo(n,2))},De.min=function(t){return t&&t.length?pr(t,rc,jr):i},De.minBy=function(t,n){return t&&t.length?pr(t,oo(n,2),jr):i},De.stubArray=vc,De.stubFalse=yc,De.stubObject=function(){return{}},De.stubString=function(){return""},De.stubTrue=function(){return!0},De.multiply=wc,De.nth=function(t,n){return t&&t.length?Vr(t,da(n)):i},De.noConflict=function(){return un._===this&&(un._=Rt),this},De.noop=cc,De.now=Nu,De.pad=function(t,n,e){t=ga(t);var r=(n=da(n))?ie(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return Bi(fe(i),e)+t+Bi(se(i),e)},De.padEnd=function(t,n,e){t=ga(t);var r=(n=da(n))?ie(t):0;return n&&r<n?t+Bi(n-r,e):t},De.padStart=function(t,n,e){t=ga(t);var r=(n=da(n))?ie(t):0;return n&&r<n?Bi(n-r,e)+t:t},De.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),_e(ga(t).replace(it,""),n||0)},De.random=function(t,n,e){if(e&&"boolean"!=typeof e&&bo(t,n,e)&&(n=e=i),e===i&&("boolean"==typeof n?(e=n,n=i):"boolean"==typeof t&&(e=t,t=i)),t===i&&n===i?(t=0,n=1):(t=pa(t),n===i?(n=t,t=0):n=pa(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var o=me();return be(t+o*(n-t+nn("1e-"+((o+"").length-1))),n)}return Yr(t,n)},De.reduce=function(t,n,e){var r=Zu(t)?An:Vn,i=arguments.length<3;return r(t,oo(n,4),e,i,fr)},De.reduceRight=function(t,n,e){var r=Zu(t)?kn:Vn,i=arguments.length<3;return r(t,oo(n,4),e,i,lr)},De.repeat=function(t,n,e){return n=(e?bo(t,n,e):n===i)?1:da(n),Wr(ga(t),n)},De.replace=function(){var t=arguments,n=ga(t[0]);return t.length<3?n:n.replace(t[1],t[2])},De.result=function(t,n,e){var r=-1,o=(n=yi(n,t)).length;for(o||(o=1,t=i);++r<o;){var u=null==t?i:t[Lo(n[r])];u===i&&(r=o,u=e),t=Ku(u)?u.call(t):u}return t},De.round=Sc,De.runInContext=t,De.sample=function(t){return(Zu(t)?$e:Xr)(t)},De.size=function(t){if(null==t)return 0;if(Wu(t))return aa(t)?ie(t):t.length;var n=lo(t);return n==w||n==E?t.size:zr(t).length},De.snakeCase=Ha,De.some=function(t,n,e){var r=Zu(t)?Cn:ni;return e&&bo(t,n,e)&&(n=i),r(t,oo(n,3))},De.sortedIndex=function(t,n){return ei(t,n)},De.sortedIndexBy=function(t,n,e){return ri(t,n,oo(e,2))},De.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=ei(t,n);if(r<e&&Vu(t[r],n))return r}return-1},De.sortedLastIndex=function(t,n){return ei(t,n,!0)},De.sortedLastIndexBy=function(t,n,e){return ri(t,n,oo(e,2),!0)},De.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var e=ei(t,n,!0)-1;if(Vu(t[e],n))return e}return-1},De.startCase=Xa,De.startsWith=function(t,n,e){return t=ga(t),e=null==e?0:or(da(e),0,t.length),n=ui(n),t.slice(e,e+n.length)==n},De.subtract=Mc,De.sum=function(t){return t&&t.length?Bn(t,rc):0},De.sumBy=function(t,n){return t&&t.length?Bn(t,oo(n,2)):0},De.template=function(t,n,e){var r=De.templateSettings;e&&bo(t,n,e)&&(n=i),t=ga(t),n=xa({},n,r,$i);var o,u,a=xa({},n.imports,r.imports,$i),c=Ia(a),s=Zn(a,c),f=0,l=n.interpolate||_t,h="__p += '",p=Nt((n.escape||_t).source+"|"+l.source+"|"+(l===K?lt:_t).source+"|"+(n.evaluate||_t).source+"|$","g"),d="//# sourceURL="+(zt.call(n,"sourceURL")?(n.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Kt+"]")+"\n";t.replace(p,(function(n,e,r,i,a,c){return r||(r=i),h+=t.slice(f,c).replace(mt,Kn),e&&(o=!0,h+="' +\n__e("+e+") +\n'"),a&&(u=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),f=c+n.length,n})),h+="';\n";var v=zt.call(n,"variable")&&n.variable;v||(h="with (obj) {\n"+h+"\n}\n"),h=(u?h.replace(U,""):h).replace(q,"$1").replace(Z,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var y=Qa((function(){return St(c,d+"return "+h).apply(i,s)}));if(y.source=h,Gu(y))throw y;return y},De.times=function(t,n){if((t=da(t))<1||t>l)return[];var e=p,r=be(t,p);n=oo(n),t-=p;for(var i=Un(r,n);++e<t;)n(e);return i},De.toFinite=pa,De.toInteger=da,De.toLength=va,De.toLower=function(t){return ga(t).toLowerCase()},De.toNumber=ya,De.toSafeInteger=function(t){return t?or(da(t),-9007199254740991,l):0===t?t:0},De.toString=ga,De.toUpper=function(t){return ga(t).toUpperCase()},De.trim=function(t,n,e){if((t=ga(t))&&(e||n===i))return t.replace(rt,"");if(!t||!(n=ui(n)))return t;var r=oe(t),o=oe(n);return gi(r,Wn(r,o),Hn(r,o)+1).join("")},De.trimEnd=function(t,n,e){if((t=ga(t))&&(e||n===i))return t.replace(ot,"");if(!t||!(n=ui(n)))return t;var r=oe(t);return gi(r,0,Hn(r,oe(n))+1).join("")},De.trimStart=function(t,n,e){if((t=ga(t))&&(e||n===i))return t.replace(it,"");if(!t||!(n=ui(n)))return t;var r=oe(t);return gi(r,Wn(r,oe(n))).join("")},De.truncate=function(t,n){var e=30,r="...";if(ta(n)){var o="separator"in n?n.separator:o;e="length"in n?da(n.length):e,r="omission"in n?ui(n.omission):r}var u=(t=ga(t)).length;if(Qn(t)){var a=oe(t);u=a.length}if(e>=u)return t;var c=e-ie(r);if(c<1)return r;var s=a?gi(a,0,c).join(""):t.slice(0,c);if(o===i)return s+r;if(a&&(c+=s.length-c),oa(o)){if(t.slice(c).search(o)){var f,l=s;for(o.global||(o=Nt(o.source,ga(ht.exec(o))+"g")),o.lastIndex=0;f=o.exec(l);)var h=f.index;s=s.slice(0,h===i?c:h)}}else if(t.indexOf(ui(o),c)!=c){var p=s.lastIndexOf(o);p>-1&&(s=s.slice(0,p))}return s+r},De.unescape=function(t){return(t=ga(t))&&H.test(t)?t.replace(Y,ue):t},De.uniqueId=function(t){var n=++jt;return ga(t)+n},De.upperCase=$a,De.upperFirst=Ga,De.each=gu,De.eachRight=_u,De.first=Wo,ac(De,(bc={},gr(De,(function(t,n){zt.call(De.prototype,n)||(bc[n]=t)})),bc),{chain:!1}),De.VERSION="4.17.15",mn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){De[t].placeholder=De})),mn(["drop","take"],(function(t,n){Ue.prototype[t]=function(e){e=e===i?1:ye(da(e),0);var r=this.__filtered__&&!n?new Ue(this):this.clone();return r.__filtered__?r.__takeCount__=be(e,r.__takeCount__):r.__views__.push({size:be(e,p),type:t+(r.__dir__<0?"Right":"")}),r},Ue.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),mn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;Ue.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:oo(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),mn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");Ue.prototype[t]=function(){return this[e](1).value()[0]}})),mn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");Ue.prototype[t]=function(){return this.__filtered__?new Ue(this):this[e](1)}})),Ue.prototype.compact=function(){return this.filter(rc)},Ue.prototype.find=function(t){return this.filter(t).head()},Ue.prototype.findLast=function(t){return this.reverse().find(t)},Ue.prototype.invokeMap=Hr((function(t,n){return"function"==typeof t?new Ue(this):this.map((function(e){return Ar(e,t,n)}))})),Ue.prototype.reject=function(t){return this.filter(ju(oo(t)))},Ue.prototype.slice=function(t,n){t=da(t);var e=this;return e.__filtered__&&(t>0||n<0)?new Ue(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==i&&(e=(n=da(n))<0?e.dropRight(-n):e.take(n-t)),e)},Ue.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Ue.prototype.toArray=function(){return this.take(p)},gr(Ue.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),o=De[r?"take"+("last"==n?"Right":""):n],u=r||/^find/.test(n);o&&(De.prototype[n]=function(){var n=this.__wrapped__,a=r?[1]:arguments,c=n instanceof Ue,s=a[0],f=c||Zu(n),l=function(t){var n=o.apply(De,En([t],a));return r&&h?n[0]:n};f&&e&&"function"==typeof s&&1!=s.length&&(c=f=!1);var h=this.__chain__,p=!!this.__actions__.length,d=u&&!h,v=c&&!p;if(!u&&f){n=v?n:new Ue(this);var y=t.apply(n,a);return y.__actions__.push({func:pu,args:[l],thisArg:i}),new Be(y,h)}return d&&v?t.apply(this,a):(y=this.thru(l),d?r?y.value()[0]:y.value():y)})})),mn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=kt[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);De.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(Zu(i)?i:[],t)}return this[e]((function(e){return n.apply(Zu(e)?e:[],t)}))}})),gr(Ue.prototype,(function(t,n){var e=De[n];if(e){var r=e.name+"";zt.call(ke,r)||(ke[r]=[]),ke[r].push({name:n,func:e})}})),ke[Li(i,2).name]=[{name:"wrapper",func:i}],Ue.prototype.clone=function(){var t=new Ue(this.__wrapped__);return t.__actions__=Ni(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ni(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ni(this.__views__),t},Ue.prototype.reverse=function(){if(this.__filtered__){var t=new Ue(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Ue.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=Zu(t),r=n<0,i=e?t.length:0,o=function(t,n,e){for(var r=-1,i=e.length;++r<i;){var o=e[r],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":n-=u;break;case"take":n=be(n,t+u);break;case"takeRight":t=ye(t,n-u)}}return{start:t,end:n}}(0,i,this.__views__),u=o.start,a=o.end,c=a-u,s=r?a:u-1,f=this.__iteratees__,l=f.length,h=0,p=be(c,this.__takeCount__);if(!e||!r&&i==c&&p==c)return li(t,this.__actions__);var d=[];t:for(;c--&&h<p;){for(var v=-1,y=t[s+=n];++v<l;){var b=f[v],g=b.iteratee,_=b.type,m=g(y);if(2==_)y=m;else if(!m){if(1==_)continue t;break t}}d[h++]=y}return d},De.prototype.at=du,De.prototype.chain=function(){return hu(this)},De.prototype.commit=function(){return new Be(this.value(),this.__chain__)},De.prototype.next=function(){this.__values__===i&&(this.__values__=ha(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},De.prototype.plant=function(t){for(var n,e=this;e instanceof Ve;){var r=Ro(e);r.__index__=0,r.__values__=i,n?o.__wrapped__=r:n=r;var o=r;e=e.__wrapped__}return o.__wrapped__=t,n},De.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Ue){var n=t;return this.__actions__.length&&(n=new Ue(this)),(n=n.reverse()).__actions__.push({func:pu,args:[tu],thisArg:i}),new Be(n,this.__chain__)}return this.thru(tu)},De.prototype.toJSON=De.prototype.valueOf=De.prototype.value=function(){return li(this.__wrapped__,this.__actions__)},De.prototype.first=De.prototype.head,cn&&(De.prototype[cn]=function(){return this}),De}();un._=ae,(r=function(){return ae}.call(n,e,n,t))===i||(t.exports=r)}.call(this)},4143:(t,n,e)=>{"use strict";e.r(n),e.d(n,{ArgumentOutOfRangeError:()=>k.W,AsyncSubject:()=>f.c,BehaviorSubject:()=>c.X,ConnectableObservable:()=>i.c,EMPTY:()=>X.E,EmptyError:()=>C.K,GroupedObservable:()=>o.T,NEVER:()=>ft,Notification:()=>M.P,NotificationKind:()=>M.W,ObjectUnsubscribedError:()=>I.N,Observable:()=>r.y,ReplaySubject:()=>s.t,Scheduler:()=>x.b,Subject:()=>a.xQ,Subscriber:()=>S.L,Subscription:()=>w.w,TimeoutError:()=>P.W,UnsubscriptionError:()=>F.B,VirtualAction:()=>m,VirtualTimeScheduler:()=>_,animationFrameScheduler:()=>g,asapScheduler:()=>l.e,asyncScheduler:()=>h.P,bindCallback:()=>D,bindNodeCallback:()=>B,combineLatest:()=>Y.aj,concat:()=>W.z,config:()=>At.v,defer:()=>H.P,empty:()=>X.c,forkJoin:()=>K,from:()=>G.D,fromEvent:()=>tt,fromEventPattern:()=>et,generate:()=>rt,identity:()=>E.y,iif:()=>ot,interval:()=>at,isObservable:()=>A,merge:()=>st.T,never:()=>lt,noop:()=>N.Z,observable:()=>u.L,of:()=>ht.of,onErrorResumeNext:()=>pt,pairs:()=>dt,partition:()=>_t,pipe:()=>T.z,queueScheduler:()=>p.c,race:()=>mt.S3,range:()=>xt,scheduled:()=>Et.x,throwError:()=>St._,timer:()=>Mt.H,using:()=>Tt,zip:()=>Nt.$R});var r=e(2772),i=e(3140),o=e(1120),u=e(5050),a=e(211),c=e(9233),s=e(2630),f=e(364),l=e(6650),h=e(964),p=e(2546),d=e(655),v=e(6114),y=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return d.ZT(n,t),n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,n,e,r):(n.actions.push(this),n.scheduled||(n.scheduled=requestAnimationFrame((function(){return n.flush(null)}))))},n.prototype.recycleAsyncId=function(n,e,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,n,e,r);0===n.actions.length&&(cancelAnimationFrame(e),n.scheduled=void 0)},n}(v.o),b=e(8399),g=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return d.ZT(n,t),n.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var n,e=this.actions,r=-1,i=e.length;t=t||e.shift();do{if(n=t.execute(t.state,t.delay))break}while(++r<i&&(t=e.shift()));if(this.active=!1,n){for(;++r<i&&(t=e.shift());)t.unsubscribe();throw n}},n}(b.v))(y),_=function(t){function n(n,e){void 0===n&&(n=m),void 0===e&&(e=Number.POSITIVE_INFINITY);var r=t.call(this,n,(function(){return r.frame}))||this;return r.maxFrames=e,r.frame=0,r.index=-1,r}return d.ZT(n,t),n.prototype.flush=function(){for(var t,n,e=this.actions,r=this.maxFrames;(n=e[0])&&n.delay<=r&&(e.shift(),this.frame=n.delay,!(t=n.execute(n.state,n.delay))););if(t){for(;n=e.shift();)n.unsubscribe();throw t}},n.frameTimeFactor=10,n}(b.v),m=function(t){function n(n,e,r){void 0===r&&(r=n.index+=1);var i=t.call(this,n,e)||this;return i.scheduler=n,i.work=e,i.index=r,i.active=!0,i.index=n.index=r,i}return d.ZT(n,t),n.prototype.schedule=function(e,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,e,r);this.active=!1;var i=new n(this.scheduler,this.work);return this.add(i),i.schedule(e,r)},n.prototype.requestAsyncId=function(t,e,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(n.sortActions),!0},n.prototype.recycleAsyncId=function(t,n,e){void 0===e&&(e=0)},n.prototype._execute=function(n,e){if(!0===this.active)return t.prototype._execute.call(this,n,e)},n.sortActions=function(t,n){return t.delay===n.delay?t.index===n.index?0:t.index>n.index?1:-1:t.delay>n.delay?1:-1},n}(v.o),x=e(8725),w=e(8760),S=e(979),M=e(2632),T=e(2561),N=e(3306),E=e(3608);function A(t){return!!t&&(t instanceof r.y||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var k=e(6565),C=e(6929),I=e(1016),F=e(8782),P=e(1462),z=e(5709),j=e(3642),O=e(9026),L=e(7507);function D(t,n,e){if(n){if(!(0,L.K)(n))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return D(t,e).apply(void 0,r).pipe((0,z.U)((function(t){return(0,O.k)(t)?n.apply(void 0,t):n(t)})))};e=n}return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o,u=this,a={context:u,subject:o,callbackFunc:t,scheduler:e};return new r.y((function(r){if(e){var i={args:n,subscriber:r,params:a};return e.schedule(R,0,i)}if(!o){o=new f.c;try{t.apply(u,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){(0,j._)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)}))}}function R(t){var n=this,e=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,u=i.context,a=i.scheduler,c=i.subject;if(!c){c=i.subject=new f.c;try{o.apply(u,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.length<=1?t[0]:t;n.add(a.schedule(V,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function V(t){var n=t.value,e=t.subject;e.next(n),e.complete()}function B(t,n,e){if(n){if(!(0,L.K)(n))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return B(t,e).apply(void 0,r).pipe((0,z.U)((function(t){return(0,O.k)(t)?n.apply(void 0,t):n(t)})))};e=n}return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o={subject:void 0,args:n,callbackFunc:t,scheduler:e,context:this};return new r.y((function(r){var i=o.context,u=o.subject;if(e)return e.schedule(U,0,{params:o,subscriber:r,context:i});if(!u){u=o.subject=new f.c;try{t.apply(i,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.shift();e?u.error(e):(u.next(t.length<=1?t[0]:t),u.complete())}]))}catch(t){(0,j._)(u)?u.error(t):console.warn(t)}}return u.subscribe(r)}))}}function U(t){var n=this,e=t.params,r=t.subscriber,i=t.context,o=e.callbackFunc,u=e.args,a=e.scheduler,c=e.subject;if(!c){c=e.subject=new f.c;try{o.apply(i,u.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.shift();if(r)n.add(a.schedule(Z,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;n.add(a.schedule(q,0,{value:i,subject:c}))}}]))}catch(t){this.add(a.schedule(Z,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function q(t){var n=t.value,e=t.subject;e.next(n),e.complete()}function Z(t){var n=t.err;t.subject.error(n)}var Y=e(5142),W=e(9795),H=e(1410),X=e(5631),$=e(2009),G=e(5760);function K(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){var e=t[0];if((0,O.k)(e))return Q(e,null);if((0,$.K)(e)&&Object.getPrototypeOf(e)===Object.prototype){var r=Object.keys(e);return Q(r.map((function(t){return e[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return Q(t=1===t.length&&(0,O.k)(t[0])?t[0]:t,null).pipe((0,z.U)((function(t){return i.apply(void 0,t)})))}return Q(t,null)}function Q(t,n){return new r.y((function(e){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,u=0,a=function(a){var c=(0,G.D)(t[a]),s=!1;e.add(c.subscribe({next:function(t){s||(s=!0,u++),i[a]=t},error:function(t){return e.error(t)},complete:function(){++o!==r&&s||(u===r&&e.next(n?n.reduce((function(t,n,e){return t[n]=i[e],t}),{}):i),e.complete())}}))},c=0;c<r;c++)a(c);else e.complete()}))}var J=e(4156);function tt(t,n,e,i){return(0,J.m)(e)&&(i=e,e=void 0),i?tt(t,n,e).pipe((0,z.U)((function(t){return(0,O.k)(t)?i.apply(void 0,t):i(t)}))):new r.y((function(r){nt(t,n,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,e)}))}function nt(t,n,e,r,i){var o;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(t)){var u=t;t.addEventListener(n,e,i),o=function(){return u.removeEventListener(n,e,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(t)){var a=t;t.on(n,e),o=function(){return a.off(n,e)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(t)){var c=t;t.addListener(n,e),o=function(){return c.removeListener(n,e)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var s=0,f=t.length;s<f;s++)nt(t[s],n,e,r,i)}r.add(o)}function et(t,n,e){return e?et(t,n).pipe((0,z.U)((function(t){return(0,O.k)(t)?e.apply(void 0,t):e(t)}))):new r.y((function(e){var r,i=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void e.error(t)}if((0,J.m)(n))return function(){return n(i,r)}}))}function rt(t,n,e,i,o){var u,a;if(1==arguments.length){var c=t;a=c.initialState,n=c.condition,e=c.iterate,u=c.resultSelector||E.y,o=c.scheduler}else void 0===i||(0,L.K)(i)?(a=t,u=E.y,o=i):(a=t,u=i);return new r.y((function(t){var r=a;if(o)return o.schedule(it,0,{subscriber:t,iterate:e,condition:n,resultSelector:u,state:r});for(;;){if(n){var i=void 0;try{i=n(r)}catch(n){return void t.error(n)}if(!i){t.complete();break}}var c=void 0;try{c=u(r)}catch(n){return void t.error(n)}if(t.next(c),t.closed)break;try{r=e(r)}catch(n){return void t.error(n)}}}))}function it(t){var n=t.subscriber,e=t.condition;if(!n.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void n.error(t)}else t.needIterate=!0;if(e){var r=void 0;try{r=e(t.state)}catch(t){return void n.error(t)}if(!r)return void n.complete();if(n.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void n.error(t)}if(!n.closed&&(n.next(i),!n.closed))return this.schedule(t)}}function ot(t,n,e){return void 0===n&&(n=X.E),void 0===e&&(e=X.E),(0,H.P)((function(){return t()?n:e}))}var ut=e(5812);function at(t,n){return void 0===t&&(t=0),void 0===n&&(n=h.P),(!(0,ut.k)(t)||t<0)&&(t=0),n&&"function"==typeof n.schedule||(n=h.P),new r.y((function(e){return e.add(n.schedule(ct,t,{subscriber:e,counter:0,period:t})),e}))}function ct(t){var n=t.subscriber,e=t.counter,r=t.period;n.next(e),this.schedule({subscriber:n,counter:e+1,period:r},r)}var st=e(4370),ft=new r.y(N.Z);function lt(){return ft}var ht=e(8170);function pt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(0===t.length)return X.E;var e=t[0],i=t.slice(1);return 1===t.length&&(0,O.k)(e)?pt.apply(void 0,e):new r.y((function(t){var n=function(){return t.add(pt.apply(void 0,i).subscribe(t))};return(0,G.D)(e).subscribe({next:function(n){t.next(n)},error:n,complete:n})}))}function dt(t,n){return n?new r.y((function(e){var r=Object.keys(t),i=new w.w;return i.add(n.schedule(vt,0,{keys:r,index:0,subscriber:e,subscription:i,obj:t})),i})):new r.y((function(n){for(var e=Object.keys(t),r=0;r<e.length&&!n.closed;r++){var i=e[r];t.hasOwnProperty(i)&&n.next([i,t[i]])}n.complete()}))}function vt(t){var n=t.keys,e=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(e<n.length){var u=n[e];r.next([u,o[u]]),i.add(this.schedule({keys:n,index:e+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var yt=e(8463),bt=e(7843),gt=e(6008);function _t(t,n,e){return[(0,gt.h)(n,e)(new r.y((0,bt.s)(t))),(0,gt.h)((0,yt.f)(n,e))(new r.y((0,bt.s)(t)))]}var mt=e(8821);function xt(t,n,e){return void 0===t&&(t=0),new r.y((function(r){void 0===n&&(n=t,t=0);var i=0,o=t;if(e)return e.schedule(wt,0,{index:i,count:n,start:t,subscriber:r});for(;;){if(i++>=n){r.complete();break}if(r.next(o++),r.closed)break}}))}function wt(t){var n=t.start,e=t.index,r=t.count,i=t.subscriber;e>=r?i.complete():(i.next(n),i.closed||(t.index=e+1,t.start=n+1,this.schedule(t)))}var St=e(4944),Mt=e(9604);function Tt(t,n){return new r.y((function(e){var r,i;try{r=t()}catch(t){return void e.error(t)}try{i=n(r)}catch(t){return void e.error(t)}var o=(i?(0,G.D)(i):X.E).subscribe(e);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}var Nt=e(5080),Et=e(8107),At=e(150)},364:(t,n,e)=>{"use strict";e.d(n,{c:()=>u});var r=e(655),i=e(211),o=e(8760),u=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.value=null,n.hasNext=!1,n.hasCompleted=!1,n}return r.ZT(n,t),n.prototype._subscribe=function(n){return this.hasError?(n.error(this.thrownError),o.w.EMPTY):this.hasCompleted&&this.hasNext?(n.next(this.value),n.complete(),o.w.EMPTY):t.prototype._subscribe.call(this,n)},n.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},n.prototype.error=function(n){this.hasCompleted||t.prototype.error.call(this,n)},n.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},n}(i.xQ)},9233:(t,n,e)=>{"use strict";e.d(n,{X:()=>u});var r=e(655),i=e(211),o=e(1016),u=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return r.ZT(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return e&&!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.N;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(i.xQ)},1112:(t,n,e)=>{"use strict";e.d(n,{d:()=>i});var r=e(655),i=function(t){function n(n,e,r){var i=t.call(this)||this;return i.parent=n,i.outerValue=e,i.outerIndex=r,i.index=0,i}return r.ZT(n,t),n.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},n.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},n}(e(979).L)},2632:(t,n,e)=>{"use strict";e.d(n,{W:()=>r,P:()=>a});var r,i=e(5631),o=e(8170),u=e(4944);r||(r={});var a=function(){function t(t,n,e){this.kind=t,this.value=n,this.error=e,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,n,e){switch(this.kind){case"N":return t&&t(this.value);case"E":return n&&n(this.error);case"C":return e&&e()}},t.prototype.accept=function(t,n,e){return t&&"function"==typeof t.next?this.observe(t):this.do(t,n,e)},t.prototype.toObservable=function(){switch(this.kind){case"N":return(0,o.of)(this.value);case"E":return(0,u._)(this.error);case"C":return(0,i.c)()}throw new Error("unexpected notification kind value")},t.createNext=function(n){return void 0!==n?new t("N",n):t.undefinedValueNotification},t.createError=function(n){return new t("E",void 0,n)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},2772:(t,n,e)=>{"use strict";e.d(n,{y:()=>f});var r=e(3642),i=e(979),o=e(3142),u=e(2174),a=e(5050),c=e(2561),s=e(150),f=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r=this.operator,a=function(t,n,e){if(t){if(t instanceof i.L)return t;if(t[o.b])return t[o.b]()}return t||n||e?new i.L(t,n,e):new i.L(u.c)}(t,n,e);if(r?a.add(r.call(a,this.source)):a.add(this.source||s.v.useDeprecatedSynchronousErrorHandling&&!a.syncErrorThrowable?this._subscribe(a):this._trySubscribe(a)),s.v.useDeprecatedSynchronousErrorHandling&&a.syncErrorThrowable&&(a.syncErrorThrowable=!1,a.syncErrorThrown))throw a.syncErrorValue;return a},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){s.v.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),(0,r._)(t)?t.error(n):console.warn(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=l(n))((function(n,r){var i;i=e.subscribe((function(n){try{t(n)}catch(t){r(t),i&&i.unsubscribe()}}),r,n)}))},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[a.L]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:(0,c.U)(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=l(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function l(t){if(t||(t=s.v.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},2174:(t,n,e)=>{"use strict";e.d(n,{c:()=>o});var r=e(150),i=e(1644),o={closed:!0,next:function(t){},error:function(t){if(r.v.useDeprecatedSynchronousErrorHandling)throw t;(0,i.z)(t)},complete:function(){}}},2039:(t,n,e)=>{"use strict";e.d(n,{L:()=>i});var r=e(655),i=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyError=function(t,n){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.complete()},n}(e(979).L)},2630:(t,n,e)=>{"use strict";e.d(n,{t:()=>f});var r=e(655),i=e(211),o=e(2546),u=e(8760),a=e(9276),c=e(1016),s=e(8253),f=function(t){function n(n,e,r){void 0===n&&(n=Number.POSITIVE_INFINITY),void 0===e&&(e=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=n<1?1:n,i._windowTime=e<1?1:e,e===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.ZT(n,t),n.prototype.nextInfiniteTimeWindow=function(n){var e=this._events;e.push(n),e.length>this._bufferSize&&e.shift(),t.prototype.next.call(this,n)},n.prototype.nextTimeWindow=function(n){this._events.push(new l(this._getNow(),n)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,n)},n.prototype._subscribe=function(t){var n,e=this._infiniteTimeWindow,r=e?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new c.N;if(this.isStopped||this.hasError?n=u.w.EMPTY:(this.observers.push(t),n=new s.W(this,t)),i&&t.add(t=new a.ht(t,i)),e)for(var f=0;f<o&&!t.closed;f++)t.next(r[f]);else for(f=0;f<o&&!t.closed;f++)t.next(r[f].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),n},n.prototype._getNow=function(){return(this.scheduler||o.c).now()},n.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),n=this._bufferSize,e=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<e);)o++;return i>n&&(o=Math.max(o,i-n)),o>0&&r.splice(0,o),r},n}(i.xQ),l=function(){return function(t,n){this.time=t,this.value=n}}()},8725:(t,n,e)=>{"use strict";e.d(n,{b:()=>r});var r=function(){function t(n,e){void 0===e&&(e=t.now),this.SchedulerAction=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.SchedulerAction(this,t).schedule(e,n)},t.now=function(){return Date.now()},t}()},211:(t,n,e)=>{"use strict";e.d(n,{Yc:()=>f,xQ:()=>l});var r=e(655),i=e(2772),o=e(979),u=e(8760),a=e(1016),c=e(8253),s=e(3142),f=function(t){function n(n){var e=t.call(this,n)||this;return e.destination=n,e}return r.ZT(n,t),n}(o.L),l=function(t){function n(){var n=t.call(this)||this;return n.observers=[],n.closed=!1,n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return r.ZT(n,t),n.prototype[s.b]=function(){return new f(this)},n.prototype.lift=function(t){var n=new h(this,this);return n.operator=t,n},n.prototype.next=function(t){if(this.closed)throw new a.N;if(!this.isStopped)for(var n=this.observers,e=n.length,r=n.slice(),i=0;i<e;i++)r[i].next(t)},n.prototype.error=function(t){if(this.closed)throw new a.N;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var n=this.observers,e=n.length,r=n.slice(),i=0;i<e;i++)r[i].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new a.N;this.isStopped=!0;for(var t=this.observers,n=t.length,e=t.slice(),r=0;r<n;r++)e[r].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(n){if(this.closed)throw new a.N;return t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){if(this.closed)throw new a.N;return this.hasError?(t.error(this.thrownError),u.w.EMPTY):this.isStopped?(t.complete(),u.w.EMPTY):(this.observers.push(t),new c.W(this,t))},n.prototype.asObservable=function(){var t=new i.y;return t.source=this,t},n.create=function(t,n){return new h(t,n)},n}(i.y),h=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return r.ZT(n,t),n.prototype.next=function(t){var n=this.destination;n&&n.next&&n.next(t)},n.prototype.error=function(t){var n=this.destination;n&&n.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):u.w.EMPTY},n}(l)},8253:(t,n,e)=>{"use strict";e.d(n,{W:()=>i});var r=e(655),i=function(t){function n(n,e){var r=t.call(this)||this;return r.subject=n,r.subscriber=e,r.closed=!1,r}return r.ZT(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,n=t.observers;if(this.subject=null,n&&0!==n.length&&!t.isStopped&&!t.closed){var e=n.indexOf(this.subscriber);-1!==e&&n.splice(e,1)}}},n}(e(8760).w)},979:(t,n,e)=>{"use strict";e.d(n,{L:()=>f});var r=e(655),i=e(4156),o=e(2174),u=e(8760),a=e(3142),c=e(150),s=e(1644),f=function(t){function n(e,r,i){var u=t.call(this)||this;switch(u.syncErrorValue=null,u.syncErrorThrown=!1,u.syncErrorThrowable=!1,u.isStopped=!1,arguments.length){case 0:u.destination=o.c;break;case 1:if(!e){u.destination=o.c;break}if("object"==typeof e){e instanceof n?(u.syncErrorThrowable=e.syncErrorThrowable,u.destination=e,e.add(u)):(u.syncErrorThrowable=!0,u.destination=new l(u,e));break}default:u.syncErrorThrowable=!0,u.destination=new l(u,e,r,i)}return u}return r.ZT(n,t),n.prototype[a.b]=function(){return this},n.create=function(t,e,r){var i=new n(t,e,r);return i.syncErrorThrowable=!1,i},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(u.w),l=function(t){function n(n,e,r,u){var a,c=t.call(this)||this;c._parentSubscriber=n;var s=c;return(0,i.m)(e)?a=e:e&&(a=e.next,r=e.error,u=e.complete,e!==o.c&&(s=Object.create(e),(0,i.m)(s.unsubscribe)&&c.add(s.unsubscribe.bind(s)),s.unsubscribe=c.unsubscribe.bind(c))),c._context=s,c._next=a,c._error=r,c._complete=u,c}return r.ZT(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;c.v.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,e=c.v.useDeprecatedSynchronousErrorHandling;if(this._error)e&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)e?(n.syncErrorValue=t,n.syncErrorThrown=!0):(0,s.z)(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;(0,s.z)(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};c.v.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),c.v.useDeprecatedSynchronousErrorHandling)throw t;(0,s.z)(t)}},n.prototype.__tryOrSetError=function(t,n,e){if(!c.v.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,e)}catch(n){return c.v.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):((0,s.z)(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(f)},8760:(t,n,e)=>{"use strict";e.d(n,{w:()=>a});var r=e(9026),i=e(2009),o=e(4156),u=e(8782),a=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var n;return t.prototype.unsubscribe=function(){var n;if(!this.closed){var e=this,a=e._parentOrParents,s=e._unsubscribe,f=e._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,a instanceof t)a.remove(this);else if(null!==a)for(var l=0;l<a.length;++l)a[l].remove(this);if((0,o.m)(s))try{s.call(this)}catch(t){n=t instanceof u.B?c(t.errors):[t]}if((0,r.k)(f)){l=-1;for(var h=f.length;++l<h;){var p=f[l];if((0,i.K)(p))try{p.unsubscribe()}catch(t){n=n||[],t instanceof u.B?n=n.concat(c(t.errors)):n.push(t)}}}if(n)throw new u.B(n)}},t.prototype.add=function(n){var e=n;if(!n)return t.EMPTY;switch(typeof n){case"function":e=new t(n);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var r=e;(e=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var i=e._parentOrParents;if(null===i)e._parentOrParents=this;else if(i instanceof t){if(i===this)return e;e._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return e;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[e]:o.push(e),e},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}},t.EMPTY=((n=new t).closed=!0,n),t}();function c(t){return t.reduce((function(t,n){return t.concat(n instanceof u.B?n.errors:n)}),[])}},150:(t,n,e)=>{"use strict";e.d(n,{v:()=>i});var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},3140:(t,n,e)=>{"use strict";e.d(n,{c:()=>s,N:()=>f});var r=e(655),i=e(211),o=e(2772),u=e(979),a=e(8760),c=e(3018),s=function(t){function n(n,e){var r=t.call(this)||this;return r.source=n,r.subjectFactory=e,r._refCount=0,r._isComplete=!1,r}return r.ZT(n,t),n.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},n.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},n.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new a.w).add(this.source.subscribe(new l(this.getSubject(),this))),t.closed&&(this._connection=null,t=a.w.EMPTY)),t},n.prototype.refCount=function(){return(0,c.x)()(this)},n}(o.y),f=function(){var t=s.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),l=function(t){function n(n,e){var r=t.call(this,n)||this;return r.connectable=e,r}return r.ZT(n,t),n.prototype._error=function(n){this._unsubscribe(),t.prototype._error.call(this,n)},n.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var n=t._connection;t._refCount=0,t._subject=null,t._connection=null,n&&n.unsubscribe()}},n}(i.Yc);u.L},5142:(t,n,e)=>{"use strict";e.d(n,{aj:()=>f,Ms:()=>l});var r=e(655),i=e(7507),o=e(9026),u=e(2039),a=e(7407),c=e(3375),s={};function f(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null,r=null;return(0,i.K)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&(0,o.k)(t[0])&&(t=t[0]),(0,c.n)(t,r).lift(new l(e))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function n(n,e){var r=t.call(this,n)||this;return r.resultSelector=e,r.active=0,r.values=[],r.observables=[],r}return r.ZT(n,t),n.prototype._next=function(t){this.values.push(s),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var e=0;e<n;e++){var r=t[e];this.add((0,a.D)(this,r,r,e))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.values,u=o[e],a=this.toRespond?u===s?--this.toRespond:this.toRespond:0;o[e]=n,0===a&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(u.L)},9795:(t,n,e)=>{"use strict";e.d(n,{z:()=>o});var r=e(8170),i=e(2257);function o(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(0,i.u)()(r.of.apply(void 0,t))}},1410:(t,n,e)=>{"use strict";e.d(n,{P:()=>u});var r=e(2772),i=e(5760),o=e(5631);function u(t){return new r.y((function(n){var e;try{e=t()}catch(t){return void n.error(t)}return(e?(0,i.D)(e):(0,o.c)()).subscribe(n)}))}},5631:(t,n,e)=>{"use strict";e.d(n,{E:()=>i,c:()=>o});var r=e(2772),i=new r.y((function(t){return t.complete()}));function o(t){return t?function(t){return new r.y((function(n){return t.schedule((function(){return n.complete()}))}))}(t):i}},5760:(t,n,e)=>{"use strict";e.d(n,{D:()=>u});var r=e(2772),i=e(7843),o=e(8107);function u(t,n){return n?(0,o.x)(t,n):t instanceof r.y?t:new r.y((0,i.s)(t))}},3375:(t,n,e)=>{"use strict";e.d(n,{n:()=>u});var r=e(2772),i=e(6900),o=e(3109);function u(t,n){return n?(0,o.r)(t,n):new r.y((0,i.V)(t))}},4370:(t,n,e)=>{"use strict";e.d(n,{T:()=>a});var r=e(2772),i=e(7507),o=e(2556),u=e(3375);function a(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Number.POSITIVE_INFINITY,a=null,c=t[t.length-1];return(0,i.K)(c)?(a=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(e=t.pop())):"number"==typeof c&&(e=t.pop()),null===a&&1===t.length&&t[0]instanceof r.y?t[0]:(0,o.J)(e)((0,u.n)(t,a))}},8170:(t,n,e)=>{"use strict";e.d(n,{of:()=>u});var r=e(7507),i=e(3375),o=e(3109);function u(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return(0,r.K)(e)?(t.pop(),(0,o.r)(t,e)):(0,i.n)(t)}},8821:(t,n,e)=>{"use strict";e.d(n,{S3:()=>c});var r=e(655),i=e(9026),o=e(3375),u=e(2039),a=e(7407);function c(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){if(!(0,i.k)(t[0]))return t[0];t=t[0]}return(0,o.n)(t,void 0).lift(new s)}var s=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new f(t))},t}(),f=function(t){function n(n){var e=t.call(this,n)||this;return e.hasFirst=!1,e.observables=[],e.subscriptions=[],e}return r.ZT(n,t),n.prototype._next=function(t){this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{for(var e=0;e<n&&!this.hasFirst;e++){var r=t[e],i=(0,a.D)(this,r,r,e);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},n.prototype.notifyNext=function(t,n,e,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==e){var u=this.subscriptions[o];u.unsubscribe(),this.remove(u)}this.subscriptions=null}this.destination.next(n)},n}(u.L)},4944:(t,n,e)=>{"use strict";e.d(n,{_:()=>i});var r=e(2772);function i(t,n){return n?new r.y((function(e){return n.schedule(o,0,{error:t,subscriber:e})})):new r.y((function(n){return n.error(t)}))}function o(t){var n=t.error;t.subscriber.error(n)}},9604:(t,n,e)=>{"use strict";e.d(n,{H:()=>a});var r=e(2772),i=e(964),o=e(5812),u=e(7507);function a(t,n,e){void 0===t&&(t=0);var a=-1;return(0,o.k)(n)?a=Number(n)<1?1:Number(n):(0,u.K)(n)&&(e=n),(0,u.K)(e)||(e=i.P),new r.y((function(n){var r=(0,o.k)(t)?t:+t-e.now();return e.schedule(c,r,{index:0,period:a,subscriber:n})}))}function c(t){var n=t.index,e=t.period,r=t.subscriber;if(r.next(n),!r.closed){if(-1===e)return r.complete();t.index=n+1,this.schedule(t,e)}}},5080:(t,n,e)=>{"use strict";e.d(n,{$R:()=>f,mx:()=>l});var r=e(655),i=e(3375),o=e(9026),u=e(979),a=e(2039),c=e(7407),s=e(999);function f(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return"function"==typeof e&&t.pop(),(0,i.n)(t,void 0).lift(new l(e))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function n(n,e,r){void 0===r&&(r=Object.create(null));var i=t.call(this,n)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof e?e:null,i.values=r,i}return r.ZT(n,t),n.prototype._next=function(t){var n=this.iterators;(0,o.k)(t)?n.push(new d(t)):"function"==typeof t[s.hZ]?n.push(new p(t[s.hZ]())):n.push(new v(this.destination,this,t))},n.prototype._complete=function(){var t=this.iterators,n=t.length;if(this.unsubscribe(),0!==n){this.active=n;for(var e=0;e<n;e++){var r=t[e];r.stillUnsubscribed?this.destination.add(r.subscribe(r,e)):this.active--}}else this.destination.complete()},n.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},n.prototype.checkIterators=function(){for(var t=this.iterators,n=t.length,e=this.destination,r=0;r<n;r++)if("function"==typeof(u=t[r]).hasValue&&!u.hasValue())return;var i=!1,o=[];for(r=0;r<n;r++){var u,a=(u=t[r]).next();if(u.hasCompleted()&&(i=!0),a.done)return void e.complete();o.push(a.value)}this.resultSelector?this._tryresultSelector(o):e.next(o),i&&e.complete()},n.prototype._tryresultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(u.L),p=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),d=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[s.hZ]=function(){return this},t.prototype.next=function(t){var n=this.index++,e=this.array;return n<this.length?{value:e[n],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),v=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.parent=e,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.ZT(n,t),n.prototype[s.hZ]=function(){return this},n.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},n.prototype.hasValue=function(){return this.buffer.length>0},n.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},n.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,i){this.buffer.push(n),this.parent.checkIterators()},n.prototype.subscribe=function(t,n){return(0,c.D)(this,this.observable,this,n)},n}(a.L)},2257:(t,n,e)=>{"use strict";e.d(n,{u:()=>i});var r=e(2556);function i(){return(0,r.J)(1)}},6008:(t,n,e)=>{"use strict";e.d(n,{h:()=>o});var r=e(655),i=e(979);function o(t,n){return function(e){return e.lift(new u(t,n))}}var u=function(){function t(t,n){this.predicate=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.predicate,this.thisArg))},t}(),a=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.thisArg=r,i.count=0,i}return r.ZT(n,t),n.prototype._next=function(t){var n;try{n=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}n&&this.destination.next(t)},n}(i.L)},1120:(t,n,e)=>{"use strict";e.d(n,{v:()=>c,T:()=>h});var r=e(655),i=e(979),o=e(8760),u=e(2772),a=e(211);function c(t,n,e,r){return function(i){return i.lift(new s(t,n,e,r))}}var s=function(){function t(t,n,e,r){this.keySelector=t,this.elementSelector=n,this.durationSelector=e,this.subjectSelector=r}return t.prototype.call=function(t,n){return n.subscribe(new f(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),f=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.keySelector=e,u.elementSelector=r,u.durationSelector=i,u.subjectSelector=o,u.groups=null,u.attemptedToUnsubscribe=!1,u.count=0,u}return r.ZT(n,t),n.prototype._next=function(t){var n;try{n=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,n)},n.prototype._group=function(t,n){var e=this.groups;e||(e=this.groups=new Map);var r,i=e.get(n);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new a.xQ,e.set(n,i);var o=new h(n,i,this);if(this.destination.next(o),this.durationSelector){var u=void 0;try{u=this.durationSelector(new h(n,i))}catch(t){return void this.error(t)}this.add(u.subscribe(new l(n,i,this)))}}i.closed||i.next(r)},n.prototype._error=function(t){var n=this.groups;n&&(n.forEach((function(n,e){n.error(t)})),n.clear()),this.destination.error(t)},n.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,n){t.complete()})),t.clear()),this.destination.complete()},n.prototype.removeGroup=function(t){this.groups.delete(t)},n.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},n}(i.L),l=function(t){function n(n,e,r){var i=t.call(this,e)||this;return i.key=n,i.group=e,i.parent=r,i}return r.ZT(n,t),n.prototype._next=function(t){this.complete()},n.prototype._unsubscribe=function(){var t=this.parent,n=this.key;this.key=this.parent=null,t&&t.removeGroup(n)},n}(i.L),h=function(t){function n(n,e,r){var i=t.call(this)||this;return i.key=n,i.groupSubject=e,i.refCountSubscription=r,i}return r.ZT(n,t),n.prototype._subscribe=function(t){var n=new o.w,e=this.refCountSubscription,r=this.groupSubject;return e&&!e.closed&&n.add(new p(e)),n.add(r.subscribe(t)),n},n}(u.y),p=function(t){function n(n){var e=t.call(this)||this;return e.parent=n,n.count++,e}return r.ZT(n,t),n.prototype.unsubscribe=function(){var n=this.parent;n.closed||this.closed||(t.prototype.unsubscribe.call(this),n.count-=1,0===n.count&&n.attemptedToUnsubscribe&&n.unsubscribe())},n}(o.w)},5709:(t,n,e)=>{"use strict";e.d(n,{U:()=>o});var r=e(655),i=e(979);function o(t,n){return function(e){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return e.lift(new u(t,n))}}var u=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.project,this.thisArg))},t}(),a=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.project=e,i.count=0,i.thisArg=r||i,i}return r.ZT(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(i.L)},2556:(t,n,e)=>{"use strict";e.d(n,{J:()=>o});var r=e(7746),i=e(3608);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),(0,r.zg)(i.y,t)}},7746:(t,n,e)=>{"use strict";e.d(n,{zg:()=>s});var r=e(655),i=e(7407),o=e(2039),u=e(1112),a=e(5709),c=e(5760);function s(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?function(r){return r.pipe(s((function(e,r){return(0,c.D)(t(e,r)).pipe((0,a.U)((function(t,i){return n(e,t,r,i)})))}),e))}:("number"==typeof n&&(e=n),function(n){return n.lift(new f(t,e))})}var f=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new l(t,this.project,this.concurrent))},t}(),l=function(t){function n(n,e,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,n)||this;return i.project=e,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return r.ZT(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=new u.d(this,n,e),o=this.destination;o.add(r);var a=(0,i.D)(this,t,void 0,void 0,r);a!==r&&o.add(a)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}(o.L)},9276:(t,n,e)=>{"use strict";e.d(n,{QV:()=>u,ht:()=>c});var r=e(655),i=e(979),o=e(2632);function u(t,n){return void 0===n&&(n=0),function(e){return e.lift(new a(t,n))}}var a=function(){function t(t,n){void 0===n&&(n=0),this.scheduler=t,this.delay=n}return t.prototype.call=function(t,n){return n.subscribe(new c(t,this.scheduler,this.delay))},t}(),c=function(t){function n(n,e,r){void 0===r&&(r=0);var i=t.call(this,n)||this;return i.scheduler=e,i.delay=r,i}return r.ZT(n,t),n.dispatch=function(t){var n=t.notification,e=t.destination;n.observe(e),this.unsubscribe()},n.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(n.dispatch,this.delay,new s(t,this.destination)))},n.prototype._next=function(t){this.scheduleMessage(o.P.createNext(t))},n.prototype._error=function(t){this.scheduleMessage(o.P.createError(t)),this.unsubscribe()},n.prototype._complete=function(){this.scheduleMessage(o.P.createComplete()),this.unsubscribe()},n}(i.L),s=function(){return function(t,n){this.notification=t,this.destination=n}}()},3018:(t,n,e)=>{"use strict";e.d(n,{x:()=>o});var r=e(655),i=e(979);function o(){return function(t){return t.lift(new u(t))}}var u=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,n){var e=this.connectable;e._refCount++;var r=new a(t,e),i=n.subscribe(r);return r.closed||(r.connection=e.connect()),i},t}(),a=function(t){function n(n,e){var r=t.call(this,n)||this;return r.connectable=e,r}return r.ZT(n,t),n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var n=t._refCount;if(n<=0)this.connection=null;else if(t._refCount=n-1,n>1)this.connection=null;else{var e=this.connection,r=t._connection;this.connection=null,!r||e&&r!==e||r.unsubscribe()}}else this.connection=null},n}(i.L)},3109:(t,n,e)=>{"use strict";e.d(n,{r:()=>o});var r=e(2772),i=e(8760);function o(t,n){return new r.y((function(e){var r=new i.w,o=0;return r.add(n.schedule((function(){o!==t.length?(e.next(t[o++]),e.closed||r.add(this.schedule())):e.complete()}))),r}))}},8107:(t,n,e)=>{"use strict";e.d(n,{x:()=>f});var r=e(2772),i=e(8760),o=e(5050),u=e(3109),a=e(999),c=e(336),s=e(9217);function f(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[o.L]}(t))return function(t,n){return new r.y((function(e){var r=new i.w;return r.add(n.schedule((function(){var i=t[o.L]();r.add(i.subscribe({next:function(t){r.add(n.schedule((function(){return e.next(t)})))},error:function(t){r.add(n.schedule((function(){return e.error(t)})))},complete:function(){r.add(n.schedule((function(){return e.complete()})))}}))}))),r}))}(t,n);if((0,c.t)(t))return function(t,n){return new r.y((function(e){var r=new i.w;return r.add(n.schedule((function(){return t.then((function(t){r.add(n.schedule((function(){e.next(t),r.add(n.schedule((function(){return e.complete()})))})))}),(function(t){r.add(n.schedule((function(){return e.error(t)})))}))}))),r}))}(t,n);if((0,s.z)(t))return(0,u.r)(t,n);if(function(t){return t&&"function"==typeof t[a.hZ]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new r.y((function(e){var r,o=new i.w;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(n.schedule((function(){r=t[a.hZ](),o.add(n.schedule((function(){if(!e.closed){var t,n;try{var i=r.next();t=i.value,n=i.done}catch(t){return void e.error(t)}n?e.complete():(e.next(t),this.schedule())}})))}))),o}))}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}},6114:(t,n,e)=>{"use strict";e.d(n,{o:()=>i});var r=e(655),i=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return r.ZT(n,t),n.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},n.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),setInterval(t.flush.bind(t,this),e)},n.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!==e&&this.delay===e&&!1===this.pending)return n;clearInterval(n)},n.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,n){var e=!1,r=void 0;try{this.work(t)}catch(t){e=!0,r=!!t&&t||new Error(t)}if(e)return this.unsubscribe(),r},n.prototype._unsubscribe=function(){var t=this.id,n=this.scheduler,e=n.actions,r=e.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&e.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null},n}(function(t){function n(n,e){return t.call(this)||this}return r.ZT(n,t),n.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},n}(e(8760).w))},8399:(t,n,e)=>{"use strict";e.d(n,{v:()=>o});var r=e(655),i=e(8725),o=function(t){function n(e,r){void 0===r&&(r=i.b.now);var o=t.call(this,e,(function(){return n.delegate&&n.delegate!==o?n.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.ZT(n,t),n.prototype.schedule=function(e,r,i){return void 0===r&&(r=0),n.delegate&&n.delegate!==this?n.delegate.schedule(e,r,i):t.prototype.schedule.call(this,e,r,i)},n.prototype.flush=function(t){var n=this.actions;if(this.active)n.push(t);else{var e;this.active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this.active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},n}(i.b)},6650:(t,n,e)=>{"use strict";e.d(n,{e:()=>s});var r=e(655),i=1,o=function(){return Promise.resolve()}(),u={};function a(t){return t in u&&(delete u[t],!0)}var c=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return r.ZT(n,t),n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,n,e,r):(n.actions.push(this),n.scheduled||(n.scheduled=(c=n.flush.bind(n,null),s=i++,u[s]=!0,o.then((function(){return a(s)&&c()})),s)));var c,s},n.prototype.recycleAsyncId=function(n,e,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,n,e,r);0===n.actions.length&&(a(e),n.scheduled=void 0)},n}(e(6114).o),s=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(n,t),n.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var n,e=this.actions,r=-1,i=e.length;t=t||e.shift();do{if(n=t.execute(t.state,t.delay))break}while(++r<i&&(t=e.shift()));if(this.active=!1,n){for(;++r<i&&(t=e.shift());)t.unsubscribe();throw n}},n}(e(8399).v))(c)},964:(t,n,e)=>{"use strict";e.d(n,{P:()=>i});var r=e(6114),i=new(e(8399).v)(r.o)},2546:(t,n,e)=>{"use strict";e.d(n,{c:()=>o});var r=e(655),i=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return r.ZT(n,t),n.prototype.schedule=function(n,e){return void 0===e&&(e=0),e>0?t.prototype.schedule.call(this,n,e):(this.delay=e,this.state=n,this.scheduler.flush(this),this)},n.prototype.execute=function(n,e){return e>0||this.closed?t.prototype.execute.call(this,n,e):this._execute(n,e)},n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,n,e,r):n.flush(this)},n}(e(6114).o),o=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(n,t),n}(e(8399).v))(i)},999:(t,n,e)=>{"use strict";function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}e.d(n,{hZ:()=>i});var i=r()},5050:(t,n,e)=>{"use strict";e.d(n,{L:()=>r});var r=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}()},3142:(t,n,e)=>{"use strict";e.d(n,{b:()=>r});var r=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}()},6565:(t,n,e)=>{"use strict";e.d(n,{W:()=>r});var r=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}()},6929:(t,n,e)=>{"use strict";e.d(n,{K:()=>r});var r=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}()},1016:(t,n,e)=>{"use strict";e.d(n,{N:()=>r});var r=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}()},1462:(t,n,e)=>{"use strict";e.d(n,{W:()=>r});var r=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}()},8782:(t,n,e)=>{"use strict";e.d(n,{B:()=>r});var r=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}()},3642:(t,n,e)=>{"use strict";e.d(n,{_:()=>i});var r=e(979);function i(t){for(;t;){var n=t,e=n.closed,i=n.destination,o=n.isStopped;if(e||o)return!1;t=i&&i instanceof r.L?i:null}return!0}},1644:(t,n,e)=>{"use strict";function r(t){setTimeout((function(){throw t}),0)}e.d(n,{z:()=>r})},3608:(t,n,e)=>{"use strict";function r(t){return t}e.d(n,{y:()=>r})},9026:(t,n,e)=>{"use strict";e.d(n,{k:()=>r});var r=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}()},9217:(t,n,e)=>{"use strict";e.d(n,{z:()=>r});var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},4156:(t,n,e)=>{"use strict";function r(t){return"function"==typeof t}e.d(n,{m:()=>r})},5812:(t,n,e)=>{"use strict";e.d(n,{k:()=>i});var r=e(9026);function i(t){return!(0,r.k)(t)&&t-parseFloat(t)+1>=0}},2009:(t,n,e)=>{"use strict";function r(t){return null!==t&&"object"==typeof t}e.d(n,{K:()=>r})},336:(t,n,e)=>{"use strict";function r(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}e.d(n,{t:()=>r})},7507:(t,n,e)=>{"use strict";function r(t){return t&&"function"==typeof t.schedule}e.d(n,{K:()=>r})},3306:(t,n,e)=>{"use strict";function r(){}e.d(n,{Z:()=>r})},8463:(t,n,e)=>{"use strict";function r(t,n){function e(){return!e.pred.apply(e.thisArg,arguments)}return e.pred=t,e.thisArg=n,e}e.d(n,{f:()=>r})},2561:(t,n,e)=>{"use strict";e.d(n,{z:()=>i,U:()=>o});var r=e(3608);function i(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return o(t)}function o(t){return 0===t.length?r.y:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}},7843:(t,n,e)=>{"use strict";e.d(n,{s:()=>f});var r=e(6900),i=e(1644),o=e(999),u=e(5050),a=e(9217),c=e(336),s=e(2009),f=function(t){if(t&&"function"==typeof t[u.L])return f=t,function(t){var n=f[u.L]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if((0,a.z)(t))return(0,r.V)(t);if((0,c.t)(t))return e=t,function(t){return e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,i.z),t};if(t&&"function"==typeof t[o.hZ])return n=t,function(t){for(var e=n[o.hZ]();;){var r=e.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof e.return&&t.add((function(){e.return&&e.return()})),t};var n,e,f,l=(0,s.K)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+l+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},6900:(t,n,e)=>{"use strict";e.d(n,{V:()=>r});var r=function(t){return function(n){for(var e=0,r=t.length;e<r&&!n.closed;e++)n.next(t[e]);n.complete()}}},7407:(t,n,e)=>{"use strict";e.d(n,{D:()=>u});var r=e(1112),i=e(7843),o=e(2772);function u(t,n,e,u,a){if(void 0===a&&(a=new r.d(t,e,u)),!a.closed)return n instanceof o.y?n.subscribe(a):(0,i.s)(n)(a)}},1717:(t,n,e)=>{"use strict";e.r(n),e.d(n,{audit:()=>u,auditTime:()=>l,buffer:()=>h,bufferCount:()=>y,bufferTime:()=>x,bufferToggle:()=>k,bufferWhen:()=>F,catchError:()=>O,combineAll:()=>V,combineLatest:()=>q,concat:()=>Y,concatAll:()=>W.u,concatMap:()=>X,concatMapTo:()=>$,count:()=>G,debounce:()=>J,debounceTime:()=>et,defaultIfEmpty:()=>ut,delay:()=>lt,delayWhen:()=>yt,dematerialize:()=>xt,distinct:()=>Mt,distinctUntilChanged:()=>Et,distinctUntilKeyChanged:()=>Ct,elementAt:()=>Ut,endWith:()=>Zt,every:()=>Yt,exhaust:()=>Xt,exhaustMap:()=>Qt,expand:()=>nn,filter:()=>Ft.h,finalize:()=>on,find:()=>cn,findIndex:()=>ln,first:()=>pn,flatMap:()=>H.zg,groupBy:()=>dn.v,ignoreElements:()=>vn,isEmpty:()=>gn,last:()=>Mn,map:()=>Kt.U,mapTo:()=>Tn,materialize:()=>An,max:()=>On,merge:()=>Dn,mergeAll:()=>Rn.J,mergeMap:()=>H.zg,mergeMapTo:()=>Vn,mergeScan:()=>Bn,min:()=>Zn,multicast:()=>Wn,observeOn:()=>Xn.QV,onErrorResumeNext:()=>$n,pairwise:()=>Qn,partition:()=>ee,pluck:()=>re,publish:()=>ue,publishBehavior:()=>ce,publishLast:()=>fe,publishReplay:()=>he,race:()=>de,reduce:()=>jn,refCount:()=>Ee.x,repeat:()=>ve,repeatWhen:()=>ge,retry:()=>xe,retryWhen:()=>Me,sample:()=>Ae,sampleTime:()=>Ie,scan:()=>In,sequenceEqual:()=>je,share:()=>Ve,shareReplay:()=>Be,single:()=>Ue,skip:()=>Ye,skipLast:()=>Xe,skipUntil:()=>Ke,skipWhile:()=>tr,startWith:()=>rr,subscribeOn:()=>ar,switchAll:()=>hr,switchMap:()=>sr,switchMapTo:()=>pr,take:()=>Rt,takeLast:()=>xn,takeUntil:()=>dr,takeWhile:()=>br,tap:()=>wr,throttle:()=>Nr,throttleTime:()=>kr,throwIfEmpty:()=>zt,timeInterval:()=>zr,timeout:()=>Br,timeoutWith:()=>Lr,timestamp:()=>Ur,toArray:()=>Yr,window:()=>Wr,windowCount:()=>$r,windowTime:()=>Qr,windowToggle:()=>oi,windowWhen:()=>ci,withLatestFrom:()=>li,zip:()=>vi,zipAll:()=>yi});var r=e(655),i=e(2039),o=e(7407);function u(t){return function(n){return n.lift(new a(t))}}var a=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new c(t,this.durationSelector))},t}(),c=function(t){function n(n,e){var r=t.call(this,n)||this;return r.durationSelector=e,r.hasValue=!1,r}return r.ZT(n,t),n.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var n=void 0;try{n=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var e=(0,o.D)(this,n);!e||e.closed?this.clearThrottle():this.add(this.throttled=e)}},n.prototype.clearThrottle=function(){var t=this,n=t.value,e=t.hasValue,r=t.throttled;r&&(this.remove(r),this.throttled=null,r.unsubscribe()),e&&(this.value=null,this.hasValue=!1,this.destination.next(n))},n.prototype.notifyNext=function(t,n,e,r){this.clearThrottle()},n.prototype.notifyComplete=function(){this.clearThrottle()},n}(i.L),s=e(964),f=e(9604);function l(t,n){return void 0===n&&(n=s.P),u((function(){return(0,f.H)(t,n)}))}function h(t){return function(n){return n.lift(new p(t))}}var p=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,n){return n.subscribe(new d(t,this.closingNotifier))},t}(),d=function(t){function n(n,e){var r=t.call(this,n)||this;return r.buffer=[],r.add((0,o.D)(r,e)),r}return r.ZT(n,t),n.prototype._next=function(t){this.buffer.push(t)},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.buffer;this.buffer=[],this.destination.next(o)},n}(i.L),v=e(979);function y(t,n){return void 0===n&&(n=null),function(e){return e.lift(new b(t,n))}}var b=function(){function t(t,n){this.bufferSize=t,this.startBufferEvery=n,this.subscriberClass=n&&t!==n?_:g}return t.prototype.call=function(t,n){return n.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),g=function(t){function n(n,e){var r=t.call(this,n)||this;return r.bufferSize=e,r.buffer=[],r}return r.ZT(n,t),n.prototype._next=function(t){var n=this.buffer;n.push(t),n.length==this.bufferSize&&(this.destination.next(n),this.buffer=[])},n.prototype._complete=function(){var n=this.buffer;n.length>0&&this.destination.next(n),t.prototype._complete.call(this)},n}(v.L),_=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.bufferSize=e,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.ZT(n,t),n.prototype._next=function(t){var n=this,e=n.bufferSize,r=n.startBufferEvery,i=n.buffers,o=n.count;this.count++,o%r==0&&i.push([]);for(var u=i.length;u--;){var a=i[u];a.push(t),a.length===e&&(i.splice(u,1),this.destination.next(a))}},n.prototype._complete=function(){for(var n=this.buffers,e=this.destination;n.length>0;){var r=n.shift();r.length>0&&e.next(r)}t.prototype._complete.call(this)},n}(v.L),m=e(7507);function x(t){var n=arguments.length,e=s.P;(0,m.K)(arguments[arguments.length-1])&&(e=arguments[arguments.length-1],n--);var r=null;n>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return n>=3&&(i=arguments[2]),function(n){return n.lift(new w(t,r,i,e))}}var w=function(){function t(t,n,e,r){this.bufferTimeSpan=t,this.bufferCreationInterval=n,this.maxBufferSize=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new M(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),S=function(){return function(){this.buffer=[]}}(),M=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;u.bufferTimeSpan=e,u.bufferCreationInterval=r,u.maxBufferSize=i,u.scheduler=o,u.contexts=[];var a=u.openContext();if(u.timespanOnly=null==r||r<0,u.timespanOnly){var c={subscriber:u,context:a,bufferTimeSpan:e};u.add(a.closeAction=o.schedule(T,e,c))}else{var s={subscriber:u,context:a},f={bufferTimeSpan:e,bufferCreationInterval:r,subscriber:u,scheduler:o};u.add(a.closeAction=o.schedule(E,e,s)),u.add(o.schedule(N,r,f))}return u}return r.ZT(n,t),n.prototype._next=function(t){for(var n,e=this.contexts,r=e.length,i=0;i<r;i++){var o=e[i],u=o.buffer;u.push(t),u.length==this.maxBufferSize&&(n=o)}n&&this.onBufferFull(n)},n.prototype._error=function(n){this.contexts.length=0,t.prototype._error.call(this,n)},n.prototype._complete=function(){for(var n=this.contexts,e=this.destination;n.length>0;){var r=n.shift();e.next(r.buffer)}t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){this.contexts=null},n.prototype.onBufferFull=function(t){this.closeContext(t);var n=t.closeAction;if(n.unsubscribe(),this.remove(n),!this.closed&&this.timespanOnly){t=this.openContext();var e=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:e};this.add(t.closeAction=this.scheduler.schedule(T,e,r))}},n.prototype.openContext=function(){var t=new S;return this.contexts.push(t),t},n.prototype.closeContext=function(t){this.destination.next(t.buffer);var n=this.contexts;(n?n.indexOf(t):-1)>=0&&n.splice(n.indexOf(t),1)},n}(v.L);function T(t){var n=t.subscriber,e=t.context;e&&n.closeContext(e),n.closed||(t.context=n.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function N(t){var n=t.bufferCreationInterval,e=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(E,e,{subscriber:r,context:o})),this.schedule(t,n))}function E(t){var n=t.subscriber,e=t.context;n.closeContext(e)}var A=e(8760);function k(t,n){return function(e){return e.lift(new C(t,n))}}var C=function(){function t(t,n){this.openings=t,this.closingSelector=n}return t.prototype.call=function(t,n){return n.subscribe(new I(t,this.openings,this.closingSelector))},t}(),I=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.openings=e,i.closingSelector=r,i.contexts=[],i.add((0,o.D)(i,e)),i}return r.ZT(n,t),n.prototype._next=function(t){for(var n=this.contexts,e=n.length,r=0;r<e;r++)n[r].buffer.push(t)},n.prototype._error=function(n){for(var e=this.contexts;e.length>0;){var r=e.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,n)},n.prototype._complete=function(){for(var n=this.contexts;n.length>0;){var e=n.shift();this.destination.next(e.buffer),e.subscription.unsubscribe(),e.buffer=null,e.subscription=null}this.contexts=null,t.prototype._complete.call(this)},n.prototype.notifyNext=function(t,n,e,r,i){t?this.closeBuffer(t):this.openBuffer(n)},n.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},n.prototype.openBuffer=function(t){try{var n=this.closingSelector.call(this,t);n&&this.trySubscribe(n)}catch(t){this._error(t)}},n.prototype.closeBuffer=function(t){var n=this.contexts;if(n&&t){var e=t.buffer,r=t.subscription;this.destination.next(e),n.splice(n.indexOf(t),1),this.remove(r),r.unsubscribe()}},n.prototype.trySubscribe=function(t){var n=this.contexts,e=new A.w,r={buffer:[],subscription:e};n.push(r);var i=(0,o.D)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),e.add(i))},n}(i.L);function F(t){return function(n){return n.lift(new P(t))}}var P=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new z(t,this.closingSelector))},t}(),z=function(t){function n(n,e){var r=t.call(this,n)||this;return r.closingSelector=e,r.subscribing=!1,r.openBuffer(),r}return r.ZT(n,t),n.prototype._next=function(t){this.buffer.push(t)},n.prototype._complete=function(){var n=this.buffer;n&&this.destination.next(n),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},n.prototype.notifyNext=function(t,n,e,r,i){this.openBuffer()},n.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},n.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var n,e=this.buffer;this.buffer&&this.destination.next(e),this.buffer=[];try{n=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new A.w,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add((0,o.D)(this,n)),this.subscribing=!1},n}(i.L),j=e(1112);function O(t){return function(n){var e=new L(t),r=n.lift(e);return e.caught=r}}var L=function(){function t(t){this.selector=t}return t.prototype.call=function(t,n){return n.subscribe(new D(t,this.selector,this.caught))},t}(),D=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.selector=e,i.caught=r,i}return r.ZT(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=void 0;try{e=this.selector(n,this.caught)}catch(n){return void t.prototype.error.call(this,n)}this._unsubscribeAndRecycle();var r=new j.d(this,void 0,void 0);this.add(r);var i=(0,o.D)(this,e,void 0,void 0,r);i!==r&&this.add(i)}},n}(i.L),R=e(5142);function V(t){return function(n){return n.lift(new R.Ms(t))}}var B=e(9026),U=e(5760);function q(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null;return"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&(0,B.k)(t[0])&&(t=t[0].slice()),function(n){return n.lift.call((0,U.D)([n].concat(t)),new R.Ms(e))}}var Z=e(9795);function Y(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(Z.z.apply(void 0,[n].concat(t)))}}var W=e(2257),H=e(7746);function X(t,n){return(0,H.zg)(t,n,1)}function $(t,n){return X((function(){return t}),n)}function G(t){return function(n){return n.lift(new K(t,n))}}var K=function(){function t(t,n){this.predicate=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Q(t,this.predicate,this.source))},t}(),Q=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.source=r,i.count=0,i.index=0,i}return r.ZT(n,t),n.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},n.prototype._tryPredicate=function(t){var n;try{n=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}n&&this.count++},n.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},n}(v.L);function J(t){return function(n){return n.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new nt(t,this.durationSelector))},t}(),nt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.durationSelector=e,r.hasValue=!1,r.durationSubscription=null,r}return r.ZT(n,t),n.prototype._next=function(t){try{var n=this.durationSelector.call(this,t);n&&this._tryNext(t,n)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.emitValue(),this.destination.complete()},n.prototype._tryNext=function(t,n){var e=this.durationSubscription;this.value=t,this.hasValue=!0,e&&(e.unsubscribe(),this.remove(e)),(e=(0,o.D)(this,n))&&!e.closed&&this.add(this.durationSubscription=e)},n.prototype.notifyNext=function(t,n,e,r,i){this.emitValue()},n.prototype.notifyComplete=function(){this.emitValue()},n.prototype.emitValue=function(){if(this.hasValue){var n=this.value,e=this.durationSubscription;e&&(this.durationSubscription=null,e.unsubscribe(),this.remove(e)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,n)}},n}(i.L);function et(t,n){return void 0===n&&(n=s.P),function(e){return e.lift(new rt(t,n))}}var rt=function(){function t(t,n){this.dueTime=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.dueTime=e,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.ZT(n,t),n.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},n.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},n.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},n.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},n}(v.L);function ot(t){t.debouncedNext()}function ut(t){return void 0===t&&(t=null),function(n){return n.lift(new at(t))}}var at=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,n){return n.subscribe(new ct(t,this.defaultValue))},t}(),ct=function(t){function n(n,e){var r=t.call(this,n)||this;return r.defaultValue=e,r.isEmpty=!0,r}return r.ZT(n,t),n.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},n.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},n}(v.L);function st(t){return t instanceof Date&&!isNaN(+t)}var ft=e(2632);function lt(t,n){void 0===n&&(n=s.P);var e=st(t)?+t-n.now():Math.abs(t);return function(t){return t.lift(new ht(e,n))}}var ht=function(){function t(t,n){this.delay=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new pt(t,this.delay,this.scheduler))},t}(),pt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.delay=e,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.ZT(n,t),n.dispatch=function(t){for(var n=t.source,e=n.queue,r=t.scheduler,i=t.destination;e.length>0&&e[0].time-r.now()<=0;)e.shift().notification.observe(i);if(e.length>0){var o=Math.max(0,e[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),n.active=!1},n.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(n.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},n.prototype.scheduleNotification=function(t){if(!0!==this.errored){var n=this.scheduler,e=new dt(n.now()+this.delay,t);this.queue.push(e),!1===this.active&&this._schedule(n)}},n.prototype._next=function(t){this.scheduleNotification(ft.P.createNext(t))},n.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.scheduleNotification(ft.P.createComplete()),this.unsubscribe()},n}(v.L),dt=function(){return function(t,n){this.time=t,this.notification=n}}(),vt=e(2772);function yt(t,n){return n?function(e){return new _t(e,n).lift(new bt(t))}:function(n){return n.lift(new bt(t))}}var bt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new gt(t,this.delayDurationSelector))},t}(),gt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.delayDurationSelector=e,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){var n=this.removeSubscription(t);n&&this.destination.next(n),this.tryComplete()},n.prototype._next=function(t){var n=this.index++;try{var e=this.delayDurationSelector(t,n);e&&this.tryDelay(e,t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},n.prototype.removeSubscription=function(t){t.unsubscribe();var n=this.delayNotifierSubscriptions.indexOf(t);return-1!==n&&this.delayNotifierSubscriptions.splice(n,1),t.outerValue},n.prototype.tryDelay=function(t,n){var e=(0,o.D)(this,t,n);e&&!e.closed&&(this.destination.add(e),this.delayNotifierSubscriptions.push(e))},n.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},n}(i.L),_t=function(t){function n(n,e){var r=t.call(this)||this;return r.source=n,r.subscriptionDelay=e,r}return r.ZT(n,t),n.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new mt(t,this.source))},n}(vt.y),mt=function(t){function n(n,e){var r=t.call(this)||this;return r.parent=n,r.source=e,r.sourceSubscribed=!1,r}return r.ZT(n,t),n.prototype._next=function(t){this.subscribeToSource()},n.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},n.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},n.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},n}(v.L);function xt(){return function(t){return t.lift(new wt)}}var wt=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new St(t))},t}(),St=function(t){function n(n){return t.call(this,n)||this}return r.ZT(n,t),n.prototype._next=function(t){t.observe(this.destination)},n}(v.L);function Mt(t,n){return function(e){return e.lift(new Tt(t,n))}}var Tt=function(){function t(t,n){this.keySelector=t,this.flushes=n}return t.prototype.call=function(t,n){return n.subscribe(new Nt(t,this.keySelector,this.flushes))},t}(),Nt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.keySelector=e,i.values=new Set,r&&i.add((0,o.D)(i,r)),i}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.values.clear()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},n.prototype._useKeySelector=function(t){var n,e=this.destination;try{n=this.keySelector(t)}catch(t){return void e.error(t)}this._finalizeNext(n,t)},n.prototype._finalizeNext=function(t,n){var e=this.values;e.has(t)||(e.add(t),this.destination.next(n))},n}(i.L);function Et(t,n){return function(e){return e.lift(new At(t,n))}}var At=function(){function t(t,n){this.compare=t,this.keySelector=n}return t.prototype.call=function(t,n){return n.subscribe(new kt(t,this.compare,this.keySelector))},t}(),kt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.keySelector=r,i.hasKey=!1,"function"==typeof e&&(i.compare=e),i}return r.ZT(n,t),n.prototype.compare=function(t,n){return t===n},n.prototype._next=function(t){var n;try{var e=this.keySelector;n=e?e(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,n)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=n,this.destination.next(t))},n}(v.L);function Ct(t,n){return Et((function(e,r){return n?n(e[t],r[t]):e[t]===r[t]}))}var It=e(6565),Ft=e(6008),Pt=e(6929);function zt(t){return void 0===t&&(t=Lt),function(n){return n.lift(new jt(t))}}var jt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,n){return n.subscribe(new Ot(t,this.errorFactory))},t}(),Ot=function(t){function n(n,e){var r=t.call(this,n)||this;return r.errorFactory=e,r.hasValue=!1,r}return r.ZT(n,t),n.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},n.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(n){t=n}this.destination.error(t)},n}(v.L);function Lt(){return new Pt.K}var Dt=e(5631);function Rt(t){return function(n){return 0===t?(0,Dt.c)():n.lift(new Vt(t))}}var Vt=function(){function t(t){if(this.total=t,this.total<0)throw new It.W}return t.prototype.call=function(t,n){return n.subscribe(new Bt(t,this.total))},t}(),Bt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.count=0,r}return r.ZT(n,t),n.prototype._next=function(t){var n=this.total,e=++this.count;e<=n&&(this.destination.next(t),e===n&&(this.destination.complete(),this.unsubscribe()))},n}(v.L);function Ut(t,n){if(t<0)throw new It.W;var e=arguments.length>=2;return function(r){return r.pipe((0,Ft.h)((function(n,e){return e===t})),Rt(1),e?ut(n):zt((function(){return new It.W})))}}var qt=e(8170);function Zt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return(0,Z.z)(n,qt.of.apply(void 0,t))}}function Yt(t,n){return function(e){return e.lift(new Wt(t,n,e))}}var Wt=function(){function t(t,n,e){this.predicate=t,this.thisArg=n,this.source=e}return t.prototype.call=function(t,n){return n.subscribe(new Ht(t,this.predicate,this.thisArg,this.source))},t}(),Ht=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.predicate=e,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.ZT(n,t),n.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},n.prototype._next=function(t){var n=!1;try{n=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}n||this.notifyComplete(!1)},n.prototype._complete=function(){this.notifyComplete(!0)},n}(v.L);function Xt(){return function(t){return t.lift(new $t)}}var $t=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new Gt(t))},t}(),Gt=function(t){function n(n){var e=t.call(this,n)||this;return e.hasCompleted=!1,e.hasSubscription=!1,e}return r.ZT(n,t),n.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add((0,o.D)(this,t)))},n.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},n.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},n}(i.L),Kt=e(5709);function Qt(t,n){return n?function(e){return e.pipe(Qt((function(e,r){return(0,U.D)(t(e,r)).pipe((0,Kt.U)((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new Jt(t))}}var Jt=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new tn(t,this.project))},t}(),tn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.project=e,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.ZT(n,t),n.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},n.prototype.tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=new j.d(this,n,e),i=this.destination;i.add(r);var u=(0,o.D)(this,t,void 0,void 0,r);u!==r&&i.add(u)},n.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyError=function(t){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},n}(i.L);function nn(t,n,e){return void 0===n&&(n=Number.POSITIVE_INFINITY),void 0===e&&(e=void 0),n=(n||0)<1?Number.POSITIVE_INFINITY:n,function(r){return r.lift(new en(t,n,e))}}var en=function(){function t(t,n,e){this.project=t,this.concurrent=n,this.scheduler=e}return t.prototype.call=function(t,n){return n.subscribe(new rn(t,this.project,this.concurrent,this.scheduler))},t}(),rn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.project=e,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.ZT(n,t),n.dispatch=function(t){var n=t.subscriber,e=t.result,r=t.value,i=t.index;n.subscribeToProjection(e,r,i)},n.prototype._next=function(t){var e=this.destination;if(e.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){e.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(n.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){e.error(t)}}else this.buffer.push(t)}},n.prototype.subscribeToProjection=function(t,n,e){this.active++,this.destination.add((0,o.D)(this,t,n,e))},n.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this._next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.destination.remove(t),this.active--,n&&n.length>0&&this._next(n.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},n}(i.L);function on(t){return function(n){return n.lift(new un(t))}}var un=function(){function t(t){this.callback=t}return t.prototype.call=function(t,n){return n.subscribe(new an(t,this.callback))},t}(),an=function(t){function n(n,e){var r=t.call(this,n)||this;return r.add(new A.w(e)),r}return r.ZT(n,t),n}(v.L);function cn(t,n){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(e){return e.lift(new sn(t,e,!1,n))}}var sn=function(){function t(t,n,e,r){this.predicate=t,this.source=n,this.yieldIndex=e,this.thisArg=r}return t.prototype.call=function(t,n){return n.subscribe(new fn(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),fn=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.predicate=e,u.source=r,u.yieldIndex=i,u.thisArg=o,u.index=0,u}return r.ZT(n,t),n.prototype.notifyComplete=function(t){var n=this.destination;n.next(t),n.complete(),this.unsubscribe()},n.prototype._next=function(t){var n=this.predicate,e=this.thisArg,r=this.index++;try{n.call(e||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},n}(v.L);function ln(t,n){return function(e){return e.lift(new sn(t,e,!0,n))}}var hn=e(3608);function pn(t,n){var e=arguments.length>=2;return function(r){return r.pipe(t?(0,Ft.h)((function(n,e){return t(n,e,r)})):hn.y,Rt(1),e?ut(n):zt((function(){return new Pt.K})))}}var dn=e(1120);function vn(){return function(t){return t.lift(new yn)}}var yn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new bn(t))},t}(),bn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(n,t),n.prototype._next=function(t){},n}(v.L);function gn(){return function(t){return t.lift(new _n)}}var _n=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new mn(t))},t}(),mn=function(t){function n(n){return t.call(this,n)||this}return r.ZT(n,t),n.prototype.notifyComplete=function(t){var n=this.destination;n.next(t),n.complete()},n.prototype._next=function(t){this.notifyComplete(!1)},n.prototype._complete=function(){this.notifyComplete(!0)},n}(v.L);function xn(t){return function(n){return 0===t?(0,Dt.c)():n.lift(new wn(t))}}var wn=function(){function t(t){if(this.total=t,this.total<0)throw new It.W}return t.prototype.call=function(t,n){return n.subscribe(new Sn(t,this.total))},t}(),Sn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.ring=new Array,r.count=0,r}return r.ZT(n,t),n.prototype._next=function(t){var n=this.ring,e=this.total,r=this.count++;n.length<e?n.push(t):n[r%e]=t},n.prototype._complete=function(){var t=this.destination,n=this.count;if(n>0)for(var e=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<e;i++){var o=n++%e;t.next(r[o])}t.complete()},n}(v.L);function Mn(t,n){var e=arguments.length>=2;return function(r){return r.pipe(t?(0,Ft.h)((function(n,e){return t(n,e,r)})):hn.y,xn(1),e?ut(n):zt((function(){return new Pt.K})))}}function Tn(t){return function(n){return n.lift(new Nn(t))}}var Nn=function(){function t(t){this.value=t}return t.prototype.call=function(t,n){return n.subscribe(new En(t,this.value))},t}(),En=function(t){function n(n,e){var r=t.call(this,n)||this;return r.value=e,r}return r.ZT(n,t),n.prototype._next=function(t){this.destination.next(this.value)},n}(v.L);function An(){return function(t){return t.lift(new kn)}}var kn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new Cn(t))},t}(),Cn=function(t){function n(n){return t.call(this,n)||this}return r.ZT(n,t),n.prototype._next=function(t){this.destination.next(ft.P.createNext(t))},n.prototype._error=function(t){var n=this.destination;n.next(ft.P.createError(t)),n.complete()},n.prototype._complete=function(){var t=this.destination;t.next(ft.P.createComplete()),t.complete()},n}(v.L);function In(t,n){var e=!1;return arguments.length>=2&&(e=!0),function(r){return r.lift(new Fn(t,n,e))}}var Fn=function(){function t(t,n,e){void 0===e&&(e=!1),this.accumulator=t,this.seed=n,this.hasSeed=e}return t.prototype.call=function(t,n){return n.subscribe(new Pn(t,this.accumulator,this.seed,this.hasSeed))},t}(),Pn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.accumulator=e,o._seed=r,o.hasSeed=i,o.index=0,o}return r.ZT(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.accumulator(this.seed,t,e)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(v.L),zn=e(2561);function jn(t,n){return arguments.length>=2?function(e){return(0,zn.z)(In(t,n),xn(1),ut(n))(e)}:function(n){return(0,zn.z)(In((function(n,e,r){return t(n,e,r+1)})),xn(1))(n)}}function On(t){return jn("function"==typeof t?function(n,e){return t(n,e)>0?n:e}:function(t,n){return t>n?t:n})}var Ln=e(4370);function Dn(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(Ln.T.apply(void 0,[n].concat(t)))}}var Rn=e(2556);function Vn(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?(0,H.zg)((function(){return t}),n,e):("number"==typeof n&&(e=n),(0,H.zg)((function(){return t}),e))}function Bn(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),function(r){return r.lift(new Un(t,n,e))}}var Un=function(){function t(t,n,e){this.accumulator=t,this.seed=n,this.concurrent=e}return t.prototype.call=function(t,n){return n.subscribe(new qn(t,this.accumulator,this.seed,this.concurrent))},t}(),qn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.accumulator=e,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.ZT(n,t),n.prototype._next=function(t){if(this.active<this.concurrent){var n=this.index++,e=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,n)}catch(t){return e.error(t)}this.active++,this._innerSub(r,t,n)}else this.buffer.push(t)},n.prototype._innerSub=function(t,n,e){var r=new j.d(this,n,e),i=this.destination;i.add(r);var u=(0,o.D)(this,t,void 0,void 0,r);u!==r&&i.add(u)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.destination;this.acc=n,this.hasValue=!0,o.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.destination.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},n}(i.L);function Zn(t){return jn("function"==typeof t?function(n,e){return t(n,e)<0?n:e}:function(t,n){return t<n?t:n})}var Yn=e(3140);function Wn(t,n){return function(e){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof n)return e.lift(new Hn(r,n));var i=Object.create(e,Yn.N);return i.source=e,i.subjectFactory=r,i}}var Hn=function(){function t(t,n){this.subjectFactory=t,this.selector=n}return t.prototype.call=function(t,n){var e=this.selector,r=this.subjectFactory(),i=e(r).subscribe(t);return i.add(n.subscribe(r)),i},t}(),Xn=e(9276);function $n(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 1===t.length&&(0,B.k)(t[0])&&(t=t[0]),function(n){return n.lift(new Gn(t))}}var Gn=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,n){return n.subscribe(new Kn(t,this.nextSources))},t}(),Kn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.destination=n,r.nextSources=e,r}return r.ZT(n,t),n.prototype.notifyError=function(t,n){this.subscribeToNextSource()},n.prototype.notifyComplete=function(t){this.subscribeToNextSource()},n.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},n.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},n.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var n=new j.d(this,void 0,void 0),e=this.destination;e.add(n);var r=(0,o.D)(this,t,void 0,void 0,n);r!==n&&e.add(r)}else this.destination.complete()},n}(i.L);function Qn(){return function(t){return t.lift(new Jn)}}var Jn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new te(t))},t}(),te=function(t){function n(n){var e=t.call(this,n)||this;return e.hasPrev=!1,e}return r.ZT(n,t),n.prototype._next=function(t){var n;this.hasPrev?n=[this.prev,t]:this.hasPrev=!0,this.prev=t,n&&this.destination.next(n)},n}(v.L),ne=e(8463);function ee(t,n){return function(e){return[(0,Ft.h)(t,n)(e),(0,Ft.h)((0,ne.f)(t,n))(e)]}}function re(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.length;if(0===e)throw new Error("list of properties cannot be empty.");return function(n){return(0,Kt.U)(ie(t,e))(n)}}function ie(t,n){return function(e){for(var r=e,i=0;i<n;i++){var o=r[t[i]];if(void 0===o)return;r=o}return r}}var oe=e(211);function ue(t){return t?Wn((function(){return new oe.xQ}),t):Wn(new oe.xQ)}var ae=e(9233);function ce(t){return function(n){return Wn(new ae.X(t))(n)}}var se=e(364);function fe(){return function(t){return Wn(new se.c)(t)}}var le=e(2630);function he(t,n,e,r){e&&"function"!=typeof e&&(r=e);var i="function"==typeof e?e:void 0,o=new le.t(t,n,r);return function(t){return Wn((function(){return o}),i)(t)}}var pe=e(8821);function de(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return 1===t.length&&(0,B.k)(t[0])&&(t=t[0]),n.lift.call(pe.S3.apply(void 0,[n].concat(t)))}}function ve(t){return void 0===t&&(t=-1),function(n){return 0===t?(0,Dt.c)():t<0?n.lift(new ye(-1,n)):n.lift(new ye(t-1,n))}}var ye=function(){function t(t,n){this.count=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new be(t,this.count,this.source))},t}(),be=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.count=e,i.source=r,i}return r.ZT(n,t),n.prototype.complete=function(){if(!this.isStopped){var n=this.source,e=this.count;if(0===e)return t.prototype.complete.call(this);e>-1&&(this.count=e-1),n.subscribe(this._unsubscribeAndRecycle())}},n}(v.L);function ge(t){return function(n){return n.lift(new _e(t))}}var _e=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){return n.subscribe(new me(t,this.notifier,n))},t}(),me=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.notifier=e,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},n.prototype.notifyComplete=function(n){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},n.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},n.prototype._unsubscribe=function(){var t=this.notifications,n=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),n&&(n.unsubscribe(),this.retriesSubscription=null),this.retries=null},n.prototype._unsubscribeAndRecycle=function(){var n=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=n,this},n.prototype.subscribeToRetries=function(){var n;this.notifications=new oe.xQ;try{n=(0,this.notifier)(this.notifications)}catch(n){return t.prototype.complete.call(this)}this.retries=n,this.retriesSubscription=(0,o.D)(this,n)},n}(i.L);function xe(t){return void 0===t&&(t=-1),function(n){return n.lift(new we(t,n))}}var we=function(){function t(t,n){this.count=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Se(t,this.count,this.source))},t}(),Se=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.count=e,i.source=r,i}return r.ZT(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,n);r>-1&&(this.count=r-1),e.subscribe(this._unsubscribeAndRecycle())}},n}(v.L);function Me(t){return function(n){return n.lift(new Te(t,n))}}var Te=function(){function t(t,n){this.notifier=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Ne(t,this.notifier,this.source))},t}(),Ne=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.notifier=e,i.source=r,i}return r.ZT(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=this.errors,r=this.retries,i=this.retriesSubscription;if(r)this.errors=null,this.retriesSubscription=null;else{e=new oe.xQ;try{r=(0,this.notifier)(e)}catch(n){return t.prototype.error.call(this,n)}i=(0,o.D)(this,r)}this._unsubscribeAndRecycle(),this.errors=e,this.retries=r,this.retriesSubscription=i,e.next(n)}},n.prototype._unsubscribe=function(){var t=this.errors,n=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),n&&(n.unsubscribe(),this.retriesSubscription=null),this.retries=null},n.prototype.notifyNext=function(t,n,e,r,i){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},n}(i.L),Ee=e(3018);function Ae(t){return function(n){return n.lift(new ke(t))}}var ke=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new Ce(t),r=n.subscribe(e);return r.add((0,o.D)(e,this.notifier)),r},t}(),Ce=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.hasValue=!1,n}return r.ZT(n,t),n.prototype._next=function(t){this.value=t,this.hasValue=!0},n.prototype.notifyNext=function(t,n,e,r,i){this.emitValue()},n.prototype.notifyComplete=function(){this.emitValue()},n.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},n}(i.L);function Ie(t,n){return void 0===n&&(n=s.P),function(e){return e.lift(new Fe(t,n))}}var Fe=function(){function t(t,n){this.period=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new Pe(t,this.period,this.scheduler))},t}(),Pe=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.period=e,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(ze,e,{subscriber:i,period:e})),i}return r.ZT(n,t),n.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},n.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},n}(v.L);function ze(t){var n=t.subscriber,e=t.period;n.notifyNext(),this.schedule(t,e)}function je(t,n){return function(e){return e.lift(new Oe(t,n))}}var Oe=function(){function t(t,n){this.compareTo=t,this.comparator=n}return t.prototype.call=function(t,n){return n.subscribe(new Le(t,this.compareTo,this.comparator))},t}(),Le=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.compareTo=e,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(e.subscribe(new De(n,i))),i}return r.ZT(n,t),n.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},n.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},n.prototype.checkValues=function(){for(var t=this,n=t._a,e=t._b,r=t.comparator;n.length>0&&e.length>0;){var i=n.shift(),o=e.shift(),u=!1;try{u=r?r(i,o):i===o}catch(t){this.destination.error(t)}u||this.emit(!1)}},n.prototype.emit=function(t){var n=this.destination;n.next(t),n.complete()},n.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},n.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},n}(v.L),De=function(t){function n(n,e){var r=t.call(this,n)||this;return r.parent=e,r}return r.ZT(n,t),n.prototype._next=function(t){this.parent.nextB(t)},n.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},n.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},n}(v.L);function Re(){return new oe.xQ}function Ve(){return function(t){return(0,Ee.x)()(Wn(Re)(t))}}function Be(t,n,e){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:n,refCount:!1,scheduler:e},function(t){return t.lift(function(t){var n,e,r=t.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=t.windowTime,u=void 0===o?Number.POSITIVE_INFINITY:o,a=t.refCount,c=t.scheduler,s=0,f=!1,l=!1;return function(t){s++,n&&!f||(f=!1,n=new le.t(i,u,c),e=t.subscribe({next:function(t){n.next(t)},error:function(t){f=!0,n.error(t)},complete:function(){l=!0,e=void 0,n.complete()}}));var r=n.subscribe(this);this.add((function(){s--,r.unsubscribe(),e&&!l&&a&&0===s&&(e.unsubscribe(),e=void 0,n=void 0)}))}}(r))}}function Ue(t){return function(n){return n.lift(new qe(t,n))}}var qe=function(){function t(t,n){this.predicate=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Ze(t,this.predicate,this.source))},t}(),Ze=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.source=r,i.seenValue=!1,i.index=0,i}return r.ZT(n,t),n.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},n.prototype._next=function(t){var n=this.index++;this.predicate?this.tryNext(t,n):this.applySingleValue(t)},n.prototype.tryNext=function(t,n){try{this.predicate(t,n,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new Pt.K)},n}(v.L);function Ye(t){return function(n){return n.lift(new We(t))}}var We=function(){function t(t){this.total=t}return t.prototype.call=function(t,n){return n.subscribe(new He(t,this.total))},t}(),He=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.count=0,r}return r.ZT(n,t),n.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},n}(v.L);function Xe(t){return function(n){return n.lift(new $e(t))}}var $e=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new It.W}return t.prototype.call=function(t,n){return 0===this._skipCount?n.subscribe(new v.L(t)):n.subscribe(new Ge(t,this._skipCount))},t}(),Ge=function(t){function n(n,e){var r=t.call(this,n)||this;return r._skipCount=e,r._count=0,r._ring=new Array(e),r}return r.ZT(n,t),n.prototype._next=function(t){var n=this._skipCount,e=this._count++;if(e<n)this._ring[e]=t;else{var r=e%n,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},n}(v.L);function Ke(t){return function(n){return n.lift(new Qe(t))}}var Qe=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){return n.subscribe(new Je(t,this.notifier))},t}(),Je=function(t){function n(n,e){var r=t.call(this,n)||this;r.hasValue=!1;var i=new j.d(r,void 0,void 0);r.add(i),r.innerSubscription=i;var u=(0,o.D)(r,e,void 0,void 0,i);return u!==i&&(r.add(u),r.innerSubscription=u),r}return r.ZT(n,t),n.prototype._next=function(n){this.hasValue&&t.prototype._next.call(this,n)},n.prototype.notifyNext=function(t,n,e,r,i){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},n.prototype.notifyComplete=function(){},n}(i.L);function tr(t){return function(n){return n.lift(new nr(t))}}var nr=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,n){return n.subscribe(new er(t,this.predicate))},t}(),er=function(t){function n(n,e){var r=t.call(this,n)||this;return r.predicate=e,r.skipping=!0,r.index=0,r}return r.ZT(n,t),n.prototype._next=function(t){var n=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||n.next(t)},n.prototype.tryCallPredicate=function(t){try{var n=this.predicate(t,this.index++);this.skipping=Boolean(n)}catch(t){this.destination.error(t)}},n}(v.L);function rr(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return(0,m.K)(e)?(t.pop(),function(n){return(0,Z.z)(t,n,e)}):function(n){return(0,Z.z)(t,n)}}var ir=e(6650),or=e(5812),ur=function(t){function n(n,e,r){void 0===e&&(e=0),void 0===r&&(r=ir.e);var i=t.call(this)||this;return i.source=n,i.delayTime=e,i.scheduler=r,(!(0,or.k)(e)||e<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=ir.e),i}return r.ZT(n,t),n.create=function(t,e,r){return void 0===e&&(e=0),void 0===r&&(r=ir.e),new n(t,e,r)},n.dispatch=function(t){var n=t.source,e=t.subscriber;return this.add(n.subscribe(e))},n.prototype._subscribe=function(t){var e=this.delayTime,r=this.source;return this.scheduler.schedule(n.dispatch,e,{source:r,subscriber:t})},n}(vt.y);function ar(t,n){return void 0===n&&(n=0),function(e){return e.lift(new cr(t,n))}}var cr=function(){function t(t,n){this.scheduler=t,this.delay=n}return t.prototype.call=function(t,n){return new ur(n,this.delay,this.scheduler).subscribe(t)},t}();function sr(t,n){return"function"==typeof n?function(e){return e.pipe(sr((function(e,r){return(0,U.D)(t(e,r)).pipe((0,Kt.U)((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new fr(t))}}var fr=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new lr(t,this.project))},t}(),lr=function(t){function n(n,e){var r=t.call(this,n)||this;return r.project=e,r.index=0,r}return r.ZT(n,t),n.prototype._next=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=this.innerSubscription;r&&r.unsubscribe();var i=new j.d(this,n,e),u=this.destination;u.add(i),this.innerSubscription=(0,o.D)(this,t,void 0,void 0,i),this.innerSubscription!==i&&u.add(this.innerSubscription)},n.prototype._complete=function(){var n=this.innerSubscription;n&&!n.closed||t.prototype._complete.call(this),this.unsubscribe()},n.prototype._unsubscribe=function(){this.innerSubscription=null},n.prototype.notifyComplete=function(n){this.destination.remove(n),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n}(i.L);function hr(){return sr(hn.y)}function pr(t,n){return n?sr((function(){return t}),n):sr((function(){return t}))}function dr(t){return function(n){return n.lift(new vr(t))}}var vr=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new yr(t),r=(0,o.D)(e,this.notifier);return r&&!e.seenValue?(e.add(r),n.subscribe(e)):e},t}(),yr=function(t){function n(n){var e=t.call(this,n)||this;return e.seenValue=!1,e}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.seenValue=!0,this.complete()},n.prototype.notifyComplete=function(){},n}(i.L);function br(t,n){return void 0===n&&(n=!1),function(e){return e.lift(new gr(t,n))}}var gr=function(){function t(t,n){this.predicate=t,this.inclusive=n}return t.prototype.call=function(t,n){return n.subscribe(new _r(t,this.predicate,this.inclusive))},t}(),_r=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.inclusive=r,i.index=0,i}return r.ZT(n,t),n.prototype._next=function(t){var n,e=this.destination;try{n=this.predicate(t,this.index++)}catch(t){return void e.error(t)}this.nextOrComplete(t,n)},n.prototype.nextOrComplete=function(t,n){var e=this.destination;Boolean(n)?e.next(t):(this.inclusive&&e.next(t),e.complete())},n}(v.L),mr=e(3306),xr=e(4156);function wr(t,n,e){return function(r){return r.lift(new Sr(t,n,e))}}var Sr=function(){function t(t,n,e){this.nextOrObserver=t,this.error=n,this.complete=e}return t.prototype.call=function(t,n){return n.subscribe(new Mr(t,this.nextOrObserver,this.error,this.complete))},t}(),Mr=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o._tapNext=mr.Z,o._tapError=mr.Z,o._tapComplete=mr.Z,o._tapError=r||mr.Z,o._tapComplete=i||mr.Z,(0,xr.m)(e)?(o._context=o,o._tapNext=e):e&&(o._context=e,o._tapNext=e.next||mr.Z,o._tapError=e.error||mr.Z,o._tapComplete=e.complete||mr.Z),o}return r.ZT(n,t),n.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},n.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},n.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},n}(v.L),Tr={leading:!0,trailing:!1};function Nr(t,n){return void 0===n&&(n=Tr),function(e){return e.lift(new Er(t,n.leading,n.trailing))}}var Er=function(){function t(t,n,e){this.durationSelector=t,this.leading=n,this.trailing=e}return t.prototype.call=function(t,n){return n.subscribe(new Ar(t,this.durationSelector,this.leading,this.trailing))},t}(),Ar=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.destination=n,o.durationSelector=e,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.ZT(n,t),n.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},n.prototype.send=function(){var t=this._hasValue,n=this._sendValue;t&&(this.destination.next(n),this.throttle(n)),this._hasValue=!1,this._sendValue=null},n.prototype.throttle=function(t){var n=this.tryDurationSelector(t);n&&this.add(this._throttled=(0,o.D)(this,n))},n.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},n.prototype.throttlingDone=function(){var t=this._throttled,n=this._trailing;t&&t.unsubscribe(),this._throttled=null,n&&this.send()},n.prototype.notifyNext=function(t,n,e,r,i){this.throttlingDone()},n.prototype.notifyComplete=function(){this.throttlingDone()},n}(i.L);function kr(t,n,e){return void 0===n&&(n=s.P),void 0===e&&(e=Tr),function(r){return r.lift(new Cr(t,n,e.leading,e.trailing))}}var Cr=function(){function t(t,n,e,r){this.duration=t,this.scheduler=n,this.leading=e,this.trailing=r}return t.prototype.call=function(t,n){return n.subscribe(new Ir(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),Ir=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.duration=e,u.scheduler=r,u.leading=i,u.trailing=o,u._hasTrailingValue=!1,u._trailingValue=null,u}return r.ZT(n,t),n.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(Fr,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},n.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},n.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},n}(v.L);function Fr(t){t.subscriber.clearThrottle()}var Pr=e(1410);function zr(t){return void 0===t&&(t=s.P),function(n){return(0,Pr.P)((function(){return n.pipe(In((function(n,e){var r=n.current;return{value:e,current:t.now(),last:r}}),{current:t.now(),value:void 0,last:void 0}),(0,Kt.U)((function(t){var n=t.current,e=t.last,r=t.value;return new jr(r,n-e)})))}))}}var jr=function(){return function(t,n){this.value=t,this.interval=n}}(),Or=e(1462);function Lr(t,n,e){return void 0===e&&(e=s.P),function(r){var i=st(t),o=i?+t-e.now():Math.abs(t);return r.lift(new Dr(o,i,n,e))}}var Dr=function(){function t(t,n,e,r){this.waitFor=t,this.absoluteTimeout=n,this.withObservable=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new Rr(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Rr=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.absoluteTimeout=e,u.waitFor=r,u.withObservable=i,u.scheduler=o,u.action=null,u.scheduleTimeout(),u}return r.ZT(n,t),n.dispatchTimeout=function(t){var n=t.withObservable;t._unsubscribeAndRecycle(),t.add((0,o.D)(t,n))},n.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(n.dispatchTimeout,this.waitFor,this))},n.prototype._next=function(n){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,n)},n.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},n}(i.L),Vr=e(4944);function Br(t,n){return void 0===n&&(n=s.P),Lr(t,(0,Vr._)(new Or.W),n)}function Ur(t){return void 0===t&&(t=s.P),(0,Kt.U)((function(n){return new qr(n,t.now())}))}var qr=function(){return function(t,n){this.value=t,this.timestamp=n}}();function Zr(t,n,e){return 0===e?[n]:(t.push(n),t)}function Yr(){return jn(Zr,[])}function Wr(t){return function(n){return n.lift(new Hr(t))}}var Hr=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,n){var e=new Xr(t),r=n.subscribe(e);return r.closed||e.add((0,o.D)(e,this.windowBoundaries)),r},t}(),Xr=function(t){function n(n){var e=t.call(this,n)||this;return e.window=new oe.xQ,n.next(e.window),e}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.openWindow()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){this._complete()},n.prototype._next=function(t){this.window.next(t)},n.prototype._error=function(t){this.window.error(t),this.destination.error(t)},n.prototype._complete=function(){this.window.complete(),this.destination.complete()},n.prototype._unsubscribe=function(){this.window=null},n.prototype.openWindow=function(){var t=this.window;t&&t.complete();var n=this.destination,e=this.window=new oe.xQ;n.next(e)},n}(i.L);function $r(t,n){return void 0===n&&(n=0),function(e){return e.lift(new Gr(t,n))}}var Gr=function(){function t(t,n){this.windowSize=t,this.startWindowEvery=n}return t.prototype.call=function(t,n){return n.subscribe(new Kr(t,this.windowSize,this.startWindowEvery))},t}(),Kr=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.destination=n,i.windowSize=e,i.startWindowEvery=r,i.windows=[new oe.xQ],i.count=0,n.next(i.windows[0]),i}return r.ZT(n,t),n.prototype._next=function(t){for(var n=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,e=this.destination,r=this.windowSize,i=this.windows,o=i.length,u=0;u<o&&!this.closed;u++)i[u].next(t);var a=this.count-r+1;if(a>=0&&a%n==0&&!this.closed&&i.shift().complete(),++this.count%n==0&&!this.closed){var c=new oe.xQ;i.push(c),e.next(c)}},n.prototype._error=function(t){var n=this.windows;if(n)for(;n.length>0&&!this.closed;)n.shift().error(t);this.destination.error(t)},n.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},n.prototype._unsubscribe=function(){this.count=0,this.windows=null},n}(v.L);function Qr(t){var n=s.P,e=null,r=Number.POSITIVE_INFINITY;return(0,m.K)(arguments[3])&&(n=arguments[3]),(0,m.K)(arguments[2])?n=arguments[2]:(0,or.k)(arguments[2])&&(r=arguments[2]),(0,m.K)(arguments[1])?n=arguments[1]:(0,or.k)(arguments[1])&&(e=arguments[1]),function(i){return i.lift(new Jr(t,e,r,n))}}var Jr=function(){function t(t,n,e,r){this.windowTimeSpan=t,this.windowCreationInterval=n,this.maxWindowSize=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new ni(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),ti=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._numberOfNextedValues=0,n}return r.ZT(n,t),n.prototype.next=function(n){this._numberOfNextedValues++,t.prototype.next.call(this,n)},Object.defineProperty(n.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),n}(oe.xQ),ni=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;u.destination=n,u.windowTimeSpan=e,u.windowCreationInterval=r,u.maxWindowSize=i,u.scheduler=o,u.windows=[];var a=u.openWindow();if(null!==r&&r>=0){var c={subscriber:u,window:a,context:null},s={windowTimeSpan:e,windowCreationInterval:r,subscriber:u,scheduler:o};u.add(o.schedule(ii,e,c)),u.add(o.schedule(ri,r,s))}else{var f={subscriber:u,window:a,windowTimeSpan:e};u.add(o.schedule(ei,e,f))}return u}return r.ZT(n,t),n.prototype._next=function(t){for(var n=this.windows,e=n.length,r=0;r<e;r++){var i=n[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},n.prototype._error=function(t){for(var n=this.windows;n.length>0;)n.shift().error(t);this.destination.error(t)},n.prototype._complete=function(){for(var t=this.windows;t.length>0;){var n=t.shift();n.closed||n.complete()}this.destination.complete()},n.prototype.openWindow=function(){var t=new ti;return this.windows.push(t),this.destination.next(t),t},n.prototype.closeWindow=function(t){t.complete();var n=this.windows;n.splice(n.indexOf(t),1)},n}(v.L);function ei(t){var n=t.subscriber,e=t.windowTimeSpan,r=t.window;r&&n.closeWindow(r),t.window=n.openWindow(),this.schedule(t,e)}function ri(t){var n=t.windowTimeSpan,e=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=e.openWindow(),u=this,a={action:u,subscription:null},c={subscriber:e,window:o,context:a};a.subscription=r.schedule(ii,n,c),u.add(a.subscription),u.schedule(t,i)}function ii(t){var n=t.subscriber,e=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),n.closeWindow(e)}function oi(t,n){return function(e){return e.lift(new ui(t,n))}}var ui=function(){function t(t,n){this.openings=t,this.closingSelector=n}return t.prototype.call=function(t,n){return n.subscribe(new ai(t,this.openings,this.closingSelector))},t}(),ai=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.openings=e,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=(0,o.D)(i,e,e)),i}return r.ZT(n,t),n.prototype._next=function(t){var n=this.contexts;if(n)for(var e=n.length,r=0;r<e;r++)n[r].window.next(t)},n.prototype._error=function(n){var e=this.contexts;if(this.contexts=null,e)for(var r=e.length,i=-1;++i<r;){var o=e[i];o.window.error(n),o.subscription.unsubscribe()}t.prototype._error.call(this,n)},n.prototype._complete=function(){var n=this.contexts;if(this.contexts=null,n)for(var e=n.length,r=-1;++r<e;){var i=n[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var n=t.length,e=-1;++e<n;){var r=t[e];r.window.unsubscribe(),r.subscription.unsubscribe()}},n.prototype.notifyNext=function(t,n,e,r,i){if(t===this.openings){var u=void 0;try{u=(0,this.closingSelector)(n)}catch(t){return this.error(t)}var a=new oe.xQ,c=new A.w,s={window:a,subscription:c};this.contexts.push(s);var f=(0,o.D)(this,u,s);f.closed?this.closeWindow(this.contexts.length-1):(f.context=s,c.add(f)),this.destination.next(a)}else this.closeWindow(this.contexts.indexOf(t))},n.prototype.notifyError=function(t){this.error(t)},n.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},n.prototype.closeWindow=function(t){if(-1!==t){var n=this.contexts,e=n[t],r=e.window,i=e.subscription;n.splice(t,1),r.complete(),i.unsubscribe()}},n}(i.L);function ci(t){return function(n){return n.lift(new si(t))}}var si=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new fi(t,this.closingSelector))},t}(),fi=function(t){function n(n,e){var r=t.call(this,n)||this;return r.destination=n,r.closingSelector=e,r.openWindow(),r}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.openWindow(i)},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){this.openWindow(t)},n.prototype._next=function(t){this.window.next(t)},n.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},n.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},n.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},n.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var n=this.window;n&&n.complete();var e,r=this.window=new oe.xQ;this.destination.next(r);try{e=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=(0,o.D)(this,e))},n}(i.L);function li(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e;"function"==typeof t[t.length-1]&&(e=t.pop());var r=t;return n.lift(new hi(r,e))}}var hi=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new pi(t,this.observables,this.project))},t}(),pi=function(t){function n(n,e,r){var i=t.call(this,n)||this;i.observables=e,i.project=r,i.toRespond=[];var u=e.length;i.values=new Array(u);for(var a=0;a<u;a++)i.toRespond.push(a);for(a=0;a<u;a++){var c=e[a];i.add((0,o.D)(i,c,c,a))}return i}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.values[e]=n;var o=this.toRespond;if(o.length>0){var u=o.indexOf(e);-1!==u&&o.splice(u,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(i.L),di=e(5080);function vi(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(di.$R.apply(void 0,[n].concat(t)))}}function yi(t){return function(n){return n.lift(new di.mx(t))}}},7621:(t,n,e)=>{var r;!function(i){var o=/^\s+/,u=/\s+$/,a=0,c=i.round,s=i.min,f=i.max,l=i.random;function h(t,n){if(n=n||{},(t=t||"")instanceof h)return t;if(!(this instanceof h))return new h(t,n);var e=function(t){var n,e,r,a={r:0,g:0,b:0},c=1,l=null,h=null,p=null,d=!1,v=!1;return"string"==typeof t&&(t=function(t){t=t.replace(o,"").replace(u,"").toLowerCase();var n,e=!1;if(C[t])t=C[t],e=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};return(n=q.rgb.exec(t))?{r:n[1],g:n[2],b:n[3]}:(n=q.rgba.exec(t))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=q.hsl.exec(t))?{h:n[1],s:n[2],l:n[3]}:(n=q.hsla.exec(t))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=q.hsv.exec(t))?{h:n[1],s:n[2],v:n[3]}:(n=q.hsva.exec(t))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=q.hex8.exec(t))?{r:j(n[1]),g:j(n[2]),b:j(n[3]),a:R(n[4]),format:e?"name":"hex8"}:(n=q.hex6.exec(t))?{r:j(n[1]),g:j(n[2]),b:j(n[3]),format:e?"name":"hex"}:(n=q.hex4.exec(t))?{r:j(n[1]+""+n[1]),g:j(n[2]+""+n[2]),b:j(n[3]+""+n[3]),a:R(n[4]+""+n[4]),format:e?"name":"hex8"}:!!(n=q.hex3.exec(t))&&{r:j(n[1]+""+n[1]),g:j(n[2]+""+n[2]),b:j(n[3]+""+n[3]),format:e?"name":"hex"}}(t)),"object"==typeof t&&(Z(t.r)&&Z(t.g)&&Z(t.b)?(n=t.r,e=t.g,r=t.b,a={r:255*P(n,255),g:255*P(e,255),b:255*P(r,255)},d=!0,v="%"===String(t.r).substr(-1)?"prgb":"rgb"):Z(t.h)&&Z(t.s)&&Z(t.v)?(l=L(t.s),h=L(t.v),a=function(t,n,e){t=6*P(t,360),n=P(n,100),e=P(e,100);var r=i.floor(t),o=t-r,u=e*(1-n),a=e*(1-o*n),c=e*(1-(1-o)*n),s=r%6;return{r:255*[e,a,u,u,c,e][s],g:255*[c,e,e,a,u,u][s],b:255*[u,u,c,e,e,a][s]}}(t.h,l,h),d=!0,v="hsv"):Z(t.h)&&Z(t.s)&&Z(t.l)&&(l=L(t.s),p=L(t.l),a=function(t,n,e){var r,i,o;function u(t,n,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?t+6*(n-t)*e:e<.5?n:e<2/3?t+(n-t)*(2/3-e)*6:t}if(t=P(t,360),n=P(n,100),e=P(e,100),0===n)r=i=o=e;else{var a=e<.5?e*(1+n):e+n-e*n,c=2*e-a;r=u(c,a,t+1/3),i=u(c,a,t),o=u(c,a,t-1/3)}return{r:255*r,g:255*i,b:255*o}}(t.h,l,p),d=!0,v="hsl"),t.hasOwnProperty("a")&&(c=t.a)),c=F(c),{ok:d,format:t.format||v,r:s(255,f(a.r,0)),g:s(255,f(a.g,0)),b:s(255,f(a.b,0)),a:c}}(t);this._originalInput=t,this._r=e.r,this._g=e.g,this._b=e.b,this._a=e.a,this._roundA=c(100*this._a)/100,this._format=n.format||e.format,this._gradientType=n.gradientType,this._r<1&&(this._r=c(this._r)),this._g<1&&(this._g=c(this._g)),this._b<1&&(this._b=c(this._b)),this._ok=e.ok,this._tc_id=a++}function p(t,n,e){t=P(t,255),n=P(n,255),e=P(e,255);var r,i,o=f(t,n,e),u=s(t,n,e),a=(o+u)/2;if(o==u)r=i=0;else{var c=o-u;switch(i=a>.5?c/(2-o-u):c/(o+u),o){case t:r=(n-e)/c+(n<e?6:0);break;case n:r=(e-t)/c+2;break;case e:r=(t-n)/c+4}r/=6}return{h:r,s:i,l:a}}function d(t,n,e){t=P(t,255),n=P(n,255),e=P(e,255);var r,i,o=f(t,n,e),u=s(t,n,e),a=o,c=o-u;if(i=0===o?0:c/o,o==u)r=0;else{switch(o){case t:r=(n-e)/c+(n<e?6:0);break;case n:r=(e-t)/c+2;break;case e:r=(t-n)/c+4}r/=6}return{h:r,s:i,v:a}}function v(t,n,e,r){var i=[O(c(t).toString(16)),O(c(n).toString(16)),O(c(e).toString(16))];return r&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function y(t,n,e,r){return[O(D(r)),O(c(t).toString(16)),O(c(n).toString(16)),O(c(e).toString(16))].join("")}function b(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.s-=n/100,e.s=z(e.s),h(e)}function g(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.s+=n/100,e.s=z(e.s),h(e)}function _(t){return h(t).desaturate(100)}function m(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.l+=n/100,e.l=z(e.l),h(e)}function x(t,n){n=0===n?0:n||10;var e=h(t).toRgb();return e.r=f(0,s(255,e.r-c(-n/100*255))),e.g=f(0,s(255,e.g-c(-n/100*255))),e.b=f(0,s(255,e.b-c(-n/100*255))),h(e)}function w(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.l-=n/100,e.l=z(e.l),h(e)}function S(t,n){var e=h(t).toHsl(),r=(e.h+n)%360;return e.h=r<0?360+r:r,h(e)}function M(t){var n=h(t).toHsl();return n.h=(n.h+180)%360,h(n)}function T(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+120)%360,s:n.s,l:n.l}),h({h:(e+240)%360,s:n.s,l:n.l})]}function N(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+90)%360,s:n.s,l:n.l}),h({h:(e+180)%360,s:n.s,l:n.l}),h({h:(e+270)%360,s:n.s,l:n.l})]}function E(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+72)%360,s:n.s,l:n.l}),h({h:(e+216)%360,s:n.s,l:n.l})]}function A(t,n,e){n=n||6,e=e||30;var r=h(t).toHsl(),i=360/e,o=[h(t)];for(r.h=(r.h-(i*n>>1)+720)%360;--n;)r.h=(r.h+i)%360,o.push(h(r));return o}function k(t,n){n=n||6;for(var e=h(t).toHsv(),r=e.h,i=e.s,o=e.v,u=[],a=1/n;n--;)u.push(h({h:r,s:i,v:o})),o=(o+a)%1;return u}h.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,n,e,r=this.toRgb();return t=r.r/255,n=r.g/255,e=r.b/255,.2126*(t<=.03928?t/12.92:i.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:i.pow((n+.055)/1.055,2.4))+.0722*(e<=.03928?e/12.92:i.pow((e+.055)/1.055,2.4))},setAlpha:function(t){return this._a=F(t),this._roundA=c(100*this._a)/100,this},toHsv:function(){var t=d(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=d(this._r,this._g,this._b),n=c(360*t.h),e=c(100*t.s),r=c(100*t.v);return 1==this._a?"hsv("+n+", "+e+"%, "+r+"%)":"hsva("+n+", "+e+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var t=p(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=p(this._r,this._g,this._b),n=c(360*t.h),e=c(100*t.s),r=c(100*t.l);return 1==this._a?"hsl("+n+", "+e+"%, "+r+"%)":"hsla("+n+", "+e+"%, "+r+"%, "+this._roundA+")"},toHex:function(t){return v(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,n,e,r,i){var o=[O(c(t).toString(16)),O(c(n).toString(16)),O(c(e).toString(16)),O(D(r))];return i&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)&&o[3].charAt(0)==o[3].charAt(1)?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0)+o[3].charAt(0):o.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:c(this._r),g:c(this._g),b:c(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+c(this._r)+", "+c(this._g)+", "+c(this._b)+")":"rgba("+c(this._r)+", "+c(this._g)+", "+c(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:c(100*P(this._r,255))+"%",g:c(100*P(this._g,255))+"%",b:c(100*P(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+c(100*P(this._r,255))+"%, "+c(100*P(this._g,255))+"%, "+c(100*P(this._b,255))+"%)":"rgba("+c(100*P(this._r,255))+"%, "+c(100*P(this._g,255))+"%, "+c(100*P(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(I[v(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var n="#"+y(this._r,this._g,this._b,this._a),e=n,r=this._gradientType?"GradientType = 1, ":"";if(t){var i=h(t);e="#"+y(i._r,i._g,i._b,i._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+n+",endColorstr="+e+")"},toString:function(t){var n=!!t;t=t||this._format;var e=!1,r=this._a<1&&this._a>=0;return n||!r||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(e=this.toRgbString()),"prgb"===t&&(e=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(e=this.toHexString()),"hex3"===t&&(e=this.toHexString(!0)),"hex4"===t&&(e=this.toHex8String(!0)),"hex8"===t&&(e=this.toHex8String()),"name"===t&&(e=this.toName()),"hsl"===t&&(e=this.toHslString()),"hsv"===t&&(e=this.toHsvString()),e||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return h(this.toString())},_applyModification:function(t,n){var e=t.apply(null,[this].concat([].slice.call(n)));return this._r=e._r,this._g=e._g,this._b=e._b,this.setAlpha(e._a),this},lighten:function(){return this._applyModification(m,arguments)},brighten:function(){return this._applyModification(x,arguments)},darken:function(){return this._applyModification(w,arguments)},desaturate:function(){return this._applyModification(b,arguments)},saturate:function(){return this._applyModification(g,arguments)},greyscale:function(){return this._applyModification(_,arguments)},spin:function(){return this._applyModification(S,arguments)},_applyCombination:function(t,n){return t.apply(null,[this].concat([].slice.call(n)))},analogous:function(){return this._applyCombination(A,arguments)},complement:function(){return this._applyCombination(M,arguments)},monochromatic:function(){return this._applyCombination(k,arguments)},splitcomplement:function(){return this._applyCombination(E,arguments)},triad:function(){return this._applyCombination(T,arguments)},tetrad:function(){return this._applyCombination(N,arguments)}},h.fromRatio=function(t,n){if("object"==typeof t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]="a"===r?t[r]:L(t[r]));t=e}return h(t,n)},h.equals=function(t,n){return!(!t||!n)&&h(t).toRgbString()==h(n).toRgbString()},h.random=function(){return h.fromRatio({r:l(),g:l(),b:l()})},h.mix=function(t,n,e){e=0===e?0:e||50;var r=h(t).toRgb(),i=h(n).toRgb(),o=e/100;return h({r:(i.r-r.r)*o+r.r,g:(i.g-r.g)*o+r.g,b:(i.b-r.b)*o+r.b,a:(i.a-r.a)*o+r.a})},h.readability=function(t,n){var e=h(t),r=h(n);return(i.max(e.getLuminance(),r.getLuminance())+.05)/(i.min(e.getLuminance(),r.getLuminance())+.05)},h.isReadable=function(t,n,e){var r,i,o,u,a,c=h.readability(t,n);switch(i=!1,(o=e,"AA"!==(u=((o=o||{level:"AA",size:"small"}).level||"AA").toUpperCase())&&"AAA"!==u&&(u="AA"),"small"!==(a=(o.size||"small").toLowerCase())&&"large"!==a&&(a="small"),r={level:u,size:a}).level+r.size){case"AAsmall":case"AAAlarge":i=c>=4.5;break;case"AAlarge":i=c>=3;break;case"AAAsmall":i=c>=7}return i},h.mostReadable=function(t,n,e){var r,i,o,u,a=null,c=0;i=(e=e||{}).includeFallbackColors,o=e.level,u=e.size;for(var s=0;s<n.length;s++)(r=h.readability(t,n[s]))>c&&(c=r,a=h(n[s]));return h.isReadable(t,a,{level:o,size:u})||!i?a:(e.includeFallbackColors=!1,h.mostReadable(t,["#fff","#000"],e))};var C=h.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},I=h.hexNames=function(t){var n={};for(var e in t)t.hasOwnProperty(e)&&(n[t[e]]=e);return n}(C);function F(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function P(t,n){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var e=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(t);return t=s(n,f(0,parseFloat(t))),e&&(t=parseInt(t*n,10)/100),i.abs(t-n)<1e-6?1:t%n/parseFloat(n)}function z(t){return s(1,f(0,t))}function j(t){return parseInt(t,16)}function O(t){return 1==t.length?"0"+t:""+t}function L(t){return t<=1&&(t=100*t+"%"),t}function D(t){return i.round(255*parseFloat(t)).toString(16)}function R(t){return j(t)/255}var V,B,U,q=(B="[\\s|\\(]+("+(V="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+V+")[,|\\s]+("+V+")\\s*\\)?",U="[\\s|\\(]+("+V+")[,|\\s]+("+V+")[,|\\s]+("+V+")[,|\\s]+("+V+")\\s*\\)?",{CSS_UNIT:new RegExp(V),rgb:new RegExp("rgb"+B),rgba:new RegExp("rgba"+U),hsl:new RegExp("hsl"+B),hsla:new RegExp("hsla"+U),hsv:new RegExp("hsv"+B),hsva:new RegExp("hsva"+U),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function Z(t){return!!q.CSS_UNIT.exec(t)}t.exports?t.exports=h:void 0===(r=function(){return h}.call(n,e,n,t))||(t.exports=r)}(Math)},8492:(t,n,e)=>{"use strict";function r(t){for(var e in t)n.hasOwnProperty(e)||(n[e]=t[e])}Object.defineProperty(n,"__esModule",{value:!0}),r(e(2710)),r(e(3851)),r(e(6291)),r(e(1855)),r(e(3824)),r(e(6291)),r(e(1855)),r(e(6308))},6308:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(9362),i=e(1717),o=e(4143),u=e(6486),a=e(3824),c=e(1855),s=e(2367),f=e(7404),l=e(2710);n.drawTreeDel=function(t,n,e){f.emptyChildren(t);var h=r.select(t),p=a.buildTree(n,t);console.log("ä¼ å¥æ°æ®",p),document.getElementById("facet-tree-tooltip")||r.select("body").append("div").attr("id","facet-tree-tooltip").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px"),s.globalData.treeData=p,s.globalState.getValue().init?s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0}):(s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0}),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.currentFacetId}))).subscribe((function(t){e(t)})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.expandedFacetId})),i.filter((function(t){var n=t.split(",");return n[0]!==n[1]}))).subscribe((function(n){var e=n.split(","),r=e[0],i=e[1];if("-2"!==r&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0]){for(var o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}if("-2"!==i&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0]){for(o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}}))),h.append("g").selectAll("rect").data(p.branches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html("åå»å é¤è¯¥åé¢").style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:p.branches[n].facetId,expandedFacetId:r+",-2"})),console.log("currentFacetId",s.globalState.getValue().currentFacetId),console.log("expandedFacetId",s.globalState.getValue().expandedFacetId)})),h.append("g").selectAll("rect").data(p.foldBranches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("transform",(function(t){return t.transform})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html("åå»å é¤è¯¥åé¢").style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:p.branches[n].facetId,expandedFacetId:r+",-2"})),console.log("currentFacetId",s.globalState.getValue().currentFacetId),console.log("expandedFacetId",s.globalState.getValue().expandedFacetId)})),h.append("g").selectAll("circle").data(p.leaves).enter().append("circle").attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("r",(function(t,n){return p.treeData[n].containChildrenFacet?0:1.5*t.r})).attr("fill",(function(t){return t.color})).style("cursor","pointer"),h.append("g").selectAll("text").data(p.texts_leaf).enter().append("text").attr("font-size","20px").attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).text((function(t){return t.text})).attr("fill","#fff").style("cursor","pointer"),p.facetChart.forEach((function(n){c.drawFacetPieChart(n,t)}));var d=h.append("g").selectAll("text").data(p.texts).enter().append("text").attr("font-family","Times New Roman").attr("font-size",(function(t){return t.fontSize+"px"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("fill","#fff");p.texts.forEach((function(t,n){r.select(d._groups[0][n]).selectAll("tspan").data(t.text.split("")).enter().append("tspan").attr("x",t.x).attr("dy","1.2em").text((function(t){return t}))})),h.append("g").append("text").attr("x",t.clientWidth/2-24*l.judgementStringLengthWithChinese(n.topicName)/2).attr("y",t.clientHeight-10).text(n.topicName).attr("fill","#000").attr("font-size","24px")}},3851:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(9362),i=e(1717),o=e(4143),u=e(6486),a=e(3824),c=e(1855),s=e(2367),f=e(7404),l=e(2710),h="",p="",d=0;n.drawTreeNumber=function(t,n,e,v,y,b){f.emptyChildren(t);var g=r.select(t),_=a.buildTree(n,t);function m(t){if(1===t){var n=h;setTimeout((function(){p||n!==h||(r.select(document.getElementById("ListMenuFacet")).transition().transition().duration(500).style("opacity",0),h="")}),3e3)}}function x(t){r.select(t).transition().duration(300).style("font-weight","bold").style("font-size","14px"),p="yes"}function w(t){r.select(t).transition().duration(300).style("font-weight","normal").style("font-size","12px")}function S(t){if("yes"===b){r.event.preventDefault(),h=t+"select";var n=document.getElementById("ListMenuFacet");r.select(n).transition().style("opacity",1).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px"),m(1)}else console.log("ä¸èµ·ä½ç¨ï¼"),r.event.preventDefault()}if(console.log("ä¼ å¥æ°æ®",_),document.getElementById("facet-tree-tooltip")||r.select("body").append("div").attr("id","facet-tree-tooltip").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px"),document.getElementById("ListMenuFacet")||(r.select("body").append("div").attr("id","ListMenuFacet").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","12px").style("color","black").style("padding","5px 3px").style("width","100px").style("height","90px").style("background","white").style("border-radius","10px").style("border","2px solid black").on("mouseover",(function(){p="yes"})).on("mouseout",(function(){p="",m(1)})),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionDeleteFacet").style("height","25px").style("margin-top","10px").style("border-radius","10px").style("cursor","pointer").on("mouseover",(function(){x(this)})).on("mouseout",(function(){w(this)})).on("click",(function(){!function(t){console.log("This is really convenient!");var n=s.globalState.getValue().expandedFacetId.split(","),e=(n[0],n[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{branchFacetId:_.branches[t].facetId,expandedFacetId:e+",-2"})),console.log("branchFacetId",s.globalState.getValue().branchFacetId),console.log("expandedFacetId",s.globalState.getValue().expandedFacetId),console.log("Use your FacetDelete function here!"),v()}(d)})).style("padding-top","5px").text("å é¤è¯¥åé¢"),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionAddFacet").style("height","25px").style("margin-top","5px").style("border-radius","15px").style("cursor","pointer").on("mouseover",(function(){x(this)})).on("mouseout",(function(){w(this)})).style("padding-top","5px").text("æ·»å æ°åé¢").on("click",(function(){y()}))),s.globalData.treeData=_,s.globalState.getValue().init)s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});else{s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});var M={currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!1};s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.currentFacetId,M.currentFacetId)})),i.map((function(t){return t.currentFacetId}))).subscribe((function(t){e(t),M.currentFacetId=t})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.branchFacetId,M.branchFacetId)})),i.map((function(t){return t.branchFacetId}))).subscribe((function(t){v(t),M.branchFacetId=t})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.expandedFacetId})),i.filter((function(t){var n=t.split(",");return n[0]!==n[1]}))).subscribe((function(n){var e=n.split(","),r=e[0],i=e[1];if("-2"!==r&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0]){for(var o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}if("-2"!==i&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0]){for(o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}}))}g.append("g").selectAll("rect").data(_.branches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("cursor","pointer").on("mouseover",(function(t){""===h&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){S(n),d=n})),g.append("g").selectAll("rect").data(_.foldBranches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("cursor","pointer").attr("transform",(function(t){return t.transform})).on("mouseover",(function(t){""===h&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){S(n),d=n})),g.append("g").selectAll("circle").data(_.leaves).enter().append("circle").attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("r",(function(t,n){return _.treeData[n].containChildrenFacet?0:1.5*t.r})).attr("fill",(function(t){return t.color})).style("cursor","pointer").on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:_.branches[n].facetId,expandedFacetId:r+",-2"})),console.log("currentFacetId",s.globalState.getValue().currentFacetId),console.log("expandedFacetId",s.globalState.getValue().expandedFacetId)})),g.append("g").selectAll("text").data(_.texts_leaf).enter().append("text").attr("font-size","20px").attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).text((function(t){return t.text})).attr("fill","#fff").style("cursor","pointer").on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:_.branches[n].facetId,expandedFacetId:r+",-2"}))})),_.facetChart.forEach((function(n){c.drawFacetPieChart(n,t)}));var T=g.append("g").selectAll("text").data(_.texts).enter().append("text").attr("font-family","Times New Roman").attr("font-size",(function(t){return t.fontSize+"px"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("fill","#fff").attr("cursor","pointer").on("contextmenu",(function(t,n){S(n),d=n}));_.texts.forEach((function(t,n){r.select(T._groups[0][n]).selectAll("tspan").data(t.text.split("")).enter().append("tspan").attr("x",t.x).attr("dy","1.2em").text((function(t){return t}))})),g.append("g").append("text").attr("x",t.clientWidth/2-24*l.judgementStringLengthWithChinese(n.topicName)/2).attr("y",t.clientHeight-10).text(n.topicName).attr("fill","#000").attr("font-size","24px")}},2710:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(9362),i=e(1717),o=e(4143),u=e(6486),a=e(3824),c=e(1855),s=e(2367),f=e(7404),l="",h="",p=0;function d(t){for(var n=0,e=0;e<t.length;e++)/[a-z0-9\*\\\|\(\)\&\^\%\$\#\@\!\,\.\?\<\>\/]/.test(t[e])?n+=.5:n+=1;return n}n.drawTree=function(t,n,e,v,y,b,g){var _={children:[]};f.emptyChildren(t),r.select(t);var m=a.buildTree(n,t);function x(t){if(1===t){var n=l;setTimeout((function(){h||n!==l||(r.select(document.getElementById("ListMenuFacet")).transition().transition().duration(500).style("opacity",0),l="")}),3e3)}}function w(t){r.select(t).transition().duration(300).style("font-weight","bold").style("font-size","14px"),h="yes"}function S(t){r.select(t).transition().duration(300).style("font-weight","normal").style("font-size","12px")}function M(t){if("yes"===b){r.event.preventDefault(),l=t+"select";var n=document.getElementById("ListMenuFacet");r.select(n).transition().style("opacity",1).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px"),x(1)}else console.log("ä¸èµ·ä½ç¨ï¼"),r.event.preventDefault()}console.log("ä¼ å¥æ°æ®",m),document.getElementById("ListMenuFacet")||(r.select("body").append("div").attr("id","ListMenuFacet").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","12px").style("color","black").style("padding","5px 3px").style("width","100px").style("height","90px").style("background","white").style("border-radius","10px").style("border","2px solid black").on("mouseover",(function(){h="yes"})).on("mouseout",(function(){h="",x(1)})),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionDeleteFacet").style("height","25px").style("margin-top","10px").style("border-radius","10px").style("cursor","pointer").on("mouseover",(function(){w(this)})).on("mouseout",(function(){S(this)})).on("click",(function(){!function(t){console.log("This is really convenient!");var n=s.globalState.getValue().expandedFacetId.split(","),e=(n[0],n[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{branchFacetId:m.branches[t].facetId,expandedFacetId:e+",-2"})),console.log("branchFacetId",s.globalState.getValue().branchFacetId),console.log("expandedFacetId",s.globalState.getValue().expandedFacetId),console.log("Use your FacetDelete function here!")}(p)})).style("padding-top","5px").text("å é¤è¯¥åé¢"),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionAddFacet").style("height","25px").style("margin-top","5px").style("border-radius","15px").style("cursor","pointer").on("mouseover",(function(){w(this)})).on("mouseout",(function(){S(this)})).style("padding-top","5px").text("æ·»å æ°åé¢").on("click",(function(){y()})));for(var T=function(h){setTimeout((function(){f.emptyChildren(t);var y=r.select(t);_=function(t,n,e){t.topicId=n.topicId,t.topicName=n.topicName,t.topicUrl=n.topicUrl,t.topicLayer=n.topicLayer,t.domainId=n.domainId;var r=n.children[e];return t.children.push(r),t.childrenNumber=e+1,t}(_,n,h);var b=a.buildTree(_,t);if(document.getElementById("facet-tree-tooltip")||r.select("body").append("div").attr("id","facet-tree-tooltip").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px"),s.globalData.treeData=b,s.globalState.getValue().init)s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});else{s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});var g={currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!1};s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.currentFacetId,g.currentFacetId)})),i.map((function(t){return t.currentFacetId}))).subscribe((function(t){e(t),g.currentFacetId=t})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.branchFacetId,g.branchFacetId)})),i.map((function(t){return t.branchFacetId}))).subscribe((function(t){v(t),g.branchFacetId=t})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.expandedFacetId})),i.filter((function(t){var n=t.split(",");return n[0]!==n[1]}))).subscribe((function(n){var e=n.split(","),r=e[0],i=e[1];if("-2"!==r&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0]){for(var o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}if("-2"!==i&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0]){for(o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}}))}console.log("treedata",b),y.append("g").selectAll("rect").data(b.branches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("cursor","pointer").attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).on("mouseover",(function(t){""===l&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){M(n),p=n})),y.append("g").selectAll("rect").data(b.foldBranches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("cursor","pointer").attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("transform",(function(t){return t.transform})).on("mouseover",(function(t){""===l&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){M(n),p=n})),y.append("g").selectAll("circle").data(b.leaves).enter().append("circle").attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("r",(function(t,n){return b.treeData[n].containChildrenFacet?0:1.5*t.r})).attr("fill",(function(t){return t.color})).style("cursor","pointer").on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:b.branches[n].facetId,expandedFacetId:r+",-2"}))})),y.append("g").selectAll("text").data(b.texts_leaf).enter().append("text").attr("font-size",(function(t){return t.fontSize})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).text((function(t){return""})).attr("fill","#fff").style("cursor","pointer").on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:b.branches[n].facetId,expandedFacetId:r+",-2"}))})),b.facetChart.forEach((function(n){c.drawFacetPieChart(n,t)}));var m=y.append("g").selectAll("text").data(b.texts).enter().append("text").attr("font-family","Times New Roman").attr("font-size",(function(t){return t.fontSize+"px"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("cursor","pointer").attr("fill","#fff").on("contextmenu",(function(t,n){M(n),p=n}));b.texts.forEach((function(t,n){r.select(m._groups[0][n]).selectAll("tspan").data(t.text.split("")).enter().append("tspan").attr("x",t.x).attr("dy","1.2em").text((function(t){return t})),console.log("x",t.x)})),y.append("g").append("text").attr("x",t.clientWidth/2-24*d(n.topicName)/2).attr("y",t.clientHeight-10).text(n.topicName).attr("fill","#000").attr("font-size","24px"),h+1===n.children.length&&setTimeout((function(){alert("å½åé¡µé¢æå»ºå®æï¼"),window.lock=!1}),100)}),h*g)},N=0;N<n.children.length;N++)T(N)},n.judgementStringLengthWithChinese=d},6291:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(9362),i=e(2367);function o(t){return isFinite(t)?t:0}n.drawFacetForceLayout=function(t,n,e){void 0===e&&(e=12);var u=r.select(n).append("g"),a=function(t){for(var n=[],e=[],r=t.childrenNumber,i=0;i<r;i++){var o=Object.assign({},t.children[i],{id:t.children[i].facetId});n.push(o)}for(i=0;i<r-1;i++){var u={source:n[i].id,target:n[i+1].id,value:1};e.push(u)}return e.push({source:n[r-1].id,target:n[0].id,value:1}),{nodes:n,links:e}}(t),c=a.nodes,s=a.links,f=u.attr("class",t.facetId).append("g").selectAll("line").data(s).enter().append("line").attr("stroke","#aaa").attr("stroke-width","1px"),l=u.append("g").selectAll("circle").data(c).enter().append("circle").attr("r",t.r/3).attr("fill",t.color).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.facetId,expandedFacetId:r+","+t.facetId.toString()}))})),h=u.append("g").selectAll("text").data(c).enter().append("text").attr("r",t.r/3).attr("fill","#000").attr("font-size","15px").text((function(t){return t.facetName})).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.facetId,expandedFacetId:r+","+t.facetId.toString()}))}));function p(t){t.attr("x1",(function(t){return o(t.source.x)})).attr("y1",(function(t){return o(t.source.y)})).attr("x2",(function(t){return o(t.target.x)})).attr("y2",(function(t){return o(t.target.y)}))}function d(t){t.attr("transform",(function(t){return"translate("+o(t.x)+","+o(t.y)+")"}))}function v(t){t.attr("transform",(function(t){return"translate("+o(t.x-e*t.facetName.length/2)+","+o(t.y)+")"}))}u.append("g").selectAll("text").data(c).enter().append("text").attr("r",t.r/3).attr("fill","#99FF66").attr("font-size","15px").text((function(t){return t.childrenNumber})).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.facetId,expandedFacetId:r+","+t.facetId.toString()}))}));var y=r.forceSimulation(c).force("charge",r.forceManyBody().strength(-500)).force("center",r.forceCenter(t.cx,t.cy)).force("x",r.forceX(t.cx).strength(1)).force("y",r.forceY(t.cy).strength(1)).force("link",r.forceLink(s).id((function(t){return t.id})).distance(2*t.r)).on("tick",(function(){l.call(d),f.call(p),h.call(v)}));l.call(r.drag().on("start",(function(t){r.event.sourceEvent.stopPropagation(),r.event.active||y.alphaTarget(.3).restart(),t.fx=t.x,t.fy=t.y})).on("drag",(function(t){t.fx=r.event.x,t.fy=r.event.y})).on("end",(function(t){r.event.active||y.alphaTarget(0),t.fx=null,t.fy=null})))}},1855:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(9362),i=e(2367);n.drawFacetPieChart=function(t,n,e){void 0===e&&(e=12);var o=r.select(n),u=r.pie().value(1)(t.children);console.log("piedata",u);var a=r.arc().innerRadius(0).outerRadius(t.r),c=(r.arc().innerRadius(0).outerRadius(t.r+70),o.selectAll("g.arc"+t.facetId).data(u).enter().append("g").attr("class","arc"+t.facetId).attr("transform",t.transform));c.append("path").attr("fill",t.color).attr("d",a).attr("stroke","white").attr("stroke-width",t.r/10).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),o=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.data.facetId,expandedFacetId:o+","+t.facetId.toString()}));var u=document.getElementById("facet-tree-tooltip");r.select(u).transition().transition().duration(500).style("opacity",0)})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html(t.data.facetName).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})),u.length>1?c.append("text").attr("transform",(function(t){return"translate("+a.centroid(t)+")"})).attr("text-anchor","middle").text((function(t,n){return u[n].data.childrenNumber})).attr("fill","#fff").attr("font-size","10px").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),o=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.data.facetId,expandedFacetId:o+","+t.facetId.toString()}));var u=document.getElementById("facet-tree-tooltip");r.select(u).transition().transition().duration(500).style("opacity",0)})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html(t.data.facetName).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})):c.append("text").attr("text-anchor","middle").text((function(t,n){return u[n].data.childrenNumber})).attr("fill","#fff").attr("font-size","20px").attr("vertical-align","middle").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),o=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.data.facetId,expandedFacetId:o+","+t.facetId.toString()}));var u=document.getElementById("facet-tree-tooltip");r.select(u).transition().transition().duration(500).style("opacity",0)})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html(t.data.facetName).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})),t.childrenNumber,Math.PI}},3824:function(t,n,e){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t}).apply(this,arguments)};Object.defineProperty(n,"__esModule",{value:!0});var i=e(6486),o=e(9086),u=[];for(var a in o.presetPalettes)u.push(o.presetPalettes[a]);var c=2e3;function s(t){for(var n=[];t.length>0;)n.push.apply(n,t.splice(Math.floor(t.length/2),1));return n}function f(t){return-1===t.facetId?0:1===t.facetLayer?t.containChildrenFacet?c*t.childrenNumber:t.children.reduce((function(t,n){return"text"===n.assembleType?t+1:t+100}),0):t.containChildrenFacet?c*t.childrenNumber:t.children.reduce((function(t,n){return"fragment"===n.flag?t+1:t+100}),0)}function l(t,n,e,r,i){return Object.assign({},t,{transform:"translate("+n+","+e+")",cx:n,cy:e,r:i,color:r})}n.camelSort=s,n.buildTree=function(t,n){var e={branches:[],leaves:[],foldBranches:[],treeData:[],facetChart:[],texts:[],texts_leaf:[]};if(i.isEmpty(t)||!n)return e;var o=n.clientWidth,a=n.clientHeight,h=t.childrenNumber;if(1===h){e.branches.push({x:o/2-16,y:.4*a,width:32,height:.4*a-40,color:u[0][7],facetId:t.children[0].facetId,facetName:t.children[0].facetName,chilrenNumber:t.children[0].childrenNumber}),e.leaves.push({cx:o/2,cy:.382*a,r:20,color:u[0][7]}),e.foldBranches.push({x:o/2-8,y:.618*a,width:16,height:0,transform:"",color:""}),e.treeData=t.children,t.children[0].containChildrenFacet&&e.facetChart.push(l(t.children[0],e.leaves[0].cx,e.leaves[0].cy,e.leaves[0].color,e.leaves[0].r));var p=12;return p=12>(W=e.branches[0].height/(e.branches[0].facetName.length+8))?W:12,e.texts.push({x:e.branches[0].x+9,y:e.branches[0].y+8,text:e.branches[0].facetName,fontSize:p+5}),e.texts_leaf.push({x:e.leaves[0].cx,y:e.leaves[0].cy,text:e.branches[0].chilrenNumber.toString(),fontSize:20}),e}for(var d=h>7,v=[],y=0,b=t.children;y<b.length;y++){var g=b[y];v.push({facetId:g.facetId,value:f(g),containChildrenFacet:g.containChildrenFacet})}v.sort((function(t,n){return t.value-n.value}));var _=t.children;if(d){var m=v.filter((function(t){return t.value>1999})).length,x=[];if(7<m+1?x.concat(v.filter((function(t){return t.value<c})).map((function(t){return t.facetId}))):x=x.concat(v.slice(6).map((function(t){return t.facetId}))),x.length){var w=[];w=w.concat(_.filter((function(t){return-1===x.indexOf(t.facetId)})));var S={facetId:-1,facetName:"å¶ä»åé¢",facetLayer:-1,parentFacetId:0,topicId:t.topicId,childrenNumber:x.length,type:"branch",containChildrenFacet:!0,children:_.filter((function(t){return-1!==x.indexOf(t.facetId)}))};w.push(S),_=w}}_.sort((function(t,n){return f(n)-f(t)})),e.treeData=_;for(var M=_.length,T=M%2==1,N=.6*a,E=Math.PI/(2*M),A=o*Math.tan(E)/(2*(1+Math.tan(E))),k=T?N/(1+1/Math.sin(E)):N/(1+1/Math.tan(E)),C=A<k?A:k,I=C/Math.sin(E),F=I+C<N?(N-I-C)/M*2:0,P=T?0:E,z=Math.floor(M/2);P<Math.PI/2;){var j={cx:I*Math.sin(P)+o/2,cy:N-I*Math.cos(P)-F*z,r:C/2,color:"#ffffff"},O=r({},j);O.cx=o/2-I*Math.sin(P),e.leaves.push(j),e.leaves.push(O),P+=2*E,z--}T&&e.leaves.shift();for(var L=0;L<M;L++)e.leaves[L].color=u[L][7];var D=Math.abs(e.leaves[M-1].cx-e.leaves[M-2].cx)-C<.5*o,R=D?(Math.abs(e.leaves[M-1].cx-e.leaves[M-2].cx)-C)/(1.2*M-.2):.5*o/(1.2*M-.2),V=e.leaves[M-1].cx<e.leaves[M-2].cx?e.leaves[M-1].cx+C/2:e.leaves[M-2].cx+C/2;for(D||(V=.5*o/2),_.forEach((function(t,n){var r={x:V+1.2*n*R,y:0,width:R,height:0,facetId:-1,facetName:"",color:"",chilrenNumber:0};e.branches.push(r)})),e.branches=s(e.branches),L=0;L<M;L++)e.branches[L].facetName=_[L].facetName,e.branches[L].facetId=_[L].facetId,e.branches[L].chilrenNumber=_[L].childrenNumber;for(L=0;L<M;L++)e.branches[L].y=e.leaves[L].cy/2+a*(1-.8*.4)/2,e.branches[L].height=a-e.branches[L].y-40,e.branches[L].color=u[L][7];for(z=M+1,L=0;L<M;L++){var B={x:e.branches[L].x<o/2?e.branches[L].x+e.branches[L].width:e.branches[L].x-e.branches[L].width,y:e.branches[L].y,width:e.branches[L].width,height:e.branches[L].x>o/2?Math.sqrt(Math.pow(e.leaves[L].cx-e.branches[L].x+R/2,2)+Math.pow(e.leaves[L].cy-e.branches[L].y,2))/2:Math.sqrt(Math.pow(e.leaves[L].cx-e.branches[L].x-R,2)+Math.pow(e.leaves[L].cy-e.branches[L].y,2))/2,transform:"",color:u[L][7]},U=e.branches[L].x+B.width/2,q=B.y,Z=Math.atan(Math.abs((e.leaves[L].cy-q)/(e.leaves[L].cx-U)))/Math.PI*180;e.branches[L].x<o/2?B.transform="rotate("+(Z+90)+" "+B.x+","+B.y+")":B.transform="rotate("+(-Z-90)+" "+e.branches[L].x+","+B.y+")",e.foldBranches.push(B),z--}var Y=R-10>20?20:R-4;for(L=0;L<M;L++){var W;_[L].containChildrenFacet&&e.facetChart.push(l(_[L],e.leaves[L].cx,e.leaves[L].cy,e.leaves[L].color,e.leaves[L].r)),p=Y,p=Y>(W=e.branches[L].height/(e.branches[L].facetName.length+8))?W:Y,e.texts.push({x:e.branches[L].x+R/2-p/4,y:e.branches[L].y+8,text:e.branches[L].facetName,fontSize:p}),e.texts_leaf.push({x:e.leaves[L].cx-20*t.children[L].childrenNumber.toString().length/3,y:e.leaves[L].cy+12,text:e.branches[L].chilrenNumber.toString(),fontSize:20})}for(var H=0,X=e.leaves;H<X.length;H++)X[H].r=.6*R;for(var $=0,G=e.facetChart;$<G.length;$++)G[$].r=.8*R;return e}},2367:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(4143);n.globalState=new r.BehaviorSubject({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!1}),n.globalData={treeData:null},n.globalBranch=new r.BehaviorSubject({currentFacetId:-1,expandedFacetId:"-2,-2",init:!1})},7404:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.emptyChildren=function(t){for(var n=t.childNodes;n.length>0;)t.removeChild(n[0])}},655:(t,n,e)=>{"use strict";e.d(n,{ZT:()=>i});var r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function i(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}}},n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}return e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),e(8492)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYWNldFRyZWUvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9jb2xvcnMvbGliL2dlbmVyYXRlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9jb2xvcnMvbGliL2luZGV4LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy9kaXN0L3BhY2thZ2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3BhaXJzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY3Jvc3MuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kZXNjZW5kaW5nLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdmFyaWFuY2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kZXZpYXRpb24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL3N0dXJnZXMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9oaXN0b2dyYW0uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9xdWFudGlsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RocmVzaG9sZC9mcmVlZG1hbkRpYWNvbmlzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL3Njb3R0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWF4LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVhbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lZGlhbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lcmdlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWluLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcGVybXV0ZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3NjYW4uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zaHVmZmxlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvc3VtLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdHJhbnNwb3NlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvemlwLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2F4aXMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tYXRjaGVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zcGFyc2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXRhLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbGFzc2VkLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi90ZXh0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yYWlzZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbG93ZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRvci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9leGl0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9qb2luLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9tZXJnZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2RlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbXB0eS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZWFjaC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZHJhZy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2NvbG9yLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXJBcnJheS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NvdXJjZUV2ZW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3BvaW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3RvdWNoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21vdXNlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2luZGV4LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0clR3ZWVuLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2Vhc2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0aW9uLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdGV4dFR3ZWVuLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0QWxsLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9tZXJnZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vcmVtb3ZlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2VuZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvYWN0aXZlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9ldmVudC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9icnVzaC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9jaG9yZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL2FycmF5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1jaG9yZC9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9yaWJib24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL21hcC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbmVzdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvc2V0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9rZXlzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9tYXRoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbGFiLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY3ViZWhlbGl4LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2NvbnRvdXJzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9hcmVhLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9ibHVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9kZW5zaXR5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2RyYWcuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy90c3YuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvYXV0b1R5cGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2xpbmVhci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvcXVhZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvcG9seS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvc2luLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9leHAuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvYm91bmNlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9iYWNrLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9lbGFzdGljLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvYmxvYi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL3RleHQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9kc3YuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9pbWFnZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2pzb24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy94bWwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jZW50ZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2ppZ2dsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2FkZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3F1YWQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy94LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMveS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3F1YWR0cmVlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvY29sbGlkZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2xpbmsuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9zaW11bGF0aW9uLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvY292ZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9kYXRhLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZXh0ZW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZmluZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Jvb3QuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9zaXplLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvdmlzaXQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy92aXNpdEFmdGVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvbWFueUJvZHkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9yYWRpYWwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy94LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMveS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2V4cG9uZW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRQcmVmaXhBdXRvLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFJvdW5kZWQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0TnVtZXJhbHMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25GaXhlZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvYWRkZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9ub29wLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3N0cmVhbS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9hcmVhLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NhcnRlc2lhbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9ib3VuZHMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2VudHJvaWQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9yb3RhdGlvbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jaXJjbGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcG9pbnRFcXVhbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL3Jlam9pbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wb2x5Z29uQ29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2FudGltZXJpZGlhbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL3JlY3RhbmdsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2xpbmUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvbGVuZ3RoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2Rpc3RhbmNlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NvbnRhaW5zLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2dyYXRpY3VsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2FyZWEuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9ib3VuZHMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9jZW50cm9pZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9tZWFzdXJlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvc3RyaW5nLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvdHJhbnNmb3JtLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZml0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vcmVzYW1wbGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vY29uaWNFcXVhbEFyZWEuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jeWxpbmRyaWNhbEVxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2FsYmVycy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2FsYmVyc1VzYS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWlkaXN0YW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vbWVyY2F0b3IuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jb25pY0NvbmZvcm1hbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2VxdWlyZWN0YW5ndWxhci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljRXF1aWRpc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9lcXVhbEVhcnRoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZ25vbW9uaWMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL25hdHVyYWxFYXJ0aDEuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9vcnRob2dyYXBoaWMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9zdGVyZW9ncmFwaGljLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vdHJhbnN2ZXJzZU1lcmNhdG9yLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2NsdXN0ZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2NvdW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEFmdGVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQmVmb3JlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zdW0uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3NvcnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3BhdGguanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2FuY2VzdG9ycy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZGVzY2VuZGFudHMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xlYXZlcy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGlua3MuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9lbmNsb3NlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3BhY2svc2libGluZ3MuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvYWNjZXNzb3JzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3BhY2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9yb3VuZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL2RpY2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFydGl0aW9uLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3N0cmF0aWZ5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9zbGljZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3NxdWFyaWZ5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9zbGljZURpY2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9yZXNxdWFyaWZ5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGlzY3JldGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9odWUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3pvb20uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9oc2wuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9sYWIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9oY2wuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9waWVjZXdpc2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9xdWFudGl6ZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvYXJlYS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvY2VudHJvaWQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2Nyb3NzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9odWxsLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9jb250YWlucy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvbGVuZ3RoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2RlZmF1bHRTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvdW5pZm9ybS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9ub3JtYWwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvbG9nTm9ybWFsLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2lyd2luSGFsbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9iYXRlcy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9leHBvbmVudGlhbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2luaXQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9iYW5kLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbmljZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xvZy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3N5bWxvZy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3Bvdy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3F1YW50aWxlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvcXVhbnRpemUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aHJlc2hvbGQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2ludGVydmFsLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9tb250aC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZHVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3dlZWsuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2RheS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaG91ci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWludXRlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9zZWNvbmQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbGxpc2Vjb25kLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNXZWVrLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNEYXkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1llYXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGltZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTW9udGguanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0hvdXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01pbnV0ZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3V0Y1RpbWUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9zZXF1ZW50aWFsLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvc2VxdWVudGlhbFF1YW50aWxlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvZGl2ZXJnaW5nLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL0FjY2VudC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9EYXJrMi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYWlyZWQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDEuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0Mi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1RhYmxlYXUxMC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9yYW1wLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9CckJHLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QUkduLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QaVlHLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QdU9yLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZEJ1LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZEd5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsQnUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkWWxHbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvU3BlY3RyYWwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9CdUduLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVQdS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0duQnUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9PclJkLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdUduLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1UmQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9SZFB1LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxHbkJ1LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxHbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JCci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JSZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9CbHVlcy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmVlbnMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JleXMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvUHVycGxlcy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9SZWRzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL09yYW5nZXMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9jaXZpZGlzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvY3ViZWhlbGl4LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvcmFpbmJvdy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3NpbmVib3cuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS90dXJiby5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3ZpcmlkaXMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2xvY2FsLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy90b3VjaGVzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9tYXRoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJjLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvcG9pbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJlYS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2Rlc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BpZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL3JhZGlhbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2xpbmVSYWRpYWwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmVhUmFkaWFsLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvcG9pbnRSYWRpYWwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2xpbmsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvY2lyY2xlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2Nyb3NzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2RpYW1vbmQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvc3Rhci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9zcXVhcmUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvdHJpYW5nbGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvd3llLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbm9vcC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2Jhc2lzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYmFzaXNDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9iYXNpc09wZW4uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9idW5kbGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhcmRpbmFsQ2xvc2VkLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWxPcGVuLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhdG11bGxSb21DbG9zZWQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXRtdWxsUm9tT3Blbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhckNsb3NlZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL21vbm90b25lLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbmF0dXJhbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL3N0ZXAuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vZmZzZXQvbm9uZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL25vbmUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zdGFjay5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29mZnNldC9leHBhbmQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vZmZzZXQvZGl2ZXJnaW5nLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L3NpbGhvdWV0dGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vZmZzZXQvd2lnZ2xlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb3JkZXIvYXBwZWFyYW5jZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL2Rlc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9pbnNpZGVPdXQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9yZXZlcnNlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvRm9ybWF0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvUGFyc2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy9pbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL3BvaW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9SZWRCbGFja1RyZWUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0VkZ2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0NlbGwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0NpcmNsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQmVhY2guanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0RpYWdyYW0uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL3Zvcm9ub2kuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy9ldmVudC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvdHJhbnNmb3JtLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy9ub2V2ZW50LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy96b29tLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9BbmltYXRpb25GcmFtZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvYW5pbWF0aW9uRnJhbWUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9WaXJ0dWFsVGltZVNjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2JpbmRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2JpbmROb2RlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mb3JrSm9pbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudFBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9nZW5lcmF0ZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2lpZi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2ludGVydmFsLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvbmV2ZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9vbkVycm9yUmVzdW1lTmV4dC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3BhaXJzLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvcGFydGl0aW9uLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS91c2luZy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9Bc3luY1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvQmVoYXZpb3JTdWJqZWN0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL0lubmVyU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3RvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9PYnNlcnZlci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9PdXRlclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvUmVwbGF5U3ViamVjdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3ViamVjdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TdWJqZWN0U3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL1N1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3QuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9kZWZlci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21BcnJheS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvb2YuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYWNlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvdGhyb3dFcnJvci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3RpbWVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvemlwLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRBbGwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZ3JvdXBCeS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUFsbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvcmVmQ291bnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVQcm9taXNlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FjdGlvbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9JbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzYXBBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzYXAuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzYXBTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9RdWV1ZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvcXVldWUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL1F1ZXVlU2NoZWR1bGVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zeW1ib2wvcnhTdWJzY3JpYmVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9FbXB0eUVycm9yLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9UaW1lb3V0RXJyb3IuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvY2FuUmVwb3J0RXJyb3IuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9ob3N0UmVwb3J0RXJyb3IuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc051bWVyaWMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzU2NoZWR1bGVyLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL25vdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUby5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb0FycmF5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9hdWRpdFRpbWUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyQ291bnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRpbWUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRvZ2dsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyV2hlbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY2F0Y2hFcnJvci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUFsbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXAuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdE1hcFRvLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9jb3VudC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGVmYXVsdElmRW1wdHkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0RhdGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlbGF5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWxheVdoZW4uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlbWF0ZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbEtleUNoYW5nZWQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm93SWZFbXB0eS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZWxlbWVudEF0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9lbmRXaXRoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9ldmVyeS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZXhoYXVzdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZXhoYXVzdE1hcC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZXhwYW5kLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9maW5hbGl6ZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmluZC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmluZEluZGV4LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9maXJzdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VMYXN0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9sYXN0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXBUby5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWF0ZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW4uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3JlZHVjZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWF4LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXBUby5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VTY2FuLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9taW4uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL211bHRpY2FzdC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvb25FcnJvclJlc3VtZU5leHQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3BhaXJ3aXNlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3BsdWNrLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoQmVoYXZpb3IuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3B1Ymxpc2hMYXN0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoUmVwbGF5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yYWNlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3JlcGVhdFdoZW4uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3JldHJ5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9yZXRyeVdoZW4uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NhbXBsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2FtcGxlVGltZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2VxdWVuY2VFcXVhbC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NoYXJlUmVwbGF5LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9zaW5nbGUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NraXAuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBMYXN0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9za2lwVW50aWwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBXaGlsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3RhcnRXaXRoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvU3Vic2NyaWJlT25PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9zdWJzY3JpYmVPbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hBbGwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcFRvLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlVW50aWwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VXaGlsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGFwLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVUaW1lLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90aW1lSW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXRXaXRoLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0LmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90aW1lc3RhbXAuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93Q291bnQuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RpbWUuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RvZ2dsZS5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93V2hlbi5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvd2l0aExhdGVzdEZyb20uanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3ppcC5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvemlwQWxsLmpzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy90aW55Y29sb3IyL3Rpbnljb2xvci5qcyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9pbmRleC50cyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9zcmMvZHJhdy10cmVlLWRlbC50cyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9zcmMvZHJhdy10cmVlLW51bWJlci50cyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9zcmMvZHJhdy10cmVlLnRzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL3NyYy9mYWNldC1mb3JjZS1sYXlvdXQudHMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vc3JjL2ZhY2V0LXBpZS1jaGFydC50cyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9zcmMvZmFjZXQtdHJlZS1uZy50cyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvLi9zcmMvc3RhdGUudHMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlLy4vc3JjL3Rvb2xzL3V0aWxzLnRzIiwid2VicGFjazovL2ZhY2V0VHJlZS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2ZhY2V0VHJlZS93ZWJwYWNrL3N0YXJ0dXAiLCJ3ZWJwYWNrOi8vZmFjZXRUcmVlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9mYWNldFRyZWUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9mYWNldFRyZWUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9mYWNldFRyZWUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9mYWNldFRyZWUvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiX19pbXBvcnREZWZhdWx0IiwidGhpcyIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwidGlueWNvbG9yMl8xIiwiZ2V0SHVlIiwiaHN2IiwiaSIsImxpZ2h0IiwiaHVlIiwiTWF0aCIsInJvdW5kIiwiaCIsImdldFNhdHVyYXRpb24iLCJzIiwic2F0dXJhdGlvbiIsImdldFZhbHVlIiwidiIsImRlZmF1bHQiLCJjb2xvciIsInBhdHRlcm5zIiwicENvbG9yIiwidG9Ic3YiLCJjb2xvclN0cmluZyIsInRvSGV4U3RyaW5nIiwicHVzaCIsImdlbmVyYXRlXzEiLCJnZW5lcmF0ZSIsInByZXNldFByaW1hcnlDb2xvcnMiLCJyZWQiLCJ2b2xjYW5vIiwib3JhbmdlIiwiZ29sZCIsInllbGxvdyIsImxpbWUiLCJncmVlbiIsImN5YW4iLCJibHVlIiwiZ2Vla2JsdWUiLCJwdXJwbGUiLCJtYWdlbnRhIiwiZ3JleSIsInByZXNldFBhbGV0dGVzIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJwcmltYXJ5IiwidmVyc2lvbiIsImEiLCJiIiwiTmFOIiwiY29tcGFyZSIsImYiLCJsZW5ndGgiLCJkIiwieCIsImFzY2VuZGluZyIsImxlZnQiLCJsbyIsImhpIiwibWlkIiwicmlnaHQiLCJhc2NlbmRpbmdCaXNlY3QiLCJiaXNlY3RvciIsImJpc2VjdFJpZ2h0IiwiYmlzZWN0TGVmdCIsImFycmF5IiwicGFpciIsIm4iLCJwIiwicGFpcnMiLCJBcnJheSIsInZhbHVlczAiLCJ2YWx1ZXMxIiwicmVkdWNlIiwiaTAiLCJpMSIsInZhbHVlMCIsIm4wIiwibjEiLCJ2YWx1ZXMiLCJ2YWx1ZW9mIiwiZGVsdGEiLCJtIiwibWVhbiIsInN1bSIsImlzTmFOIiwibnVtYmVyIiwidmFyaWFuY2UiLCJzcXJ0IiwibWluIiwibWF4IiwicHJvdG90eXBlIiwic2xpY2UiLCJtYXAiLCJzdGFydCIsInN0b3AiLCJzdGVwIiwiYXJndW1lbnRzIiwiY2VpbCIsInJhbmdlIiwiZTEwIiwiZTUiLCJlMiIsImNvdW50IiwicmV2ZXJzZSIsInRpY2tzIiwidGlja0luY3JlbWVudCIsImlzRmluaXRlIiwiZmxvb3IiLCJwb3dlciIsImxvZyIsIkxOMTAiLCJlcnJvciIsInBvdyIsInRpY2tTdGVwIiwic3RlcDAiLCJhYnMiLCJzdGVwMSIsIkxOMiIsImlkZW50aXR5IiwiZG9tYWluIiwiZXh0ZW50IiwidGhyZXNob2xkIiwic3R1cmdlcyIsImhpc3RvZ3JhbSIsImRhdGEiLCJ4eiIsIngwIiwieDEiLCJ0eiIsImlzQXJyYXkiLCJzaGlmdCIsInBvcCIsImJpbiIsImJpbnMiLCJiaXNlY3QiLCJfIiwiY29uc3RhbnQiLCJ0aHJlc2hvbGRzIiwiY2FsbCIsInNvcnQiLCJxdWFudGlsZSIsImRldmlhdGlvbiIsIm51bWJlcnMiLCJhcnJheXMiLCJtZXJnZWQiLCJqIiwiaW5kZXhlcyIsInBlcm11dGVzIiwieGkiLCJ4aiIsInQiLCJyYW5kb20iLCJtYXRyaXgiLCJ0cmFuc3Bvc2UiLCJyb3ciLCJlcHNpbG9uIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ5Iiwic2NhbGUiLCJjZW50ZXIiLCJvZmZzZXQiLCJiYW5kd2lkdGgiLCJlbnRlcmluZyIsIl9fYXhpcyIsImF4aXMiLCJvcmllbnQiLCJ0aWNrQXJndW1lbnRzIiwidGlja1ZhbHVlcyIsInRpY2tGb3JtYXQiLCJ0aWNrU2l6ZUlubmVyIiwidGlja1NpemVPdXRlciIsInRpY2tQYWRkaW5nIiwiayIsInRyYW5zZm9ybSIsImNvbnRleHQiLCJhcHBseSIsImZvcm1hdCIsInNwYWNpbmciLCJyYW5nZTAiLCJyYW5nZTEiLCJwb3NpdGlvbiIsImNvcHkiLCJzZWxlY3Rpb24iLCJwYXRoIiwic2VsZWN0QWxsIiwidGljayIsIm9yZGVyIiwidGlja0V4aXQiLCJleGl0IiwidGlja0VudGVyIiwiZW50ZXIiLCJhcHBlbmQiLCJhdHRyIiwibGluZSIsInNlbGVjdCIsInRleHQiLCJtZXJnZSIsImluc2VydCIsInRyYW5zaXRpb24iLCJnZXRBdHRyaWJ1dGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlIiwiZmlsdGVyIiwiZWFjaCIsInRpY2tTaXplIiwiYXhpc1RvcCIsImF4aXNSaWdodCIsImF4aXNCb3R0b20iLCJheGlzTGVmdCIsIm5vb3AiLCJkaXNwYXRjaCIsInRlc3QiLCJFcnJvciIsIkRpc3BhdGNoIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJ0eXBlcyIsInRyaW0iLCJzcGxpdCIsIm5hbWUiLCJpbmRleE9mIiwiaGFzT3duUHJvcGVydHkiLCJ0eXBlIiwiZ2V0IiwiYyIsInNldCIsImNhbGxiYWNrIiwiY29uY2F0IiwiY29uc3RydWN0b3IiLCJvbiIsInR5cGVuYW1lIiwiVCIsInRoYXQiLCJhcmdzIiwibm9uZSIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImVtcHR5IiwicXVlcnlTZWxlY3RvckFsbCIsIm1hdGNoZXMiLCJ1cGRhdGUiLCJFbnRlck5vZGUiLCJwYXJlbnQiLCJkYXR1bSIsIm93bmVyRG9jdW1lbnQiLCJuYW1lc3BhY2VVUkkiLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsImJpbmRJbmRleCIsImdyb3VwIiwibm9kZSIsImdyb3VwTGVuZ3RoIiwiZGF0YUxlbmd0aCIsImJpbmRLZXkiLCJrZXlWYWx1ZSIsIm5vZGVCeUtleVZhbHVlIiwia2V5VmFsdWVzIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJ4aHRtbCIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJwcmVmaXgiLCJuYW1lc3BhY2VzIiwic3BhY2UiLCJsb2NhbCIsImF0dHJSZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhdHRyUmVtb3ZlTlMiLCJmdWxsbmFtZSIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYXR0ckNvbnN0YW50Iiwic2V0QXR0cmlidXRlIiwiYXR0ckNvbnN0YW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImF0dHJGdW5jdGlvbiIsImF0dHJGdW5jdGlvbk5TIiwiZGVmYXVsdFZpZXciLCJkb2N1bWVudCIsInN0eWxlUmVtb3ZlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInN0eWxlQ29uc3RhbnQiLCJwcmlvcml0eSIsInNldFByb3BlcnR5Iiwic3R5bGVGdW5jdGlvbiIsInN0eWxlVmFsdWUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInByb3BlcnR5UmVtb3ZlIiwicHJvcGVydHlDb25zdGFudCIsInByb3BlcnR5RnVuY3Rpb24iLCJjbGFzc0FycmF5Iiwic3RyaW5nIiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJjbGFzc2VkQWRkIiwibmFtZXMiLCJsaXN0IiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsImNsYXNzZWRUcnVlIiwiY2xhc3NlZEZhbHNlIiwiY2xhc3NlZEZ1bmN0aW9uIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsImh0bWxDb25zdGFudCIsImh0bWxGdW5jdGlvbiIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJsb3dlciIsInByZXZpb3VzU2libGluZyIsImZpcnN0Q2hpbGQiLCJjcmVhdG9ySW5oZXJpdCIsInVyaSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdG9yRml4ZWQiLCJuYW1lc3BhY2UiLCJjb25zdGFudE51bGwiLCJyZW1vdmVDaGlsZCIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZSIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJqb2luIiwic3BsaWNlIiwiY29udGFpbnMiLCJmaWx0ZXJFdmVudHMiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiY29udGV4dExpc3RlbmVyIiwiZXZlbnQiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZXZlbnQxIiwiZXZlbnQwIiwib25SZW1vdmUiLCJfX29uIiwibyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXB0dXJlIiwib25BZGQiLCJ3cmFwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImN1c3RvbUV2ZW50Iiwic291cmNlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZGlzcGF0Y2hDb25zdGFudCIsImRpc3BhdGNoRnVuY3Rpb24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsIlNlbGVjdGlvbiIsImdyb3VwcyIsInBhcmVudHMiLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJzZWxlY3RvckFsbCIsIm1hdGNoIiwibWF0Y2hlciIsInNpemUiLCJiaW5kIiwiZW50ZXJHcm91cCIsInVwZGF0ZUdyb3VwIiwicHJldmlvdXMiLCJfZW50ZXIiLCJfZXhpdCIsInNwYXJzZSIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtMSIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsIm5vZGVzIiwiZ2V0QXR0cmlidXRlTlMiLCJwcm9wZXJ0eSIsImNsYXNzZWQiLCJodG1sIiwiY3JlYXRlIiwiY3JlYXRvciIsImJlZm9yZSIsImRlZXAiLCJub3Byb3BhZ2F0aW9uIiwidmlldyIsIm5vZXZlbnQiLCJfX25vc2VsZWN0IiwiTW96VXNlclNlbGVjdCIsInllc2RyYWciLCJub2NsaWNrIiwic2V0VGltZW91dCIsImV4dGVuZCIsImRlZmluaXRpb24iLCJDb2xvciIsImRhcmtlciIsImJyaWdodGVyIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgiLCJyZVJnYkludGVnZXIiLCJSZWdFeHAiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVueWVsbG93IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWVncmVlbiIsImxpbmVuIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInJlYmVjY2FwdXJwbGUiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3dncmVlbiIsImNvbG9yX2Zvcm1hdEhleCIsInJnYiIsImZvcm1hdEhleCIsImNvbG9yX2Zvcm1hdFJnYiIsImZvcm1hdFJnYiIsImwiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJwYXJzZUludCIsInJnYm4iLCJSZ2IiLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwicmdiQ29udmVydCIsIm9wYWNpdHkiLCJyZ2JfZm9ybWF0SGV4IiwiaGV4IiwicmdiX2Zvcm1hdFJnYiIsInRvU3RyaW5nIiwiSHNsIiwiaHNsQ29udmVydCIsImhzbCIsImhzbDJyZ2IiLCJtMiIsImJhc2lzIiwidDEiLCJ2MCIsInYxIiwidjIiLCJ2MyIsInQyIiwidDMiLCJsaW5lYXIiLCJub2dhbW1hIiwiY2hhbm5lbHMiLCJhc3NpZ24iLCJkaXNwbGF5YWJsZSIsImZvcm1hdEhzbCIsInJnYkdhbW1hIiwiZXhwb25lbnRpYWwiLCJnYW1tYSIsImVuZCIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsInJnYkJhc2lzIiwicmdiQmFzaXNDbG9zZWQiLCJiYXNpc0Nsb3NlZCIsImlzTnVtYmVyQXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkRhdGFWaWV3IiwibnVtYmVyQXJyYXkiLCJnZW5lcmljQXJyYXkiLCJuYiIsIm5hIiwiRGF0ZSIsInNldFRpbWUiLCJyZUEiLCJyZUIiLCJzb3VyY2UiLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsInEiLCJvbmUiLCJ6ZXJvIiwiZGF0ZSIsInZhbHVlT2YiLCJvYmplY3QiLCJjdXJyZW50Iiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJwb2ludCIsImNsaWVudFgiLCJjbGllbnRZIiwibWF0cml4VHJhbnNmb3JtIiwiZ2V0U2NyZWVuQ1RNIiwiaW52ZXJzZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRMZWZ0IiwidG9wIiwiY2xpZW50VG9wIiwidG91Y2hlcyIsImlkZW50aWZpZXIiLCJjaGFuZ2VkVG91Y2hlcyIsInRvdWNoIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsInRpbWVvdXQiLCJpbnRlcnZhbCIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJwZXJmb3JtYW5jZSIsIm5vdyIsInNldEZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwidGltZSIsInJlc3RhcnQiLCJ0aW1lckZsdXNoIiwiZSIsIndha2UiLCJ0MCIsIkluZmluaXR5Iiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZWxhcHNlZCIsIlR5cGVFcnJvciIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiaWQiLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJ0d2VlbiIsInN0YXRlIiwiZHVyYXRpb24iLCJlYXNlIiwiaW5pdCIsInNjaGVkdWxlIiwiYWN0aXZlIiwiY3NzTm9kZSIsImNzc1Jvb3QiLCJjc3NWaWV3Iiwic3ZnTm9kZSIsImRlZ3JlZXMiLCJQSSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiYXRhbjIiLCJhdGFuIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJwYXJzZSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJ0d2VlblJlbW92ZSIsInR3ZWVuMCIsInR3ZWVuMSIsInR3ZWVuRnVuY3Rpb24iLCJ0d2VlblZhbHVlIiwiX2lkIiwiaW50ZXJwb2xhdGUiLCJ2YWx1ZTEiLCJzdHJpbmcwMCIsImludGVycG9sYXRlMCIsInN0cmluZzEiLCJzdHJpbmcwIiwic3RyaW5nMTAiLCJhdHRySW50ZXJwb2xhdGUiLCJhdHRySW50ZXJwb2xhdGVOUyIsImF0dHJUd2Vlbk5TIiwiX3ZhbHVlIiwiYXR0clR3ZWVuIiwiZGVsYXlGdW5jdGlvbiIsImRlbGF5Q29uc3RhbnQiLCJkdXJhdGlvbkZ1bmN0aW9uIiwiZHVyYXRpb25Db25zdGFudCIsImVhc2VDb25zdGFudCIsIm9uRnVuY3Rpb24iLCJvbjAiLCJvbjEiLCJzaXQiLCJldmVyeSIsInN0eWxlSW50ZXJwb2xhdGUiLCJzdHlsZVR3ZWVuIiwidGV4dEludGVycG9sYXRlIiwidGV4dFR3ZWVuIiwiVHJhbnNpdGlvbiIsIl9uYW1lIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiY3ViaWNJbiIsImN1YmljT3V0IiwiY3ViaWNJbk91dCIsImNoaWxkcmVuIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsInN0eWxlTnVsbCIsImxpc3RlbmVyMCIsInVuZGVmaW5lZCIsInN0eWxlTWF5YmVSZW1vdmUiLCJyZW1vdmVGdW5jdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FuY2VsIiwiaW50ZXJydXB0IiwiZGVmYXVsdFRpbWluZyIsInRhcmdldCIsIk1PREVfRFJBRyIsIk1PREVfU1BBQ0UiLCJNT0RFX0hBTkRMRSIsIk1PREVfQ0VOVEVSIiwibnVtYmVyMSIsIm51bWJlcjIiLCJ0b3VjaGVyIiwiWCIsImhhbmRsZXMiLCJpbnB1dCIsIm91dHB1dCIsInh5IiwiWSIsIlhZIiwiY3Vyc29ycyIsIm92ZXJsYXkiLCJ3IiwibnciLCJuZSIsInNlIiwic3ciLCJmbGlwWCIsImZsaXBZIiwic2lnbnNYIiwic2lnbnNZIiwiZGVmYXVsdEZpbHRlciIsImRlZmF1bHRFeHRlbnQiLCJoYXNBdHRyaWJ1dGUiLCJ2aWV3Qm94Iiwid2lkdGgiLCJoZWlnaHQiLCJkZWZhdWx0VG91Y2hhYmxlIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJfX2JydXNoIiwiYnJ1c2hTZWxlY3Rpb24iLCJkaW0iLCJicnVzaFgiLCJicnVzaFkiLCJ0b3VjaGVuZGluZyIsInRvdWNoYWJsZSIsImxpc3RlbmVycyIsImhhbmRsZVNpemUiLCJicnVzaCIsImluaXRpYWxpemUiLCJoYW5kbGUiLCJyZWRyYXciLCJzdGFydGVkIiwidG91Y2htb3ZlZCIsInRvdWNoZW5kZWQiLCJlbWl0dGVyIiwiY2xlYW4iLCJFbWl0dGVyIiwidzAiLCJ3MSIsImUwIiwiZTEiLCJzMCIsInMxIiwibW92aW5nIiwibG9ja1giLCJsb2NrWSIsIm1vZGUiLCJzaWduWCIsInNpZ25ZIiwiVyIsIk4iLCJFIiwiUyIsImR4IiwiZHkiLCJzaGlmdGluZyIsInBvaW50ZXIiLCJtb3VzZSIsInBvaW50MCIsImVtaXQiLCJiZWZvcmVzdGFydCIsIm1vdmVkIiwiZW5kZWQiLCJrZXlkb3duZWQiLCJrZXl1cHBlZCIsInBvaW50MSIsIm1vdmUiLCJzZWxlY3Rpb24wIiwic2VsZWN0aW9uMSIsImNsZWFyIiwic3RhcnRpbmciLCJrZXlNb2RpZmllcnMiLCJjb3MiLCJzaW4iLCJwaSIsImhhbGZQaSIsInRhdSIsImNvbXBhcmVWYWx1ZSIsInBhZEFuZ2xlIiwic29ydEdyb3VwcyIsInNvcnRTdWJncm91cHMiLCJzb3J0Q2hvcmRzIiwiY2hvcmQiLCJncm91cFN1bXMiLCJncm91cEluZGV4Iiwic3ViZ3JvdXBJbmRleCIsImNob3JkcyIsImRpIiwiZGoiLCJhMCIsImExIiwic3ViaW5kZXgiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsIm1vdmVUbyIsImNsb3NlUGF0aCIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJjY3ciLCJjdyIsImRhIiwiZGVmYXVsdFNvdXJjZSIsImRlZmF1bHRUYXJnZXQiLCJkZWZhdWx0UmFkaXVzIiwicmFkaXVzIiwiZGVmYXVsdFN0YXJ0QW5nbGUiLCJkZWZhdWx0RW5kQW5nbGUiLCJyaWJib24iLCJidWZmZXIiLCJhcmd2Iiwic3IiLCJzYTAiLCJzYTEiLCJzeDAiLCJzeTAiLCJ0ciIsInRhMCIsInRhMSIsIk1hcCIsImhhcyIsImVudHJpZXMiLCJzb3J0VmFsdWVzIiwicm9sbHVwIiwibmVzdCIsInNvcnRLZXlzIiwiZGVwdGgiLCJjcmVhdGVSZXN1bHQiLCJzZXRSZXN1bHQiLCJ2YWx1ZXNCeUtleSIsInJlc3VsdCIsInNvcnRLZXkiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJTZXQiLCJwcm90byIsImRlZzJyYWQiLCJyYWQyZGVnIiwiWG4iLCJabiIsImxhYkNvbnZlcnQiLCJMYWIiLCJIY2wiLCJoY2wybGFiIiwieiIsInJnYjJscmdiIiwieHl6MmxhYiIsImxhYiIsImxhYjJ4eXoiLCJscmdiMnJnYiIsImhjbENvbnZlcnQiLCJsY2giLCJoY2wiLCJBIiwiQiIsIkMiLCJEIiwiRUQiLCJFQiIsIkJDX0RBIiwiY3ViZWhlbGl4Q29udmVydCIsIkN1YmVoZWxpeCIsImJsIiwiY29zaCIsInNpbmgiLCJyaW5nIiwiaG9sZSIsInJpbmdDb250YWlucyIsInlpIiwicGoiLCJ5aiIsInNlZ21lbnRDb250YWlucyIsImNvbGxpbmVhciIsImNhc2VzIiwic21vb3RoIiwic21vb3RoTGluZWFyIiwiY29udG91cnMiLCJjb250b3VyIiwicG9seWdvbnMiLCJob2xlcyIsImZyYWdtZW50QnlTdGFydCIsImZyYWdtZW50QnlFbmQiLCJzdGl0Y2giLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJ1bnNoaWZ0IiwiaXNvcmluZ3MiLCJhcmVhIiwicG9seWdvbiIsImNvb3JkaW5hdGVzIiwieHQiLCJ5dCIsIl8wIiwiXzEiLCJibHVyWCIsImJsdXJZIiwiZGVmYXVsdFgiLCJkZWZhdWx0WSIsImRlZmF1bHRXZWlnaHQiLCJ3ZWlnaHQiLCJkZW5zaXR5IiwiRmxvYXQzMkFycmF5Iiwid2kiLCJnZW9tZXRyeSIsInRyYW5zZm9ybVBvbHlnb24iLCJ0cmFuc2Zvcm1SaW5nIiwidHJhbnNmb3JtUG9pbnQiLCJyZXNpemUiLCJjZWxsU2l6ZSIsIkRyYWdFdmVudCIsInN1YmplY3QiLCJkZWZhdWx0Q29udGFpbmVyIiwiZGVmYXVsdFN1YmplY3QiLCJtb3VzZWRvd254IiwibW91c2Vkb3dueSIsIm1vdXNlbW92aW5nIiwiY29udGFpbmVyIiwiZ2VzdHVyZXMiLCJjbGlja0Rpc3RhbmNlMiIsImRyYWciLCJtb3VzZWRvd25lZCIsInRvdWNoc3RhcnRlZCIsImdlc3R1cmUiLCJtb3VzZW1vdmVkIiwibW91c2V1cHBlZCIsIm5vZHJhZyIsInN1Ymxpc3RlbmVycyIsInAwIiwiY2xpY2tEaXN0YW5jZSIsIkVPTCIsIkVPRiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbmZlckNvbHVtbnMiLCJyb3dzIiwiY29sdW1uU2V0IiwiY29sdW1uIiwicGFkIiwiZGVsaW1pdGVyIiwicmVGb3JtYXQiLCJERUxJTUlURVIiLCJjaGFyQ29kZUF0IiwicGFyc2VSb3dzIiwiSSIsImVvZiIsImVvbCIsInRva2VuIiwicmVwbGFjZSIsInByZWZvcm1hdEJvZHkiLCJmb3JtYXRWYWx1ZSIsImZvcm1hdFJvdyIsImhvdXJzIiwiZ2V0VVRDSG91cnMiLCJtaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsInNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwieWVhciIsImZvcm1hdFllYXIiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImZvcm1hdERhdGUiLCJjb252ZXJ0IiwiY3VzdG9tQ29udmVydGVyIiwiZm9ybWF0Qm9keSIsImZvcm1hdFJvd3MiLCJjc3YiLCJkc3YiLCJjc3ZQYXJzZSIsImNzdlBhcnNlUm93cyIsImNzdkZvcm1hdCIsImNzdkZvcm1hdEJvZHkiLCJjc3ZGb3JtYXRSb3dzIiwiY3N2Rm9ybWF0Um93IiwiY3N2Rm9ybWF0VmFsdWUiLCJ0c3YiLCJ0c3ZQYXJzZSIsInRzdlBhcnNlUm93cyIsInRzdkZvcm1hdCIsInRzdkZvcm1hdEJvZHkiLCJ0c3ZGb3JtYXRSb3dzIiwidHN2Rm9ybWF0Um93IiwidHN2Rm9ybWF0VmFsdWUiLCJhdXRvVHlwZSIsImZpeHR6IiwiZ2V0SG91cnMiLCJxdWFkSW4iLCJxdWFkT3V0IiwicXVhZEluT3V0IiwicG9seUluIiwiY3VzdG9tIiwiZXhwb25lbnQiLCJwb2x5T3V0IiwicG9seUluT3V0Iiwic2luSW4iLCJzaW5PdXQiLCJzaW5Jbk91dCIsImV4cEluIiwiZXhwT3V0IiwiZXhwSW5PdXQiLCJjaXJjbGVJbiIsImNpcmNsZU91dCIsImNpcmNsZUluT3V0IiwiYjAiLCJib3VuY2VJbiIsImJvdW5jZU91dCIsImJvdW5jZUluT3V0Iiwib3ZlcnNob290IiwiYmFja0luIiwiYmFja091dCIsImJhY2tJbk91dCIsImVsYXN0aWNJbiIsImFzaW4iLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJlbGFzdGljT3V0IiwiZWxhc3RpY0luT3V0IiwicmVzcG9uc2VCbG9iIiwicmVzcG9uc2UiLCJvayIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJibG9iIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2VBcnJheUJ1ZmZlciIsImFycmF5QnVmZmVyIiwicmVzcG9uc2VUZXh0IiwiZHN2UGFyc2UiLCJpbWFnZSIsIkltYWdlIiwib25lcnJvciIsIm9ubG9hZCIsInNyYyIsInJlc3BvbnNlSnNvbiIsImpzb24iLCJwYXJzZXIiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJmb3JjZSIsInN4Iiwic3kiLCJ0cmVlIiwieG0iLCJ5bSIsInhwIiwieXAiLCJib3R0b20iLCJfcm9vdCIsImxlYWYiLCJfeCIsIl95IiwicXVhZHRyZWUiLCJRdWFkdHJlZSIsImFkZEFsbCIsImxlYWZfY29weSIsInRyZWVQcm90byIsInZ4IiwidnkiLCJyYWRpaSIsInN0cmVuZ3RoIiwiaXRlcmF0aW9ucyIsInJpIiwicmkyIiwidmlzaXRBZnRlciIsInByZXBhcmUiLCJ2aXNpdCIsInF1YWQiLCJyaiIsImppZ2dsZSIsIm5vZGVCeUlkIiwibm9kZUlkIiwibGlua3MiLCJzdHJlbmd0aHMiLCJkaXN0YW5jZXMiLCJiaWFzIiwibGluayIsImRpc3RhbmNlIiwiYWxwaGEiLCJpbml0aWFsaXplU3RyZW5ndGgiLCJpbml0aWFsaXplRGlzdGFuY2UiLCJjb3ZlciIsInl6IiwiZmluZCIsIngzIiwieTMiLCJxdWFkcyIsImQyIiwicmV0YWluZXIiLCJyZW1vdmVBbGwiLCJpbml0aWFsQW5nbGUiLCJzaW11bGF0aW9uIiwiYWxwaGFNaW4iLCJhbHBoYURlY2F5IiwiYWxwaGFUYXJnZXQiLCJ2ZWxvY2l0eURlY2F5IiwiZm9yY2VzIiwic3RlcHBlciIsImZ4IiwiZnkiLCJpbml0aWFsaXplTm9kZXMiLCJhbmdsZSIsImluaXRpYWxpemVGb3JjZSIsImNsb3Nlc3QiLCJkaXN0YW5jZU1pbjIiLCJkaXN0YW5jZU1heDIiLCJ0aGV0YTIiLCJhY2N1bXVsYXRlIiwiZGlzdGFuY2VNaW4iLCJkaXN0YW5jZU1heCIsInRoZXRhIiwicmFkaXVzZXMiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJmb3JtYXREZWNpbWFsIiwicHJlZml4RXhwb25lbnQiLCJyZSIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIkZvcm1hdFNwZWNpZmllciIsImZpbGwiLCJhbGlnbiIsInNpZ24iLCJzeW1ib2wiLCJjb21tYSIsInByZWNpc2lvbiIsInRvRml4ZWQiLCJ0b1ByZWNpc2lvbiIsImZvcm1hdFJvdW5kZWQiLCJ0b1VwcGVyQ2FzZSIsImZvcm1hdFByZWZpeCIsInByZWZpeGVzIiwibG9jYWxlIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJOdW1iZXIiLCJzdWJzdHJpbmciLCJjdXJyZW5jeVByZWZpeCIsImN1cnJlbmN5IiwiY3VycmVuY3lTdWZmaXgiLCJkZWNpbWFsIiwibnVtZXJhbHMiLCJmb3JtYXROdW1lcmFscyIsIlN0cmluZyIsInBlcmNlbnQiLCJtaW51cyIsIm5hbiIsIm5ld0Zvcm1hdCIsImZvcm1hdFR5cGVzIiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJvdXQiLCJmb3JtYXRUcmltIiwicGFkZGluZyIsImRlZmF1bHRMb2NhbGUiLCJBZGRlciIsInJlc2V0IiwidGVtcCIsImFkZGVyIiwiYnYiLCJhdiIsImVwc2lsb24yIiwicXVhcnRlclBpIiwicmFkaWFucyIsImV4cCIsImhhdmVyc2luIiwic3RyZWFtR2VvbWV0cnkiLCJzdHJlYW0iLCJzdHJlYW1HZW9tZXRyeVR5cGUiLCJzdHJlYW1PYmplY3RUeXBlIiwiRmVhdHVyZSIsIkZlYXR1cmVDb2xsZWN0aW9uIiwiZmVhdHVyZXMiLCJTcGhlcmUiLCJzcGhlcmUiLCJQb2ludCIsIk11bHRpUG9pbnQiLCJMaW5lU3RyaW5nIiwic3RyZWFtTGluZSIsIk11bHRpTGluZVN0cmluZyIsIlBvbHlnb24iLCJzdHJlYW1Qb2x5Z29uIiwiTXVsdGlQb2x5Z29uIiwiR2VvbWV0cnlDb2xsZWN0aW9uIiwiZ2VvbWV0cmllcyIsImNsb3NlZCIsImNvb3JkaW5hdGUiLCJsaW5lU3RhcnQiLCJsaW5lRW5kIiwicG9seWdvblN0YXJ0IiwicG9seWdvbkVuZCIsImxhbWJkYTAwIiwicGhpMDAiLCJsYW1iZGEwIiwiY29zUGhpMCIsInNpblBoaTAiLCJhcmVhUmluZ1N1bSIsImFyZWFTdW0iLCJhcmVhU3RyZWFtIiwiYXJlYVJpbmdTdGFydCIsImFyZWFSaW5nRW5kIiwiYXJlYVJpbmciLCJhcmVhUG9pbnRGaXJzdCIsImFyZWFQb2ludCIsImxhbWJkYSIsInBoaSIsImRMYW1iZGEiLCJzZExhbWJkYSIsImFkTGFtYmRhIiwiY29zUGhpIiwic2luUGhpIiwidSIsInNwaGVyaWNhbCIsImNhcnRlc2lhbiIsImNhcnRlc2lhbkRvdCIsImNhcnRlc2lhbkNyb3NzIiwiY2FydGVzaWFuQWRkSW5QbGFjZSIsImNhcnRlc2lhblNjYWxlIiwidmVjdG9yIiwiY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZSIsInBoaTAiLCJsYW1iZGExIiwicGhpMSIsImxhbWJkYTIiLCJyYW5nZXMiLCJXMCIsIlcxIiwiWDAiLCJZMCIsIlowIiwiWDEiLCJZMSIsIloxIiwiWDIiLCJZMiIsIloyIiwiejAiLCJkZWx0YVN1bSIsImJvdW5kc1N0cmVhbSIsImJvdW5kc1BvaW50IiwiYm91bmRzTGluZVN0YXJ0IiwiYm91bmRzTGluZUVuZCIsImJvdW5kc1JpbmdQb2ludCIsImJvdW5kc1JpbmdTdGFydCIsImJvdW5kc1JpbmdFbmQiLCJsaW5lUG9pbnQiLCJub3JtYWwiLCJpbmZsZWN0aW9uIiwicGhpaSIsImxhbWJkYWkiLCJhbnRpbWVyaWRpYW4iLCJyYW5nZUNvbXBhcmUiLCJyYW5nZUNvbnRhaW5zIiwiZmVhdHVyZSIsImRlbHRhTWF4IiwiY2VudHJvaWRTdHJlYW0iLCJjZW50cm9pZFBvaW50IiwiY2VudHJvaWRMaW5lU3RhcnQiLCJjZW50cm9pZExpbmVFbmQiLCJjZW50cm9pZFJpbmdTdGFydCIsImNlbnRyb2lkUmluZ0VuZCIsImNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4iLCJjZW50cm9pZExpbmVQb2ludEZpcnN0IiwiY2VudHJvaWRMaW5lUG9pbnQiLCJjZW50cm9pZFJpbmdQb2ludEZpcnN0IiwiY2VudHJvaWRSaW5nUG9pbnQiLCJjeCIsImN5IiwiY3oiLCJjb21wb3NlIiwiaW52ZXJ0Iiwicm90YXRpb25JZGVudGl0eSIsInJvdGF0ZVJhZGlhbnMiLCJkZWx0YUxhbWJkYSIsImRlbHRhUGhpIiwiZGVsdGFHYW1tYSIsInJvdGF0aW9uTGFtYmRhIiwicm90YXRpb25QaGlHYW1tYSIsImZvcndhcmRSb3RhdGlvbkxhbWJkYSIsInJvdGF0aW9uIiwiY29zRGVsdGFQaGkiLCJzaW5EZWx0YVBoaSIsImNvc0RlbHRhR2FtbWEiLCJzaW5EZWx0YUdhbW1hIiwiZm9yd2FyZCIsImNpcmNsZVN0cmVhbSIsImRpcmVjdGlvbiIsImNvc1JhZGl1cyIsInNpblJhZGl1cyIsImNpcmNsZVJhZGl1cyIsImNpcmNsZSIsImxpbmVzIiwicmVqb2luIiwiSW50ZXJzZWN0aW9uIiwicG9pbnRzIiwib3RoZXIiLCJlbnRyeSIsInNlZ21lbnRzIiwiY29tcGFyZUludGVyc2VjdGlvbiIsInN0YXJ0SW5zaWRlIiwiY2xpcCIsInNlZ21lbnQiLCJwMSIsInBvaW50RXF1YWwiLCJpc1N1YmplY3QiLCJsb25naXR1ZGUiLCJ3aW5kaW5nIiwic2luUGhpMSIsImNvc1BoaTEiLCJhYnNEZWx0YSIsImludGVyc2VjdGlvbiIsInBoaUFyYyIsInBvaW50VmlzaWJsZSIsImNsaXBMaW5lIiwic2luayIsInJpbmdCdWZmZXIiLCJyaW5nU2luayIsInBvbHlnb25TdGFydGVkIiwicG9pbnRSaW5nIiwicmluZ1N0YXJ0IiwicmluZ0VuZCIsInBvbHlnb25Db250YWlucyIsInBvaW50TGluZSIsInJpbmdTZWdtZW50cyIsInZhbGlkU2VnbWVudCIsInNpZ24wIiwic2lnbjEiLCJzaW5MYW1iZGEwTGFtYmRhMSIsImNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QiLCJmcm9tIiwidG8iLCJjciIsInNtYWxsUmFkaXVzIiwibm90SGVtaXNwaGVyZSIsInZpc2libGUiLCJpbnRlcnNlY3QiLCJ0d28iLCJuMiIsIm4ybjIiLCJuMW4yIiwiZGV0ZXJtaW5hbnQiLCJjMSIsImMyIiwibjF4bjIiLCJ1dSIsInBvbGFyIiwicTEiLCJjb2RlIiwiYzAiLCJ2MDAiLCJwb2ludDIiLCJjbGlwTWF4IiwiY2xpcE1pbiIsImNsaXBSZWN0YW5nbGUiLCJjb3JuZXIiLCJjb21wYXJlUG9pbnQiLCJjYSIsImNiIiwieF9fIiwieV9fIiwidl9fIiwieF8iLCJ5XyIsInZfIiwiZmlyc3QiLCJhY3RpdmVTdHJlYW0iLCJidWZmZXJTdHJlYW0iLCJjbGlwU3RyZWFtIiwiYjEiLCJwb2x5Z29uSW5zaWRlIiwiY2xlYW5JbnNpZGUiLCJheCIsImF5IiwiY2FjaGUiLCJjYWNoZVN0cmVhbSIsImxlbmd0aFN1bSIsImxlbmd0aFN0cmVhbSIsImxlbmd0aFBvaW50Rmlyc3QiLCJsZW5ndGhMaW5lRW5kIiwibGVuZ3RoUG9pbnQiLCJjb3NEZWx0YSIsImNvbnRhaW5zT2JqZWN0VHlwZSIsImNvbnRhaW5zR2VvbWV0cnkiLCJjb250YWluc0dlb21ldHJ5VHlwZSIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0xpbmUiLCJjb250YWluc1BvbHlnb24iLCJhbyIsImJvIiwiYWIiLCJyaW5nUmFkaWFucyIsInBvaW50UmFkaWFucyIsImdyYXRpY3VsZVgiLCJncmF0aWN1bGVZIiwiZ3JhdGljdWxlIiwiRFgiLCJEWSIsIm91dGxpbmUiLCJleHRlbnRNYWpvciIsImV4dGVudE1pbm9yIiwic3RlcE1ham9yIiwic3RlcE1pbm9yIiwiZ3JhdGljdWxlMTAiLCJjeTAiLCJjeTEiLCJzeTEiLCJreDAiLCJreTAiLCJreDEiLCJreTEiLCJ4MDAiLCJ5MDAiLCJib3VuZHMiLCJjZW50cm9pZCIsImNlbnRyb2lkUG9pbnRGaXJzdExpbmUiLCJjZW50cm9pZFBvaW50TGluZSIsImNlbnRyb2lkUG9pbnRGaXJzdFJpbmciLCJjZW50cm9pZFBvaW50UmluZyIsIlBhdGhDb250ZXh0IiwiX2NvbnRleHQiLCJfcmFkaXVzIiwicG9pbnRSYWRpdXMiLCJfbGluZSIsIl9wb2ludCIsImxlbmd0aFJpbmciLCJQYXRoU3RyaW5nIiwiX3N0cmluZyIsInByb2plY3Rpb24iLCJwcm9qZWN0aW9uU3RyZWFtIiwiY29udGV4dFN0cmVhbSIsIm1lYXN1cmUiLCJtZXRob2RzIiwidHJhbnNmb3JtZXIiLCJUcmFuc2Zvcm1TdHJlYW0iLCJmaXQiLCJmaXRCb3VuZHMiLCJjbGlwRXh0ZW50IiwiZml0RXh0ZW50IiwiZml0U2l6ZSIsImZpdFdpZHRoIiwiZml0SGVpZ2h0IiwiX2NpcmNsZSIsImNvc01pbkRpc3RhbmNlIiwicHJvamVjdCIsImRlbHRhMiIsInJlc2FtcGxlTGluZVRvIiwicGhpMiIsImR4MiIsImR5MiIsImR6IiwiYTAwIiwiYjAwIiwiYzAwIiwicmVzYW1wbGVTdHJlYW0iLCJyaW5nUG9pbnQiLCJyZXNhbXBsZU5vbmUiLCJ0cmFuc2Zvcm1SYWRpYW5zIiwic2NhbGVUcmFuc2xhdGUiLCJzY2FsZVRyYW5zbGF0ZVJvdGF0ZSIsImNvc0FscGhhIiwic2luQWxwaGEiLCJhaSIsImNpIiwiZmkiLCJwcm9qZWN0aW9uTXV0YXRvciIsInByb2plY3RBdCIsInByb2plY3RSZXNhbXBsZSIsInByb2plY3RUcmFuc2Zvcm0iLCJwcm9qZWN0Um90YXRlVHJhbnNmb3JtIiwicHJlY2xpcCIsInBvc3RjbGlwIiwicmVjZW50ZXIiLCJyZXNhbXBsZSIsInRyYW5zZm9ybVJvdGF0ZSIsImNsaXBBbmdsZSIsInJlZmxlY3RYIiwicmVmbGVjdFkiLCJjb25pY1Byb2plY3Rpb24iLCJwYXJhbGxlbHMiLCJjb25pY0VxdWFsQXJlYVJhdyIsImN5bGluZHJpY2FsRXF1YWxBcmVhUmF3IiwicjAiLCJyMHkiLCJjb25pY0VxdWFsQXJlYSIsImxvd2VyNDhQb2ludCIsImFsYXNrYVBvaW50IiwiaGF3YWlpUG9pbnQiLCJsb3dlcjQ4IiwiYWxiZXJzIiwiYWxhc2thIiwiaGF3YWlpIiwicG9pbnRTdHJlYW0iLCJhbGJlcnNVc2EiLCJzdHJlYW1zIiwiYXppbXV0aGFsUmF3IiwiYXppbXV0aGFsSW52ZXJ0Iiwic2MiLCJjYyIsImF6aW11dGhhbEVxdWFsQXJlYVJhdyIsImN4Y3kiLCJhemltdXRoYWxFcXVpZGlzdGFudFJhdyIsIm1lcmNhdG9yUmF3IiwibWVyY2F0b3JQcm9qZWN0aW9uIiwicmVjbGlwIiwidGFueSIsImNvbmljQ29uZm9ybWFsUmF3IiwiZXF1aXJlY3Rhbmd1bGFyUmF3IiwiY29uaWNFcXVpZGlzdGFudFJhdyIsImd5IiwibngiLCJBMSIsIkEyIiwiQTMiLCJBNCIsIk0iLCJlcXVhbEVhcnRoUmF3IiwibDIiLCJsNiIsImdub21vbmljUmF3Iiwic2EiLCJ0eCIsInR5Iiwia3giLCJreSIsIm5hdHVyYWxFYXJ0aDFSYXciLCJwaGk0Iiwib3J0aG9ncmFwaGljUmF3Iiwic3RlcmVvZ3JhcGhpY1JhdyIsInRyYW5zdmVyc2VNZXJjYXRvclJhdyIsImRlZmF1bHRTZXBhcmF0aW9uIiwibWVhblhSZWR1Y2UiLCJtYXhZUmVkdWNlIiwic2VwYXJhdGlvbiIsIm5vZGVTaXplIiwiY2x1c3RlciIsInByZXZpb3VzTm9kZSIsImVhY2hBZnRlciIsIm1lYW5YIiwibWF4WSIsImxlYWZMZWZ0IiwibGVhZlJpZ2h0IiwiaGllcmFyY2h5IiwiY2hpbGRzIiwiTm9kZSIsInZhbHVlZCIsImRlZmF1bHRDaGlsZHJlbiIsImVhY2hCZWZvcmUiLCJjb21wdXRlSGVpZ2h0IiwiY29weURhdGEiLCJhbmNlc3RvciIsImFOb2RlcyIsImFuY2VzdG9ycyIsImJOb2RlcyIsImxlYXN0Q29tbW9uQW5jZXN0b3IiLCJkZXNjZW5kYW50cyIsImxlYXZlcyIsImNpcmNsZXMiLCJlbmNsb3Nlc1dlYWsiLCJlbmNsb3NlQmFzaXMiLCJleHRlbmRCYXNpcyIsImVuY2xvc2VzV2Vha0FsbCIsImVuY2xvc2VzTm90IiwiZW5jbG9zZUJhc2lzMiIsImVuY2xvc2VCYXNpczMiLCJkciIsImVuY2xvc2VCYXNpczEiLCJyMSIsInIyIiwicjIxIiwicjMiLCJhMiIsImEzIiwiYjIiLCJiMyIsImMzIiwiZDEiLCJkMyIsInBsYWNlIiwiaW50ZXJzZWN0cyIsInNjb3JlIiwicGFja0VuY2xvc2UiLCJhYSIsInNqIiwic2siLCJwYWNrIiwiZW5jbG9zZSIsIm9wdGlvbmFsIiwicmVxdWlyZWQiLCJjb25zdGFudFplcm8iLCJyYWRpdXNMZWFmIiwicGFja0NoaWxkcmVuIiwidHJhbnNsYXRlQ2hpbGQiLCJwYXJ0aXRpb24iLCJwb3NpdGlvbk5vZGUiLCJwcmVyb290IiwiYW1iaWd1b3VzIiwiZGVmYXVsdElkIiwiZGVmYXVsdFBhcmVudElkIiwicGFyZW50SWQiLCJzdHJhdGlmeSIsIm5vZGVLZXkiLCJub2RlQnlLZXkiLCJuZXh0TGVmdCIsIm5leHRSaWdodCIsIm1vdmVTdWJ0cmVlIiwid20iLCJ3cCIsImNoYW5nZSIsIm5leHRBbmNlc3RvciIsInZpbSIsIlRyZWVOb2RlIiwidHJlZVJvb3QiLCJmaXJzdFdhbGsiLCJzZWNvbmRXYWxrIiwic2l6ZU5vZGUiLCJzaWJsaW5ncyIsImV4ZWN1dGVTaGlmdHMiLCJtaWRwb2ludCIsInZpcCIsInZvcCIsInZvbSIsInNpcCIsInNvcCIsInNpbSIsInNvbSIsImFwcG9ydGlvbiIsInNxdWFyaWZ5UmF0aW8iLCJyYXRpbyIsIm5vZGVWYWx1ZSIsInN1bVZhbHVlIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsIm5ld1JhdGlvIiwibWluUmF0aW8iLCJiZXRhIiwiZGljZSIsInNxdWFyaWZ5IiwidGlsZSIsInBhZGRpbmdTdGFjayIsInBhZGRpbmdJbm5lciIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJ0cmVlbWFwIiwicGFkZGluZ091dGVyIiwic3VtcyIsInZhbHVlT2Zmc2V0IiwidmFsdWVUYXJnZXQiLCJ2YWx1ZUxlZnQiLCJ2YWx1ZVJpZ2h0IiwieGsiLCJ5ayIsInJlc3F1YXJpZnkiLCJfc3F1YXJpZnkiLCJyaG8iLCJTUVJUMiIsInV4MCIsInV5MCIsInV4MSIsInV5MSIsImNvc2hyMCIsImhzbExvbmciLCJoY2xMb25nIiwiY3ViZWhlbGl4IiwiY3ViZWhlbGl4R2FtbWEiLCJjdWJlaGVsaXhMb25nIiwicGllY2V3aXNlIiwiaW50ZXJwb2xhdG9yIiwic2FtcGxlcyIsImxleGljb2dyYXBoaWNPcmRlciIsImNvbXB1dGVVcHBlckh1bGxJbmRleGVzIiwic29ydGVkUG9pbnRzIiwiZmxpcHBlZFBvaW50cyIsInVwcGVySW5kZXhlcyIsImxvd2VySW5kZXhlcyIsInNraXBMZWZ0Iiwic2tpcFJpZ2h0IiwiaHVsbCIsImluc2lkZSIsInBlcmltZXRlciIsInNvdXJjZVJhbmRvbVVuaWZvcm0iLCJyYW5kb21Vbmlmb3JtIiwic291cmNlUmFuZG9tTm9ybWFsIiwicmFuZG9tTm9ybWFsIiwibXUiLCJzaWdtYSIsInNvdXJjZVJhbmRvbUxvZ05vcm1hbCIsInJhbmRvbUxvZ05vcm1hbCIsInNvdXJjZVJhbmRvbUlyd2luSGFsbCIsInJhbmRvbUlyd2luSGFsbCIsInNvdXJjZVJhbmRvbUJhdGVzIiwicmFuZG9tQmF0ZXMiLCJpcndpbkhhbGwiLCJzb3VyY2VSYW5kb21FeHBvbmVudGlhbCIsInJhbmRvbUV4cG9uZW50aWFsIiwiaW5pdFJhbmdlIiwiaW5pdEludGVycG9sYXRvciIsImltcGxpY2l0Iiwib3JkaW5hbCIsInVua25vd24iLCJiYW5kIiwib3JkaW5hbFJhbmdlIiwicmVzY2FsZSIsInJhbmdlUm91bmQiLCJwb2ludGlzaCIsInVuaXQiLCJub3JtYWxpemUiLCJjbGFtcGVyIiwiYmltYXAiLCJkMCIsInBvbHltYXAiLCJjbGFtcCIsInVudHJhbnNmb3JtIiwiY29udGludW91cyIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJsaW5lYXJpc2giLCJuaWNlIiwidHJhbnNmb3JtTG9nIiwidHJhbnNmb3JtRXhwIiwidHJhbnNmb3JtTG9nbiIsInRyYW5zZm9ybUV4cG4iLCJwb3cxMCIsInJlZmxlY3QiLCJsb2dnaXNoIiwibG9ncyIsInBvd3MiLCJiYXNlIiwibG9nMTAiLCJsb2cyIiwibG9ncCIsInBvd3AiLCJ0cmFuc2Zvcm1TeW1sb2ciLCJsb2cxcCIsInRyYW5zZm9ybVN5bWV4cCIsImV4cG0xIiwic3ltbG9naXNoIiwic3ltbG9nIiwidHJhbnNmb3JtUG93IiwidHJhbnNmb3JtU3FydCIsInRyYW5zZm9ybVNxdWFyZSIsInBvd2lzaCIsImludmVydEV4dGVudCIsInF1YW50aWxlcyIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwic2V0TW9udGgiLCJzZXRIb3VycyIsInNldEZ1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJ5ZWFycyIsIm1vbnRoIiwic2V0RGF0ZSIsImdldE1vbnRoIiwibW9udGhzIiwiZHVyYXRpb25TZWNvbmQiLCJkdXJhdGlvbk1pbnV0ZSIsImR1cmF0aW9uSG91ciIsImR1cmF0aW9uRGF5IiwiZHVyYXRpb25XZWVrIiwid2Vla2RheSIsImdldERhdGUiLCJnZXREYXkiLCJnZXRUaW1lem9uZU9mZnNldCIsInN1bmRheSIsIm1vbmRheSIsInR1ZXNkYXkiLCJ3ZWRuZXNkYXkiLCJ0aHVyc2RheSIsImZyaWRheSIsInNhdHVyZGF5Iiwic3VuZGF5cyIsIm1vbmRheXMiLCJ0dWVzZGF5cyIsIndlZG5lc2RheXMiLCJ0aHVyc2RheXMiLCJmcmlkYXlzIiwic2F0dXJkYXlzIiwiZGF5IiwiZGF5cyIsImhvdXIiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRTZWNvbmRzIiwiZ2V0TWludXRlcyIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2Vjb25kIiwidXRjV2Vla2RheSIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXkiLCJzZXRVVENIb3VycyIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1R1ZXNkYXkiLCJ1dGNXZWRuZXNkYXkiLCJ1dGNUaHVyc2RheSIsInV0Y0ZyaWRheSIsInV0Y1NhdHVyZGF5IiwidXRjU3VuZGF5cyIsInV0Y01vbmRheXMiLCJ1dGNUdWVzZGF5cyIsInV0Y1dlZG5lc2RheXMiLCJ1dGNUaHVyc2RheXMiLCJ1dGNGcmlkYXlzIiwidXRjU2F0dXJkYXlzIiwidXRjRGF5IiwidXRjRGF5cyIsInV0Y1llYXIiLCJzZXRVVENNb250aCIsInNldFVUQ0Z1bGxZZWFyIiwidXRjWWVhcnMiLCJsb2NhbERhdGUiLCJIIiwiTCIsInV0Y0RhdGUiLCJVVEMiLCJuZXdEYXRlIiwiZm9ybWF0TG9jYWxlIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwibG9jYWxlX3Nob3J0V2Vla2RheXMiLCJzaG9ydERheXMiLCJsb2NhbGVfbW9udGhzIiwibG9jYWxlX3Nob3J0TW9udGhzIiwic2hvcnRNb250aHMiLCJwZXJpb2RSZSIsImZvcm1hdFJlIiwicGVyaW9kTG9va3VwIiwiZm9ybWF0TG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdHMiLCJmb3JtYXREYXlPZk1vbnRoIiwiZm9ybWF0TWljcm9zZWNvbmRzIiwiZm9ybWF0SG91cjI0IiwiZm9ybWF0SG91cjEyIiwiZm9ybWF0RGF5T2ZZZWFyIiwiZm9ybWF0TWlsbGlzZWNvbmRzIiwiZm9ybWF0TW9udGhOdW1iZXIiLCJmb3JtYXRNaW51dGVzIiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwiZm9ybWF0U2Vjb25kcyIsImZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkiLCJmb3JtYXRXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0RnVsbFllYXIiLCJmb3JtYXRab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJ1dGNGb3JtYXRzIiwiZm9ybWF0VVRDRGF5T2ZNb250aCIsImZvcm1hdFVUQ01pY3Jvc2Vjb25kcyIsImZvcm1hdFVUQ0hvdXIyNCIsImZvcm1hdFVUQ0hvdXIxMiIsImZvcm1hdFVUQ0RheU9mWWVhciIsImZvcm1hdFVUQ01pbGxpc2Vjb25kcyIsImZvcm1hdFVUQ01vbnRoTnVtYmVyIiwiZm9ybWF0VVRDTWludXRlcyIsImZvcm1hdFVUQ1NlY29uZHMiLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJJU08iLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSIsImZvcm1hdFVUQ1llYXIiLCJmb3JtYXRVVENGdWxsWWVhciIsImZvcm1hdFVUQ1pvbmUiLCJwYXJzZXMiLCJwYXJzZVNwZWNpZmllciIsInBhcnNlRGF5T2ZNb250aCIsInBhcnNlTWljcm9zZWNvbmRzIiwicGFyc2VIb3VyMjQiLCJwYXJzZURheU9mWWVhciIsInBhcnNlTWlsbGlzZWNvbmRzIiwicGFyc2VNb250aE51bWJlciIsInBhcnNlTWludXRlcyIsInBhcnNlUXVhcnRlciIsInBhcnNlVW5peFRpbWVzdGFtcCIsInBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMiLCJwYXJzZVNlY29uZHMiLCJwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkiLCJwYXJzZVdlZWtOdW1iZXJTdW5kYXkiLCJwYXJzZVdlZWtOdW1iZXJJU08iLCJwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkiLCJwYXJzZVdlZWtOdW1iZXJNb25kYXkiLCJwYXJzZVllYXIiLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2Vab25lIiwicGFyc2VMaXRlcmFsUGVyY2VudCIsInBhZHMiLCJjaGFyQXQiLCJuZXdQYXJzZSIsIloiLCJ3ZWVrIiwiUSIsIlYiLCJVIiwidXRjRm9ybWF0IiwidXRjUGFyc2UiLCJ0aW1lRm9ybWF0IiwidGltZVBhcnNlIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJyZXF1b3RlIiwiZG93IiwiZHVyYXRpb25ZZWFyIiwiY2FsZW5kYXIiLCJmb3JtYXRNaWxsaXNlY29uZCIsImZvcm1hdFNlY29uZCIsImZvcm1hdE1pbnV0ZSIsImZvcm1hdEhvdXIiLCJmb3JtYXREYXkiLCJmb3JtYXRXZWVrIiwiZm9ybWF0TW9udGgiLCJ0aWNrSW50ZXJ2YWxzIiwidGlja0ludGVydmFsIiwidXRjTW9udGgiLCJ1dGNNb250aHMiLCJ1dGNIb3VyIiwic2V0VVRDTWludXRlcyIsInV0Y0hvdXJzIiwidXRjTWludXRlIiwic2V0VVRDU2Vjb25kcyIsInV0Y01pbnV0ZXMiLCJrMTAiLCJzZXF1ZW50aWFsIiwic2VxdWVudGlhbExvZyIsInNlcXVlbnRpYWxTeW1sb2ciLCJzZXF1ZW50aWFsUG93Iiwic2VxdWVudGlhbFNxcnQiLCJzZXF1ZW50aWFsUXVhbnRpbGUiLCJrMjEiLCJkaXZlcmdpbmciLCJkaXZlcmdpbmdMb2ciLCJkaXZlcmdpbmdTeW1sb2ciLCJkaXZlcmdpbmdQb3ciLCJkaXZlcmdpbmdTcXJ0Iiwic2NoZW1lIiwicmFtcCIsIndhcm0iLCJjb29sIiwidHMiLCJwaV8xXzMiLCJwaV8yXzMiLCJtYWdtYSIsImluZmVybm8iLCJwbGFzbWEiLCJuZXh0SWQiLCJMb2NhbCIsImFyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJhcmNPdXRlclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiYXJjU3RhcnRBbmdsZSIsImFyY0VuZEFuZ2xlIiwiYXJjUGFkQW5nbGUiLCJ4MTAiLCJ5MTAiLCJ4MzIiLCJ5MzIiLCJjb3JuZXJUYW5nZW50cyIsInJjIiwib3giLCJveSIsIngxMSIsInkxMSIsImN4MCIsImN4MSIsImR4MCIsImR5MCIsImR4MSIsImR5MSIsImNvcm5lclJhZGl1cyIsInBhZFJhZGl1cyIsImEwMSIsImExMSIsImExMCIsImRhMCIsImRhMSIsImFwIiwicnAiLCJyYzAiLCJyYzEiLCJvYyIsImJ4IiwiYnkiLCJrYyIsImxjIiwiTGluZWFyIiwiZGVmaW5lZCIsImN1cnZlIiwiZGVmaW5lZDAiLCJ4MHoiLCJ5MHoiLCJhcmVhU3RhcnQiLCJhcmVhRW5kIiwiYXJlYWxpbmUiLCJsaW5lWDAiLCJsaW5lWTAiLCJsaW5lWTEiLCJsaW5lWDEiLCJwaWUiLCJhcmNzIiwicGEiLCJjdXJ2ZVJhZGlhbExpbmVhciIsImN1cnZlUmFkaWFsIiwiUmFkaWFsIiwiX2N1cnZlIiwicmFkaWFsIiwibGluZVJhZGlhbCIsImxpbmVTdGFydEFuZ2xlIiwibGluZUVuZEFuZ2xlIiwibGluZUlubmVyUmFkaXVzIiwibGluZU91dGVyUmFkaXVzIiwibGlua1NvdXJjZSIsImxpbmtUYXJnZXQiLCJjdXJ2ZUhvcml6b250YWwiLCJjdXJ2ZVZlcnRpY2FsIiwicG9pbnRSYWRpYWwiLCJwMiIsInAzIiwibGlua0hvcml6b250YWwiLCJsaW5rVmVydGljYWwiLCJsaW5rUmFkaWFsIiwiZHJhdyIsInRhbjMwIiwidGFuMzBfMiIsImtyIiwic3FydDMiLCJzeW1ib2xzIiwiZGlhbW9uZCIsInNxdWFyZSIsInN0YXIiLCJ0cmlhbmdsZSIsInd5ZSIsIkJhc2lzIiwiQmFzaXNDbG9zZWQiLCJCYXNpc09wZW4iLCJCdW5kbGUiLCJfYmFzaXMiLCJfYmV0YSIsIl94MiIsIl94MyIsIl94NCIsIl95MiIsIl95MyIsIl95NCIsImJ1bmRsZSIsIl9rIiwiQ2FyZGluYWwiLCJ0ZW5zaW9uIiwiY2FyZGluYWwiLCJDYXJkaW5hbENsb3NlZCIsIl94NSIsIl95NSIsIkNhcmRpbmFsT3BlbiIsIl9sMDFfYSIsIl9sMDFfMmEiLCJfbDEyX2EiLCJfbDEyXzJhIiwiX2wyM19hIiwiX2wyM18yYSIsIkNhdG11bGxSb20iLCJfYWxwaGEiLCJ4MjMiLCJ5MjMiLCJjYXRtdWxsUm9tIiwiQ2F0bXVsbFJvbUNsb3NlZCIsIkNhdG11bGxSb21PcGVuIiwiTGluZWFyQ2xvc2VkIiwic2xvcGUzIiwiaDAiLCJoMSIsInNsb3BlMiIsIk1vbm90b25lWCIsIk1vbm90b25lWSIsIlJlZmxlY3RDb250ZXh0IiwibW9ub3RvbmVYIiwibW9ub3RvbmVZIiwiTmF0dXJhbCIsImNvbnRyb2xQb2ludHMiLCJTdGVwIiwiX3QiLCJzdGVwQmVmb3JlIiwic3RlcEFmdGVyIiwic2VyaWVzIiwic3RhY2tWYWx1ZSIsInN0YWNrIiwib3oiLCJreiIsInN6Iiwic2lqIiwia2kiLCJzaSIsInluIiwiczIiLCJzaWowIiwiczMiLCJwZWFrcyIsInBlYWsiLCJ2aSIsInZqIiwiYXBwZWFyYW5jZSIsInRvcHMiLCJib3R0b21zIiwiX3QwIiwicHgiLCJweSIsImlzb1NwZWNpZmllciIsInRvSVNPU3RyaW5nIiwidG90YWwiLCJSZWRCbGFja1RyZWUiLCJSZWRCbGFja05vZGUiLCJSIiwiUCIsIlJlZEJsYWNrUm90YXRlTGVmdCIsIlJlZEJsYWNrUm90YXRlUmlnaHQiLCJSZWRCbGFja0ZpcnN0IiwiYWZ0ZXIiLCJncmFuZHBhIiwidW5jbGUiLCJzaWJsaW5nIiwiY3JlYXRlRWRnZSIsImVkZ2UiLCJlZGdlcyIsInNldEVkZ2VFbmQiLCJjZWxscyIsImhhbGZlZGdlcyIsImNyZWF0ZUJvcmRlckVkZ2UiLCJ2ZXJ0ZXgiLCJjbGlwRWRnZSIsImNvbm5lY3RFZGdlIiwiZm0iLCJmYiIsImx4IiwibHkiLCJyeCIsInJ5IiwiY2VsbEhhbGZlZGdlQW5nbGUiLCJjZWxsIiwic2l0ZSIsInZhIiwidmIiLCJjZWxsSGFsZmVkZ2VTdGFydCIsImNlbGxIYWxmZWRnZUVuZCIsImZpcnN0Q2lyY2xlIiwiY2lyY2xlUG9vbCIsIkNpcmNsZSIsImF0dGFjaENpcmNsZSIsImxBcmMiLCJyQXJjIiwibFNpdGUiLCJjU2l0ZSIsInJTaXRlIiwiaGEiLCJoYyIsImRldGFjaENpcmNsZSIsImJlYWNoUG9vbCIsIkJlYWNoIiwiY3JlYXRlQmVhY2giLCJiZWFjaCIsImRldGFjaEJlYWNoIiwiYmVhY2hlcyIsInJlbW92ZUJlYWNoIiwiZGlzYXBwZWFyaW5nIiwiaUFyYyIsIm5BcmNzIiwiYWRkQmVhY2giLCJkeGwiLCJkeHIiLCJkaXJlY3RyaXgiLCJsZWZ0QnJlYWtQb2ludCIsInJpZ2h0QnJlYWtQb2ludCIsImNyZWF0ZUNlbGwiLCJuZXdBcmMiLCJoYiIsInJmb2N4IiwicmZvY3kiLCJwYnkyIiwibGZvY3giLCJsZm9jeSIsInBsYnkyIiwiaGwiLCJhYnkyIiwidHJpYW5nbGVBcmVhIiwibGV4aWNvZ3JhcGhpYyIsIkRpYWdyYW0iLCJzaXRlcyIsInNvcnRDZWxsSGFsZmVkZ2VzIiwiY2xpcEVkZ2VzIiwiaUNlbGwiLCJpSGFsZmVkZ2UiLCJuSGFsZmVkZ2VzIiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJuQ2VsbHMiLCJkYyIsInYwMSIsInYxMSIsInYxMCIsImNsaXBDZWxscyIsInZvcm9ub2kiLCJ0cmlhbmdsZXMiLCJab29tRXZlbnQiLCJUcmFuc2Zvcm0iLCJfZm91bmQiLCJhcHBseVgiLCJhcHBseVkiLCJsb2NhdGlvbiIsImludmVydFgiLCJpbnZlcnRZIiwicmVzY2FsZVgiLCJyZXNjYWxlWSIsIl9fem9vbSIsIlNWR0VsZW1lbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImRlZmF1bHRUcmFuc2Zvcm0iLCJkZWZhdWx0V2hlZWxEZWx0YSIsImRlZmF1bHRDb25zdHJhaW4iLCJ0cmFuc2xhdGVFeHRlbnQiLCJ0b3VjaHN0YXJ0aW5nIiwiY29uc3RyYWluIiwid2hlZWxEZWx0YSIsInNjYWxlRXh0ZW50IiwidG91Y2hEZWxheSIsInpvb20iLCJ3aGVlbGVkIiwiZGJsY2xpY2tlZCIsIl9fem9vbWluZyIsIkdlc3R1cmUiLCJ0YXBzIiwid2hlZWwiLCJ3aGVlbGlkbGVkIiwiazEiLCJ0b3VjaDAiLCJ0b3VjaDEiLCJsMCIsImwxIiwiZHAiLCJkbCIsImNvbGxlY3Rpb24iLCJzY2FsZUJ5Iiwic2NhbGVUbyIsImswIiwidHJhbnNsYXRlQnkiLCJ0cmFuc2xhdGVUbyIsIkZVTkNfRVJST1JfVEVYVCIsIkhBU0hfVU5ERUZJTkVEIiwiUExBQ0VIT0xERVIiLCJXUkFQX1BBUlRJQUxfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJJTkZJTklUWSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYm9vbFRhZyIsImRhdGVUYWciLCJlcnJvclRhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJvYmplY3RUYWciLCJwcm9taXNlVGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbSIsInJlVHJpbVN0YXJ0IiwicmVUcmltRW5kIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzTG93ZXJSYW5nZSIsInJzVXBwZXJSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0JyZWFrIiwicnNDb21ibyIsInJzRGlnaXRzIiwicnNMb3dlciIsInJzTWlzYyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyc1VwcGVyIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJzT3B0Q29udHJMb3dlciIsInJzT3B0Q29udHJVcHBlciIsInJlT3B0TW9kIiwicnNNb2RpZmllciIsInJzT3B0VmFyIiwicnNTZXEiLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsImZyZWVQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJyYXlBZ2dyZWdhdG9yIiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsInByZWRpY2F0ZSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsImFycmF5UmVkdWNlIiwiaW5pdEFjY3VtIiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VGaW5kS2V5IiwiZWFjaEZ1bmMiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImJhc2VUaW1lcyIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJwcm9wcyIsImNhY2hlSGFzIiwiY2hhcnNTdGFydEluZGV4Iiwic3RyU3ltYm9scyIsImNoclN5bWJvbHMiLCJjaGFyc0VuZEluZGV4IiwiY291bnRIb2xkZXJzIiwicGxhY2Vob2xkZXIiLCJkZWJ1cnJMZXR0ZXIiLCJlc2NhcGVIdG1sQ2hhciIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwibWFwVG9BcnJheSIsIm92ZXJBcmciLCJhcmciLCJyZXBsYWNlSG9sZGVycyIsInNldFRvQXJyYXkiLCJzZXRUb1BhaXJzIiwic3RyaW5nU2l6ZSIsInVuaWNvZGVTaXplIiwic3RyaW5nVG9BcnJheSIsInVuaWNvZGVUb0FycmF5IiwiYXNjaWlUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsInJ1bkluQ29udGV4dCIsInVpZCIsImRlZmF1bHRzIiwicGljayIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsIkJ1ZmZlciIsIlN5bWJvbCIsIlVpbnQ4QXJyYXkiLCJhbGxvY1Vuc2FmZSIsImdldFByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0Q3JlYXRlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJpdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJjdHhTZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsIm5hdGl2ZUZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInN5bWJvbFRvU3RyaW5nIiwibG9kYXNoIiwiaXNPYmplY3RMaWtlIiwiTGF6eVdyYXBwZXIiLCJMb2Rhc2hXcmFwcGVyIiwid3JhcHBlckNsb25lIiwiYmFzZUNyZWF0ZSIsImlzT2JqZWN0IiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiTGlzdENhY2hlIiwiTWFwQ2FjaGUiLCJTZXRDYWNoZSIsIlN0YWNrIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImJhc2VBdCIsInBhdGhzIiwic2tpcCIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJpc0RlZXAiLCJpc0ZsYXQiLCJpc0Z1bGwiLCJpbml0Q2xvbmVBcnJheSIsInRhZyIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsIkN0b3IiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJyZWdleHAiLCJjbG9uZVJlZ0V4cCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJnZXRNYXBEYXRhIiwiTEFSR0VfQVJSQVlfU0laRSIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImlzU3RyaWN0IiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImlzRnVuY3Rpb24iLCJiYXNlR2V0IiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJiYXNlSGFzIiwiYmFzZUhhc0luIiwiYmFzZUludGVyc2VjdGlvbiIsIm90aExlbmd0aCIsIm90aEluZGV4IiwiY2FjaGVzIiwibWF4TGVuZ3RoIiwic2VlbiIsImJhc2VJbnZva2UiLCJsYXN0IiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwibWVzc2FnZSIsImlzUGFydGlhbCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsInNraXBDdG9yIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZXF1YWxPYmplY3RzIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzTWF0Y2giLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImJhc2VNYXRjaGVzIiwiYmFzZUtleXMiLCJpc1Byb3RvdHlwZSIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjb21wYXJlciIsIm9iakNyaXRlcmlhIiwiY3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlU29ydEJ5IiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImJhc2VQdWxsQXQiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJiYXNlU2h1ZmZsZSIsImJhc2VTbGljZSIsImJhc2VTb21lIiwiYmFzZVNvcnRlZEluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsImhpZ2giLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJ0eXBlZEFycmF5IiwidmFsSXNEZWZpbmVkIiwidmFsSXNSZWZsZXhpdmUiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdEluZGV4IiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiaXNOZXciLCJjcmVhdGVBZ2dyZWdhdG9yIiwiaW5pdGlhbGl6ZXIiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwic291cmNlcyIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpdGVyYWJsZSIsImNyZWF0ZUNhc2VGaXJzdCIsIm1ldGhvZE5hbWUiLCJ0cmFpbGluZyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwidG9JbnRlZ2VyIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyckxlbmd0aCIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsInN0dWJBcnJheSIsImhhc1BhdGgiLCJoYXNGdW5jIiwiaXNMZW5ndGgiLCJjdG9yU3RyaW5nIiwiaXNNYXNrYWJsZSIsInN0dWJGYWxzZSIsIm90aGVyQXJncyIsIm9sZEFycmF5Iiwic2hvcnRPdXQiLCJyZWZlcmVuY2UiLCJkZXRhaWxzIiwiaW5zZXJ0V3JhcERldGFpbHMiLCJ1cGRhdGVXcmFwRGV0YWlscyIsImdldFdyYXBEZXRhaWxzIiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicmFuZCIsIm1lbW9pemUiLCJxdW90ZSIsInN1YlN0cmluZyIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInNvcnRCeSIsIldSQVBfQklORF9GTEFHIiwiZGVib3VuY2UiLCJvcHRpb25zIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiZmx1c2giLCJkZWZlciIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3QiLCJndGUiLCJpc0Vycm9yIiwiaXNJbnRlZ2VyIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImx0IiwibHRlIiwidG9BcnJheSIsImRvbmUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnRCeSIsImludm9rZSIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlS2V5c0luIiwib21pdCIsIkNMT05FX0RFRVBfRkxBRyIsImJhc2VQaWNrIiwicGlja0J5IiwicHJvcCIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJjYW1lbENhc2UiLCJ3b3JkIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwicGF0dGVybiIsImhhc1VuaWNvZGVXb3JkIiwidW5pY29kZVdvcmRzIiwiYXNjaWlXb3JkcyIsImF0dGVtcHQiLCJiaW5kQWxsIiwibWV0aG9kTmFtZXMiLCJmbG93IiwiZmxvd1JpZ2h0IiwibWV0aG9kIiwibWV0aG9kT2YiLCJtaXhpbiIsIm92ZXIiLCJvdmVyRXZlcnkiLCJvdmVyU29tZSIsImJhc2VQcm9wZXJ0eURlZXAiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwic3VidHJhY3QiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJiYXNlRmlsbCIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZmxpcCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJzcHJlYWQiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJ0b1BhdGgiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZFdpdGgiLCJjbG9uZURlZXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlZmF1bHRUbyIsImVuZHNXaXRoIiwiZXNjYXBlIiwiZXNjYXBlUmVnRXhwIiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiYmFzZUluUmFuZ2UiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYXRpdmUiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJyZWR1Y2VSaWdodCIsInJlcGVhdCIsInNhbXBsZSIsInNvbWUiLCJzb3J0ZWRJbmRleCIsInNvcnRlZEluZGV4QnkiLCJzb3J0ZWRJbmRleE9mIiwic29ydGVkTGFzdEluZGV4Iiwic29ydGVkTGFzdEluZGV4QnkiLCJzb3J0ZWRMYXN0SW5kZXhPZiIsInN0YXJ0c1dpdGgiLCJzdW1CeSIsInRlbXBsYXRlIiwic2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0cyIsImltcG9ydHNLZXlzIiwiaW1wb3J0c1ZhbHVlcyIsInJlRGVsaW1pdGVycyIsImV2YWx1YXRlIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInZhcmlhYmxlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltRW5kIiwidHJpbVN0YXJ0IiwidHJ1bmNhdGUiLCJvbWlzc2lvbiIsInNlYXJjaCIsImdsb2JhbCIsIm5ld0VuZCIsInVuZXNjYXBlIiwidW5pcXVlSWQiLCJlYWNoUmlnaHQiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImRpciIsImlzUmlnaHQiLCJnZXRWaWV3IiwiaXRlckxlbmd0aCIsInRha2VDb3VudCIsIml0ZXJJbmRleCIsImNvbW1pdCIsIndyYXBwZWQiLCJ0b0pTT04iLCJBbmltYXRpb25GcmFtZUFjdGlvbiIsIl9zdXBlciIsInNjaGVkdWxlciIsIndvcmsiLCJfdGhpcyIsInJlcXVlc3RBc3luY0lkIiwic2NoZWR1bGVkIiwicmVjeWNsZUFzeW5jSWQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIkFzeW5jQWN0aW9uIiwiYW5pbWF0aW9uRnJhbWUiLCJBbmltYXRpb25GcmFtZVNjaGVkdWxlciIsImV4ZWN1dGUiLCJ1bnN1YnNjcmliZSIsIkFzeW5jU2NoZWR1bGVyIiwiVmlydHVhbFRpbWVTY2hlZHVsZXIiLCJTY2hlZHVsZXJBY3Rpb24iLCJtYXhGcmFtZXMiLCJWaXJ0dWFsQWN0aW9uIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJmcmFtZSIsImZyYW1lVGltZUZhY3RvciIsInNvcnRBY3Rpb25zIiwiX2V4ZWN1dGUiLCJpc09ic2VydmFibGUiLCJvYmoiLCJPYnNlcnZhYmxlIiwibGlmdCIsInN1YnNjcmliZSIsImJpbmRDYWxsYmFjayIsImNhbGxiYWNrRnVuYyIsInJlc3VsdFNlbGVjdG9yIiwiaXNTY2hlZHVsZXIiLCJfaSIsInBpcGUiLCJzdWJzY3JpYmVyIiwiQXN5bmNTdWJqZWN0IiwiaW5uZXJBcmdzIiwiY29tcGxldGUiLCJlcnIiLCJjYW5SZXBvcnRFcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwiZGlzcGF0Y2hOZXh0IiwiYmluZE5vZGVDYWxsYmFjayIsImZvcmtKb2luIiwiZmlyc3RfMSIsImZvcmtKb2luSW50ZXJuYWwiLCJyZXN1bHRTZWxlY3Rvcl8xIiwibGVuIiwiY29tcGxldGVkIiwiZW1pdHRlZCIsIl9sb29wXzEiLCJoYXNWYWx1ZSIsImZyb21FdmVudCIsImV2ZW50TmFtZSIsInNldHVwU3Vic2NyaXB0aW9uIiwic291cmNlT2JqIiwiaGFuZGxlciIsImlzRXZlbnRUYXJnZXQiLCJzb3VyY2VfMSIsIm9mZiIsImlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIiLCJzb3VyY2VfMiIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsInNvdXJjZV8zIiwiZnJvbUV2ZW50UGF0dGVybiIsImFkZEhhbmRsZXIiLCJyZW1vdmVIYW5kbGVyIiwicmV0VmFsdWUiLCJpbml0aWFsU3RhdGVPck9wdGlvbnMiLCJjb25kaXRpb24iLCJpdGVyYXRlIiwicmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUiLCJpbml0aWFsU3RhdGUiLCJjb25kaXRpb25SZXN1bHQiLCJuZWVkSXRlcmF0ZSIsImlpZiIsInRydWVSZXN1bHQiLCJmYWxzZVJlc3VsdCIsImlzTnVtZXJpYyIsImNvdW50ZXIiLCJORVZFUiIsIm5ldmVyIiwib25FcnJvclJlc3VtZU5leHQiLCJzdWJOZXh0Iiwic3Vic2NyaXB0aW9uIiwiU3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlVG8iLCJub3QiLCJ1c2luZyIsInJlc291cmNlRmFjdG9yeSIsIm9ic2VydmFibGVGYWN0b3J5IiwicmVzb3VyY2UiLCJoYXNOZXh0IiwiaGFzQ29tcGxldGVkIiwiX3N1YnNjcmliZSIsImhhc0Vycm9yIiwidGhyb3duRXJyb3IiLCJCZWhhdmlvclN1YmplY3QiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiSW5uZXJTdWJzY3JpYmVyIiwib3V0ZXJWYWx1ZSIsIm91dGVySW5kZXgiLCJub3RpZnlOZXh0IiwiX2Vycm9yIiwibm90aWZ5RXJyb3IiLCJfY29tcGxldGUiLCJub3RpZnlDb21wbGV0ZSIsIk5vdGlmaWNhdGlvbktpbmQiLCJOb3RpZmljYXRpb24iLCJraW5kIiwib2JzZXJ2ZSIsIm9ic2VydmVyIiwiZG8iLCJhY2NlcHQiLCJuZXh0T3JPYnNlcnZlciIsInRvT2JzZXJ2YWJsZSIsIm9mIiwiY3JlYXRlTmV4dCIsInVuZGVmaW5lZFZhbHVlTm90aWZpY2F0aW9uIiwiY3JlYXRlRXJyb3IiLCJjcmVhdGVDb21wbGV0ZSIsImNvbXBsZXRlTm90aWZpY2F0aW9uIiwiX2lzU2NhbGFyIiwib2JzZXJ2YWJsZSIsIm9ic2VydmVyT3JOZXh0IiwiU3Vic2NyaWJlciIsInJ4U3Vic2NyaWJlciIsInRvU3Vic2NyaWJlciIsImNvbmZpZyIsInN5bmNFcnJvclRocm93YWJsZSIsIl90cnlTdWJzY3JpYmUiLCJzeW5jRXJyb3JUaHJvd24iLCJzeW5jRXJyb3JWYWx1ZSIsInByb21pc2VDdG9yIiwiZ2V0UHJvbWlzZUN0b3IiLCJvcGVyYXRpb25zIiwidG9Qcm9taXNlIiwiT3V0ZXJTdWJzY3JpYmVyIiwiaW5uZXJWYWx1ZSIsImlubmVySW5kZXgiLCJpbm5lclN1YiIsImRlc3RpbmF0aW9uIiwiUmVwbGF5U3ViamVjdCIsImJ1ZmZlclNpemUiLCJ3aW5kb3dUaW1lIiwiX2V2ZW50cyIsIl9pbmZpbml0ZVRpbWVXaW5kb3ciLCJfYnVmZmVyU2l6ZSIsIl93aW5kb3dUaW1lIiwibmV4dEluZmluaXRlVGltZVdpbmRvdyIsIm5leHRUaW1lV2luZG93IiwiUmVwbGF5RXZlbnQiLCJfZ2V0Tm93IiwiX3RyaW1CdWZmZXJUaGVuR2V0RXZlbnRzIiwiaXNTdG9wcGVkIiwib2JzZXJ2ZXJzIiwiZXZlbnRzQ291bnQiLCJzcGxpY2VDb3VudCIsIlNjaGVkdWxlciIsIlN1YmplY3RTdWJzY3JpYmVyIiwiU3ViamVjdCIsIkFub255bW91c1N1YmplY3QiLCJhc09ic2VydmFibGUiLCJTdWJqZWN0U3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlckluZGV4IiwiZGVzdGluYXRpb25Pck5leHQiLCJTYWZlU3Vic2NyaWJlciIsIl91bnN1YnNjcmliZUFuZFJlY3ljbGUiLCJfcGFyZW50T3JQYXJlbnRzIiwiX3BhcmVudFN1YnNjcmliZXIiLCJfX3RyeU9yU2V0RXJyb3IiLCJfX3RyeU9yVW5zdWIiLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwid3JhcHBlZENvbXBsZXRlIiwiX3Vuc3Vic2NyaWJlIiwiX3N1YnNjcmlwdGlvbnMiLCJlcnJvcnMiLCJfYSIsImZsYXR0ZW5VbnN1YnNjcmlwdGlvbkVycm9ycyIsInN1YiIsInRlYXJkb3duIiwiRU1QVFkiLCJ0bXAiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uSW5kZXgiLCJlcnJzIiwiX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzIiwiQ29ubmVjdGFibGVPYnNlcnZhYmxlIiwic3ViamVjdEZhY3RvcnkiLCJfcmVmQ291bnQiLCJfaXNDb21wbGV0ZSIsImdldFN1YmplY3QiLCJfc3ViamVjdCIsImNvbm5lY3QiLCJjb25uZWN0aW9uIiwiX2Nvbm5lY3Rpb24iLCJDb25uZWN0YWJsZVN1YnNjcmliZXIiLCJyZWZDb3VudCIsImNvbm5lY3RhYmxlT2JzZXJ2YWJsZURlc2NyaXB0b3IiLCJjb25uZWN0YWJsZVByb3RvIiwid3JpdGFibGUiLCJjb25uZWN0YWJsZSIsIk5PTkUiLCJjb21iaW5lTGF0ZXN0Iiwib2JzZXJ2YWJsZXMiLCJDb21iaW5lTGF0ZXN0T3BlcmF0b3IiLCJDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciIsInRvUmVzcG9uZCIsInVudXNlZCIsIm9sZFZhbCIsIl90cnlSZXN1bHRTZWxlY3RvciIsImVtcHR5U2NoZWR1bGVkIiwiZnJvbUFycmF5IiwiY29uY3VycmVudCIsInJhY2UiLCJSYWNlT3BlcmF0b3IiLCJSYWNlU3Vic2NyaWJlciIsImhhc0ZpcnN0IiwidGhyb3dFcnJvciIsImR1ZVRpbWUiLCJwZXJpb2RPclNjaGVkdWxlciIsImR1ZSIsIlppcE9wZXJhdG9yIiwiWmlwU3Vic2NyaWJlciIsIml0ZXJhdG9ycyIsIlN0YXRpY0FycmF5SXRlcmF0b3IiLCJTdGF0aWNJdGVyYXRvciIsIlppcEJ1ZmZlckl0ZXJhdG9yIiwic3RpbGxVbnN1YnNjcmliZWQiLCJub3RpZnlJbmFjdGl2ZSIsImNoZWNrSXRlcmF0b3JzIiwic2hvdWxkQ29tcGxldGUiLCJfdHJ5cmVzdWx0U2VsZWN0b3IiLCJuZXh0UmVzdWx0IiwiaXNDb21wbGV0ZSIsImNvbmNhdEFsbCIsIkZpbHRlck9wZXJhdG9yIiwiRmlsdGVyU3Vic2NyaWJlciIsImtleVNlbGVjdG9yIiwiZWxlbWVudFNlbGVjdG9yIiwiZHVyYXRpb25TZWxlY3RvciIsInN1YmplY3RTZWxlY3RvciIsIkdyb3VwQnlPcGVyYXRvciIsIkdyb3VwQnlTdWJzY3JpYmVyIiwiYXR0ZW1wdGVkVG9VbnN1YnNjcmliZSIsIl9ncm91cCIsImVsZW1lbnQiLCJncm91cGVkT2JzZXJ2YWJsZSIsIkdyb3VwZWRPYnNlcnZhYmxlIiwiR3JvdXBEdXJhdGlvblN1YnNjcmliZXIiLCJyZW1vdmVHcm91cCIsImRlbGV0ZSIsImdyb3VwU3ViamVjdCIsInJlZkNvdW50U3Vic2NyaXB0aW9uIiwiSW5uZXJSZWZDb3VudFN1YnNjcmlwdGlvbiIsIk1hcE9wZXJhdG9yIiwiTWFwU3Vic2NyaWJlciIsIm1lcmdlQWxsIiwibWVyZ2VNYXAiLCJpaSIsIk1lcmdlTWFwT3BlcmF0b3IiLCJNZXJnZU1hcFN1YnNjcmliZXIiLCJfdHJ5TmV4dCIsIl9pbm5lclN1YiIsImlzaCIsImlubmVyU3Vic2NyaWJlciIsImlubmVyU3Vic2NyaXB0aW9uIiwib2JzZXJ2ZU9uIiwiT2JzZXJ2ZU9uT3BlcmF0b3IiLCJPYnNlcnZlT25TdWJzY3JpYmVyIiwibm90aWZpY2F0aW9uIiwic2NoZWR1bGVNZXNzYWdlIiwiT2JzZXJ2ZU9uTWVzc2FnZSIsIlJlZkNvdW50T3BlcmF0b3IiLCJyZWZDb3VudGVyIiwiUmVmQ291bnRTdWJzY3JpYmVyIiwic2hhcmVkQ29ubmVjdGlvbiIsInNjaGVkdWxlQXJyYXkiLCJpc0ludGVyb3BPYnNlcnZhYmxlIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwiaXNQcm9taXNlIiwic2NoZWR1bGVQcm9taXNlIiwiaXNJdGVyYWJsZSIsInJldHVybiIsInNjaGVkdWxlSXRlcmFibGUiLCJwZW5kaW5nIiwiZXJyb3JlZCIsImVycm9yVmFsdWUiLCJBY3Rpb24iLCJkZWxlZ2F0ZSIsIm5leHRIYW5kbGUiLCJSRVNPTFZFRCIsImFjdGl2ZUhhbmRsZXMiLCJmaW5kQW5kQ2xlYXJIYW5kbGUiLCJBc2FwQWN0aW9uIiwiYXNhcCIsIkFzYXBTY2hlZHVsZXIiLCJhc3luYyIsIlF1ZXVlQWN0aW9uIiwicXVldWUiLCJRdWV1ZVNjaGVkdWxlciIsImdldFN5bWJvbEl0ZXJhdG9yIiwiQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IiLCJBcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGwiLCJFbXB0eUVycm9yIiwiRW1wdHlFcnJvckltcGwiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvciIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCIsIlRpbWVvdXRFcnJvciIsIlRpbWVvdXRFcnJvckltcGwiLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiVW5zdWJzY3JpcHRpb25FcnJvckltcGwiLCJjbG9zZWRfMSIsImhvc3RSZXBvcnRFcnJvciIsInZhbCIsInByZWQiLCJub3RQcmVkIiwiZm5zIiwicGlwZUZyb21BcnJheSIsInByZXYiLCJvYnMiLCJzdWJzY3JpYmVUb0FycmF5IiwicHJvbWlzZSIsIml0ZW0iLCJzdWJzY3JpYmVUb1Jlc3VsdCIsIm91dGVyU3Vic2NyaWJlciIsImF1ZGl0IiwiQXVkaXRPcGVyYXRvciIsIkF1ZGl0U3Vic2NyaWJlciIsInRocm90dGxlZCIsImNsZWFyVGhyb3R0bGUiLCJhdWRpdFRpbWUiLCJjbG9zaW5nTm90aWZpZXIiLCJCdWZmZXJPcGVyYXRvciIsIkJ1ZmZlclN1YnNjcmliZXIiLCJidWZmZXJDb3VudCIsInN0YXJ0QnVmZmVyRXZlcnkiLCJCdWZmZXJDb3VudE9wZXJhdG9yIiwic3Vic2NyaWJlckNsYXNzIiwiQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlciIsIkJ1ZmZlckNvdW50U3Vic2NyaWJlciIsImJ1ZmZlcnMiLCJidWZmZXJUaW1lIiwiYnVmZmVyVGltZVNwYW4iLCJidWZmZXJDcmVhdGlvbkludGVydmFsIiwibWF4QnVmZmVyU2l6ZSIsIkJ1ZmZlclRpbWVPcGVyYXRvciIsIkJ1ZmZlclRpbWVTdWJzY3JpYmVyIiwiQ29udGV4dCIsImNvbnRleHRzIiwib3BlbkNvbnRleHQiLCJ0aW1lc3Bhbk9ubHkiLCJ0aW1lU3Bhbk9ubHlTdGF0ZSIsImNsb3NlQWN0aW9uIiwiZGlzcGF0Y2hCdWZmZXJUaW1lU3Bhbk9ubHkiLCJjbG9zZVN0YXRlIiwiY3JlYXRpb25TdGF0ZSIsImRpc3BhdGNoQnVmZmVyQ2xvc2UiLCJkaXNwYXRjaEJ1ZmZlckNyZWF0aW9uIiwiZmlsbGVkQnVmZmVyQ29udGV4dCIsImNvbnRleHRfMSIsIm9uQnVmZmVyRnVsbCIsImNvbnRleHRfMiIsImNsb3NlQ29udGV4dCIsInByZXZDb250ZXh0IiwiYnVmZmVyVG9nZ2xlIiwib3BlbmluZ3MiLCJjbG9zaW5nU2VsZWN0b3IiLCJCdWZmZXJUb2dnbGVPcGVyYXRvciIsIkJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIiLCJjbG9zZUJ1ZmZlciIsIm9wZW5CdWZmZXIiLCJ0cnlTdWJzY3JpYmUiLCJidWZmZXJXaGVuIiwiQnVmZmVyV2hlbk9wZXJhdG9yIiwiQnVmZmVyV2hlblN1YnNjcmliZXIiLCJzdWJzY3JpYmluZyIsImNsb3NpbmdTdWJzY3JpcHRpb24iLCJjYXRjaEVycm9yIiwiQ2F0Y2hPcGVyYXRvciIsImNhdWdodCIsIkNhdGNoU3Vic2NyaWJlciIsImVycjIiLCJjb21iaW5lQWxsIiwiY29uY2F0TWFwIiwiY29uY2F0TWFwVG8iLCJpbm5lck9ic2VydmFibGUiLCJDb3VudE9wZXJhdG9yIiwiQ291bnRTdWJzY3JpYmVyIiwiX3RyeVByZWRpY2F0ZSIsIkRlYm91bmNlT3BlcmF0b3IiLCJEZWJvdW5jZVN1YnNjcmliZXIiLCJkdXJhdGlvblN1YnNjcmlwdGlvbiIsImVtaXRWYWx1ZSIsImRlYm91bmNlVGltZSIsIkRlYm91bmNlVGltZU9wZXJhdG9yIiwiRGVib3VuY2VUaW1lU3Vic2NyaWJlciIsImRlYm91bmNlZFN1YnNjcmlwdGlvbiIsImxhc3RWYWx1ZSIsImNsZWFyRGVib3VuY2UiLCJkZWJvdW5jZWROZXh0IiwiZGVmYXVsdElmRW1wdHkiLCJEZWZhdWx0SWZFbXB0eU9wZXJhdG9yIiwiRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyIiwiZGVsYXlGb3IiLCJEZWxheU9wZXJhdG9yIiwiRGVsYXlTdWJzY3JpYmVyIiwiZGVsYXlfMSIsIl9zY2hlZHVsZSIsInNjaGVkdWxlTm90aWZpY2F0aW9uIiwiRGVsYXlNZXNzYWdlIiwiZGVsYXlXaGVuIiwiZGVsYXlEdXJhdGlvblNlbGVjdG9yIiwic3Vic2NyaXB0aW9uRGVsYXkiLCJTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUiLCJEZWxheVdoZW5PcGVyYXRvciIsIkRlbGF5V2hlblN1YnNjcmliZXIiLCJkZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucyIsInJlbW92ZVN1YnNjcmlwdGlvbiIsInRyeUNvbXBsZXRlIiwiZGVsYXlOb3RpZmllciIsInRyeURlbGF5Iiwic3Vic2NyaXB0aW9uSWR4Iiwibm90aWZpZXJTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIiLCJzb3VyY2VTdWJzY3JpYmVkIiwic3Vic2NyaWJlVG9Tb3VyY2UiLCJkZW1hdGVyaWFsaXplIiwiRGVNYXRlcmlhbGl6ZU9wZXJhdG9yIiwiRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIiLCJkaXN0aW5jdCIsImZsdXNoZXMiLCJEaXN0aW5jdE9wZXJhdG9yIiwiRGlzdGluY3RTdWJzY3JpYmVyIiwiX3VzZUtleVNlbGVjdG9yIiwiX2ZpbmFsaXplTmV4dCIsImRpc3RpbmN0VW50aWxDaGFuZ2VkIiwiRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvciIsIkRpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlciIsImhhc0tleSIsImRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkIiwidGhyb3dJZkVtcHR5IiwiZXJyb3JGYWN0b3J5IiwiZGVmYXVsdEVycm9yRmFjdG9yeSIsIlRocm93SWZFbXB0eU9wZXJhdG9yIiwiVGhyb3dJZkVtcHR5U3Vic2NyaWJlciIsIlRha2VPcGVyYXRvciIsIlRha2VTdWJzY3JpYmVyIiwiZWxlbWVudEF0IiwiaGFzRGVmYXVsdFZhbHVlIiwiZW5kV2l0aCIsIkV2ZXJ5T3BlcmF0b3IiLCJFdmVyeVN1YnNjcmliZXIiLCJldmVyeVZhbHVlTWF0Y2giLCJleGhhdXN0IiwiU3dpdGNoRmlyc3RPcGVyYXRvciIsIlN3aXRjaEZpcnN0U3Vic2NyaWJlciIsImhhc1N1YnNjcmlwdGlvbiIsImV4aGF1c3RNYXAiLCJFeGhhdXN0TWFwT3BlcmF0b3IiLCJFeGhhdXN0TWFwU3Vic2NyaWJlciIsInRyeU5leHQiLCJleHBhbmQiLCJFeHBhbmRPcGVyYXRvciIsIkV4cGFuZFN1YnNjcmliZXIiLCJzdWJzY3JpYmVUb1Byb2plY3Rpb24iLCJmaW5hbGl6ZSIsIkZpbmFsbHlPcGVyYXRvciIsIkZpbmFsbHlTdWJzY3JpYmVyIiwiRmluZFZhbHVlT3BlcmF0b3IiLCJ5aWVsZEluZGV4IiwiRmluZFZhbHVlU3Vic2NyaWJlciIsImlnbm9yZUVsZW1lbnRzIiwiSWdub3JlRWxlbWVudHNPcGVyYXRvciIsIklnbm9yZUVsZW1lbnRzU3Vic2NyaWJlciIsIklzRW1wdHlPcGVyYXRvciIsIklzRW1wdHlTdWJzY3JpYmVyIiwidGFrZUxhc3QiLCJUYWtlTGFzdE9wZXJhdG9yIiwiVGFrZUxhc3RTdWJzY3JpYmVyIiwiaWR4IiwibWFwVG8iLCJNYXBUb09wZXJhdG9yIiwiTWFwVG9TdWJzY3JpYmVyIiwibWF0ZXJpYWxpemUiLCJNYXRlcmlhbGl6ZU9wZXJhdG9yIiwiTWF0ZXJpYWxpemVTdWJzY3JpYmVyIiwic2NhbiIsInNlZWQiLCJoYXNTZWVkIiwiU2Nhbk9wZXJhdG9yIiwiU2NhblN1YnNjcmliZXIiLCJfc2VlZCIsImFjYyIsIm1lcmdlTWFwVG8iLCJtZXJnZVNjYW4iLCJNZXJnZVNjYW5PcGVyYXRvciIsIk1lcmdlU2NhblN1YnNjcmliZXIiLCJtdWx0aWNhc3QiLCJzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSIsIk11bHRpY2FzdE9wZXJhdG9yIiwibmV4dFNvdXJjZXMiLCJPbkVycm9yUmVzdW1lTmV4dE9wZXJhdG9yIiwiT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyIiwic3Vic2NyaWJlVG9OZXh0U291cmNlIiwicGFpcndpc2UiLCJQYWlyd2lzZU9wZXJhdG9yIiwiUGFpcndpc2VTdWJzY3JpYmVyIiwiaGFzUHJldiIsInBsdWNrIiwicGx1Y2tlciIsImN1cnJlbnRQcm9wIiwicHVibGlzaCIsInB1Ymxpc2hCZWhhdmlvciIsInB1Ymxpc2hMYXN0IiwicHVibGlzaFJlcGxheSIsInNlbGVjdG9yT3JTY2hlZHVsZXIiLCJSZXBlYXRPcGVyYXRvciIsIlJlcGVhdFN1YnNjcmliZXIiLCJyZXBlYXRXaGVuIiwibm90aWZpZXIiLCJSZXBlYXRXaGVuT3BlcmF0b3IiLCJSZXBlYXRXaGVuU3Vic2NyaWJlciIsInNvdXJjZUlzQmVpbmdTdWJzY3JpYmVkVG8iLCJyZXRyaWVzIiwic3Vic2NyaWJlVG9SZXRyaWVzIiwicmV0cmllc1N1YnNjcmlwdGlvbiIsIm5vdGlmaWNhdGlvbnMiLCJyZXRyeSIsIlJldHJ5T3BlcmF0b3IiLCJSZXRyeVN1YnNjcmliZXIiLCJyZXRyeVdoZW4iLCJSZXRyeVdoZW5PcGVyYXRvciIsIlJldHJ5V2hlblN1YnNjcmliZXIiLCJTYW1wbGVPcGVyYXRvciIsInNhbXBsZVN1YnNjcmliZXIiLCJTYW1wbGVTdWJzY3JpYmVyIiwic2FtcGxlVGltZSIsIlNhbXBsZVRpbWVPcGVyYXRvciIsIlNhbXBsZVRpbWVTdWJzY3JpYmVyIiwiZGlzcGF0Y2hOb3RpZmljYXRpb24iLCJzZXF1ZW5jZUVxdWFsIiwiY29tcGFyZVRvIiwiU2VxdWVuY2VFcXVhbE9wZXJhdG9yIiwiU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIiLCJfYiIsIl9vbmVDb21wbGV0ZSIsIlNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyIiwiY2hlY2tWYWx1ZXMiLCJfYyIsImFyZUVxdWFsIiwibmV4dEIiLCJjb21wbGV0ZUIiLCJzaGFyZVN1YmplY3RGYWN0b3J5Iiwic2hhcmUiLCJzaGFyZVJlcGxheSIsImNvbmZpZ09yQnVmZmVyU2l6ZSIsInVzZVJlZkNvdW50Iiwic2hhcmVSZXBsYXlPcGVyYXRvciIsInNpbmdsZSIsIlNpbmdsZU9wZXJhdG9yIiwiU2luZ2xlU3Vic2NyaWJlciIsInNlZW5WYWx1ZSIsImFwcGx5U2luZ2xlVmFsdWUiLCJzaW5nbGVWYWx1ZSIsIlNraXBPcGVyYXRvciIsIlNraXBTdWJzY3JpYmVyIiwic2tpcExhc3QiLCJTa2lwTGFzdE9wZXJhdG9yIiwiX3NraXBDb3VudCIsIlNraXBMYXN0U3Vic2NyaWJlciIsIl9jb3VudCIsIl9yaW5nIiwic2tpcENvdW50IiwiY3VycmVudEluZGV4Iiwib2xkVmFsdWUiLCJza2lwVW50aWwiLCJTa2lwVW50aWxPcGVyYXRvciIsIlNraXBVbnRpbFN1YnNjcmliZXIiLCJza2lwV2hpbGUiLCJTa2lwV2hpbGVPcGVyYXRvciIsIlNraXBXaGlsZVN1YnNjcmliZXIiLCJza2lwcGluZyIsInRyeUNhbGxQcmVkaWNhdGUiLCJCb29sZWFuIiwic3RhcnRXaXRoIiwiU3Vic2NyaWJlT25PYnNlcnZhYmxlIiwiZGVsYXlUaW1lIiwic3Vic2NyaWJlT24iLCJTdWJzY3JpYmVPbk9wZXJhdG9yIiwic3dpdGNoTWFwIiwiU3dpdGNoTWFwT3BlcmF0b3IiLCJTd2l0Y2hNYXBTdWJzY3JpYmVyIiwic3dpdGNoQWxsIiwic3dpdGNoTWFwVG8iLCJ0YWtlVW50aWwiLCJUYWtlVW50aWxPcGVyYXRvciIsInRha2VVbnRpbFN1YnNjcmliZXIiLCJUYWtlVW50aWxTdWJzY3JpYmVyIiwiaW5jbHVzaXZlIiwiVGFrZVdoaWxlT3BlcmF0b3IiLCJUYWtlV2hpbGVTdWJzY3JpYmVyIiwibmV4dE9yQ29tcGxldGUiLCJwcmVkaWNhdGVSZXN1bHQiLCJEb09wZXJhdG9yIiwiVGFwU3Vic2NyaWJlciIsIl90YXBOZXh0IiwiX3RhcEVycm9yIiwiX3RhcENvbXBsZXRlIiwiZGVmYXVsdFRocm90dGxlQ29uZmlnIiwiVGhyb3R0bGVPcGVyYXRvciIsIlRocm90dGxlU3Vic2NyaWJlciIsIl9sZWFkaW5nIiwiX3RyYWlsaW5nIiwiX2hhc1ZhbHVlIiwiX3NlbmRWYWx1ZSIsIl90aHJvdHRsZWQiLCJzZW5kIiwidHJ5RHVyYXRpb25TZWxlY3RvciIsInRocm90dGxpbmdEb25lIiwidGhyb3R0bGVUaW1lIiwiVGhyb3R0bGVUaW1lT3BlcmF0b3IiLCJUaHJvdHRsZVRpbWVTdWJzY3JpYmVyIiwiX2hhc1RyYWlsaW5nVmFsdWUiLCJfdHJhaWxpbmdWYWx1ZSIsInRpbWVJbnRlcnZhbCIsIlRpbWVJbnRlcnZhbCIsInRpbWVvdXRXaXRoIiwid2l0aE9ic2VydmFibGUiLCJhYnNvbHV0ZVRpbWVvdXQiLCJ3YWl0Rm9yIiwiVGltZW91dFdpdGhPcGVyYXRvciIsIlRpbWVvdXRXaXRoU3Vic2NyaWJlciIsInNjaGVkdWxlVGltZW91dCIsImRpc3BhdGNoVGltZW91dCIsInRpbWVzdGFtcCIsIlRpbWVzdGFtcCIsInRvQXJyYXlSZWR1Y2VyIiwiYXJyIiwid2luZG93Qm91bmRhcmllcyIsIldpbmRvd09wZXJhdG9yIiwid2luZG93U3Vic2NyaWJlciIsIldpbmRvd1N1YnNjcmliZXIiLCJzb3VyY2VTdWJzY3JpcHRpb24iLCJvcGVuV2luZG93IiwicHJldldpbmRvdyIsIm5ld1dpbmRvdyIsIndpbmRvd0NvdW50Iiwid2luZG93U2l6ZSIsInN0YXJ0V2luZG93RXZlcnkiLCJXaW5kb3dDb3VudE9wZXJhdG9yIiwiV2luZG93Q291bnRTdWJzY3JpYmVyIiwid2luZG93cyIsIndpbmRvd18xIiwid2luZG93VGltZVNwYW4iLCJ3aW5kb3dDcmVhdGlvbkludGVydmFsIiwibWF4V2luZG93U2l6ZSIsIldpbmRvd1RpbWVPcGVyYXRvciIsIldpbmRvd1RpbWVTdWJzY3JpYmVyIiwiQ291bnRlZFN1YmplY3QiLCJfbnVtYmVyT2ZOZXh0ZWRWYWx1ZXMiLCJkaXNwYXRjaFdpbmRvd0Nsb3NlIiwiZGlzcGF0Y2hXaW5kb3dDcmVhdGlvbiIsImRpc3BhdGNoV2luZG93VGltZVNwYW5Pbmx5IiwibnVtYmVyT2ZOZXh0ZWRWYWx1ZXMiLCJjbG9zZVdpbmRvdyIsIndpbmRvd18yIiwidGltZVNwYW5TdGF0ZSIsIndpbmRvd1RvZ2dsZSIsIldpbmRvd1RvZ2dsZU9wZXJhdG9yIiwiV2luZG93VG9nZ2xlU3Vic2NyaWJlciIsIm9wZW5TdWJzY3JpcHRpb24iLCJjb250ZXh0XzMiLCJjb250ZXh0XzQiLCJpbm5lciIsIndpbmRvd1doZW4iLCJ1bnN1YnNjcmliZUNsb3NpbmdOb3RpZmljYXRpb24iLCJjbG9zaW5nTm90aWZpY2F0aW9uIiwid2l0aExhdGVzdEZyb20iLCJXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yIiwiV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyIiwiZm91bmQiLCJfdHJ5UHJvamVjdCIsInppcEFsbCIsInRyaW1MZWZ0IiwidHJpbVJpZ2h0IiwidGlueUNvdW50ZXIiLCJtYXRoUm91bmQiLCJtYXRoTWluIiwibWF0aE1heCIsIm1hdGhSYW5kb20iLCJ0aW55Y29sb3IiLCJvcHRzIiwibWF0Y2hlcnMiLCJoc3ZhIiwiaGV4OCIsInBhcnNlSW50RnJvbUhleCIsImNvbnZlcnRIZXhUb0RlY2ltYWwiLCJoZXg2IiwiaGV4NCIsImhleDMiLCJzdHJpbmdJbnB1dFRvT2JqZWN0IiwiaXNWYWxpZENTU1VuaXQiLCJib3VuZDAxIiwic3Vic3RyIiwiY29udmVydFRvUGVyY2VudGFnZSIsImhzdlRvUmdiIiwiaHVlMnJnYiIsImhzbFRvUmdiIiwiYm91bmRBbHBoYSIsImlucHV0VG9SR0IiLCJfb3JpZ2luYWxJbnB1dCIsIl9yIiwiX2ciLCJfcm91bmRBIiwiX2Zvcm1hdCIsIl9ncmFkaWVudFR5cGUiLCJncmFkaWVudFR5cGUiLCJfb2siLCJfdGNfaWQiLCJyZ2JUb0hzbCIsInJnYlRvSHN2IiwicmdiVG9IZXgiLCJhbGxvdzNDaGFyIiwicGFkMiIsInJnYmFUb0FyZ2JIZXgiLCJjb252ZXJ0RGVjaW1hbFRvSGV4IiwiZGVzYXR1cmF0ZSIsImFtb3VudCIsInRvSHNsIiwiY2xhbXAwMSIsInNhdHVyYXRlIiwiZ3JleXNjYWxlIiwibGlnaHRlbiIsImJyaWdodGVuIiwidG9SZ2IiLCJkYXJrZW4iLCJzcGluIiwiY29tcGxlbWVudCIsInRyaWFkIiwidGV0cmFkIiwic3BsaXRjb21wbGVtZW50IiwiYW5hbG9nb3VzIiwicmVzdWx0cyIsInNsaWNlcyIsInBhcnQiLCJyZXQiLCJtb25vY2hyb21hdGljIiwibW9kaWZpY2F0aW9uIiwiaXNEYXJrIiwiZ2V0QnJpZ2h0bmVzcyIsImlzTGlnaHQiLCJpc1ZhbGlkIiwiZ2V0T3JpZ2luYWxJbnB1dCIsImdldEZvcm1hdCIsImdldEFscGhhIiwiZ2V0THVtaW5hbmNlIiwiUnNSR0IiLCJHc1JHQiIsIkJzUkdCIiwic2V0QWxwaGEiLCJ0b0hzdlN0cmluZyIsInRvSHNsU3RyaW5nIiwidG9IZXgiLCJ0b0hleDgiLCJhbGxvdzRDaGFyIiwicmdiYVRvSGV4IiwidG9IZXg4U3RyaW5nIiwidG9SZ2JTdHJpbmciLCJ0b1BlcmNlbnRhZ2VSZ2IiLCJ0b1BlcmNlbnRhZ2VSZ2JTdHJpbmciLCJ0b05hbWUiLCJoZXhOYW1lcyIsInRvRmlsdGVyIiwic2Vjb25kQ29sb3IiLCJoZXg4U3RyaW5nIiwic2Vjb25kSGV4OFN0cmluZyIsImZvcm1hdFNldCIsImZvcm1hdHRlZFN0cmluZyIsImhhc0FscGhhIiwiX2FwcGx5TW9kaWZpY2F0aW9uIiwiX2FwcGx5Q29tYmluYXRpb24iLCJmcm9tUmF0aW8iLCJuZXdDb2xvciIsImVxdWFscyIsImNvbG9yMSIsImNvbG9yMiIsIm1peCIsInJnYjEiLCJyZ2IyIiwicmVhZGFiaWxpdHkiLCJpc1JlYWRhYmxlIiwid2NhZzIiLCJ3Y2FnMlBhcm1zIiwicGFybXMiLCJsZXZlbCIsIm1vc3RSZWFkYWJsZSIsImJhc2VDb2xvciIsImNvbG9yTGlzdCIsImluY2x1ZGVGYWxsYmFja0NvbG9ycyIsImJlc3RDb2xvciIsImJlc3RTY29yZSIsImJ1cm50c2llbm5hIiwiZmxpcHBlZCIsImlzT25lUG9pbnRaZXJvIiwicHJvY2Vzc1BlcmNlbnQiLCJpc1BlcmNlbnRhZ2UiLCJDU1NfVU5JVCIsIlBFUk1JU1NJVkVfTUFUQ0gzIiwiUEVSTUlTU0lWRV9NQVRDSDQiLCJjbGlja0JyYW5jaCIsImVtcHR5Q2hpbGRyZW4iLCJjYW52YXMiLCJ0cmVlRGF0YSIsImJ1aWxkVHJlZSIsImdldEVsZW1lbnRCeUlkIiwiZ2xvYmFsRGF0YSIsImdsb2JhbFN0YXRlIiwiY3VycmVudEZhY2V0SWQiLCJicmFuY2hGYWNldElkIiwiZXhwYW5kZWRGYWNldElkIiwiY3VyciIsImZhY2V0Q2hhcnQiLCJmYWNldElkIiwiZXhwYW5kZWROb2RlcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJkcmF3RmFjZXRQaWVDaGFydCIsImJyYW5jaGVzIiwiZGl2VG9vbHRpcCIsInBhZ2VZIiwiZm9sZEJyYW5jaGVzIiwiY29udGFpbkNoaWxkcmVuRmFjZXQiLCJ0ZXh0c19sZWFmIiwidGV4dHMiLCJmb250U2l6ZSIsImp1ZGdlbWVudFN0cmluZ0xlbmd0aFdpdGhDaGluZXNlIiwidG9waWNOYW1lIiwic2VsZWN0RmFjZXQiLCJvcHRpb25GYWNldCIsIlRhcmdldCIsImNsaWNrRmFjZXQiLCJjbGlja0JyYW5jaEFkZCIsIkZhY2V0RWRpdCIsImNoZWNrQ2xvc2VNZW51Iiwib2NjYXNpb24iLCJzZWxlY3RUZW1wIiwib25TZWxlY3RPcHRpb24iLCJvcHRpb24iLCJvZmZTZWxlY3RPcHRpb24iLCJvbkNsaWNrUmlnaHQiLCJwcmV2ZW50RGVmYXVsdCIsIkxpc3RNZW51RmFjZXQiLCJwYWdlWCIsIkRlbGV0ZUZhY2V0Iiwic3RyIiwidG90YWxEYXRhIiwiYXBwZW5kRGF0YSIsImFsZXJ0IiwibG9jayIsImZpeG5hIiwiZG9tIiwiY2hpbGRyZW5OdW1iZXIiLCJsYWJlbCIsImZhY2V0TmFtZSIsInVwZGF0ZUxpbmsiLCJ1cGRhdGVOb2RlIiwidXBkYXRlTGFiZWwiLCJncmFwaExheW91dCIsImZvcmNlU2ltdWxhdGlvbiIsImZvcmNlTWFueUJvZHkiLCJmb3JjZUNlbnRlciIsImZvcmNlWCIsImZvcmNlWSIsImZvcmNlTGluayIsInN0b3BQcm9wYWdhdGlvbiIsInBpZWRhdGEiLCJwYWxldHRlcyIsIndlaWdodFNlY29uZEZhY2V0IiwiY2FtZWxTb3J0IiwiY2FsY1dlaWdodCIsImZhY2V0RGF0YSIsImZhY2V0TGF5ZXIiLCJhc3NlbWJsZVR5cGUiLCJmbGFnIiwiY2FsY0ZhY2V0Q2hhcnQiLCJmaXJzdExheWVyTnVtYmVyIiwiY2hpbHJlbk51bWJlciIsImZvbnRTaXplaCIsImZvbGRGbGFnIiwiZmlyc3RMYXllck1hcCIsImZhY2V0IiwiZmlyc3RMYXllclRtcCIsImZpcnN0TGF5ZXJOdW1iZXJXaXRoU2Vjb25kTGF5ZXIiLCJtYXhGaXJzdExheWVyTnVtYmVyIiwiZmFjZXRUbXAiLCJwYXJlbnRGYWNldElkIiwidG9waWNJZCIsImZpcnN0TGF5ZXJUbXBOdW1iZXIiLCJvZGQiLCJ0b3BIZWlnaHQiLCJkZWx0YUludGVydmFsIiwiaW5pdEFuZ2xlIiwidGVtcEluZGV4IiwibGVhZjEiLCJsZWFmMiIsInhJbml0RmxhZyIsImZhY2V0V2lkdGgiLCJ4SW5pdCIsImJyYW5jaCIsImZvbGRCcmFuY2giLCJtaWRkbGVYIiwibWlkZGxlWSIsImZvbnRTaXpldyIsImdsb2JhbEJyYW5jaCIsImNoaWxkTm9kZXMiLCJleHRlbmRTdGF0aWNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfX2V4dGVuZHMiLCJfXyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJ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QyxHQUFLLElDWmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EseURBQ0EsK0RBQ0Esc0VBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDWmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EseURBQ0EsK0RBQ0Esc0VBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDWmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4QyxHQUFLLElDVmIsSUFBSSxHQUFTLElBQUl2L0QsTUFBTSxHQUFHK0osT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0F4SSxJQUFJb2hCLElBRU4sU0FBZTQ4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RSxFQUFRLElBQU0sRUFBUSxJQUFLLEVBQVEsSUFBSyxFQUFRLElBQUssRUFBUSxJQUFLLEVBQVEsSUFDMUUsRUFBUSxJQUFNLEVBQVEsSUFBSyxFQUFRLElBQUssRUFBUSxJQUNoRCxFQUFRLElBQU0sRUFBUSxJQUFLLEVBQVEsSUFBSyxFQUFRLElBQ2hELEVBQVEsSUFBTSxFQUFRLElBQUssRUFBUSxJQUNuQyxFQUFRLEtBQU0sRUFBUSxLQUN0QixFQUFRLEtBQU0sRUFBUSxLQUN0QixFQUFRLEtBRVIsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUMxQixFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJ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RUFBb0J2cEksRUFBSSxDQUFDOUQsRUFBU21iLEtBQ2pDLElBQUksSUFBSTlYLEtBQU84WCxFQUNYa3lILEVBQW9CejJILEVBQUV1RSxFQUFZOVgsS0FBU2dxSSxFQUFvQnoySCxFQUFFNVcsRUFBU3FELElBQzVFNUMsT0FBT0MsZUFBZVYsRUFBU3FELEVBQUssQ0FBRXcyRyxZQUFZLEVBQU1uckcsSUFBS3lNLEVBQVc5WCxNQ0ozRWdxSSxFQUFvQjNuSCxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmK25ILFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBT250SSxNQUFRLElBQUl1akMsU0FBUyxjQUFiLEdBQ2QsTUFBT2hZLEdBQ1IsR0FBc0IsaUJBQVh2VSxPQUFxQixPQUFPQSxRQUxqQixHQ0F4QisxSCxFQUFvQnoySCxFQUFJLENBQUNvK0YsRUFBSzlPLElBQVN6bEcsT0FBTzJGLFVBQVVvSSxlQUFlcEYsS0FBSzRyRyxFQUFLOU8sR0NDakZtbkMsRUFBb0I1bkgsRUFBS3psQixJQUNILG9CQUFYbWxGLFFBQTBCQSxPQUFPWSxhQUMxQ3RsRixPQUFPQyxlQUFlVixFQUFTbWxGLE9BQU9ZLFlBQWEsQ0FBRXBsRixNQUFPLFdBRTdERixPQUFPQyxlQUFlVixFQUFTLGFBQWMsQ0FBRVcsT0FBTyxLQ0x2RDBzSSxFQUFvQkssSUFBT3p0SSxJQUMxQkEsRUFBT2tyRixNQUFRLEdBQ1ZsckYsRUFBT3V4QixXQUFVdnhCLEVBQU91eEIsU0FBVyxJQUNqQ3Z4QixHTEFEb3RJLEVBQW9CLE8iLCJmaWxlIjoiZmFjZXRUcmVlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiZmFjZXRUcmVlXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImZhY2V0VHJlZVwiXSA9IGZhY3RvcnkoKTtcbn0pKHNlbGYsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRpbnljb2xvcjJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwidGlueWNvbG9yMlwiKSk7XG52YXIgaHVlU3RlcCA9IDI7IC8vIOiJsuebuOmYtuair1xudmFyIHNhdHVyYXRpb25TdGVwID0gMTY7IC8vIOmlseWSjOW6pumYtuair++8jOa1heiJsumDqOWIhlxudmFyIHNhdHVyYXRpb25TdGVwMiA9IDU7IC8vIOmlseWSjOW6pumYtuair++8jOa3seiJsumDqOWIhlxudmFyIGJyaWdodG5lc3NTdGVwMSA9IDU7IC8vIOS6ruW6pumYtuair++8jOa1heiJsumDqOWIhlxudmFyIGJyaWdodG5lc3NTdGVwMiA9IDE1OyAvLyDkuq7luqbpmLbmoq/vvIzmt7HoibLpg6jliIZcbnZhciBsaWdodENvbG9yQ291bnQgPSA1OyAvLyDmtYXoibLmlbDph4/vvIzkuLvoibLkuIpcbnZhciBkYXJrQ29sb3JDb3VudCA9IDQ7IC8vIOa3seiJsuaVsOmHj++8jOS4u+iJsuS4i1xuZnVuY3Rpb24gZ2V0SHVlKGhzdiwgaSwgbGlnaHQpIHtcbiAgICB2YXIgaHVlO1xuICAgIC8vIOagueaNruiJsuebuOS4jeWQjO+8jOiJsuebuOi9rOWQkeS4jeWQjFxuICAgIGlmIChNYXRoLnJvdW5kKGhzdi5oKSA+PSA2MCAmJiBNYXRoLnJvdW5kKGhzdi5oKSA8PSAyNDApIHtcbiAgICAgICAgaHVlID0gbGlnaHQgPyBNYXRoLnJvdW5kKGhzdi5oKSAtIGh1ZVN0ZXAgKiBpIDogTWF0aC5yb3VuZChoc3YuaCkgKyBodWVTdGVwICogaTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGh1ZSA9IGxpZ2h0ID8gTWF0aC5yb3VuZChoc3YuaCkgKyBodWVTdGVwICogaSA6IE1hdGgucm91bmQoaHN2LmgpIC0gaHVlU3RlcCAqIGk7XG4gICAgfVxuICAgIGlmIChodWUgPCAwKSB7XG4gICAgICAgIGh1ZSArPSAzNjA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGh1ZSA+PSAzNjApIHtcbiAgICAgICAgaHVlIC09IDM2MDtcbiAgICB9XG4gICAgcmV0dXJuIGh1ZTtcbn1cbmZ1bmN0aW9uIGdldFNhdHVyYXRpb24oaHN2LCBpLCBsaWdodCkge1xuICAgIC8vIGdyZXkgY29sb3IgZG9uJ3QgY2hhbmdlIHNhdHVyYXRpb25cbiAgICBpZiAoaHN2LmggPT09IDAgJiYgaHN2LnMgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGhzdi5zO1xuICAgIH1cbiAgICB2YXIgc2F0dXJhdGlvbjtcbiAgICBpZiAobGlnaHQpIHtcbiAgICAgICAgc2F0dXJhdGlvbiA9IE1hdGgucm91bmQoaHN2LnMgKiAxMDApIC0gc2F0dXJhdGlvblN0ZXAgKiBpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpID09PSBkYXJrQ29sb3JDb3VudCkge1xuICAgICAgICBzYXR1cmF0aW9uID0gTWF0aC5yb3VuZChoc3YucyAqIDEwMCkgKyBzYXR1cmF0aW9uU3RlcDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNhdHVyYXRpb24gPSBNYXRoLnJvdW5kKGhzdi5zICogMTAwKSArIHNhdHVyYXRpb25TdGVwMiAqIGk7XG4gICAgfVxuICAgIC8vIOi+ueeVjOWAvOS/ruato1xuICAgIGlmIChzYXR1cmF0aW9uID4gMTAwKSB7XG4gICAgICAgIHNhdHVyYXRpb24gPSAxMDA7XG4gICAgfVxuICAgIC8vIOesrOS4gOagvOeahCBzIOmZkOWItuWcqCA2LTEwIOS5i+mXtFxuICAgIGlmIChsaWdodCAmJiBpID09PSBsaWdodENvbG9yQ291bnQgJiYgc2F0dXJhdGlvbiA+IDEwKSB7XG4gICAgICAgIHNhdHVyYXRpb24gPSAxMDtcbiAgICB9XG4gICAgaWYgKHNhdHVyYXRpb24gPCA2KSB7XG4gICAgICAgIHNhdHVyYXRpb24gPSA2O1xuICAgIH1cbiAgICByZXR1cm4gc2F0dXJhdGlvbjtcbn1cbmZ1bmN0aW9uIGdldFZhbHVlKGhzdiwgaSwgbGlnaHQpIHtcbiAgICBpZiAobGlnaHQpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoaHN2LnYgKiAxMDApICsgYnJpZ2h0bmVzc1N0ZXAxICogaTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgucm91bmQoaHN2LnYgKiAxMDApIC0gYnJpZ2h0bmVzc1N0ZXAyICogaTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlKGNvbG9yKSB7XG4gICAgdmFyIHBhdHRlcm5zID0gW107XG4gICAgdmFyIHBDb2xvciA9IHRpbnljb2xvcjJfMS5kZWZhdWx0KGNvbG9yKTtcbiAgICBmb3IgKHZhciBpID0gbGlnaHRDb2xvckNvdW50OyBpID4gMDsgaSAtPSAxKSB7XG4gICAgICAgIHZhciBoc3YgPSBwQ29sb3IudG9Ic3YoKTtcbiAgICAgICAgdmFyIGNvbG9yU3RyaW5nID0gdGlueWNvbG9yMl8xLmRlZmF1bHQoe1xuICAgICAgICAgICAgaDogZ2V0SHVlKGhzdiwgaSwgdHJ1ZSksXG4gICAgICAgICAgICBzOiBnZXRTYXR1cmF0aW9uKGhzdiwgaSwgdHJ1ZSksXG4gICAgICAgICAgICB2OiBnZXRWYWx1ZShoc3YsIGksIHRydWUpLFxuICAgICAgICB9KS50b0hleFN0cmluZygpO1xuICAgICAgICBwYXR0ZXJucy5wdXNoKGNvbG9yU3RyaW5nKTtcbiAgICB9XG4gICAgcGF0dGVybnMucHVzaChwQ29sb3IudG9IZXhTdHJpbmcoKSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gZGFya0NvbG9yQ291bnQ7IGkgKz0gMSkge1xuICAgICAgICB2YXIgaHN2ID0gcENvbG9yLnRvSHN2KCk7XG4gICAgICAgIHZhciBjb2xvclN0cmluZyA9IHRpbnljb2xvcjJfMS5kZWZhdWx0KHtcbiAgICAgICAgICAgIGg6IGdldEh1ZShoc3YsIGkpLFxuICAgICAgICAgICAgczogZ2V0U2F0dXJhdGlvbihoc3YsIGkpLFxuICAgICAgICAgICAgdjogZ2V0VmFsdWUoaHN2LCBpKSxcbiAgICAgICAgfSkudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgcGF0dGVybnMucHVzaChjb2xvclN0cmluZyk7XG4gICAgfVxuICAgIHJldHVybiBwYXR0ZXJucztcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGdlbmVyYXRlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZ2VuZXJhdGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9nZW5lcmF0ZVwiKSk7XG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGVfMS5kZWZhdWx0O1xudmFyIHByZXNldFByaW1hcnlDb2xvcnMgPSB7XG4gICAgcmVkOiAnI0Y1MjIyRCcsXG4gICAgdm9sY2FubzogJyNGQTU0MUMnLFxuICAgIG9yYW5nZTogJyNGQThDMTYnLFxuICAgIGdvbGQ6ICcjRkFBRDE0JyxcbiAgICB5ZWxsb3c6ICcjRkFEQjE0JyxcbiAgICBsaW1lOiAnI0EwRDkxMScsXG4gICAgZ3JlZW46ICcjNTJDNDFBJyxcbiAgICBjeWFuOiAnIzEzQzJDMicsXG4gICAgYmx1ZTogJyMxODkwRkYnLFxuICAgIGdlZWtibHVlOiAnIzJGNTRFQicsXG4gICAgcHVycGxlOiAnIzcyMkVEMScsXG4gICAgbWFnZW50YTogJyNFQjJGOTYnLFxuICAgIGdyZXk6ICcjNjY2NjY2Jyxcbn07XG5leHBvcnRzLnByZXNldFByaW1hcnlDb2xvcnMgPSBwcmVzZXRQcmltYXJ5Q29sb3JzO1xudmFyIHByZXNldFBhbGV0dGVzID0ge307XG5leHBvcnRzLnByZXNldFBhbGV0dGVzID0gcHJlc2V0UGFsZXR0ZXM7XG5PYmplY3Qua2V5cyhwcmVzZXRQcmltYXJ5Q29sb3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBwcmVzZXRQYWxldHRlc1trZXldID0gZ2VuZXJhdGVfMS5kZWZhdWx0KHByZXNldFByaW1hcnlDb2xvcnNba2V5XSk7XG4gICAgcHJlc2V0UGFsZXR0ZXNba2V5XS5wcmltYXJ5ID0gcHJlc2V0UGFsZXR0ZXNba2V5XVs1XTtcbn0pO1xudmFyIHJlZCA9IHByZXNldFBhbGV0dGVzLnJlZDtcbmV4cG9ydHMucmVkID0gcmVkO1xudmFyIHZvbGNhbm8gPSBwcmVzZXRQYWxldHRlcy52b2xjYW5vO1xuZXhwb3J0cy52b2xjYW5vID0gdm9sY2FubztcbnZhciBnb2xkID0gcHJlc2V0UGFsZXR0ZXMuZ29sZDtcbmV4cG9ydHMuZ29sZCA9IGdvbGQ7XG52YXIgb3JhbmdlID0gcHJlc2V0UGFsZXR0ZXMub3JhbmdlO1xuZXhwb3J0cy5vcmFuZ2UgPSBvcmFuZ2U7XG52YXIgeWVsbG93ID0gcHJlc2V0UGFsZXR0ZXMueWVsbG93O1xuZXhwb3J0cy55ZWxsb3cgPSB5ZWxsb3c7XG52YXIgbGltZSA9IHByZXNldFBhbGV0dGVzLmxpbWU7XG5leHBvcnRzLmxpbWUgPSBsaW1lO1xudmFyIGdyZWVuID0gcHJlc2V0UGFsZXR0ZXMuZ3JlZW47XG5leHBvcnRzLmdyZWVuID0gZ3JlZW47XG52YXIgY3lhbiA9IHByZXNldFBhbGV0dGVzLmN5YW47XG5leHBvcnRzLmN5YW4gPSBjeWFuO1xudmFyIGJsdWUgPSBwcmVzZXRQYWxldHRlcy5ibHVlO1xuZXhwb3J0cy5ibHVlID0gYmx1ZTtcbnZhciBnZWVrYmx1ZSA9IHByZXNldFBhbGV0dGVzLmdlZWtibHVlO1xuZXhwb3J0cy5nZWVrYmx1ZSA9IGdlZWtibHVlO1xudmFyIHB1cnBsZSA9IHByZXNldFBhbGV0dGVzLnB1cnBsZTtcbmV4cG9ydHMucHVycGxlID0gcHVycGxlO1xudmFyIG1hZ2VudGEgPSBwcmVzZXRQYWxldHRlcy5tYWdlbnRhO1xuZXhwb3J0cy5tYWdlbnRhID0gbWFnZW50YTtcbnZhciBncmV5ID0gcHJlc2V0UGFsZXR0ZXMuZ3JleTtcbmV4cG9ydHMuZ3JleSA9IGdyZXk7XG4iLCJleHBvcnQgdmFyIG5hbWUgPSBcImQzXCI7XG5leHBvcnQgdmFyIHZlcnNpb24gPSBcIjUuMTYuMFwiO1xuZXhwb3J0IHZhciBkZXNjcmlwdGlvbiA9IFwiRGF0YS1Ecml2ZW4gRG9jdW1lbnRzXCI7XG5leHBvcnQgdmFyIGtleXdvcmRzID0gW1wiZG9tXCIsXCJ2aXN1YWxpemF0aW9uXCIsXCJzdmdcIixcImFuaW1hdGlvblwiLFwiY2FudmFzXCJdO1xuZXhwb3J0IHZhciBob21lcGFnZSA9IFwiaHR0cHM6Ly9kM2pzLm9yZ1wiO1xuZXhwb3J0IHZhciBsaWNlbnNlID0gXCJCU0QtMy1DbGF1c2VcIjtcbmV4cG9ydCB2YXIgYXV0aG9yID0ge1wibmFtZVwiOlwiTWlrZSBCb3N0b2NrXCIsXCJ1cmxcIjpcImh0dHBzOi8vYm9zdC5vY2tzLm9yZy9taWtlXCJ9O1xuZXhwb3J0IHZhciBtYWluID0gXCJkaXN0L2QzLm5vZGUuanNcIjtcbmV4cG9ydCB2YXIgdW5wa2cgPSBcImRpc3QvZDMubWluLmpzXCI7XG5leHBvcnQgdmFyIGpzZGVsaXZyID0gXCJkaXN0L2QzLm1pbi5qc1wiO1xuZXhwb3J0IHZhciBtb2R1bGUgPSBcImluZGV4LmpzXCI7XG5leHBvcnQgdmFyIHJlcG9zaXRvcnkgPSB7XCJ0eXBlXCI6XCJnaXRcIixcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLmdpdFwifTtcbmV4cG9ydCB2YXIgZmlsZXMgPSBbXCJkaXN0LyoqLyouanNcIixcImluZGV4LmpzXCJdO1xuZXhwb3J0IHZhciBzY3JpcHRzID0ge1wicHJldGVzdFwiOlwicmltcmFmIGRpc3QgJiYgbWtkaXIgZGlzdCAmJiBqc29uMm1vZHVsZSBwYWNrYWdlLmpzb24gPiBkaXN0L3BhY2thZ2UuanMgJiYgcm9sbHVwIC1jXCIsXCJ0ZXN0XCI6XCJ0YXBlICd0ZXN0LyoqLyotdGVzdC5qcydcIixcInByZXB1Ymxpc2hPbmx5XCI6XCJ5YXJuIHRlc3RcIixcInBvc3RwdWJsaXNoXCI6XCJnaXQgcHVzaCAmJiBnaXQgcHVzaCAtLXRhZ3MgJiYgY2QgLi4vZDMuZ2l0aHViLmNvbSAmJiBnaXQgcHVsbCAmJiBjcCAuLi9kMy9kaXN0L2QzLmpzIGQzLnY1LmpzICYmIGNwIC4uL2QzL2Rpc3QvZDMubWluLmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgYWRkIGQzLnY1LmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCJkMyAke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgcHVzaCAmJiBjZCAtICYmIGNkIC4uL2QzLWJvd2VyICYmIGdpdCBwdWxsICYmIGNwIC4uL2QzL0xJQ0VOU0UgLi4vZDMvUkVBRE1FLm1kIC4uL2QzL2Rpc3QvZDMuanMgLi4vZDMvZGlzdC9kMy5taW4uanMgLiAmJiBnaXQgYWRkIC0tIExJQ0VOU0UgUkVBRE1FLm1kIGQzLmpzIGQzLm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCIke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgdGFnIC1hbSBcXFwiJHtucG1fcGFja2FnZV92ZXJzaW9ufVxcXCIgdiR7bnBtX3BhY2thZ2VfdmVyc2lvbn0gJiYgZ2l0IHB1c2ggJiYgZ2l0IHB1c2ggLS10YWdzICYmIGNkIC0gJiYgemlwIC1qIGRpc3QvZDMuemlwIC0tIExJQ0VOU0UgUkVBRE1FLm1kIEFQSS5tZCBDSEFOR0VTLm1kIGRpc3QvZDMuanMgZGlzdC9kMy5taW4uanNcIn07XG5leHBvcnQgdmFyIGRldkRlcGVuZGVuY2llcyA9IHtcImpzb24ybW9kdWxlXCI6XCIwLjBcIixcInJpbXJhZlwiOlwiMlwiLFwicm9sbHVwXCI6XCIxXCIsXCJyb2xsdXAtcGx1Z2luLWFzY2lpXCI6XCIwLjBcIixcInJvbGx1cC1wbHVnaW4tbm9kZS1yZXNvbHZlXCI6XCIzXCIsXCJyb2xsdXAtcGx1Z2luLXRlcnNlclwiOlwiNVwiLFwidGFwZVwiOlwiNFwifTtcbmV4cG9ydCB2YXIgZGVwZW5kZW5jaWVzID0ge1wiZDMtYXJyYXlcIjpcIjFcIixcImQzLWF4aXNcIjpcIjFcIixcImQzLWJydXNoXCI6XCIxXCIsXCJkMy1jaG9yZFwiOlwiMVwiLFwiZDMtY29sbGVjdGlvblwiOlwiMVwiLFwiZDMtY29sb3JcIjpcIjFcIixcImQzLWNvbnRvdXJcIjpcIjFcIixcImQzLWRpc3BhdGNoXCI6XCIxXCIsXCJkMy1kcmFnXCI6XCIxXCIsXCJkMy1kc3ZcIjpcIjFcIixcImQzLWVhc2VcIjpcIjFcIixcImQzLWZldGNoXCI6XCIxXCIsXCJkMy1mb3JjZVwiOlwiMVwiLFwiZDMtZm9ybWF0XCI6XCIxXCIsXCJkMy1nZW9cIjpcIjFcIixcImQzLWhpZXJhcmNoeVwiOlwiMVwiLFwiZDMtaW50ZXJwb2xhdGVcIjpcIjFcIixcImQzLXBhdGhcIjpcIjFcIixcImQzLXBvbHlnb25cIjpcIjFcIixcImQzLXF1YWR0cmVlXCI6XCIxXCIsXCJkMy1yYW5kb21cIjpcIjFcIixcImQzLXNjYWxlXCI6XCIyXCIsXCJkMy1zY2FsZS1jaHJvbWF0aWNcIjpcIjFcIixcImQzLXNlbGVjdGlvblwiOlwiMVwiLFwiZDMtc2hhcGVcIjpcIjFcIixcImQzLXRpbWVcIjpcIjFcIixcImQzLXRpbWUtZm9ybWF0XCI6XCIyXCIsXCJkMy10aW1lclwiOlwiMVwiLFwiZDMtdHJhbnNpdGlvblwiOlwiMVwiLFwiZDMtdm9yb25vaVwiOlwiMVwiLFwiZDMtem9vbVwiOlwiMVwifTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yXCI7XG5cbnZhciBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCB2YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgZikge1xuICBpZiAoZiA9PSBudWxsKSBmID0gcGFpcjtcbiAgdmFyIGkgPSAwLCBuID0gYXJyYXkubGVuZ3RoIC0gMSwgcCA9IGFycmF5WzBdLCBwYWlycyA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgd2hpbGUgKGkgPCBuKSBwYWlyc1tpXSA9IGYocCwgcCA9IGFycmF5WysraV0pO1xuICByZXR1cm4gcGFpcnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWlyKGEsIGIpIHtcbiAgcmV0dXJuIFthLCBiXTtcbn1cbiIsImltcG9ydCB7cGFpcn0gZnJvbSBcIi4vcGFpcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzMCwgdmFsdWVzMSwgcmVkdWNlKSB7XG4gIHZhciBuMCA9IHZhbHVlczAubGVuZ3RoLFxuICAgICAgbjEgPSB2YWx1ZXMxLmxlbmd0aCxcbiAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuMCAqIG4xKSxcbiAgICAgIGkwLFxuICAgICAgaTEsXG4gICAgICBpLFxuICAgICAgdmFsdWUwO1xuXG4gIGlmIChyZWR1Y2UgPT0gbnVsbCkgcmVkdWNlID0gcGFpcjtcblxuICBmb3IgKGkwID0gaSA9IDA7IGkwIDwgbjA7ICsraTApIHtcbiAgICBmb3IgKHZhbHVlMCA9IHZhbHVlczBbaTBdLCBpMSA9IDA7IGkxIDwgbjE7ICsraTEsICsraSkge1xuICAgICAgdmFsdWVzW2ldID0gcmVkdWNlKHZhbHVlMCwgdmFsdWVzMVtpMV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBiIDwgYSA/IC0xIDogYiA+IGEgPyAxIDogYiA+PSBhID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gMCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG1lYW4gPSAwLFxuICAgICAgdmFsdWUsXG4gICAgICBkZWx0YSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobSA+IDEpIHJldHVybiBzdW0gLyAobSAtIDEpO1xufVxuIiwiaW1wb3J0IHZhcmlhbmNlIGZyb20gXCIuL3ZhcmlhbmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gIHZhciB2ID0gdmFyaWFuY2UoYXJyYXksIGYpO1xuICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgKiBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgLSBpKSAvIHN0ZXA7XG4gIH1cblxuICBpZiAocmV2ZXJzZSkgdGlja3MucmV2ZXJzZSgpO1xuXG4gIHJldHVybiB0aWNrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKTtcbiAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpXG4gICAgICA6IC1NYXRoLnBvdygxMCwgLXBvd2VyKSAvIChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgcmV0dXJuIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yKSArIDE7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGJpc2VjdCBmcm9tIFwiLi9iaXNlY3RcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGV4dGVudCBmcm9tIFwiLi9leHRlbnRcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuaW1wb3J0IHJhbmdlIGZyb20gXCIuL3JhbmdlXCI7XG5pbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiLi90aWNrc1wiO1xuaW1wb3J0IHN0dXJnZXMgZnJvbSBcIi4vdGhyZXNob2xkL3N0dXJnZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgZG9tYWluID0gZXh0ZW50LFxuICAgICAgdGhyZXNob2xkID0gc3R1cmdlcztcblxuICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIHgsXG4gICAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHZhbHVlKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIH1cblxuICAgIHZhciB4eiA9IGRvbWFpbih2YWx1ZXMpLFxuICAgICAgICB4MCA9IHh6WzBdLFxuICAgICAgICB4MSA9IHh6WzFdLFxuICAgICAgICB0eiA9IHRocmVzaG9sZCh2YWx1ZXMsIHgwLCB4MSk7XG5cbiAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIHR6ID0gdGlja1N0ZXAoeDAsIHgxLCB0eik7XG4gICAgICB0eiA9IHJhbmdlKE1hdGguY2VpbCh4MCAvIHR6KSAqIHR6LCB4MSwgdHopOyAvLyBleGNsdXNpdmVcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYW55IHRocmVzaG9sZHMgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgIHZhciBtID0gdHoubGVuZ3RoO1xuICAgIHdoaWxlICh0elswXSA8PSB4MCkgdHouc2hpZnQoKSwgLS1tO1xuICAgIHdoaWxlICh0elttIC0gMV0gPiB4MSkgdHoucG9wKCksIC0tbTtcblxuICAgIHZhciBiaW5zID0gbmV3IEFycmF5KG0gKyAxKSxcbiAgICAgICAgYmluO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBiaW5zLlxuICAgIGZvciAoaSA9IDA7IGkgPD0gbTsgKytpKSB7XG4gICAgICBiaW4gPSBiaW5zW2ldID0gW107XG4gICAgICBiaW4ueDAgPSBpID4gMCA/IHR6W2kgLSAxXSA6IHgwO1xuICAgICAgYmluLngxID0gaSA8IG0gPyB0eltpXSA6IHgxO1xuICAgIH1cblxuICAgIC8vIEFzc2lnbiBkYXRhIHRvIGJpbnMgYnkgdmFsdWUsIGlnbm9yaW5nIGFueSBvdXRzaWRlIHRoZSBkb21haW4uXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgeCA9IHZhbHVlc1tpXTtcbiAgICAgIGlmICh4MCA8PSB4ICYmIHggPD0geDEpIHtcbiAgICAgICAgYmluc1tiaXNlY3QodHosIHgsIDAsIG0pXS5wdXNoKGRhdGFbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBiaW5zO1xuICB9XG5cbiAgaGlzdG9ncmFtLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHZhbHVlO1xuICB9O1xuXG4gIGhpc3RvZ3JhbS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbX1swXSwgX1sxXV0pLCBoaXN0b2dyYW0pIDogZG9tYWluO1xuICB9O1xuXG4gIGhpc3RvZ3JhbS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB0aHJlc2hvbGQ7XG4gIH07XG5cbiAgcmV0dXJuIGhpc3RvZ3JhbTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgcCwgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PSBudWxsKSB2YWx1ZW9mID0gbnVtYmVyO1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkpIHJldHVybjtcbiAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbMF0sIDAsIHZhbHVlcyk7XG4gIGlmIChwID49IDEpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbbiAtIDFdLCBuIC0gMSwgdmFsdWVzKTtcbiAgdmFyIG4sXG4gICAgICBpID0gKG4gLSAxKSAqIHAsXG4gICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICB2YWx1ZTAgPSArdmFsdWVvZih2YWx1ZXNbaTBdLCBpMCwgdmFsdWVzKSxcbiAgICAgIHZhbHVlMSA9ICt2YWx1ZW9mKHZhbHVlc1tpMCArIDFdLCBpMCArIDEsIHZhbHVlcyk7XG4gIHJldHVybiB2YWx1ZTAgKyAodmFsdWUxIC0gdmFsdWUwKSAqIChpIC0gaTApO1xufVxuIiwiaW1wb3J0IHttYXB9IGZyb20gXCIuLi9hcnJheVwiO1xuaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi4vcXVhbnRpbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBtaW4sIG1heCkge1xuICB2YWx1ZXMgPSBtYXAuY2FsbCh2YWx1ZXMsIG51bWJlcikuc29ydChhc2NlbmRpbmcpO1xuICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDIgKiAocXVhbnRpbGUodmFsdWVzLCAwLjc1KSAtIHF1YW50aWxlKHZhbHVlcywgMC4yNSkpICogTWF0aC5wb3codmFsdWVzLmxlbmd0aCwgLTEgLyAzKSkpO1xufVxuIiwiaW1wb3J0IGRldmlhdGlvbiBmcm9tIFwiLi4vZGV2aWF0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguY2VpbCgobWF4IC0gbWluKSAvICgzLjUgKiBkZXZpYXRpb24odmFsdWVzKSAqIE1hdGgucG93KHZhbHVlcy5sZW5ndGgsIC0xIC8gMykpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IG4sXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBpZiAobSkgcmV0dXJuIHN1bSAvIG07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi9xdWFudGlsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBudW1iZXJzID0gW107XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBxdWFudGlsZShudW1iZXJzLnNvcnQoYXNjZW5kaW5nKSwgMC41KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsXG4gICAgICBtLFxuICAgICAgaSA9IC0xLFxuICAgICAgaiA9IDAsXG4gICAgICBtZXJnZWQsXG4gICAgICBhcnJheTtcblxuICB3aGlsZSAoKytpIDwgbikgaiArPSBhcnJheXNbaV0ubGVuZ3RoO1xuICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG5cbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgYXJyYXkgPSBhcnJheXNbbl07XG4gICAgbSA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgIG1lcmdlZFstLWpdID0gYXJyYXlbbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLCBwZXJtdXRlcyA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkgcGVybXV0ZXNbaV0gPSBhcnJheVtpbmRleGVzW2ldXTtcbiAgcmV0dXJuIHBlcm11dGVzO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBjb21wYXJlKSB7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICB2YXIgbixcbiAgICAgIGkgPSAwLFxuICAgICAgaiA9IDAsXG4gICAgICB4aSxcbiAgICAgIHhqID0gdmFsdWVzW2pdO1xuXG4gIGlmIChjb21wYXJlID09IG51bGwpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBpZiAoY29tcGFyZSh4aSA9IHZhbHVlc1tpXSwgeGopIDwgMCB8fCBjb21wYXJlKHhqLCB4aikgIT09IDApIHtcbiAgICAgIHhqID0geGksIGogPSBpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb21wYXJlKHhqLCB4aikgPT09IDApIHJldHVybiBqO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIGkwLCBpMSkge1xuICB2YXIgbSA9IChpMSA9PSBudWxsID8gYXJyYXkubGVuZ3RoIDogaTEpIC0gKGkwID0gaTAgPT0gbnVsbCA/IDAgOiAraTApLFxuICAgICAgdCxcbiAgICAgIGk7XG5cbiAgd2hpbGUgKG0pIHtcbiAgICBpID0gTWF0aC5yYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgdCA9IGFycmF5W20gKyBpMF07XG4gICAgYXJyYXlbbSArIGkwXSA9IGFycmF5W2kgKyBpMF07XG4gICAgYXJyYXlbaSArIGkwXSA9IHQ7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlc1tpXSkgc3VtICs9IHZhbHVlOyAvLyBOb3RlOiB6ZXJvIGFuZCBudWxsIGFyZSBlcXVpdmFsZW50LlxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpIHN1bSArPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3VtO1xufVxuIiwiaW1wb3J0IG1pbiBmcm9tIFwiLi9taW5cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0cml4KSB7XG4gIGlmICghKG4gPSBtYXRyaXgubGVuZ3RoKSkgcmV0dXJuIFtdO1xuICBmb3IgKHZhciBpID0gLTEsIG0gPSBtaW4obWF0cml4LCBsZW5ndGgpLCB0cmFuc3Bvc2UgPSBuZXcgQXJyYXkobSk7ICsraSA8IG07KSB7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBuLCByb3cgPSB0cmFuc3Bvc2VbaV0gPSBuZXcgQXJyYXkobik7ICsraiA8IG47KSB7XG4gICAgICByb3dbal0gPSBtYXRyaXhbal1baV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0cmFuc3Bvc2U7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aChkKSB7XG4gIHJldHVybiBkLmxlbmd0aDtcbn1cbiIsImltcG9ydCB0cmFuc3Bvc2UgZnJvbSBcIi4vdHJhbnNwb3NlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdHJhbnNwb3NlKGFyZ3VtZW50cyk7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoeCArIDAuNSkgKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoeSArIDAuNSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKSArIG9mZnNldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCkpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKSk7XG5cbiAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICA/ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIMC41VlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTTAuNSxcIiArIHJhbmdlMCArIFwiVlwiICsgcmFuZ2UxKVxuICAgICAgICAgICAgOiAodGlja1NpemVPdXRlciA/IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIHJhbmdlMCArIFwiLDAuNUhcIiArIHJhbmdlMSkpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwidmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykgfHwgL1tcXHMuXS8udGVzdCh0KSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUoZmFsc2UpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVEZWVwKCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZSh0cnVlKSwgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICByZXR1cm4gcGFyZW50ID8gcGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0U2libGluZykgOiBjbG9uZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cbiIsInZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0IHZhciBldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCkpIHtcbiAgICBmaWx0ZXJFdmVudHMgPSB7bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwifTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgIHZhciBldmVudDAgPSBldmVudDsgLy8gRXZlbnRzIGNhbiBiZSByZWVudHJhbnQgKGUuZy4sIGZvY3VzKS5cbiAgICBldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gIHJldHVybiBmdW5jdGlvbihkLCBpLCBncm91cCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgaWYgKGNhcHR1cmUgPT0gbnVsbCkgY2FwdHVyZSA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgdmFyIGV2ZW50MCA9IGV2ZW50O1xuICBldmVudDEuc291cmNlRXZlbnQgPSBldmVudDtcbiAgZXZlbnQgPSBldmVudDE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9IGZpbmFsbHkge1xuICAgIGV2ZW50ID0gZXZlbnQwO1xuICB9XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXRcIjtcbmltcG9ydCBzZWxlY3Rpb25fam9pbiBmcm9tIFwiLi9qb2luXCI7XG5pbXBvcnQgc2VsZWN0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29yZGVyIGZyb20gXCIuL29yZGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NvcnQgZnJvbSBcIi4vc29ydFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jYWxsIGZyb20gXCIuL2NhbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZXMgZnJvbSBcIi4vbm9kZXNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZSBmcm9tIFwiLi9ub2RlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NpemUgZnJvbSBcIi4vc2l6ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbXB0eSBmcm9tIFwiLi9lbXB0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lYWNoIGZyb20gXCIuL2VhY2hcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3Byb3BlcnR5IGZyb20gXCIuL3Byb3BlcnR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NsYXNzZWQgZnJvbSBcIi4vY2xhc3NlZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCBzZWxlY3Rpb25faHRtbCBmcm9tIFwiLi9odG1sXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JhaXNlIGZyb20gXCIuL3JhaXNlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2xvd2VyIGZyb20gXCIuL2xvd2VyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2FwcGVuZCBmcm9tIFwiLi9hcHBlbmRcIjtcbmltcG9ydCBzZWxlY3Rpb25faW5zZXJ0IGZyb20gXCIuL2luc2VydFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Nsb25lIGZyb20gXCIuL2Nsb25lXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdHVtIGZyb20gXCIuL2RhdHVtXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Rpc3BhdGNoIGZyb20gXCIuL2Rpc3BhdGNoXCI7XG5cbmV4cG9ydCB2YXIgcm9vdCA9IFtudWxsXTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdGlvbihncm91cHMsIHBhcmVudHMpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgam9pbjogc2VsZWN0aW9uX2pvaW4sXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gIGNsb25lOiBzZWxlY3Rpb25fY2xvbmUsXG4gIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gIG9uOiBzZWxlY3Rpb25fb24sXG4gIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2hcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdGlvbjtcbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGVudGVyID0gdHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIiA/IG9uZW50ZXIoZW50ZXIpIDogZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9ldmVudCBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZpZXcpIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fX25vc2VsZWN0ID0gcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0O1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5ZXNkcmFnKHZpZXcsIG5vY2xpY2spIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG51bGwpO1xuICBpZiAobm9jbGljaykge1xuICAgIHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBudWxsKTsgfSwgMCk7XG4gIH1cbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICBkZWxldGUgcm9vdC5fX25vc2VsZWN0O1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleCA9IC9eIyhbMC05YS1mXXszLDh9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBjb3B5OiBmdW5jdGlvbihjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhzbCgpIHtcbiAgcmV0dXJuIGhzbENvbnZlcnQodGhpcykuZm9ybWF0SHNsKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdFJnYigpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0UmdiKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbSwgbDtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleC5leGVjKGZvcm1hdCkpID8gKGwgPSBtWzFdLmxlbmd0aCwgbSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbCA9PT0gNiA/IHJnYm4obSkgLy8gI2ZmMDAwMFxuICAgICAgOiBsID09PSAzID8gbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSAvLyAjZjAwXG4gICAgICA6IGwgPT09IDggPyByZ2JhKG0gPj4gMjQgJiAweGZmLCBtID4+IDE2ICYgMHhmZiwgbSA+PiA4ICYgMHhmZiwgKG0gJiAweGZmKSAvIDB4ZmYpIC8vICNmZjAwMDAwMFxuICAgICAgOiBsID09PSA0ID8gcmdiYSgobSA+PiAxMiAmIDB4ZikgfCAobSA+PiA4ICYgMHhmMCksIChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpKSAvIDB4ZmYpIC8vICNmMDAwXG4gICAgICA6IG51bGwpIC8vIGludmFsaWQgaGV4XG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgtMC41IDw9IHRoaXMuciAmJiB0aGlzLnIgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5nICYmIHRoaXMuZyA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmIgJiYgdGhpcy5iIDwgMjU1LjUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogcmdiX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiByZ2JfZm9ybWF0SGV4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdFJnYigpIHtcbiAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgZm9ybWF0SHNsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcImhzbChcIiA6IFwiaHNsYShcIilcbiAgICAgICAgKyAodGhpcy5oIHx8IDApICsgXCIsIFwiXG4gICAgICAgICsgKHRoaXMucyB8fCAwKSAqIDEwMCArIFwiJSwgXCJcbiAgICAgICAgKyAodGhpcy5sIHx8IDApICogMTAwICsgXCIlXCJcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiaW1wb3J0IHtiYXNpc30gZnJvbSBcIi4vYmFzaXMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKCh0ICU9IDEpIDwgMCA/ICsrdCA6IHQpICogbiksXG4gICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgIHYxID0gdmFsdWVzW2kgJSBuXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbKGkgKyAxKSAlIG5dLFxuICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICBpZiAoIWIpIGIgPSBbXTtcbiAgdmFyIG4gPSBhID8gTWF0aC5taW4oYi5sZW5ndGgsIGEubGVuZ3RoKSA6IDAsXG4gICAgICBjID0gYi5zbGljZSgpLFxuICAgICAgaTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjW2ldID0gYVtpXSAqICgxIC0gdCkgKyBiW2ldICogdDtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyQXJyYXkoeCkge1xuICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHgpICYmICEoeCBpbnN0YW5jZW9mIERhdGFWaWV3KTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gKGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheSA6IGdlbmVyaWNBcnJheSkoYSwgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmljQXJyYXkoYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5hKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IHZhbHVlKGFbaV0sIGJbaV0pO1xuICBmb3IgKDsgaSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKiAoMSAtIHQpICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2IuanNcIjtcbmltcG9ydCB7Z2VuZXJpY0FycmF5fSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZS5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0LmpzXCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZy5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gY29sb3IoYikpID8gKGIgPSBjLCByZ2IpIDogc3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyByZ2JcbiAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICA6IGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gZ2VuZXJpY0FycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiLi9zZWxlY3Rpb24vb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJyZW50ID0gZXZlbnQsIHNvdXJjZTtcbiAgd2hpbGUgKHNvdXJjZSA9IGN1cnJlbnQuc291cmNlRXZlbnQpIGN1cnJlbnQgPSBzb3VyY2U7XG4gIHJldHVybiBjdXJyZW50O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgZXZlbnQpIHtcbiAgdmFyIHN2ZyA9IG5vZGUub3duZXJTVkdFbGVtZW50IHx8IG5vZGU7XG5cbiAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYLCBwb2ludC55ID0gZXZlbnQuY2xpZW50WTtcbiAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgcmV0dXJuIFtwb2ludC54LCBwb2ludC55XTtcbiAgfVxuXG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gbm9kZS5jbGllbnRMZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSBub2RlLmNsaWVudFRvcF07XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnRcIjtcbmltcG9ydCBwb2ludCBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCB0b3VjaGVzLCBpZGVudGlmaWVyKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgaWRlbnRpZmllciA9IHRvdWNoZXMsIHRvdWNoZXMgPSBzb3VyY2VFdmVudCgpLmNoYW5nZWRUb3VjaGVzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcyA/IHRvdWNoZXMubGVuZ3RoIDogMCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKHRvdWNoID0gdG91Y2hlc1tpXSkuaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmV0dXJuIHBvaW50KG5vZGUsIHRvdWNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudFwiO1xuaW1wb3J0IHBvaW50IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdmFyIGV2ZW50ID0gc291cmNlRXZlbnQoKTtcbiAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSBldmVudCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICByZXR1cm4gcG9pbnQobm9kZSwgZXZlbnQpO1xufVxuIiwidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImNhbmNlbFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobm9kZSwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIHNjaGVkdWxlLm9uLmNhbGwoYWN0aXZlID8gXCJpbnRlcnJ1cHRcIiA6IFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZS5qc1wiO1xuXG52YXIgY3NzTm9kZSxcbiAgICBjc3NSb290LFxuICAgIGNzc1ZpZXcsXG4gICAgc3ZnTm9kZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyLmpzXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2UuanNcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0KHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICB0cmFuc2l0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUudmFsdWUgfHwgKHNjaGVkdWxlLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldChub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gIH07XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fb24gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3QuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGwuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdGlvbiBmcm9tIFwiLi9zZWxlY3Rpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZVR3ZWVuIGZyb20gXCIuL3N0eWxlVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHQgZnJvbSBcIi4vdGV4dC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dFR3ZWVuIGZyb20gXCIuL3RleHRUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90d2VlbiBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZW5kIGZyb20gXCIuL2VuZC5qc1wiO1xuXG52YXIgaWQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gVHJhbnNpdGlvbihncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gIHRoaXMuX25hbWUgPSBuYW1lO1xuICB0aGlzLl9pZCA9IGlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdGlvbigpLnRyYW5zaXRpb24obmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdJZCgpIHtcbiAgcmV0dXJuICsraWQ7XG59XG5cbnZhciBzZWxlY3Rpb25fcHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZTtcblxuVHJhbnNpdGlvbi5wcm90b3R5cGUgPSB0cmFuc2l0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zaXRpb24sXG4gIHNlbGVjdDogdHJhbnNpdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogdHJhbnNpdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXG4gIG1lcmdlOiB0cmFuc2l0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXG4gIGNhbGw6IHNlbGVjdGlvbl9wcm90b3R5cGUuY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxuICBvbjogdHJhbnNpdGlvbl9vbixcbiAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxuICBzdHlsZTogdHJhbnNpdGlvbl9zdHlsZSxcbiAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXG4gIHRleHRUd2VlbjogdHJhbnNpdGlvbl90ZXh0VHdlZW4sXG4gIHJlbW92ZTogdHJhbnNpdGlvbl9yZW1vdmUsXG4gIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25fZHVyYXRpb24sXG4gIGVhc2U6IHRyYW5zaXRpb25fZWFzZSxcbiAgZW5kOiB0cmFuc2l0aW9uX2VuZFxufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBvbjAsIG9uMSwgdGhhdCA9IHRoaXMsIGlkID0gdGhhdC5faWQsIHNpemUgPSB0aGF0LnNpemUoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjYW5jZWwgPSB7dmFsdWU6IHJlamVjdH0sXG4gICAgICAgIGVuZCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7IGlmICgtLXNpemUgPT09IDApIHJlc29sdmUoKTsgfX07XG5cbiAgICB0aGF0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkge1xuICAgICAgICBvbjEgPSAob24wID0gb24pLmNvcHkoKTtcbiAgICAgICAgb24xLl8uY2FuY2VsLnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uaW50ZXJydXB0LnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uZW5kLnB1c2goZW5kKTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vdHJhbnNpdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHtTQ0hFRFVMRUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcblxudmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUsXG4gICAgICBpO1xuXG4gIGlmIChzY2hlZHVsZXMpIHtcbiAgICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLnN0YXRlID4gU0NIRURVTEVEICYmIHNjaGVkdWxlLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKFtbbm9kZV1dLCByb290LCBuYW1lLCAraSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwgdHlwZSwgc2VsZWN0aW9uKSB7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7Y3VzdG9tRXZlbnQsIGV2ZW50LCB0b3VjaCwgbW91c2UsIHNlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtpbnRlcnJ1cHR9IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBCcnVzaEV2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnQuanNcIjtcblxudmFyIE1PREVfRFJBRyA9IHtuYW1lOiBcImRyYWdcIn0sXG4gICAgTU9ERV9TUEFDRSA9IHtuYW1lOiBcInNwYWNlXCJ9LFxuICAgIE1PREVfSEFORExFID0ge25hbWU6IFwiaGFuZGxlXCJ9LFxuICAgIE1PREVfQ0VOVEVSID0ge25hbWU6IFwiY2VudGVyXCJ9O1xuXG5mdW5jdGlvbiBudW1iZXIxKGUpIHtcbiAgcmV0dXJuIFsrZVswXSwgK2VbMV1dO1xufVxuXG5mdW5jdGlvbiBudW1iZXIyKGUpIHtcbiAgcmV0dXJuIFtudW1iZXIxKGVbMF0pLCBudW1iZXIxKGVbMV0pXTtcbn1cblxuZnVuY3Rpb24gdG91Y2hlcihpZGVudGlmaWVyKSB7XG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICByZXR1cm4gdG91Y2godGFyZ2V0LCBldmVudC50b3VjaGVzLCBpZGVudGlmaWVyKTtcbiAgfTtcbn1cblxudmFyIFggPSB7XG4gIG5hbWU6IFwieFwiLFxuICBoYW5kbGVzOiBbXCJ3XCIsIFwiZVwiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih4LCBlKSB7IHJldHVybiB4ID09IG51bGwgPyBudWxsIDogW1sreFswXSwgZVswXVsxXV0sIFsreFsxXSwgZVsxXVsxXV1dOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMF0sIHh5WzFdWzBdXTsgfVxufTtcblxudmFyIFkgPSB7XG4gIG5hbWU6IFwieVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwic1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih5LCBlKSB7IHJldHVybiB5ID09IG51bGwgPyBudWxsIDogW1tlWzBdWzBdLCAreVswXV0sIFtlWzFdWzBdLCAreVsxXV1dOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMV0sIHh5WzFdWzFdXTsgfVxufTtcblxudmFyIFhZID0ge1xuICBuYW1lOiBcInh5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJ3XCIsIFwiZVwiLCBcInNcIiwgXCJud1wiLCBcIm5lXCIsIFwic3dcIiwgXCJzZVwiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgPT0gbnVsbCA/IG51bGwgOiBudW1iZXIyKHh5KTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH1cbn07XG5cbnZhciBjdXJzb3JzID0ge1xuICBvdmVybGF5OiBcImNyb3NzaGFpclwiLFxuICBzZWxlY3Rpb246IFwibW92ZVwiLFxuICBuOiBcIm5zLXJlc2l6ZVwiLFxuICBlOiBcImV3LXJlc2l6ZVwiLFxuICBzOiBcIm5zLXJlc2l6ZVwiLFxuICB3OiBcImV3LXJlc2l6ZVwiLFxuICBudzogXCJud3NlLXJlc2l6ZVwiLFxuICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuICBzZTogXCJud3NlLXJlc2l6ZVwiLFxuICBzdzogXCJuZXN3LXJlc2l6ZVwiXG59O1xuXG52YXIgZmxpcFggPSB7XG4gIGU6IFwid1wiLFxuICB3OiBcImVcIixcbiAgbnc6IFwibmVcIixcbiAgbmU6IFwibndcIixcbiAgc2U6IFwic3dcIixcbiAgc3c6IFwic2VcIlxufTtcblxudmFyIGZsaXBZID0ge1xuICBuOiBcInNcIixcbiAgczogXCJuXCIsXG4gIG53OiBcInN3XCIsXG4gIG5lOiBcInNlXCIsXG4gIHNlOiBcIm5lXCIsXG4gIHN3OiBcIm53XCJcbn07XG5cbnZhciBzaWduc1ggPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiBudWxsLFxuICBlOiArMSxcbiAgczogbnVsbCxcbiAgdzogLTEsXG4gIG53OiAtMSxcbiAgbmU6ICsxLFxuICBzZTogKzEsXG4gIHN3OiAtMVxufTtcblxudmFyIHNpZ25zWSA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IC0xLFxuICBlOiBudWxsLFxuICBzOiArMSxcbiAgdzogbnVsbCxcbiAgbnc6IC0xLFxuICBuZTogLTEsXG4gIHNlOiArMSxcbiAgc3c6ICsxXG59O1xuXG5mdW5jdGlvbiB0eXBlKHQpIHtcbiAgcmV0dXJuIHt0eXBlOiB0fTtcbn1cblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIHN2ZyA9IHRoaXMub3duZXJTVkdFbGVtZW50IHx8IHRoaXM7XG4gIGlmIChzdmcuaGFzQXR0cmlidXRlKFwidmlld0JveFwiKSkge1xuICAgIHN2ZyA9IHN2Zy52aWV3Qm94LmJhc2VWYWw7XG4gICAgcmV0dXJuIFtbc3ZnLngsIHN2Zy55XSwgW3N2Zy54ICsgc3ZnLndpZHRoLCBzdmcueSArIHN2Zy5oZWlnaHRdXTtcbiAgfVxuICByZXR1cm4gW1swLCAwXSwgW3N2Zy53aWR0aC5iYXNlVmFsLnZhbHVlLCBzdmcuaGVpZ2h0LmJhc2VWYWwudmFsdWVdXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCAoXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzKTtcbn1cblxuLy8gTGlrZSBkMy5sb2NhbCwgYnV0IHdpdGggdGhlIG5hbWUg4oCcX19icnVzaOKAnSByYXRoZXIgdGhhbiBhdXRvLWdlbmVyYXRlZC5cbmZ1bmN0aW9uIGxvY2FsKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fYnJ1c2gpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gIHJldHVybiBub2RlLl9fYnJ1c2g7XG59XG5cbmZ1bmN0aW9uIGVtcHR5KGV4dGVudCkge1xuICByZXR1cm4gZXh0ZW50WzBdWzBdID09PSBleHRlbnRbMV1bMF1cbiAgICAgIHx8IGV4dGVudFswXVsxXSA9PT0gZXh0ZW50WzFdWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hTZWxlY3Rpb24obm9kZSkge1xuICB2YXIgc3RhdGUgPSBub2RlLl9fYnJ1c2g7XG4gIHJldHVybiBzdGF0ZSA/IHN0YXRlLmRpbS5vdXRwdXQoc3RhdGUuc2VsZWN0aW9uKSA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFgoKSB7XG4gIHJldHVybiBicnVzaChYKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWSgpIHtcbiAgcmV0dXJuIGJydXNoKFkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGJydXNoKFhZKTtcbn1cblxuZnVuY3Rpb24gYnJ1c2goZGltKSB7XG4gIHZhciBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBrZXlzID0gdHJ1ZSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJicnVzaFwiLCBcImVuZFwiKSxcbiAgICAgIGhhbmRsZVNpemUgPSA2LFxuICAgICAgdG91Y2hlbmRpbmc7XG5cbiAgZnVuY3Rpb24gYnJ1c2goZ3JvdXApIHtcbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fYnJ1c2hcIiwgaW5pdGlhbGl6ZSlcbiAgICAgIC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJvdmVybGF5XCIpXSk7XG5cbiAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwib3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSlcbiAgICAgIC5tZXJnZShvdmVybGF5KVxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZXh0ZW50ID0gbG9jYWwodGhpcykuZXh0ZW50O1xuICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXh0ZW50WzBdWzFdKVxuICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdKTtcbiAgICAgICAgfSk7XG5cbiAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAuZGF0YShbdHlwZShcInNlbGVjdGlvblwiKV0pXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiM3NzdcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIilcbiAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJjcmlzcEVkZ2VzXCIpO1xuXG4gICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgIC5kYXRhKGRpbS5oYW5kbGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGU7IH0pO1xuXG4gICAgaGFuZGxlLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgIGhhbmRsZS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImhhbmRsZSBoYW5kbGUtLVwiICsgZC50eXBlOyB9KVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjdXJzb3JzW2QudHlwZV07IH0pO1xuXG4gICAgZ3JvdXBcbiAgICAgICAgLmVhY2gocmVkcmF3KVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5icnVzaFwiLCBzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24pIHtcbiAgICBpZiAoZ3JvdXAuc2VsZWN0aW9uKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydCgpOyB9KVxuICAgICAgICAgIC5vbihcImludGVycnVwdC5icnVzaCBlbmQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoc2VsZWN0aW9uMCwgc2VsZWN0aW9uMSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24wICE9PSBudWxsICYmIHNlbGVjdGlvbjEgIT09IG51bGwgPyB0d2VlbiA6IHR3ZWVuKDEpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJncykuYmVmb3Jlc3RhcnQoKTtcblxuICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PT0gbnVsbCA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LnN0YXJ0KCkuYnJ1c2goKS5lbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgYnJ1c2guY2xlYXIgPSBmdW5jdGlvbihncm91cCkge1xuICAgIGJydXNoLm1vdmUoZ3JvdXAsIG51bGwpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlZHJhdygpIHtcbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhpcyksXG4gICAgICAgIHNlbGVjdGlvbiA9IGxvY2FsKHRoaXMpLnNlbGVjdGlvbjtcblxuICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgc2VsZWN0aW9uWzBdWzFdKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSk7XG5cbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVtkLnR5cGUubGVuZ3RoIC0gMV0gPT09IFwiZVwiID8gc2VsZWN0aW9uWzFdWzBdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMF0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlWzBdID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVsxXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzFdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiblwiIHx8IGQudHlwZSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiZVwiIHx8IGQudHlwZSA9PT0gXCJ3XCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uLC5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0dGVyKHRoYXQsIGFyZ3MsIGNsZWFuKSB7XG4gICAgcmV0dXJuICghY2xlYW4gJiYgdGhhdC5fX2JydXNoLmVtaXR0ZXIpIHx8IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gRW1pdHRlcih0aGF0LCBhcmdzKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuc3RhdGUgPSB0aGF0Ll9fYnJ1c2g7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICB9XG5cbiAgRW1pdHRlci5wcm90b3R5cGUgPSB7XG4gICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zdGFydGluZykgdGhpcy5zdGFydGluZyA9IGZhbHNlLCB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIGVsc2UgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGJydXNoOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZW1pdChcImJydXNoXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgY3VzdG9tRXZlbnQobmV3IEJydXNoRXZlbnQoYnJ1c2gsIHR5cGUsIGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgIGlmICh0b3VjaGVuZGluZyAmJiAhZXZlbnQudG91Y2hlcykgcmV0dXJuO1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgdHlwZSA9IGV2ZW50LnRhcmdldC5fX2RhdGFfXy50eXBlLFxuICAgICAgICBtb2RlID0gKGtleXMgJiYgZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGtleXMgJiYgZXZlbnQuYWx0S2V5ID8gTU9ERV9DRU5URVIgOiBNT0RFX0hBTkRMRSksXG4gICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcbiAgICAgICAgc2lnblkgPSBkaW0gPT09IFggPyBudWxsIDogc2lnbnNZW3R5cGVdLFxuICAgICAgICBzdGF0ZSA9IGxvY2FsKHRoYXQpLFxuICAgICAgICBleHRlbnQgPSBzdGF0ZS5leHRlbnQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgVyA9IGV4dGVudFswXVswXSwgdzAsIHcxLFxuICAgICAgICBOID0gZXh0ZW50WzBdWzFdLCBuMCwgbjEsXG4gICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgUyA9IGV4dGVudFsxXVsxXSwgczAsIHMxLFxuICAgICAgICBkeCA9IDAsXG4gICAgICAgIGR5ID0gMCxcbiAgICAgICAgbW92aW5nLFxuICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGtleXMgJiYgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIGxvY2tYLFxuICAgICAgICBsb2NrWSxcbiAgICAgICAgcG9pbnRlciA9IGV2ZW50LnRvdWNoZXMgPyB0b3VjaGVyKGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIpIDogbW91c2UsXG4gICAgICAgIHBvaW50MCA9IHBvaW50ZXIodGhhdCksXG4gICAgICAgIHBvaW50ID0gcG9pbnQwLFxuICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMsIHRydWUpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIGlmIChzZWxlY3Rpb24pIG1vdmluZyA9IHRydWU7XG4gICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24gPSBbXG4gICAgICAgIFt3MCA9IGRpbSA9PT0gWSA/IFcgOiBwb2ludDBbMF0sIG4wID0gZGltID09PSBYID8gTiA6IHBvaW50MFsxXV0sXG4gICAgICAgIFtlMCA9IGRpbSA9PT0gWSA/IEUgOiB3MCwgczAgPSBkaW0gPT09IFggPyBTIDogbjBdXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBlbWl0Lm1vdmVkID0gbW92ZWQ7XG4gICAgICBlbWl0LmVuZGVkID0gZW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgICAgaWYgKGtleXMpIHZpZXdcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcblxuICAgICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgfVxuXG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGludGVycnVwdCh0aGF0KTtcbiAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICBlbWl0LnN0YXJ0KCk7XG5cbiAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgIHZhciBwb2ludDEgPSBwb2ludGVyKHRoYXQpO1xuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHBvaW50MVswXSAtIHBvaW50WzBdKSA+IE1hdGguYWJzKHBvaW50MVsxXSAtIHBvaW50WzFdKSkgbG9ja1kgPSB0cnVlO1xuICAgICAgICBlbHNlIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBvaW50ID0gcG9pbnQxO1xuICAgICAgbW92aW5nID0gdHJ1ZTtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIG1vdmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKCkge1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSB3MCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBNYXRoLm1heChXIC0gZTAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSA8IDApIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gTWF0aC5tYXgoTiAtIHMwLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAsIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIHcwIC0gZHggKiBzaWduWCkpLCBlMSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBzMCArIGR5ICogc2lnblkpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZTEgPCB3MSkge1xuICAgICAgICBzaWduWCAqPSAtMTtcbiAgICAgICAgdCA9IHcwLCB3MCA9IGUwLCBlMCA9IHQ7XG4gICAgICAgIHQgPSB3MSwgdzEgPSBlMSwgZTEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWCkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBYW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzMSA8IG4xKSB7XG4gICAgICAgIHNpZ25ZICo9IC0xO1xuICAgICAgICB0ID0gbjAsIG4wID0gczAsIHMwID0gdDtcbiAgICAgICAgdCA9IG4xLCBuMSA9IHMxLCBzMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBZKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFlbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUhXG4gICAgICBpZiAobG9ja1gpIHcxID0gc2VsZWN0aW9uWzBdWzBdLCBlMSA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIGlmIChsb2NrWSkgbjEgPSBzZWxlY3Rpb25bMF1bMV0sIHMxID0gc2VsZWN0aW9uWzFdWzFdO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uWzBdWzBdICE9PSB3MVxuICAgICAgICAgIHx8IHNlbGVjdGlvblswXVsxXSAhPT0gbjFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMF0gIT09IGUxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzFdICE9PSBzMSkge1xuICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBbW3cxLCBuMV0sIFtlMSwgczFdXTtcbiAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIG1vdmluZyk7XG4gICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xuICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgaWYgKGVtcHR5KHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXlkb3duZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleXVwcGVkKCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykubW92ZWQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XG4gICAgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZGVkKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX19icnVzaCB8fCB7c2VsZWN0aW9uOiBudWxsfTtcbiAgICBzdGF0ZS5leHRlbnQgPSBudW1iZXIyKGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBzdGF0ZS5kaW0gPSBkaW07XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQobnVtYmVyMihfKSksIGJydXNoKSA6IGV4dGVudDtcbiAgfTtcblxuICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgYnJ1c2gudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaGFuZGxlU2l6ZSA9ICtfLCBicnVzaCkgOiBoYW5kbGVTaXplO1xuICB9O1xuXG4gIGJydXNoLmtleU1vZGlmaWVycyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gISFfLCBicnVzaCkgOiBrZXlzO1xuICB9O1xuXG4gIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGJydXNoIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGJydXNoO1xufVxuIiwiZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciB0YXUgPSBwaSAqIDI7XG5leHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuIiwiaW1wb3J0IHtyYW5nZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge21heCwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmZ1bmN0aW9uIGNvbXBhcmVWYWx1ZShjb21wYXJlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoXG4gICAgICBhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlLFxuICAgICAgYi5zb3VyY2UudmFsdWUgKyBiLnRhcmdldC52YWx1ZVxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcGFkQW5nbGUgPSAwLFxuICAgICAgc29ydEdyb3VwcyA9IG51bGwsXG4gICAgICBzb3J0U3ViZ3JvdXBzID0gbnVsbCxcbiAgICAgIHNvcnRDaG9yZHMgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNob3JkKG1hdHJpeCkge1xuICAgIHZhciBuID0gbWF0cml4Lmxlbmd0aCxcbiAgICAgICAgZ3JvdXBTdW1zID0gW10sXG4gICAgICAgIGdyb3VwSW5kZXggPSByYW5nZShuKSxcbiAgICAgICAgc3ViZ3JvdXBJbmRleCA9IFtdLFxuICAgICAgICBjaG9yZHMgPSBbXSxcbiAgICAgICAgZ3JvdXBzID0gY2hvcmRzLmdyb3VwcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG4gKiBuKSxcbiAgICAgICAgayxcbiAgICAgICAgeCxcbiAgICAgICAgeDAsXG4gICAgICAgIGR4LFxuICAgICAgICBpLFxuICAgICAgICBqO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgc3VtLlxuICAgIGsgPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB4ID0gMCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB4ICs9IG1hdHJpeFtpXVtqXTtcbiAgICAgIH1cbiAgICAgIGdyb3VwU3Vtcy5wdXNoKHgpO1xuICAgICAgc3ViZ3JvdXBJbmRleC5wdXNoKHJhbmdlKG4pKTtcbiAgICAgIGsgKz0geDtcbiAgICB9XG5cbiAgICAvLyBTb3J0IGdyb3Vwc+KAplxuICAgIGlmIChzb3J0R3JvdXBzKSBncm91cEluZGV4LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIHNvcnRHcm91cHMoZ3JvdXBTdW1zW2FdLCBncm91cFN1bXNbYl0pO1xuICAgIH0pO1xuXG4gICAgLy8gU29ydCBzdWJncm91cHPigKZcbiAgICBpZiAoc29ydFN1Ymdyb3Vwcykgc3ViZ3JvdXBJbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgIGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBzb3J0U3ViZ3JvdXBzKG1hdHJpeFtpXVthXSwgbWF0cml4W2ldW2JdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gQ29udmVydCB0aGUgc3VtIHRvIHNjYWxpbmcgZmFjdG9yIGZvciBbMCwgMnBpXS5cbiAgICAvLyBUT0RPIEFsbG93IHN0YXJ0IGFuZCBlbmQgYW5nbGUgdG8gYmUgc3BlY2lmaWVkP1xuICAgIC8vIFRPRE8gQWxsb3cgcGFkZGluZyB0byBiZSBzcGVjaWZpZWQgYXMgcGVyY2VudGFnZT9cbiAgICBrID0gbWF4KDAsIHRhdSAtIHBhZEFuZ2xlICogbikgLyBrO1xuICAgIGR4ID0gayA/IHBhZEFuZ2xlIDogdGF1IC8gbjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgZm9yIGVhY2ggZ3JvdXAgYW5kIHN1Ymdyb3VwLlxuICAgIC8vIE5vdGU6IE9wZXJhIGhhcyBhIGJ1ZyByZW9yZGVyaW5nIG9iamVjdCBsaXRlcmFsIHByb3BlcnRpZXMhXG4gICAgeCA9IDAsIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHgwID0geCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLFxuICAgICAgICAgICAgZGogPSBzdWJncm91cEluZGV4W2RpXVtqXSxcbiAgICAgICAgICAgIHYgPSBtYXRyaXhbZGldW2RqXSxcbiAgICAgICAgICAgIGEwID0geCxcbiAgICAgICAgICAgIGExID0geCArPSB2ICogaztcbiAgICAgICAgc3ViZ3JvdXBzW2RqICogbiArIGRpXSA9IHtcbiAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgc3ViaW5kZXg6IGRqLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgICB2YWx1ZTogdlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2RpXSA9IHtcbiAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICBzdGFydEFuZ2xlOiB4MCxcbiAgICAgICAgZW5kQW5nbGU6IHgsXG4gICAgICAgIHZhbHVlOiBncm91cFN1bXNbZGldXG4gICAgICB9O1xuICAgICAgeCArPSBkeDtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBjaG9yZHMgZm9yIGVhY2ggKG5vbi1lbXB0eSkgc3ViZ3JvdXAtc3ViZ3JvdXAgbGluay5cbiAgICBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBqID0gaSAtIDE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzdWJncm91cHNbaiAqIG4gKyBpXSxcbiAgICAgICAgICAgIHRhcmdldCA9IHN1Ymdyb3Vwc1tpICogbiArIGpdO1xuICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgIGNob3Jkcy5wdXNoKHNvdXJjZS52YWx1ZSA8IHRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICA/IHtzb3VyY2U6IHRhcmdldCwgdGFyZ2V0OiBzb3VyY2V9XG4gICAgICAgICAgICAgIDoge3NvdXJjZTogc291cmNlLCB0YXJnZXQ6IHRhcmdldH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvcnRDaG9yZHMgPyBjaG9yZHMuc29ydChzb3J0Q2hvcmRzKSA6IGNob3JkcztcbiAgfVxuXG4gIGNob3JkLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gbWF4KDAsIF8pLCBjaG9yZCkgOiBwYWRBbmdsZTtcbiAgfTtcblxuICBjaG9yZC5zb3J0R3JvdXBzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnRHcm91cHMgPSBfLCBjaG9yZCkgOiBzb3J0R3JvdXBzO1xuICB9O1xuXG4gIGNob3JkLnNvcnRTdWJncm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFN1Ymdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRTdWJncm91cHM7XG4gIH07XG5cbiAgY2hvcmQuc29ydENob3JkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBzb3J0Q2hvcmRzID0gbnVsbCA6IChzb3J0Q2hvcmRzID0gY29tcGFyZVZhbHVlKF8pKS5fID0gXywgY2hvcmQpIDogc29ydENob3JkcyAmJiBzb3J0Q2hvcmRzLl87XG4gIH07XG5cbiAgcmV0dXJuIGNob3JkO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKTtcblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyLCBjY3cgPSAhIWNjdztcbiAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgIHgwID0geCArIGR4LFxuICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBlbXB0eT8gV2XigJlyZSBkb25lLlxuICAgIGlmICghcikgcmV0dXJuO1xuXG4gICAgLy8gRG9lcyB0aGUgYW5nbGUgZ28gdGhlIHdyb25nIHdheT8gRmxpcCB0aGUgZGlyZWN0aW9uLlxuICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUgKyB0YXU7XG5cbiAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgbm9uLWVtcHR5PyBEcmF3IGFuIGFyYyFcbiAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLFwiICsgKCsoZGEgPj0gcGkpKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgIH1cbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgKCt3KSArIFwidlwiICsgKCtoKSArIFwiaFwiICsgKC13KSArIFwiWlwiO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0aDtcbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCB7Y29zLCBoYWxmUGksIHNpbn0gZnJvbSBcIi4vbWF0aFwiO1xuaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuXG5mdW5jdGlvbiBkZWZhdWx0U291cmNlKGQpIHtcbiAgcmV0dXJuIGQuc291cmNlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VGFyZ2V0KGQpIHtcbiAgcmV0dXJuIGQudGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0UmFkaXVzKGQpIHtcbiAgcmV0dXJuIGQucmFkaXVzO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3RhcnRBbmdsZShkKSB7XG4gIHJldHVybiBkLnN0YXJ0QW5nbGU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFbmRBbmdsZShkKSB7XG4gIHJldHVybiBkLmVuZEFuZ2xlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNvdXJjZSA9IGRlZmF1bHRTb3VyY2UsXG4gICAgICB0YXJnZXQgPSBkZWZhdWx0VGFyZ2V0LFxuICAgICAgcmFkaXVzID0gZGVmYXVsdFJhZGl1cyxcbiAgICAgIHN0YXJ0QW5nbGUgPSBkZWZhdWx0U3RhcnRBbmdsZSxcbiAgICAgIGVuZEFuZ2xlID0gZGVmYXVsdEVuZEFuZ2xlLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gcmliYm9uKCkge1xuICAgIHZhciBidWZmZXIsXG4gICAgICAgIGFyZ3YgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgIHMgPSBzb3VyY2UuYXBwbHkodGhpcywgYXJndiksXG4gICAgICAgIHQgPSB0YXJnZXQuYXBwbHkodGhpcywgYXJndiksXG4gICAgICAgIHNyID0gK3JhZGl1cy5hcHBseSh0aGlzLCAoYXJndlswXSA9IHMsIGFyZ3YpKSxcbiAgICAgICAgc2EwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSxcbiAgICAgICAgc2ExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGksXG4gICAgICAgIHN4MCA9IHNyICogY29zKHNhMCksXG4gICAgICAgIHN5MCA9IHNyICogc2luKHNhMCksXG4gICAgICAgIHRyID0gK3JhZGl1cy5hcHBseSh0aGlzLCAoYXJndlswXSA9IHQsIGFyZ3YpKSxcbiAgICAgICAgdGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSxcbiAgICAgICAgdGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGk7XG5cbiAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG5cbiAgICBjb250ZXh0Lm1vdmVUbyhzeDAsIHN5MCk7XG4gICAgY29udGV4dC5hcmMoMCwgMCwgc3IsIHNhMCwgc2ExKTtcbiAgICBpZiAoc2EwICE9PSB0YTAgfHwgc2ExICE9PSB0YTEpIHsgLy8gVE9ETyBzciAhPT0gdHI/XG4gICAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oMCwgMCwgdHIgKiBjb3ModGEwKSwgdHIgKiBzaW4odGEwKSk7XG4gICAgICBjb250ZXh0LmFyYygwLCAwLCB0ciwgdGEwLCB0YTEpO1xuICAgIH1cbiAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oMCwgMCwgc3gwLCBzeTApO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIHJpYmJvbi5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHJpYmJvbikgOiByYWRpdXM7XG4gIH07XG5cbiAgcmliYm9uLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCByaWJib24pIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICByaWJib24uZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcmliYm9uKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIHJpYmJvbi5zb3VyY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc291cmNlID0gXywgcmliYm9uKSA6IHNvdXJjZTtcbiAgfTtcblxuICByaWJib24udGFyZ2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldCA9IF8sIHJpYmJvbikgOiB0YXJnZXQ7XG4gIH07XG5cbiAgcmliYm9uLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIHJpYmJvbikgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiByaWJib247XG59XG4iLCJleHBvcnQgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAob2JqZWN0LCBmKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwO1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChmKG8gPSBvYmplY3RbaV0sIGksIG9iamVjdCksIG8pO1xuICB9XG5cbiAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwO1xuIiwiaW1wb3J0IG1hcCBmcm9tIFwiLi9tYXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gW10sXG4gICAgICBzb3J0S2V5cyA9IFtdLFxuICAgICAgc29ydFZhbHVlcyxcbiAgICAgIHJvbGx1cCxcbiAgICAgIG5lc3Q7XG5cbiAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xuICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkge1xuICAgICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgYXJyYXkuc29ydChzb3J0VmFsdWVzKTtcbiAgICAgIHJldHVybiByb2xsdXAgIT0gbnVsbCA/IHJvbGx1cChhcnJheSkgOiBhcnJheTtcbiAgICB9XG5cbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICBrZXlWYWx1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHZhbHVlc0J5S2V5ID0gbWFwKCksXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUmVzdWx0KCk7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleSh2YWx1ZSA9IGFycmF5W2ldKSArIFwiXCIpKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWVzQnlLZXkuZWFjaChmdW5jdGlvbih2YWx1ZXMsIGtleSkge1xuICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgIGlmICgrK2RlcHRoID4ga2V5cy5sZW5ndGgpIHJldHVybiBtYXA7XG4gICAgdmFyIGFycmF5LCBzb3J0S2V5ID0gc29ydEtleXNbZGVwdGggLSAxXTtcbiAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICBlbHNlIGFycmF5ID0gW10sIG1hcC5lYWNoKGZ1bmN0aW9uKHYsIGspIHsgYXJyYXkucHVzaCh7a2V5OiBrLCB2YWx1ZXM6IGVudHJpZXModiwgZGVwdGgpfSk7IH0pO1xuICAgIHJldHVybiBzb3J0S2V5ICE9IG51bGwgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTsgfSkgOiBhcnJheTtcbiAgfVxuXG4gIHJldHVybiBuZXN0ID0ge1xuICAgIG9iamVjdDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVPYmplY3QsIHNldE9iamVjdCk7IH0sXG4gICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gZW50cmllcyhhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApLCAwKTsgfSxcbiAgICBrZXk6IGZ1bmN0aW9uKGQpIHsga2V5cy5wdXNoKGQpOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0VmFsdWVzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0VmFsdWVzID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHJvbGx1cDogZnVuY3Rpb24oZikgeyByb2xsdXAgPSBmOyByZXR1cm4gbmVzdDsgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBtYXAoKTtcbn1cblxuZnVuY3Rpb24gc2V0TWFwKG1hcCwga2V5LCB2YWx1ZSkge1xuICBtYXAuc2V0KGtleSwgdmFsdWUpO1xufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIG1hcCwgcHJlZml4fSBmcm9tIFwiLi9tYXBcIjtcblxuZnVuY3Rpb24gU2V0KCkge31cblxudmFyIHByb3RvID0gbWFwLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZXQsXG4gIGhhczogcHJvdG8uaGFzLFxuICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgKz0gXCJcIjtcbiAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gIHNpemU6IHByb3RvLnNpemUsXG4gIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgZWFjaDogcHJvdG8uZWFjaFxufTtcblxuZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xuICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2V0KSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSkgeyBzZXQuYWRkKHZhbHVlKTsgfSk7XG5cbiAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWFwKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBtYXApIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIgdmFsdWVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBtYXApIHZhbHVlcy5wdXNoKG1hcFtrZXldKTtcbiAgcmV0dXJuIHZhbHVlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIgZW50cmllcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBlbnRyaWVzLnB1c2goe2tleToga2V5LCB2YWx1ZTogbWFwW2tleV19KTtcbiAgcmV0dXJuIGVudHJpZXM7XG59XG4iLCJleHBvcnQgdmFyIGRlZzJyYWQgPSBNYXRoLlBJIC8gMTgwO1xuZXhwb3J0IHZhciByYWQyZGVnID0gMTgwIC8gTWF0aC5QSTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdifSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbi8vIGh0dHBzOi8vb2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIGhjbDJsYWIobyk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwIDwgby5sICYmIG8ubCA8IDEwMCA/IDAgOiBOYU4sIG8ubCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIHJhZDJkZWc7XG4gIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMuYyA9ICtjO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmZ1bmN0aW9uIGhjbDJsYWIobykge1xuICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IG8uaCAqIGRlZzJyYWQ7XG4gIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoY2wybGFiKHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYiwgZGFya2VyLCBicmlnaHRlcn0gZnJvbSBcIi4vY29sb3IuanNcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG52YXIgQSA9IC0wLjE0ODYxLFxuICAgIEIgPSArMS43ODI3NyxcbiAgICBDID0gLTAuMjkyMjcsXG4gICAgRCA9IC0wLjkwNjQ5LFxuICAgIEUgPSArMS45NzI5NCxcbiAgICBFRCA9IEUgKiBELFxuICAgIEVCID0gRSAqIEIsXG4gICAgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgYmwgPSBiIC0gbCxcbiAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY3ViZWhlbGl4Q29udmVydChoKSA6IG5ldyBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShDdWJlaGVsaXgsIGN1YmVoZWxpeCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IGlzTmFOKHRoaXMuaCkgPyAwIDogKHRoaXMuaCArIDEyMCkgKiBkZWcycmFkLFxuICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgYSA9IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zICogbCAqICgxIC0gbCksXG4gICAgICAgIGNvc2ggPSBNYXRoLmNvcyhoKSxcbiAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoRSAqIGNvc2gpKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSAtIGI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJpbmcsIGhvbGUpIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGhvbGUubGVuZ3RoLCBjO1xuICB3aGlsZSAoKytpIDwgbikgaWYgKGMgPSByaW5nQ29udGFpbnMocmluZywgaG9sZVtpXSkpIHJldHVybiBjO1xuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gcmluZ0NvbnRhaW5zKHJpbmcsIHBvaW50KSB7XG4gIHZhciB4ID0gcG9pbnRbMF0sIHkgPSBwb2ludFsxXSwgY29udGFpbnMgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSByaW5nLmxlbmd0aCwgaiA9IG4gLSAxOyBpIDwgbjsgaiA9IGkrKykge1xuICAgIHZhciBwaSA9IHJpbmdbaV0sIHhpID0gcGlbMF0sIHlpID0gcGlbMV0sIHBqID0gcmluZ1tqXSwgeGogPSBwalswXSwgeWogPSBwalsxXTtcbiAgICBpZiAoc2VnbWVudENvbnRhaW5zKHBpLCBwaiwgcG9pbnQpKSByZXR1cm4gMDtcbiAgICBpZiAoKCh5aSA+IHkpICE9PSAoeWogPiB5KSkgJiYgKCh4IDwgKHhqIC0geGkpICogKHkgLSB5aSkgLyAoeWogLSB5aSkgKyB4aSkpKSBjb250YWlucyA9IC1jb250YWlucztcbiAgfVxuICByZXR1cm4gY29udGFpbnM7XG59XG5cbmZ1bmN0aW9uIHNlZ21lbnRDb250YWlucyhhLCBiLCBjKSB7XG4gIHZhciBpOyByZXR1cm4gY29sbGluZWFyKGEsIGIsIGMpICYmIHdpdGhpbihhW2kgPSArKGFbMF0gPT09IGJbMF0pXSwgY1tpXSwgYltpXSk7XG59XG5cbmZ1bmN0aW9uIGNvbGxpbmVhcihhLCBiLCBjKSB7XG4gIHJldHVybiAoYlswXSAtIGFbMF0pICogKGNbMV0gLSBhWzFdKSA9PT0gKGNbMF0gLSBhWzBdKSAqIChiWzFdIC0gYVsxXSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhpbihwLCBxLCByKSB7XG4gIHJldHVybiBwIDw9IHEgJiYgcSA8PSByIHx8IHIgPD0gcSAmJiBxIDw9IHA7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHt9XG4iLCJpbXBvcnQge2V4dGVudCwgdGhyZXNob2xkU3R1cmdlcywgdGlja1N0ZXAsIHJhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGFyZWEgZnJvbSBcIi4vYXJlYVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4vY29udGFpbnNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3BcIjtcblxudmFyIGNhc2VzID0gW1xuICBbXSxcbiAgW1tbMS4wLCAxLjVdLCBbMC41LCAxLjBdXV0sXG4gIFtbWzEuNSwgMS4wXSwgWzEuMCwgMS41XV1dLFxuICBbW1sxLjUsIDEuMF0sIFswLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAwLjVdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzEuMCwgMS41XSwgWzAuNSwgMS4wXV0sIFtbMS4wLCAwLjVdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzEuMCwgMC41XSwgWzEuMCwgMS41XV1dLFxuICBbW1sxLjAsIDAuNV0sIFswLjUsIDEuMF1dXSxcbiAgW1tbMC41LCAxLjBdLCBbMS4wLCAwLjVdXV0sXG4gIFtbWzEuMCwgMS41XSwgWzEuMCwgMC41XV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjAsIDAuNV1dLCBbWzEuNSwgMS4wXSwgWzEuMCwgMS41XV1dLFxuICBbW1sxLjUsIDEuMF0sIFsxLjAsIDAuNV1dXSxcbiAgW1tbMC41LCAxLjBdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzEuMCwgMS41XSwgWzEuNSwgMS4wXV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjAsIDEuNV1dXSxcbiAgW11cbl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgdGhyZXNob2xkID0gdGhyZXNob2xkU3R1cmdlcyxcbiAgICAgIHNtb290aCA9IHNtb290aExpbmVhcjtcblxuICBmdW5jdGlvbiBjb250b3Vycyh2YWx1ZXMpIHtcbiAgICB2YXIgdHogPSB0aHJlc2hvbGQodmFsdWVzKTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkge1xuICAgICAgdmFyIGRvbWFpbiA9IGV4dGVudCh2YWx1ZXMpLCBzdGFydCA9IGRvbWFpblswXSwgc3RvcCA9IGRvbWFpblsxXTtcbiAgICAgIHR6ID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIHR6KTtcbiAgICAgIHR6ID0gcmFuZ2UoTWF0aC5mbG9vcihzdGFydCAvIHR6KSAqIHR6LCBNYXRoLmZsb29yKHN0b3AgLyB0eikgKiB0eiwgdHopO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eiA9IHR6LnNsaWNlKCkuc29ydChhc2NlbmRpbmcpO1xuICAgIH1cblxuICAgIHJldHVybiB0ei5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBjb250b3VyKHZhbHVlcywgdmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQWNjdW11bGF0ZSwgc21vb3RoIGNvbnRvdXIgcmluZ3MsIGFzc2lnbiBob2xlcyB0byBleHRlcmlvciByaW5ncy5cbiAgLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL21ib3N0b2NrL3NoYXBlZmlsZS9ibG9iL3YwLjYuMi9zaHAvcG9seWdvbi5qc1xuICBmdW5jdGlvbiBjb250b3VyKHZhbHVlcywgdmFsdWUpIHtcbiAgICB2YXIgcG9seWdvbnMgPSBbXSxcbiAgICAgICAgaG9sZXMgPSBbXTtcblxuICAgIGlzb3JpbmdzKHZhbHVlcywgdmFsdWUsIGZ1bmN0aW9uKHJpbmcpIHtcbiAgICAgIHNtb290aChyaW5nLCB2YWx1ZXMsIHZhbHVlKTtcbiAgICAgIGlmIChhcmVhKHJpbmcpID4gMCkgcG9seWdvbnMucHVzaChbcmluZ10pO1xuICAgICAgZWxzZSBob2xlcy5wdXNoKHJpbmcpO1xuICAgIH0pO1xuXG4gICAgaG9sZXMuZm9yRWFjaChmdW5jdGlvbihob2xlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb25zLmxlbmd0aCwgcG9seWdvbjsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoY29udGFpbnMoKHBvbHlnb24gPSBwb2x5Z29uc1tpXSlbMF0sIGhvbGUpICE9PSAtMSkge1xuICAgICAgICAgIHBvbHlnb24ucHVzaChob2xlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk11bHRpUG9seWdvblwiLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgY29vcmRpbmF0ZXM6IHBvbHlnb25zXG4gICAgfTtcbiAgfVxuXG4gIC8vIE1hcmNoaW5nIHNxdWFyZXMgd2l0aCBpc29saW5lcyBzdGl0Y2hlZCBpbnRvIHJpbmdzLlxuICAvLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vdG9wb2pzb24vdG9wb2pzb24tY2xpZW50L2Jsb2IvdjMuMC4wL3NyYy9zdGl0Y2guanNcbiAgZnVuY3Rpb24gaXNvcmluZ3ModmFsdWVzLCB2YWx1ZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZnJhZ21lbnRCeVN0YXJ0ID0gbmV3IEFycmF5LFxuICAgICAgICBmcmFnbWVudEJ5RW5kID0gbmV3IEFycmF5LFxuICAgICAgICB4LCB5LCB0MCwgdDEsIHQyLCB0MztcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdGhlIGZpcnN0IHJvdyAoeSA9IC0xLCB0MiA9IHQzID0gMCkuXG4gICAgeCA9IHkgPSAtMTtcbiAgICB0MSA9IHZhbHVlc1swXSA+PSB2YWx1ZTtcbiAgICBjYXNlc1t0MSA8PCAxXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgdDAgPSB0MSwgdDEgPSB2YWx1ZXNbeCArIDFdID49IHZhbHVlO1xuICAgICAgY2FzZXNbdDAgfCB0MSA8PCAxXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgfVxuICAgIGNhc2VzW3QxIDw8IDBdLmZvckVhY2goc3RpdGNoKTtcblxuICAgIC8vIEdlbmVyYWwgY2FzZSBmb3IgdGhlIGludGVybWVkaWF0ZSByb3dzLlxuICAgIHdoaWxlICgrK3kgPCBkeSAtIDEpIHtcbiAgICAgIHggPSAtMTtcbiAgICAgIHQxID0gdmFsdWVzW3kgKiBkeCArIGR4XSA+PSB2YWx1ZTtcbiAgICAgIHQyID0gdmFsdWVzW3kgKiBkeF0gPj0gdmFsdWU7XG4gICAgICBjYXNlc1t0MSA8PCAxIHwgdDIgPDwgMl0uZm9yRWFjaChzdGl0Y2gpO1xuICAgICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgICB0MCA9IHQxLCB0MSA9IHZhbHVlc1t5ICogZHggKyBkeCArIHggKyAxXSA+PSB2YWx1ZTtcbiAgICAgICAgdDMgPSB0MiwgdDIgPSB2YWx1ZXNbeSAqIGR4ICsgeCArIDFdID49IHZhbHVlO1xuICAgICAgICBjYXNlc1t0MCB8IHQxIDw8IDEgfCB0MiA8PCAyIHwgdDMgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuICAgICAgfVxuICAgICAgY2FzZXNbdDEgfCB0MiA8PCAzXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgfVxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciB0aGUgbGFzdCByb3cgKHkgPSBkeSAtIDEsIHQwID0gdDEgPSAwKS5cbiAgICB4ID0gLTE7XG4gICAgdDIgPSB2YWx1ZXNbeSAqIGR4XSA+PSB2YWx1ZTtcbiAgICBjYXNlc1t0MiA8PCAyXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgdDMgPSB0MiwgdDIgPSB2YWx1ZXNbeSAqIGR4ICsgeCArIDFdID49IHZhbHVlO1xuICAgICAgY2FzZXNbdDIgPDwgMiB8IHQzIDw8IDNdLmZvckVhY2goc3RpdGNoKTtcbiAgICB9XG4gICAgY2FzZXNbdDIgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuXG4gICAgZnVuY3Rpb24gc3RpdGNoKGxpbmUpIHtcbiAgICAgIHZhciBzdGFydCA9IFtsaW5lWzBdWzBdICsgeCwgbGluZVswXVsxXSArIHldLFxuICAgICAgICAgIGVuZCA9IFtsaW5lWzFdWzBdICsgeCwgbGluZVsxXVsxXSArIHldLFxuICAgICAgICAgIHN0YXJ0SW5kZXggPSBpbmRleChzdGFydCksXG4gICAgICAgICAgZW5kSW5kZXggPSBpbmRleChlbmQpLFxuICAgICAgICAgIGYsIGc7XG4gICAgICBpZiAoZiA9IGZyYWdtZW50QnlFbmRbc3RhcnRJbmRleF0pIHtcbiAgICAgICAgaWYgKGcgPSBmcmFnbWVudEJ5U3RhcnRbZW5kSW5kZXhdKSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlFbmRbZi5lbmRdO1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5U3RhcnRbZy5zdGFydF07XG4gICAgICAgICAgaWYgKGYgPT09IGcpIHtcbiAgICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgICBjYWxsYmFjayhmLnJpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcmFnbWVudEJ5U3RhcnRbZi5zdGFydF0gPSBmcmFnbWVudEJ5RW5kW2cuZW5kXSA9IHtzdGFydDogZi5zdGFydCwgZW5kOiBnLmVuZCwgcmluZzogZi5yaW5nLmNvbmNhdChnLnJpbmcpfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlFbmRbZi5lbmRdO1xuICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgZnJhZ21lbnRCeUVuZFtmLmVuZCA9IGVuZEluZGV4XSA9IGY7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZiA9IGZyYWdtZW50QnlTdGFydFtlbmRJbmRleF0pIHtcbiAgICAgICAgaWYgKGcgPSBmcmFnbWVudEJ5RW5kW3N0YXJ0SW5kZXhdKSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0XTtcbiAgICAgICAgICBkZWxldGUgZnJhZ21lbnRCeUVuZFtnLmVuZF07XG4gICAgICAgICAgaWYgKGYgPT09IGcpIHtcbiAgICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgICBjYWxsYmFjayhmLnJpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcmFnbWVudEJ5U3RhcnRbZy5zdGFydF0gPSBmcmFnbWVudEJ5RW5kW2YuZW5kXSA9IHtzdGFydDogZy5zdGFydCwgZW5kOiBmLmVuZCwgcmluZzogZy5yaW5nLmNvbmNhdChmLnJpbmcpfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0XTtcbiAgICAgICAgICBmLnJpbmcudW5zaGlmdChzdGFydCk7XG4gICAgICAgICAgZnJhZ21lbnRCeVN0YXJ0W2Yuc3RhcnQgPSBzdGFydEluZGV4XSA9IGY7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyYWdtZW50QnlTdGFydFtzdGFydEluZGV4XSA9IGZyYWdtZW50QnlFbmRbZW5kSW5kZXhdID0ge3N0YXJ0OiBzdGFydEluZGV4LCBlbmQ6IGVuZEluZGV4LCByaW5nOiBbc3RhcnQsIGVuZF19O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluZGV4KHBvaW50KSB7XG4gICAgcmV0dXJuIHBvaW50WzBdICogMiArIHBvaW50WzFdICogKGR4ICsgMSkgKiA0O1xuICB9XG5cbiAgZnVuY3Rpb24gc21vb3RoTGluZWFyKHJpbmcsIHZhbHVlcywgdmFsdWUpIHtcbiAgICByaW5nLmZvckVhY2goZnVuY3Rpb24ocG9pbnQpIHtcbiAgICAgIHZhciB4ID0gcG9pbnRbMF0sXG4gICAgICAgICAgeSA9IHBvaW50WzFdLFxuICAgICAgICAgIHh0ID0geCB8IDAsXG4gICAgICAgICAgeXQgPSB5IHwgMCxcbiAgICAgICAgICB2MCxcbiAgICAgICAgICB2MSA9IHZhbHVlc1t5dCAqIGR4ICsgeHRdO1xuICAgICAgaWYgKHggPiAwICYmIHggPCBkeCAmJiB4dCA9PT0geCkge1xuICAgICAgICB2MCA9IHZhbHVlc1t5dCAqIGR4ICsgeHQgLSAxXTtcbiAgICAgICAgcG9pbnRbMF0gPSB4ICsgKHZhbHVlIC0gdjApIC8gKHYxIC0gdjApIC0gMC41O1xuICAgICAgfVxuICAgICAgaWYgKHkgPiAwICYmIHkgPCBkeSAmJiB5dCA9PT0geSkge1xuICAgICAgICB2MCA9IHZhbHVlc1soeXQgLSAxKSAqIGR4ICsgeHRdO1xuICAgICAgICBwb2ludFsxXSA9IHkgKyAodmFsdWUgLSB2MCkgLyAodjEgLSB2MCkgLSAwLjU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb250b3Vycy5jb250b3VyID0gY29udG91cjtcblxuICBjb250b3Vycy5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgIHZhciBfMCA9IE1hdGguY2VpbChfWzBdKSwgXzEgPSBNYXRoLmNlaWwoX1sxXSk7XG4gICAgaWYgKCEoXzAgPiAwKSB8fCAhKF8xID4gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2l6ZVwiKTtcbiAgICByZXR1cm4gZHggPSBfMCwgZHkgPSBfMSwgY29udG91cnM7XG4gIH07XG5cbiAgY29udG91cnMudGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBjb250b3VycykgOiB0aHJlc2hvbGQ7XG4gIH07XG5cbiAgY29udG91cnMuc21vb3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNtb290aCA9IF8gPyBzbW9vdGhMaW5lYXIgOiBub29wLCBjb250b3VycykgOiBzbW9vdGggPT09IHNtb290aExpbmVhcjtcbiAgfTtcblxuICByZXR1cm4gY29udG91cnM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyaW5nKSB7XG4gIHZhciBpID0gMCwgbiA9IHJpbmcubGVuZ3RoLCBhcmVhID0gcmluZ1tuIC0gMV1bMV0gKiByaW5nWzBdWzBdIC0gcmluZ1tuIC0gMV1bMF0gKiByaW5nWzBdWzFdO1xuICB3aGlsZSAoKytpIDwgbikgYXJlYSArPSByaW5nW2kgLSAxXVsxXSAqIHJpbmdbaV1bMF0gLSByaW5nW2kgLSAxXVswXSAqIHJpbmdbaV1bMV07XG4gIHJldHVybiBhcmVhO1xufVxuIiwiLy8gVE9ETyBPcHRpbWl6ZSBlZGdlIGNhc2VzLlxuLy8gVE9ETyBPcHRpbWl6ZSBpbmRleCBjYWxjdWxhdGlvbi5cbi8vIFRPRE8gT3B0aW1pemUgYXJndW1lbnRzLlxuZXhwb3J0IGZ1bmN0aW9uIGJsdXJYKHNvdXJjZSwgdGFyZ2V0LCByKSB7XG4gIHZhciBuID0gc291cmNlLndpZHRoLFxuICAgICAgbSA9IHNvdXJjZS5oZWlnaHQsXG4gICAgICB3ID0gKHIgPDwgMSkgKyAxO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGkgPSAwLCBzciA9IDA7IGkgPCBuICsgcjsgKytpKSB7XG4gICAgICBpZiAoaSA8IG4pIHtcbiAgICAgICAgc3IgKz0gc291cmNlLmRhdGFbaSArIGogKiBuXTtcbiAgICAgIH1cbiAgICAgIGlmIChpID49IHIpIHtcbiAgICAgICAgaWYgKGkgPj0gdykge1xuICAgICAgICAgIHNyIC09IHNvdXJjZS5kYXRhW2kgLSB3ICsgaiAqIG5dO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5kYXRhW2kgLSByICsgaiAqIG5dID0gc3IgLyBNYXRoLm1pbihpICsgMSwgbiAtIDEgKyB3IC0gaSwgdyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIFRPRE8gT3B0aW1pemUgZWRnZSBjYXNlcy5cbi8vIFRPRE8gT3B0aW1pemUgaW5kZXggY2FsY3VsYXRpb24uXG4vLyBUT0RPIE9wdGltaXplIGFyZ3VtZW50cy5cbmV4cG9ydCBmdW5jdGlvbiBibHVyWShzb3VyY2UsIHRhcmdldCwgcikge1xuICB2YXIgbiA9IHNvdXJjZS53aWR0aCxcbiAgICAgIG0gPSBzb3VyY2UuaGVpZ2h0LFxuICAgICAgdyA9IChyIDw8IDEpICsgMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBmb3IgKHZhciBqID0gMCwgc3IgPSAwOyBqIDwgbSArIHI7ICsraikge1xuICAgICAgaWYgKGogPCBtKSB7XG4gICAgICAgIHNyICs9IHNvdXJjZS5kYXRhW2kgKyBqICogbl07XG4gICAgICB9XG4gICAgICBpZiAoaiA+PSByKSB7XG4gICAgICAgIGlmIChqID49IHcpIHtcbiAgICAgICAgICBzciAtPSBzb3VyY2UuZGF0YVtpICsgKGogLSB3KSAqIG5dO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5kYXRhW2kgKyAoaiAtIHIpICogbl0gPSBzciAvIE1hdGgubWluKGogKyAxLCBtIC0gMSArIHcgLSBqLCB3KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7bWF4LCByYW5nZSwgdGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7Ymx1clgsIGJsdXJZfSBmcm9tIFwiLi9ibHVyXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjb250b3VycyBmcm9tIFwiLi9jb250b3Vyc1wiO1xuXG5mdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0V2VpZ2h0KCkge1xuICByZXR1cm4gMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gZGVmYXVsdFgsXG4gICAgICB5ID0gZGVmYXVsdFksXG4gICAgICB3ZWlnaHQgPSBkZWZhdWx0V2VpZ2h0LFxuICAgICAgZHggPSA5NjAsXG4gICAgICBkeSA9IDUwMCxcbiAgICAgIHIgPSAyMCwgLy8gYmx1ciByYWRpdXNcbiAgICAgIGsgPSAyLCAvLyBsb2cyKGdyaWQgY2VsbCBzaXplKVxuICAgICAgbyA9IHIgKiAzLCAvLyBncmlkIG9mZnNldCwgdG8gcGFkIGZvciBibHVyXG4gICAgICBuID0gKGR4ICsgbyAqIDIpID4+IGssIC8vIGdyaWQgd2lkdGhcbiAgICAgIG0gPSAoZHkgKyBvICogMikgPj4gaywgLy8gZ3JpZCBoZWlnaHRcbiAgICAgIHRocmVzaG9sZCA9IGNvbnN0YW50KDIwKTtcblxuICBmdW5jdGlvbiBkZW5zaXR5KGRhdGEpIHtcbiAgICB2YXIgdmFsdWVzMCA9IG5ldyBGbG9hdDMyQXJyYXkobiAqIG0pLFxuICAgICAgICB2YWx1ZXMxID0gbmV3IEZsb2F0MzJBcnJheShuICogbSk7XG5cbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZCwgaSwgZGF0YSkge1xuICAgICAgdmFyIHhpID0gKCt4KGQsIGksIGRhdGEpICsgbykgPj4gayxcbiAgICAgICAgICB5aSA9ICgreShkLCBpLCBkYXRhKSArIG8pID4+IGssXG4gICAgICAgICAgd2kgPSArd2VpZ2h0KGQsIGksIGRhdGEpO1xuICAgICAgaWYgKHhpID49IDAgJiYgeGkgPCBuICYmIHlpID49IDAgJiYgeWkgPCBtKSB7XG4gICAgICAgIHZhbHVlczBbeGkgKyB5aSAqIG5dICs9IHdpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVE9ETyBPcHRpbWl6ZS5cbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcblxuICAgIHZhciB0eiA9IHRocmVzaG9sZCh2YWx1ZXMwKTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkge1xuICAgICAgdmFyIHN0b3AgPSBtYXgodmFsdWVzMCk7XG4gICAgICB0eiA9IHRpY2tTdGVwKDAsIHN0b3AsIHR6KTtcbiAgICAgIHR6ID0gcmFuZ2UoMCwgTWF0aC5mbG9vcihzdG9wIC8gdHopICogdHosIHR6KTtcbiAgICAgIHR6LnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRvdXJzKClcbiAgICAgICAgLnRocmVzaG9sZHModHopXG4gICAgICAgIC5zaXplKFtuLCBtXSlcbiAgICAgICh2YWx1ZXMwKVxuICAgICAgICAubWFwKHRyYW5zZm9ybSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm0oZ2VvbWV0cnkpIHtcbiAgICBnZW9tZXRyeS52YWx1ZSAqPSBNYXRoLnBvdygyLCAtMiAqIGspOyAvLyBEZW5zaXR5IGluIHBvaW50cyBwZXIgc3F1YXJlIHBpeGVsLlxuICAgIGdlb21ldHJ5LmNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUG9seWdvbik7XG4gICAgcmV0dXJuIGdlb21ldHJ5O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUG9seWdvbihjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUmluZyk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1SaW5nKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMuZm9yRWFjaCh0cmFuc2Zvcm1Qb2ludCk7XG4gIH1cblxuICAvLyBUT0RPIE9wdGltaXplLlxuICBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludChjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzWzBdID0gY29vcmRpbmF0ZXNbMF0gKiBNYXRoLnBvdygyLCBrKSAtIG87XG4gICAgY29vcmRpbmF0ZXNbMV0gPSBjb29yZGluYXRlc1sxXSAqIE1hdGgucG93KDIsIGspIC0gbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICBvID0gciAqIDM7XG4gICAgbiA9IChkeCArIG8gKiAyKSA+PiBrO1xuICAgIG0gPSAoZHkgKyBvICogMikgPj4gaztcbiAgICByZXR1cm4gZGVuc2l0eTtcbiAgfVxuXG4gIGRlbnNpdHkueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogeDtcbiAgfTtcblxuICBkZW5zaXR5LnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBkZW5zaXR5KSA6IHk7XG4gIH07XG5cbiAgZGVuc2l0eS53ZWlnaHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod2VpZ2h0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogd2VpZ2h0O1xuICB9O1xuXG4gIGRlbnNpdHkuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcbiAgICB2YXIgXzAgPSBNYXRoLmNlaWwoX1swXSksIF8xID0gTWF0aC5jZWlsKF9bMV0pO1xuICAgIGlmICghKF8wID49IDApICYmICEoXzAgPj0gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2l6ZVwiKTtcbiAgICByZXR1cm4gZHggPSBfMCwgZHkgPSBfMSwgcmVzaXplKCk7XG4gIH07XG5cbiAgZGVuc2l0eS5jZWxsU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiAxIDw8IGs7XG4gICAgaWYgKCEoKF8gPSArXykgPj0gMSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2VsbCBzaXplXCIpO1xuICAgIHJldHVybiBrID0gTWF0aC5mbG9vcihNYXRoLmxvZyhfKSAvIE1hdGguTE4yKSwgcmVzaXplKCk7XG4gIH07XG5cbiAgZGVuc2l0eS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGRlbnNpdHkpIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIGRlbnNpdHkuYmFuZHdpZHRoID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydChyICogKHIgKyAxKSk7XG4gICAgaWYgKCEoKF8gPSArXykgPj0gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYmFuZHdpZHRoXCIpO1xuICAgIHJldHVybiByID0gTWF0aC5yb3VuZCgoTWF0aC5zcXJ0KDQgKiBfICogXyArIDEpIC0gMSkgLyAyKSwgcmVzaXplKCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlbnNpdHk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERyYWdFdmVudCh0YXJnZXQsIHR5cGUsIHN1YmplY3QsIGlkLCBhY3RpdmUsIHgsIHksIGR4LCBkeSwgZGlzcGF0Y2gpIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gIHRoaXMuaWRlbnRpZmllciA9IGlkO1xuICB0aGlzLmFjdGl2ZSA9IGFjdGl2ZTtcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbiAgdGhpcy5keCA9IGR4O1xuICB0aGlzLmR5ID0gZHk7XG4gIHRoaXMuXyA9IGRpc3BhdGNoO1xufVxuXG5EcmFnRXZlbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IHRoaXMuXy5vbi5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSA9PT0gdGhpcy5fID8gdGhpcyA6IHZhbHVlO1xufTtcbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtldmVudCwgY3VzdG9tRXZlbnQsIHNlbGVjdCwgbW91c2UsIHRvdWNofSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9kcmFnLCB7eWVzZHJhZ30gZnJvbSBcIi4vbm9kcmFnLmpzXCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnQuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IERyYWdFdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29udGFpbmVyKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3ViamVjdChkKSB7XG4gIHJldHVybiBkID09IG51bGwgPyB7eDogZXZlbnQueCwgeTogZXZlbnQueX0gOiBkO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBjb250YWluZXIgPSBkZWZhdWx0Q29udGFpbmVyLFxuICAgICAgc3ViamVjdCA9IGRlZmF1bHRTdWJqZWN0LFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIGdlc3R1cmVzID0ge30sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZHJhZ1wiLCBcImVuZFwiKSxcbiAgICAgIGFjdGl2ZSA9IDAsXG4gICAgICBtb3VzZWRvd254LFxuICAgICAgbW91c2Vkb3dueSxcbiAgICAgIG1vdXNlbW92aW5nLFxuICAgICAgdG91Y2hlbmRpbmcsXG4gICAgICBjbGlja0Rpc3RhbmNlMiA9IDA7XG5cbiAgZnVuY3Rpb24gZHJhZyhzZWxlY3Rpb24pIHtcbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5kcmFnXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLmRyYWdcIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuZHJhZyB0b3VjaGNhbmNlbC5kcmFnXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KFwibW91c2VcIiwgY29udGFpbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIG1vdXNlLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICghZ2VzdHVyZSkgcmV0dXJuO1xuICAgIHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC5kcmFnXCIsIG1vdXNldXBwZWQsIHRydWUpO1xuICAgIG5vZHJhZyhldmVudC52aWV3KTtcbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgbW91c2Vtb3ZpbmcgPSBmYWxzZTtcbiAgICBtb3VzZWRvd254ID0gZXZlbnQuY2xpZW50WDtcbiAgICBtb3VzZWRvd255ID0gZXZlbnQuY2xpZW50WTtcbiAgICBnZXN0dXJlKFwic3RhcnRcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgIG5vZXZlbnQoKTtcbiAgICBpZiAoIW1vdXNlbW92aW5nKSB7XG4gICAgICB2YXIgZHggPSBldmVudC5jbGllbnRYIC0gbW91c2Vkb3dueCwgZHkgPSBldmVudC5jbGllbnRZIC0gbW91c2Vkb3dueTtcbiAgICAgIG1vdXNlbW92aW5nID0gZHggKiBkeCArIGR5ICogZHkgPiBjbGlja0Rpc3RhbmNlMjtcbiAgICB9XG4gICAgZ2VzdHVyZXMubW91c2UoXCJkcmFnXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2V1cHBlZCgpIHtcbiAgICBzZWxlY3QoZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZyBtb3VzZXVwLmRyYWdcIiwgbnVsbCk7XG4gICAgeWVzZHJhZyhldmVudC52aWV3LCBtb3VzZW1vdmluZyk7XG4gICAgbm9ldmVudCgpO1xuICAgIGdlc3R1cmVzLm1vdXNlKFwiZW5kXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBjID0gY29udGFpbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gYmVmb3Jlc3RhcnQodG91Y2hlc1tpXS5pZGVudGlmaWVyLCBjLCB0b3VjaCwgdGhpcywgYXJndW1lbnRzKSkge1xuICAgICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICAgIGdlc3R1cmUoXCJzdGFydFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBub2V2ZW50KCk7XG4gICAgICAgIGdlc3R1cmUoXCJkcmFnXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgZ2VzdHVyZShcImVuZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBiZWZvcmVzdGFydChpZCwgY29udGFpbmVyLCBwb2ludCwgdGhhdCwgYXJncykge1xuICAgIHZhciBwID0gcG9pbnQoY29udGFpbmVyLCBpZCksIHMsIGR4LCBkeSxcbiAgICAgICAgc3VibGlzdGVuZXJzID0gbGlzdGVuZXJzLmNvcHkoKTtcblxuICAgIGlmICghY3VzdG9tRXZlbnQobmV3IERyYWdFdmVudChkcmFnLCBcImJlZm9yZXN0YXJ0XCIsIHMsIGlkLCBhY3RpdmUsIHBbMF0sIHBbMV0sIDAsIDAsIHN1Ymxpc3RlbmVycyksIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKChldmVudC5zdWJqZWN0ID0gcyA9IHN1YmplY3QuYXBwbHkodGhhdCwgYXJncykpID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICAgIGR4ID0gcy54IC0gcFswXSB8fCAwO1xuICAgICAgZHkgPSBzLnkgLSBwWzFdIHx8IDA7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KSkgcmV0dXJuO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGdlc3R1cmUodHlwZSkge1xuICAgICAgdmFyIHAwID0gcCwgbjtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwic3RhcnRcIjogZ2VzdHVyZXNbaWRdID0gZ2VzdHVyZSwgbiA9IGFjdGl2ZSsrOyBicmVhaztcbiAgICAgICAgY2FzZSBcImVuZFwiOiBkZWxldGUgZ2VzdHVyZXNbaWRdLCAtLWFjdGl2ZTsgLy8gbm9icmVha1xuICAgICAgICBjYXNlIFwiZHJhZ1wiOiBwID0gcG9pbnQoY29udGFpbmVyLCBpZCksIG4gPSBhY3RpdmU7IGJyZWFrO1xuICAgICAgfVxuICAgICAgY3VzdG9tRXZlbnQobmV3IERyYWdFdmVudChkcmFnLCB0eXBlLCBzLCBpZCwgbiwgcFswXSArIGR4LCBwWzFdICsgZHksIHBbMF0gLSBwMFswXSwgcFsxXSAtIHAwWzFdLCBzdWJsaXN0ZW5lcnMpLCBzdWJsaXN0ZW5lcnMuYXBwbHksIHN1Ymxpc3RlbmVycywgW3R5cGUsIHRoYXQsIGFyZ3NdKTtcbiAgICB9O1xuICB9XG5cbiAgZHJhZy5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBkcmFnKSA6IGZpbHRlcjtcbiAgfTtcblxuICBkcmFnLmNvbnRhaW5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250YWluZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBkcmFnKSA6IGNvbnRhaW5lcjtcbiAgfTtcblxuICBkcmFnLnN1YmplY3QgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3ViamVjdCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGRyYWcpIDogc3ViamVjdDtcbiAgfTtcblxuICBkcmFnLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGRyYWcpIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIGRyYWcub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gZHJhZyA6IHZhbHVlO1xuICB9O1xuXG4gIGRyYWcuY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgZHJhZykgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICB9O1xuXG4gIHJldHVybiBkcmFnO1xufVxuIiwidmFyIEVPTCA9IHt9LFxuICAgIEVPRiA9IHt9LFxuICAgIFFVT1RFID0gMzQsXG4gICAgTkVXTElORSA9IDEwLFxuICAgIFJFVFVSTiA9IDEzO1xuXG5mdW5jdGlvbiBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucykge1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZFwiLCBcInJldHVybiB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdIHx8IFxcXCJcXFwiXCI7XG4gIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xufVxuXG5mdW5jdGlvbiBjdXN0b21Db252ZXJ0ZXIoY29sdW1ucywgZikge1xuICB2YXIgb2JqZWN0ID0gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpO1xuICByZXR1cm4gZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgcmV0dXJuIGYob2JqZWN0KHJvdyksIGksIGNvbHVtbnMpO1xuICB9O1xufVxuXG4vLyBDb21wdXRlIHVuaXF1ZSBjb2x1bW5zIGluIG9yZGVyIG9mIGRpc2NvdmVyeS5cbmZ1bmN0aW9uIGluZmVyQ29sdW1ucyhyb3dzKSB7XG4gIHZhciBjb2x1bW5TZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgY29sdW1ucyA9IFtdO1xuXG4gIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICBmb3IgKHZhciBjb2x1bW4gaW4gcm93KSB7XG4gICAgICBpZiAoIShjb2x1bW4gaW4gY29sdW1uU2V0KSkge1xuICAgICAgICBjb2x1bW5zLnB1c2goY29sdW1uU2V0W2NvbHVtbl0gPSBjb2x1bW4pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbHVtbnM7XG59XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgd2lkdGgpIHtcbiAgdmFyIHMgPSB2YWx1ZSArIFwiXCIsIGxlbmd0aCA9IHMubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKDApICsgcyA6IHM7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciA8IDAgPyBcIi1cIiArIHBhZCgteWVhciwgNilcbiAgICA6IHllYXIgPiA5OTk5ID8gXCIrXCIgKyBwYWQoeWVhciwgNilcbiAgICA6IHBhZCh5ZWFyLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG4gIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSxcbiAgICAgIG1pbnV0ZXMgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgIHNlY29uZHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IFwiSW52YWxpZCBEYXRlXCJcbiAgICAgIDogZm9ybWF0WWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIDQpICsgXCItXCIgKyBwYWQoZGF0ZS5nZXRVVENNb250aCgpICsgMSwgMikgKyBcIi1cIiArIHBhZChkYXRlLmdldFVUQ0RhdGUoKSwgMilcbiAgICAgICsgKG1pbGxpc2Vjb25kcyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCI6XCIgKyBwYWQoc2Vjb25kcywgMikgKyBcIi5cIiArIHBhZChtaWxsaXNlY29uZHMsIDMpICsgXCJaXCJcbiAgICAgIDogc2Vjb25kcyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCI6XCIgKyBwYWQoc2Vjb25kcywgMikgKyBcIlpcIlxuICAgICAgOiBtaW51dGVzIHx8IGhvdXJzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIlpcIlxuICAgICAgOiBcIlwiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEJvZHkocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiXG4gICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gZm9ybWF0RGF0ZSh2YWx1ZSlcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHZhbHVlICs9IFwiXCIpID8gXCJcXFwiXCIgKyB2YWx1ZS5yZXBsYWNlKC9cIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdEJvZHk6IGZvcm1hdEJvZHksXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93cyxcbiAgICBmb3JtYXRSb3c6IGZvcm1hdFJvdyxcbiAgICBmb3JtYXRWYWx1ZTogZm9ybWF0VmFsdWVcbiAgfTtcbn1cbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2LmpzXCI7XG5cbnZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG5leHBvcnQgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuZXhwb3J0IHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRCb2R5ID0gY3N2LmZvcm1hdEJvZHk7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Um93ID0gY3N2LmZvcm1hdFJvdztcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0VmFsdWUgPSBjc3YuZm9ybWF0VmFsdWU7XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2Rzdi5qc1wiO1xuXG52YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG5leHBvcnQgdmFyIHRzdlBhcnNlID0gdHN2LnBhcnNlO1xuZXhwb3J0IHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRCb2R5ID0gdHN2LmZvcm1hdEJvZHk7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Um93ID0gdHN2LmZvcm1hdFJvdztcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0VmFsdWUgPSB0c3YuZm9ybWF0VmFsdWU7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhdXRvVHlwZShvYmplY3QpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldLnRyaW0oKSwgbnVtYmVyLCBtO1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gbnVsbDtcbiAgICBlbHNlIGlmICh2YWx1ZSA9PT0gXCJ0cnVlXCIpIHZhbHVlID0gdHJ1ZTtcbiAgICBlbHNlIGlmICh2YWx1ZSA9PT0gXCJmYWxzZVwiKSB2YWx1ZSA9IGZhbHNlO1xuICAgIGVsc2UgaWYgKHZhbHVlID09PSBcIk5hTlwiKSB2YWx1ZSA9IE5hTjtcbiAgICBlbHNlIGlmICghaXNOYU4obnVtYmVyID0gK3ZhbHVlKSkgdmFsdWUgPSBudW1iZXI7XG4gICAgZWxzZSBpZiAobSA9IHZhbHVlLm1hdGNoKC9eKFstK11cXGR7Mn0pP1xcZHs0fSgtXFxkezJ9KC1cXGR7Mn0pPyk/KFRcXGR7Mn06XFxkezJ9KDpcXGR7Mn0oXFwuXFxkezN9KT8pPyhafFstK11cXGR7Mn06XFxkezJ9KT8pPyQvKSkge1xuICAgICAgaWYgKGZpeHR6ICYmICEhbVs0XSAmJiAhbVs3XSkgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8tL2csIFwiL1wiKS5yZXBsYWNlKC9ULywgXCIgXCIpO1xuICAgICAgdmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgY29udGludWU7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtZHN2L2lzc3Vlcy80NVxudmFyIGZpeHR6ID0gbmV3IERhdGUoXCIyMDE5LTAxLTAxVDAwOjAwXCIpLmdldEhvdXJzKCkgfHwgbmV3IERhdGUoXCIyMDE5LTA3LTAxVDAwOjAwXCIpLmdldEhvdXJzKCk7IiwiZXhwb3J0IGZ1bmN0aW9uIGxpbmVhcih0KSB7XG4gIHJldHVybiArdDtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBxdWFkSW4odCkge1xuICByZXR1cm4gdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWFkT3V0KHQpIHtcbiAgcmV0dXJuIHQgKiAoMiAtIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVhZEluT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgOiAtLXQgKiAoMiAtIHQpICsgMSkgLyAyO1xufVxuIiwidmFyIGV4cG9uZW50ID0gMztcblxuZXhwb3J0IHZhciBwb2x5SW4gPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlJbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHQsIGUpO1xuICB9XG5cbiAgcG9seUluLmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5SW47XG59KShleHBvbmVudCk7XG5cbmV4cG9ydCB2YXIgcG9seU91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seU91dCh0KSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gdCwgZSk7XG4gIH1cblxuICBwb2x5T3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5T3V0O1xufSkoZXhwb25lbnQpO1xuXG5leHBvcnQgdmFyIHBvbHlJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seUluT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdyh0LCBlKSA6IDIgLSBNYXRoLnBvdygyIC0gdCwgZSkpIC8gMjtcbiAgfVxuXG4gIHBvbHlJbk91dC5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seUluT3V0O1xufSkoZXhwb25lbnQpO1xuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICBoYWxmUGkgPSBwaSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbih0KSB7XG4gIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5PdXQodCkge1xuICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBleHBJbih0KSB7XG4gIHJldHVybiBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBPdXQodCkge1xuICByZXR1cm4gMSAtIE1hdGgucG93KDIsIC0xMCAqIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhwSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCkgOiAyIC0gTWF0aC5wb3coMiwgMTAgLSAxMCAqIHQpKSAvIDI7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY2lyY2xlSW4odCkge1xuICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2lyY2xlT3V0KHQpIHtcbiAgcmV0dXJuIE1hdGguc3FydCgxIC0gLS10ICogdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaXJjbGVJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KSA6IE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpIC8gMjtcbn1cbiIsInZhciBiMSA9IDQgLyAxMSxcbiAgICBiMiA9IDYgLyAxMSxcbiAgICBiMyA9IDggLyAxMSxcbiAgICBiNCA9IDMgLyA0LFxuICAgIGI1ID0gOSAvIDExLFxuICAgIGI2ID0gMTAgLyAxMSxcbiAgICBiNyA9IDE1IC8gMTYsXG4gICAgYjggPSAyMSAvIDIyLFxuICAgIGI5ID0gNjMgLyA2NCxcbiAgICBiMCA9IDEgLyBiMSAvIGIxO1xuXG5leHBvcnQgZnVuY3Rpb24gYm91bmNlSW4odCkge1xuICByZXR1cm4gMSAtIGJvdW5jZU91dCgxIC0gdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBib3VuY2VPdXQodCkge1xuICByZXR1cm4gKHQgPSArdCkgPCBiMSA/IGIwICogdCAqIHQgOiB0IDwgYjMgPyBiMCAqICh0IC09IGIyKSAqIHQgKyBiNCA6IHQgPCBiNiA/IGIwICogKHQgLT0gYjUpICogdCArIGI3IDogYjAgKiAodCAtPSBiOCkgKiB0ICsgYjk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBib3VuY2VJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IDEgLSBib3VuY2VPdXQoMSAtIHQpIDogYm91bmNlT3V0KHQgLSAxKSArIDEpIC8gMjtcbn1cbiIsInZhciBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuXG5leHBvcnQgdmFyIGJhY2tJbiA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja0luKHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgfVxuXG4gIGJhY2tJbi5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgcmV0dXJuIGJhY2tJbjtcbn0pKG92ZXJzaG9vdCk7XG5cbmV4cG9ydCB2YXIgYmFja091dCA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja091dCh0KSB7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gIH1cblxuICBiYWNrT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja091dDtcbn0pKG92ZXJzaG9vdCk7XG5cbmV4cG9ydCB2YXIgYmFja0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPCAxID8gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSA6ICh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMikgLyAyO1xuICB9XG5cbiAgYmFja0luT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luT3V0O1xufSkob3ZlcnNob290KTtcbiIsInZhciB0YXUgPSAyICogTWF0aC5QSSxcbiAgICBhbXBsaXR1ZGUgPSAxLFxuICAgIHBlcmlvZCA9IDAuMztcblxuZXhwb3J0IHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICA6IDIgLSBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcbiAgfVxuXG4gIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbk91dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcbiIsImZ1bmN0aW9uIHJlc3BvbnNlQmxvYihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlQmxvYik7XG59XG4iLCJmdW5jdGlvbiByZXNwb25zZUFycmF5QnVmZmVyKHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlQXJyYXlCdWZmZXIpO1xufVxuIiwiZnVuY3Rpb24gcmVzcG9uc2VUZXh0KHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VUZXh0KTtcbn1cbiIsImltcG9ydCB7Y3N2UGFyc2UsIGRzdkZvcm1hdCwgdHN2UGFyc2V9IGZyb20gXCJkMy1kc3ZcIjtcbmltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHRcIjtcblxuZnVuY3Rpb24gZHN2UGFyc2UocGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0LCByb3cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSByb3cgPSBpbml0LCBpbml0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIsIGlucHV0LCBpbml0LCByb3cpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgdmFyIGZvcm1hdCA9IGRzdkZvcm1hdChkZWxpbWl0ZXIpO1xuICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIHJldHVybiBmb3JtYXQucGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIGNzdiA9IGRzdlBhcnNlKGNzdlBhcnNlKTtcbmV4cG9ydCB2YXIgdHN2ID0gZHN2UGFyc2UodHN2UGFyc2UpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZTtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5pdCkgaW1hZ2Vba2V5XSA9IGluaXRba2V5XTtcbiAgICBpbWFnZS5vbmVycm9yID0gcmVqZWN0O1xuICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyByZXNvbHZlKGltYWdlKTsgfTtcbiAgICBpbWFnZS5zcmMgPSBpbnB1dDtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZXNwb25zZUpzb24ocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUpzb24pO1xufVxuIiwiaW1wb3J0IHRleHQgZnJvbSBcIi4vdGV4dFwiO1xuXG5mdW5jdGlvbiBwYXJzZXIodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGluaXQpICB7XG4gICAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24odGV4dCkge1xuICAgICAgcmV0dXJuIChuZXcgRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcodGV4dCwgdHlwZSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlcihcImFwcGxpY2F0aW9uL3htbFwiKTtcblxuZXhwb3J0IHZhciBodG1sID0gcGFyc2VyKFwidGV4dC9odG1sXCIpO1xuXG5leHBvcnQgdmFyIHN2ZyA9IHBhcnNlcihcImltYWdlL3N2Zyt4bWxcIik7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciBub2RlcztcblxuICBpZiAoeCA9PSBudWxsKSB4ID0gMDtcbiAgaWYgKHkgPT0gbnVsbCkgeSA9IDA7XG5cbiAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHN4ID0gMCxcbiAgICAgICAgc3kgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBzeCArPSBub2RlLngsIHN5ICs9IG5vZGUueTtcbiAgICB9XG5cbiAgICBmb3IgKHN4ID0gc3ggLyBuIC0geCwgc3kgPSBzeSAvIG4gLSB5LCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnggLT0gc3gsIG5vZGUueSAtPSBzeTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgfTtcblxuICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArXywgZm9yY2UpIDogeDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSArXywgZm9yY2UpIDogeTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMWUtNjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgdmFyIHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpLFxuICAgICAgeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCk7XG4gIHJldHVybiBhZGQodGhpcy5jb3Zlcih4LCB5KSwgeCwgeSwgZCk7XG59XG5cbmZ1bmN0aW9uIGFkZCh0cmVlLCB4LCB5LCBkKSB7XG4gIGlmIChpc05hTih4KSB8fCBpc05hTih5KSkgcmV0dXJuIHRyZWU7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdHJlZS5fcm9vdCxcbiAgICAgIGxlYWYgPSB7ZGF0YTogZH0sXG4gICAgICB4MCA9IHRyZWUuX3gwLFxuICAgICAgeTAgPSB0cmVlLl95MCxcbiAgICAgIHgxID0gdHJlZS5feDEsXG4gICAgICB5MSA9IHRyZWUuX3kxLFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHhwLFxuICAgICAgeXAsXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgLy8gRmluZCB0aGUgZXhpc3RpbmcgbGVhZiBmb3IgdGhlIG5ldyBwb2ludCwgb3IgYWRkIGl0LlxuICB3aGlsZSAobm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAocGFyZW50ID0gbm9kZSwgIShub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbiAgfVxuXG4gIC8vIElzIHRoZSBuZXcgcG9pbnQgaXMgZXhhY3RseSBjb2luY2lkZW50IHdpdGggdGhlIGV4aXN0aW5nIHBvaW50P1xuICB4cCA9ICt0cmVlLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgeXAgPSArdHJlZS5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSk7XG4gIGlmICh4ID09PSB4cCAmJiB5ID09PSB5cCkgcmV0dXJuIGxlYWYubmV4dCA9IG5vZGUsIHBhcmVudCA/IHBhcmVudFtpXSA9IGxlYWYgOiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBPdGhlcndpc2UsIHNwbGl0IHRoZSBsZWFmIG5vZGUgdW50aWwgdGhlIG9sZCBhbmQgbmV3IHBvaW50IGFyZSBzZXBhcmF0ZWQuXG4gIGRvIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQgPyBwYXJlbnRbaV0gPSBuZXcgQXJyYXkoNCkgOiB0cmVlLl9yb290ID0gbmV3IEFycmF5KDQpO1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICB9IHdoaWxlICgoaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHQpID09PSAoaiA9ICh5cCA+PSB5bSkgPDwgMSB8ICh4cCA+PSB4bSkpKTtcbiAgcmV0dXJuIHBhcmVudFtqXSA9IG5vZGUsIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRBbGwoZGF0YSkge1xuICB2YXIgZCwgaSwgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4eiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHl6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgeDAgPSBJbmZpbml0eSxcbiAgICAgIHkwID0gSW5maW5pdHksXG4gICAgICB4MSA9IC1JbmZpbml0eSxcbiAgICAgIHkxID0gLUluZmluaXR5O1xuXG4gIC8vIENvbXB1dGUgdGhlIHBvaW50cyBhbmQgdGhlaXIgZXh0ZW50LlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQgPSBkYXRhW2ldKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSBjb250aW51ZTtcbiAgICB4eltpXSA9IHg7XG4gICAgeXpbaV0gPSB5O1xuICAgIGlmICh4IDwgeDApIHgwID0geDtcbiAgICBpZiAoeCA+IHgxKSB4MSA9IHg7XG4gICAgaWYgKHkgPCB5MCkgeTAgPSB5O1xuICAgIGlmICh5ID4geTEpIHkxID0geTtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIHdlcmUgbm8gKHZhbGlkKSBwb2ludHMsIGFib3J0LlxuICBpZiAoeDAgPiB4MSB8fCB5MCA+IHkxKSByZXR1cm4gdGhpcztcblxuICAvLyBFeHBhbmQgdGhlIHRyZWUgdG8gY292ZXIgdGhlIG5ldyBwb2ludHMuXG4gIHRoaXMuY292ZXIoeDAsIHkwKS5jb3Zlcih4MSwgeTEpO1xuXG4gIC8vIEFkZCB0aGUgbmV3IHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGFkZCh0aGlzLCB4eltpXSwgeXpbaV0sIGRhdGFbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB0aGlzLm5vZGUgPSBub2RlO1xuICB0aGlzLngwID0geDA7XG4gIHRoaXMueTAgPSB5MDtcbiAgdGhpcy54MSA9IHgxO1xuICB0aGlzLnkxID0geTE7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVmYXVsdFgoZCkge1xuICByZXR1cm4gZFswXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl94ID0gXywgdGhpcykgOiB0aGlzLl94O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRZKGQpIHtcbiAgcmV0dXJuIGRbMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feSA9IF8sIHRoaXMpIDogdGhpcy5feTtcbn1cbiIsImltcG9ydCB0cmVlX2FkZCwge2FkZEFsbCBhcyB0cmVlX2FkZEFsbH0gZnJvbSBcIi4vYWRkLmpzXCI7XG5pbXBvcnQgdHJlZV9jb3ZlciBmcm9tIFwiLi9jb3Zlci5qc1wiO1xuaW1wb3J0IHRyZWVfZGF0YSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgdHJlZV9leHRlbnQgZnJvbSBcIi4vZXh0ZW50LmpzXCI7XG5pbXBvcnQgdHJlZV9maW5kIGZyb20gXCIuL2ZpbmQuanNcIjtcbmltcG9ydCB0cmVlX3JlbW92ZSwge3JlbW92ZUFsbCBhcyB0cmVlX3JlbW92ZUFsbH0gZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJlZV9yb290IGZyb20gXCIuL3Jvb3QuanNcIjtcbmltcG9ydCB0cmVlX3NpemUgZnJvbSBcIi4vc2l6ZS5qc1wiO1xuaW1wb3J0IHRyZWVfdmlzaXQgZnJvbSBcIi4vdmlzaXQuanNcIjtcbmltcG9ydCB0cmVlX3Zpc2l0QWZ0ZXIgZnJvbSBcIi4vdmlzaXRBZnRlci5qc1wiO1xuaW1wb3J0IHRyZWVfeCwge2RlZmF1bHRYfSBmcm9tIFwiLi94LmpzXCI7XG5pbXBvcnQgdHJlZV95LCB7ZGVmYXVsdFl9IGZyb20gXCIuL3kuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhZHRyZWUobm9kZXMsIHgsIHkpIHtcbiAgdmFyIHRyZWUgPSBuZXcgUXVhZHRyZWUoeCA9PSBudWxsID8gZGVmYXVsdFggOiB4LCB5ID09IG51bGwgPyBkZWZhdWx0WSA6IHksIE5hTiwgTmFOLCBOYU4sIE5hTik7XG4gIHJldHVybiBub2RlcyA9PSBudWxsID8gdHJlZSA6IHRyZWUuYWRkQWxsKG5vZGVzKTtcbn1cblxuZnVuY3Rpb24gUXVhZHRyZWUoeCwgeSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdGhpcy5feCA9IHg7XG4gIHRoaXMuX3kgPSB5O1xuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICB0aGlzLl9yb290ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBsZWFmX2NvcHkobGVhZikge1xuICB2YXIgY29weSA9IHtkYXRhOiBsZWFmLmRhdGF9LCBuZXh0ID0gY29weTtcbiAgd2hpbGUgKGxlYWYgPSBsZWFmLm5leHQpIG5leHQgPSBuZXh0Lm5leHQgPSB7ZGF0YTogbGVhZi5kYXRhfTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbnZhciB0cmVlUHJvdG8gPSBxdWFkdHJlZS5wcm90b3R5cGUgPSBRdWFkdHJlZS5wcm90b3R5cGU7XG5cbnRyZWVQcm90by5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb3B5ID0gbmV3IFF1YWR0cmVlKHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgbm9kZXMsXG4gICAgICBjaGlsZDtcblxuICBpZiAoIW5vZGUpIHJldHVybiBjb3B5O1xuXG4gIGlmICghbm9kZS5sZW5ndGgpIHJldHVybiBjb3B5Ll9yb290ID0gbGVhZl9jb3B5KG5vZGUpLCBjb3B5O1xuXG4gIG5vZGVzID0gW3tzb3VyY2U6IG5vZGUsIHRhcmdldDogY29weS5fcm9vdCA9IG5ldyBBcnJheSg0KX1dO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGUuc291cmNlW2ldKSB7XG4gICAgICAgIGlmIChjaGlsZC5sZW5ndGgpIG5vZGVzLnB1c2goe3NvdXJjZTogY2hpbGQsIHRhcmdldDogbm9kZS50YXJnZXRbaV0gPSBuZXcgQXJyYXkoNCl9KTtcbiAgICAgICAgZWxzZSBub2RlLnRhcmdldFtpXSA9IGxlYWZfY29weShjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59O1xuXG50cmVlUHJvdG8uYWRkID0gdHJlZV9hZGQ7XG50cmVlUHJvdG8uYWRkQWxsID0gdHJlZV9hZGRBbGw7XG50cmVlUHJvdG8uY292ZXIgPSB0cmVlX2NvdmVyO1xudHJlZVByb3RvLmRhdGEgPSB0cmVlX2RhdGE7XG50cmVlUHJvdG8uZXh0ZW50ID0gdHJlZV9leHRlbnQ7XG50cmVlUHJvdG8uZmluZCA9IHRyZWVfZmluZDtcbnRyZWVQcm90by5yZW1vdmUgPSB0cmVlX3JlbW92ZTtcbnRyZWVQcm90by5yZW1vdmVBbGwgPSB0cmVlX3JlbW92ZUFsbDtcbnRyZWVQcm90by5yb290ID0gdHJlZV9yb290O1xudHJlZVByb3RvLnNpemUgPSB0cmVlX3NpemU7XG50cmVlUHJvdG8udmlzaXQgPSB0cmVlX3Zpc2l0O1xudHJlZVByb3RvLnZpc2l0QWZ0ZXIgPSB0cmVlX3Zpc2l0QWZ0ZXI7XG50cmVlUHJvdG8ueCA9IHRyZWVfeDtcbnRyZWVQcm90by55ID0gdHJlZV95O1xuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgamlnZ2xlIGZyb20gXCIuL2ppZ2dsZVwiO1xuaW1wb3J0IHtxdWFkdHJlZX0gZnJvbSBcImQzLXF1YWR0cmVlXCI7XG5cbmZ1bmN0aW9uIHgoZCkge1xuICByZXR1cm4gZC54ICsgZC52eDtcbn1cblxuZnVuY3Rpb24geShkKSB7XG4gIHJldHVybiBkLnkgKyBkLnZ5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYWRpdXMpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgcmFkaWksXG4gICAgICBzdHJlbmd0aCA9IDEsXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudChyYWRpdXMgPT0gbnVsbCA/IDEgOiArcmFkaXVzKTtcblxuICBmdW5jdGlvbiBmb3JjZSgpIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgdHJlZSxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgeGksXG4gICAgICAgIHlpLFxuICAgICAgICByaSxcbiAgICAgICAgcmkyO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIHRyZWUgPSBxdWFkdHJlZShub2RlcywgeCwgeSkudmlzaXRBZnRlcihwcmVwYXJlKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICByaSA9IHJhZGlpW25vZGUuaW5kZXhdLCByaTIgPSByaSAqIHJpO1xuICAgICAgICB4aSA9IG5vZGUueCArIG5vZGUudng7XG4gICAgICAgIHlpID0gbm9kZS55ICsgbm9kZS52eTtcbiAgICAgICAgdHJlZS52aXNpdChhcHBseSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgIHZhciBkYXRhID0gcXVhZC5kYXRhLCByaiA9IHF1YWQuciwgciA9IHJpICsgcmo7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS5pbmRleCA+IG5vZGUuaW5kZXgpIHtcbiAgICAgICAgICB2YXIgeCA9IHhpIC0gZGF0YS54IC0gZGF0YS52eCxcbiAgICAgICAgICAgICAgeSA9IHlpIC0gZGF0YS55IC0gZGF0YS52eSxcbiAgICAgICAgICAgICAgbCA9IHggKiB4ICsgeSAqIHk7XG4gICAgICAgICAgaWYgKGwgPCByICogcikge1xuICAgICAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICAgICAgICBsID0gKHIgLSAobCA9IE1hdGguc3FydChsKSkpIC8gbCAqIHN0cmVuZ3RoO1xuICAgICAgICAgICAgbm9kZS52eCArPSAoeCAqPSBsKSAqIChyID0gKHJqICo9IHJqKSAvIChyaTIgKyByaikpO1xuICAgICAgICAgICAgbm9kZS52eSArPSAoeSAqPSBsKSAqIHI7XG4gICAgICAgICAgICBkYXRhLnZ4IC09IHggKiAociA9IDEgLSByKTtcbiAgICAgICAgICAgIGRhdGEudnkgLT0geSAqIHI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB4MCA+IHhpICsgciB8fCB4MSA8IHhpIC0gciB8fCB5MCA+IHlpICsgciB8fCB5MSA8IHlpIC0gcjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVwYXJlKHF1YWQpIHtcbiAgICBpZiAocXVhZC5kYXRhKSByZXR1cm4gcXVhZC5yID0gcmFkaWlbcXVhZC5kYXRhLmluZGV4XTtcbiAgICBmb3IgKHZhciBpID0gcXVhZC5yID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgaWYgKHF1YWRbaV0gJiYgcXVhZFtpXS5yID4gcXVhZC5yKSB7XG4gICAgICAgIHF1YWQuciA9IHF1YWRbaV0ucjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcbiAgICByYWRpaSA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHJhZGlpW25vZGUuaW5kZXhdID0gK3JhZGl1cyhub2RlLCBpLCBub2Rlcyk7XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpdGVyYXRpb25zID0gK18sIGZvcmNlKSA6IGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSArXywgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHJhZGl1cztcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBqaWdnbGUgZnJvbSBcIi4vamlnZ2xlXCI7XG5pbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcblxuZnVuY3Rpb24gaW5kZXgoZCkge1xuICByZXR1cm4gZC5pbmRleDtcbn1cblxuZnVuY3Rpb24gZmluZChub2RlQnlJZCwgbm9kZUlkKSB7XG4gIHZhciBub2RlID0gbm9kZUJ5SWQuZ2V0KG5vZGVJZCk7XG4gIGlmICghbm9kZSkgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZzogXCIgKyBub2RlSWQpO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obGlua3MpIHtcbiAgdmFyIGlkID0gaW5kZXgsXG4gICAgICBzdHJlbmd0aCA9IGRlZmF1bHRTdHJlbmd0aCxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIGRpc3RhbmNlID0gY29uc3RhbnQoMzApLFxuICAgICAgZGlzdGFuY2VzLFxuICAgICAgbm9kZXMsXG4gICAgICBjb3VudCxcbiAgICAgIGJpYXMsXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAobGlua3MgPT0gbnVsbCkgbGlua3MgPSBbXTtcblxuICBmdW5jdGlvbiBkZWZhdWx0U3RyZW5ndGgobGluaykge1xuICAgIHJldHVybiAxIC8gTWF0aC5taW4oY291bnRbbGluay5zb3VyY2UuaW5kZXhdLCBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBrID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxpbmssIHNvdXJjZSwgdGFyZ2V0LCB4LCB5LCBsLCBiOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rc1tpXSwgc291cmNlID0gbGluay5zb3VyY2UsIHRhcmdldCA9IGxpbmsudGFyZ2V0O1xuICAgICAgICB4ID0gdGFyZ2V0LnggKyB0YXJnZXQudnggLSBzb3VyY2UueCAtIHNvdXJjZS52eCB8fCBqaWdnbGUoKTtcbiAgICAgICAgeSA9IHRhcmdldC55ICsgdGFyZ2V0LnZ5IC0gc291cmNlLnkgLSBzb3VyY2UudnkgfHwgamlnZ2xlKCk7XG4gICAgICAgIGwgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgIGwgPSAobCAtIGRpc3RhbmNlc1tpXSkgLyBsICogYWxwaGEgKiBzdHJlbmd0aHNbaV07XG4gICAgICAgIHggKj0gbCwgeSAqPSBsO1xuICAgICAgICB0YXJnZXQudnggLT0geCAqIChiID0gYmlhc1tpXSk7XG4gICAgICAgIHRhcmdldC52eSAtPSB5ICogYjtcbiAgICAgICAgc291cmNlLnZ4ICs9IHggKiAoYiA9IDEgLSBiKTtcbiAgICAgICAgc291cmNlLnZ5ICs9IHkgKiBiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG0gPSBsaW5rcy5sZW5ndGgsXG4gICAgICAgIG5vZGVCeUlkID0gbWFwKG5vZGVzLCBpZCksXG4gICAgICAgIGxpbms7XG5cbiAgICBmb3IgKGkgPSAwLCBjb3VudCA9IG5ldyBBcnJheShuKTsgaSA8IG07ICsraSkge1xuICAgICAgbGluayA9IGxpbmtzW2ldLCBsaW5rLmluZGV4ID0gaTtcbiAgICAgIGlmICh0eXBlb2YgbGluay5zb3VyY2UgIT09IFwib2JqZWN0XCIpIGxpbmsuc291cmNlID0gZmluZChub2RlQnlJZCwgbGluay5zb3VyY2UpO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rLnRhcmdldCAhPT0gXCJvYmplY3RcIikgbGluay50YXJnZXQgPSBmaW5kKG5vZGVCeUlkLCBsaW5rLnRhcmdldCk7XG4gICAgICBjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gPSAoY291bnRbbGluay5zb3VyY2UuaW5kZXhdIHx8IDApICsgMTtcbiAgICAgIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSA9IChjb3VudFtsaW5rLnRhcmdldC5pbmRleF0gfHwgMCkgKyAxO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGJpYXMgPSBuZXcgQXJyYXkobSk7IGkgPCBtOyArK2kpIHtcbiAgICAgIGxpbmsgPSBsaW5rc1tpXSwgYmlhc1tpXSA9IGNvdW50W2xpbmsuc291cmNlLmluZGV4XSAvIChjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gKyBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICAgIH1cblxuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCk7XG4gICAgZGlzdGFuY2VzID0gbmV3IEFycmF5KG0pLCBpbml0aWFsaXplRGlzdGFuY2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVTdHJlbmd0aCgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgc3RyZW5ndGhzW2ldID0gK3N0cmVuZ3RoKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZURpc3RhbmNlKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBkaXN0YW5jZXNbaV0gPSArZGlzdGFuY2UobGlua3NbaV0sIGksIGxpbmtzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2UubGlua3MgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGlua3MgPSBfLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IGxpbmtzO1xuICB9O1xuXG4gIGZvcmNlLmlkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlkID0gXywgZm9yY2UpIDogaWQ7XG4gIH07XG5cbiAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpdGVyYXRpb25zID0gK18sIGZvcmNlKSA6IGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemVEaXN0YW5jZSgpLCBmb3JjZSkgOiBkaXN0YW5jZTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHt0aW1lcn0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGQueDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZC55O1xufVxuXG52YXIgaW5pdGlhbFJhZGl1cyA9IDEwLFxuICAgIGluaXRpYWxBbmdsZSA9IE1hdGguUEkgKiAoMyAtIE1hdGguc3FydCg1KSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGVzKSB7XG4gIHZhciBzaW11bGF0aW9uLFxuICAgICAgYWxwaGEgPSAxLFxuICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcbiAgICAgIGZvcmNlcyA9IG1hcCgpLFxuICAgICAgc3RlcHBlciA9IHRpbWVyKHN0ZXApLFxuICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIik7XG5cbiAgaWYgKG5vZGVzID09IG51bGwpIG5vZGVzID0gW107XG5cbiAgZnVuY3Rpb24gc3RlcCgpIHtcbiAgICB0aWNrKCk7XG4gICAgZXZlbnQuY2FsbChcInRpY2tcIiwgc2ltdWxhdGlvbik7XG4gICAgaWYgKGFscGhhIDwgYWxwaGFNaW4pIHtcbiAgICAgIHN0ZXBwZXIuc3RvcCgpO1xuICAgICAgZXZlbnQuY2FsbChcImVuZFwiLCBzaW11bGF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGl0ZXJhdGlvbnMpIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcblxuICAgIGlmIChpdGVyYXRpb25zID09PSB1bmRlZmluZWQpIGl0ZXJhdGlvbnMgPSAxO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIGFscGhhICs9IChhbHBoYVRhcmdldCAtIGFscGhhKSAqIGFscGhhRGVjYXk7XG5cbiAgICAgIGZvcmNlcy5lYWNoKGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICBmb3JjZShhbHBoYSk7XG4gICAgICB9KTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLmZ4ID09IG51bGwpIG5vZGUueCArPSBub2RlLnZ4ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICAgIGVsc2Ugbm9kZS54ID0gbm9kZS5meCwgbm9kZS52eCA9IDA7XG4gICAgICAgIGlmIChub2RlLmZ5ID09IG51bGwpIG5vZGUueSArPSBub2RlLnZ5ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICAgIGVsc2Ugbm9kZS55ID0gbm9kZS5meSwgbm9kZS52eSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpbXVsYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplTm9kZXMoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS5pbmRleCA9IGk7XG4gICAgICBpZiAobm9kZS5meCAhPSBudWxsKSBub2RlLnggPSBub2RlLmZ4O1xuICAgICAgaWYgKG5vZGUuZnkgIT0gbnVsbCkgbm9kZS55ID0gbm9kZS5meTtcbiAgICAgIGlmIChpc05hTihub2RlLngpIHx8IGlzTmFOKG5vZGUueSkpIHtcbiAgICAgICAgdmFyIHJhZGl1cyA9IGluaXRpYWxSYWRpdXMgKiBNYXRoLnNxcnQoaSksIGFuZ2xlID0gaSAqIGluaXRpYWxBbmdsZTtcbiAgICAgICAgbm9kZS54ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBub2RlLnkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNOYU4obm9kZS52eCkgfHwgaXNOYU4obm9kZS52eSkpIHtcbiAgICAgICAgbm9kZS52eCA9IG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVGb3JjZShmb3JjZSkge1xuICAgIGlmIChmb3JjZS5pbml0aWFsaXplKSBmb3JjZS5pbml0aWFsaXplKG5vZGVzKTtcbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBpbml0aWFsaXplTm9kZXMoKTtcblxuICByZXR1cm4gc2ltdWxhdGlvbiA9IHtcbiAgICB0aWNrOiB0aWNrLFxuXG4gICAgcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnN0b3AoKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgbm9kZXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5lYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogbm9kZXM7XG4gICAgfSxcblxuICAgIGFscGhhOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xuICAgIH0sXG5cbiAgICBhbHBoYU1pbjogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFNaW4gPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYU1pbjtcbiAgICB9LFxuXG4gICAgYWxwaGFEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFEZWNheSA9ICtfLCBzaW11bGF0aW9uKSA6ICthbHBoYURlY2F5O1xuICAgIH0sXG5cbiAgICBhbHBoYVRhcmdldDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcbiAgICB9LFxuXG4gICAgdmVsb2NpdHlEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmVsb2NpdHlEZWNheSA9IDEgLSBfLCBzaW11bGF0aW9uKSA6IDEgLSB2ZWxvY2l0eURlY2F5O1xuICAgIH0sXG5cbiAgICBmb3JjZTogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKChfID09IG51bGwgPyBmb3JjZXMucmVtb3ZlKG5hbWUpIDogZm9yY2VzLnNldChuYW1lLCBpbml0aWFsaXplRm9yY2UoXykpKSwgc2ltdWxhdGlvbikgOiBmb3JjZXMuZ2V0KG5hbWUpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5LFxuICAgICAgICAgIGQyLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgY2xvc2VzdDtcblxuICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgICAgIGVsc2UgcmFkaXVzICo9IHJhZGl1cztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGR4ID0geCAtIG5vZGUueDtcbiAgICAgICAgZHkgPSB5IC0gbm9kZS55O1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCByYWRpdXMpIGNsb3Nlc3QgPSBub2RlLCByYWRpdXMgPSBkMjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgfSxcblxuICAgIG9uOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XG4gICAgfVxuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICBpZiAoaXNOYU4oeCA9ICt4KSB8fCBpc05hTih5ID0gK3kpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgIHkxID0gdGhpcy5feTE7XG5cbiAgLy8gSWYgdGhlIHF1YWR0cmVlIGhhcyBubyBleHRlbnQsIGluaXRpYWxpemUgdGhlbS5cbiAgLy8gSW50ZWdlciBleHRlbnQgYXJlIG5lY2Vzc2FyeSBzbyB0aGF0IGlmIHdlIGxhdGVyIGRvdWJsZSB0aGUgZXh0ZW50LFxuICAvLyB0aGUgZXhpc3RpbmcgcXVhZHJhbnQgYm91bmRhcmllcyBkb27igJl0IGNoYW5nZSBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgZXJyb3IhXG4gIGlmIChpc05hTih4MCkpIHtcbiAgICB4MSA9ICh4MCA9IE1hdGguZmxvb3IoeCkpICsgMTtcbiAgICB5MSA9ICh5MCA9IE1hdGguZmxvb3IoeSkpICsgMTtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgZG91YmxlIHJlcGVhdGVkbHkgdG8gY292ZXIuXG4gIGVsc2Uge1xuICAgIHZhciB6ID0geDEgLSB4MCxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgaTtcblxuICAgIHdoaWxlICh4MCA+IHggfHwgeCA+PSB4MSB8fCB5MCA+IHkgfHwgeSA+PSB5MSkge1xuICAgICAgaSA9ICh5IDwgeTApIDw8IDEgfCAoeCA8IHgwKTtcbiAgICAgIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudCwgeiAqPSAyO1xuICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgIGNhc2UgMDogeDEgPSB4MCArIHosIHkxID0geTAgKyB6OyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB4MCA9IHgxIC0geiwgeTEgPSB5MCArIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHgxID0geDAgKyB6LCB5MCA9IHkxIC0gejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogeDAgPSB4MSAtIHosIHkwID0geTEgLSB6OyBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcm9vdCAmJiB0aGlzLl9yb290Lmxlbmd0aCkgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH1cblxuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZGF0YSA9IFtdO1xuICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyBkYXRhLnB1c2gobm9kZS5kYXRhKTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5jb3ZlcigrX1swXVswXSwgK19bMF1bMV0pLmNvdmVyKCtfWzFdWzBdLCArX1sxXVsxXSlcbiAgICAgIDogaXNOYU4odGhpcy5feDApID8gdW5kZWZpbmVkIDogW1t0aGlzLl94MCwgdGhpcy5feTBdLCBbdGhpcy5feDEsIHRoaXMuX3kxXV07XG59XG4iLCJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xuICB2YXIgZGF0YSxcbiAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEsXG4gICAgICB5MSxcbiAgICAgIHgyLFxuICAgICAgeTIsXG4gICAgICB4MyA9IHRoaXMuX3gxLFxuICAgICAgeTMgPSB0aGlzLl95MSxcbiAgICAgIHF1YWRzID0gW10sXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIHEsXG4gICAgICBpO1xuXG4gIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHgwLCB5MCwgeDMsIHkzKSk7XG4gIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7XG4gIGVsc2Uge1xuICAgIHgwID0geCAtIHJhZGl1cywgeTAgPSB5IC0gcmFkaXVzO1xuICAgIHgzID0geCArIHJhZGl1cywgeTMgPSB5ICsgcmFkaXVzO1xuICAgIHJhZGl1cyAqPSByYWRpdXM7XG4gIH1cblxuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG5cbiAgICAvLyBTdG9wIHNlYXJjaGluZyBpZiB0aGlzIHF1YWRyYW50IGNhbuKAmXQgY29udGFpbiBhIGNsb3NlciBub2RlLlxuICAgIGlmICghKG5vZGUgPSBxLm5vZGUpXG4gICAgICAgIHx8ICh4MSA9IHEueDApID4geDNcbiAgICAgICAgfHwgKHkxID0gcS55MCkgPiB5M1xuICAgICAgICB8fCAoeDIgPSBxLngxKSA8IHgwXG4gICAgICAgIHx8ICh5MiA9IHEueTEpIDwgeTApIGNvbnRpbnVlO1xuXG4gICAgLy8gQmlzZWN0IHRoZSBjdXJyZW50IHF1YWRyYW50LlxuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIHhtID0gKHgxICsgeDIpIC8gMixcbiAgICAgICAgICB5bSA9ICh5MSArIHkyKSAvIDI7XG5cbiAgICAgIHF1YWRzLnB1c2goXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbM10sIHhtLCB5bSwgeDIsIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsyXSwgeDEsIHltLCB4bSwgeTIpLFxuICAgICAgICBuZXcgUXVhZChub2RlWzFdLCB4bSwgeTEsIHgyLCB5bSksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMF0sIHgxLCB5MSwgeG0sIHltKVxuICAgICAgKTtcblxuICAgICAgLy8gVmlzaXQgdGhlIGNsb3Nlc3QgcXVhZHJhbnQgZmlyc3QuXG4gICAgICBpZiAoaSA9ICh5ID49IHltKSA8PCAxIHwgKHggPj0geG0pKSB7XG4gICAgICAgIHEgPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxXTtcbiAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV0gPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXSA9IHE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmlzaXQgdGhpcyBwb2ludC4gKFZpc2l0aW5nIGNvaW5jaWRlbnQgcG9pbnRzIGlzbuKAmXQgbmVjZXNzYXJ5ISlcbiAgICBlbHNlIHtcbiAgICAgIHZhciBkeCA9IHggLSArdGhpcy5feC5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgZHkgPSB5IC0gK3RoaXMuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICBpZiAoZDIgPCByYWRpdXMpIHtcbiAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQocmFkaXVzID0gZDIpO1xuICAgICAgICB4MCA9IHggLSBkLCB5MCA9IHkgLSBkO1xuICAgICAgICB4MyA9IHggKyBkLCB5MyA9IHkgKyBkO1xuICAgICAgICBkYXRhID0gbm9kZS5kYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgcmV0dXJuIHRoaXM7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIHJldGFpbmVyLFxuICAgICAgcHJldmlvdXMsXG4gICAgICBuZXh0LFxuICAgICAgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MSxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICBpZiAoIW5vZGUpIHJldHVybiB0aGlzO1xuXG4gIC8vIEZpbmQgdGhlIGxlYWYgbm9kZSBmb3IgdGhlIHBvaW50LlxuICAvLyBXaGlsZSBkZXNjZW5kaW5nLCBhbHNvIHJldGFpbiB0aGUgZGVlcGVzdCBwYXJlbnQgd2l0aCBhIG5vbi1yZW1vdmVkIHNpYmxpbmcuXG4gIGlmIChub2RlLmxlbmd0aCkgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAoIShwYXJlbnQgPSBub2RlLCBub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gdGhpcztcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBicmVhaztcbiAgICBpZiAocGFyZW50WyhpICsgMSkgJiAzXSB8fCBwYXJlbnRbKGkgKyAyKSAmIDNdIHx8IHBhcmVudFsoaSArIDMpICYgM10pIHJldGFpbmVyID0gcGFyZW50LCBqID0gaTtcbiAgfVxuXG4gIC8vIEZpbmQgdGhlIHBvaW50IHRvIHJlbW92ZS5cbiAgd2hpbGUgKG5vZGUuZGF0YSAhPT0gZCkgaWYgKCEocHJldmlvdXMgPSBub2RlLCBub2RlID0gbm9kZS5uZXh0KSkgcmV0dXJuIHRoaXM7XG4gIGlmIChuZXh0ID0gbm9kZS5uZXh0KSBkZWxldGUgbm9kZS5uZXh0O1xuXG4gIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBjb2luY2lkZW50IHBvaW50cywgcmVtb3ZlIGp1c3QgdGhlIHBvaW50LlxuICBpZiAocHJldmlvdXMpIHJldHVybiAobmV4dCA/IHByZXZpb3VzLm5leHQgPSBuZXh0IDogZGVsZXRlIHByZXZpb3VzLm5leHQpLCB0aGlzO1xuXG4gIC8vIElmIHRoaXMgaXMgdGhlIHJvb3QgcG9pbnQsIHJlbW92ZSBpdC5cbiAgaWYgKCFwYXJlbnQpIHJldHVybiB0aGlzLl9yb290ID0gbmV4dCwgdGhpcztcblxuICAvLyBSZW1vdmUgdGhpcyBsZWFmLlxuICBuZXh0ID8gcGFyZW50W2ldID0gbmV4dCA6IGRlbGV0ZSBwYXJlbnRbaV07XG5cbiAgLy8gSWYgdGhlIHBhcmVudCBub3cgY29udGFpbnMgZXhhY3RseSBvbmUgbGVhZiwgY29sbGFwc2Ugc3VwZXJmbHVvdXMgcGFyZW50cy5cbiAgaWYgKChub2RlID0gcGFyZW50WzBdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzNdKVxuICAgICAgJiYgbm9kZSA9PT0gKHBhcmVudFszXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFswXSlcbiAgICAgICYmICFub2RlLmxlbmd0aCkge1xuICAgIGlmIChyZXRhaW5lcikgcmV0YWluZXJbal0gPSBub2RlO1xuICAgIGVsc2UgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFsbChkYXRhKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gZGF0YS5sZW5ndGg7IGkgPCBuOyArK2kpIHRoaXMucmVtb3ZlKGRhdGFbaV0pO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fcm9vdDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMudmlzaXQoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGRvICsrc2l6ZTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gIH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIHEsIG5vZGUgPSB0aGlzLl9yb290LCBjaGlsZCwgeDAsIHkwLCB4MSwgeTE7XG4gIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSk7XG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICBpZiAoIWNhbGxiYWNrKG5vZGUgPSBxLm5vZGUsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSkgJiYgbm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MCArIHgxKSAvIDIsIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcXVhZHMgPSBbXSwgbmV4dCA9IFtdLCBxO1xuICBpZiAodGhpcy5fcm9vdCkgcXVhZHMucHVzaChuZXcgUXVhZCh0aGlzLl9yb290LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgdmFyIG5vZGUgPSBxLm5vZGU7XG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgY2hpbGQsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSwgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgIH1cbiAgICBuZXh0LnB1c2gocSk7XG4gIH1cbiAgd2hpbGUgKHEgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2socS5ub2RlLCBxLngwLCBxLnkwLCBxLngxLCBxLnkxKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGppZ2dsZSBmcm9tIFwiLi9qaWdnbGVcIjtcbmltcG9ydCB7cXVhZHRyZWV9IGZyb20gXCJkMy1xdWFkdHJlZVwiO1xuaW1wb3J0IHt4LCB5fSBmcm9tIFwiLi9zaW11bGF0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMsXG4gICAgICBub2RlLFxuICAgICAgYWxwaGEsXG4gICAgICBzdHJlbmd0aCA9IGNvbnN0YW50KC0zMCksXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICBkaXN0YW5jZU1pbjIgPSAxLFxuICAgICAgZGlzdGFuY2VNYXgyID0gSW5maW5pdHksXG4gICAgICB0aGV0YTIgPSAwLjgxO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKF8pIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4LCB5KS52aXNpdEFmdGVyKGFjY3VtdWxhdGUpO1xuICAgIGZvciAoYWxwaGEgPSBfLCBpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHN0cmVuZ3Roc1tub2RlLmluZGV4XSA9ICtzdHJlbmd0aChub2RlLCBpLCBub2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBhY2N1bXVsYXRlKHF1YWQpIHtcbiAgICB2YXIgc3RyZW5ndGggPSAwLCBxLCBjLCB3ZWlnaHQgPSAwLCB4LCB5LCBpO1xuXG4gICAgLy8gRm9yIGludGVybmFsIG5vZGVzLCBhY2N1bXVsYXRlIGZvcmNlcyBmcm9tIGNoaWxkIHF1YWRyYW50cy5cbiAgICBpZiAocXVhZC5sZW5ndGgpIHtcbiAgICAgIGZvciAoeCA9IHkgPSBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgICBpZiAoKHEgPSBxdWFkW2ldKSAmJiAoYyA9IE1hdGguYWJzKHEudmFsdWUpKSkge1xuICAgICAgICAgIHN0cmVuZ3RoICs9IHEudmFsdWUsIHdlaWdodCArPSBjLCB4ICs9IGMgKiBxLngsIHkgKz0gYyAqIHEueTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcXVhZC54ID0geCAvIHdlaWdodDtcbiAgICAgIHF1YWQueSA9IHkgLyB3ZWlnaHQ7XG4gICAgfVxuXG4gICAgLy8gRm9yIGxlYWYgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY29pbmNpZGVudCBxdWFkcmFudHMuXG4gICAgZWxzZSB7XG4gICAgICBxID0gcXVhZDtcbiAgICAgIHEueCA9IHEuZGF0YS54O1xuICAgICAgcS55ID0gcS5kYXRhLnk7XG4gICAgICBkbyBzdHJlbmd0aCArPSBzdHJlbmd0aHNbcS5kYXRhLmluZGV4XTtcbiAgICAgIHdoaWxlIChxID0gcS5uZXh0KTtcbiAgICB9XG5cbiAgICBxdWFkLnZhbHVlID0gc3RyZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MSwgXywgeDIpIHtcbiAgICBpZiAoIXF1YWQudmFsdWUpIHJldHVybiB0cnVlO1xuXG4gICAgdmFyIHggPSBxdWFkLnggLSBub2RlLngsXG4gICAgICAgIHkgPSBxdWFkLnkgLSBub2RlLnksXG4gICAgICAgIHcgPSB4MiAtIHgxLFxuICAgICAgICBsID0geCAqIHggKyB5ICogeTtcblxuICAgIC8vIEFwcGx5IHRoZSBCYXJuZXMtSHV0IGFwcHJveGltYXRpb24gaWYgcG9zc2libGUuXG4gICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgaWYgKHcgKiB3IC8gdGhldGEyIDwgbCkge1xuICAgICAgaWYgKGwgPCBkaXN0YW5jZU1heDIpIHtcbiAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgICAgIG5vZGUudnggKz0geCAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICAgIG5vZGUudnkgKz0geSAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIHByb2Nlc3MgcG9pbnRzIGRpcmVjdGx5LlxuICAgIGVsc2UgaWYgKHF1YWQubGVuZ3RoIHx8IGwgPj0gZGlzdGFuY2VNYXgyKSByZXR1cm47XG5cbiAgICAvLyBMaW1pdCBmb3JjZXMgZm9yIHZlcnkgY2xvc2Ugbm9kZXM7IHJhbmRvbWl6ZSBkaXJlY3Rpb24gaWYgY29pbmNpZGVudC5cbiAgICBpZiAocXVhZC5kYXRhICE9PSBub2RlIHx8IHF1YWQubmV4dCkge1xuICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICBpZiAobCA8IGRpc3RhbmNlTWluMikgbCA9IE1hdGguc3FydChkaXN0YW5jZU1pbjIgKiBsKTtcbiAgICB9XG5cbiAgICBkbyBpZiAocXVhZC5kYXRhICE9PSBub2RlKSB7XG4gICAgICB3ID0gc3RyZW5ndGhzW3F1YWQuZGF0YS5pbmRleF0gKiBhbHBoYSAvIGw7XG4gICAgICBub2RlLnZ4ICs9IHggKiB3O1xuICAgICAgbm9kZS52eSArPSB5ICogdztcbiAgICB9IHdoaWxlIChxdWFkID0gcXVhZC5uZXh0KTtcbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlTWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWluMiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yKTtcbiAgfTtcblxuICBmb3JjZS5kaXN0YW5jZU1heCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZU1heDIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KGRpc3RhbmNlTWF4Mik7XG4gIH07XG5cbiAgZm9yY2UudGhldGEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhldGEyID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydCh0aGV0YTIpO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYWRpdXMsIHgsIHkpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgc3RyZW5ndGggPSBjb25zdGFudCgwLjEpLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgcmFkaXVzZXM7XG5cbiAgaWYgKHR5cGVvZiByYWRpdXMgIT09IFwiZnVuY3Rpb25cIikgcmFkaXVzID0gY29uc3RhbnQoK3JhZGl1cyk7XG4gIGlmICh4ID09IG51bGwpIHggPSAwO1xuICBpZiAoeSA9PSBudWxsKSB5ID0gMDtcblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldLFxuICAgICAgICAgIGR4ID0gbm9kZS54IC0geCB8fCAxZS02LFxuICAgICAgICAgIGR5ID0gbm9kZS55IC0geSB8fCAxZS02LFxuICAgICAgICAgIHIgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpLFxuICAgICAgICAgIGsgPSAocmFkaXVzZXNbaV0gLSByKSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhIC8gcjtcbiAgICAgIG5vZGUudnggKz0gZHggKiBrO1xuICAgICAgbm9kZS52eSArPSBkeSAqIGs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgIHJhZGl1c2VzID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHJhZGl1c2VzW2ldID0gK3JhZGl1cyhub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgICAgc3RyZW5ndGhzW2ldID0gaXNOYU4ocmFkaXVzZXNbaV0pID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfLCBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogcmFkaXVzO1xuICB9O1xuXG4gIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfLCBmb3JjZSkgOiB4O1xuICB9O1xuXG4gIGZvcmNlLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9ICtfLCBmb3JjZSkgOiB5O1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHZhciBzdHJlbmd0aCA9IGNvbnN0YW50KDAuMSksXG4gICAgICBub2RlcyxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIHh6O1xuXG4gIGlmICh0eXBlb2YgeCAhPT0gXCJmdW5jdGlvblwiKSB4ID0gY29uc3RhbnQoeCA9PSBudWxsID8gMCA6ICt4KTtcblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUudnggKz0gKHh6W2ldIC0gbm9kZS54KSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICB4eiA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih4eltpXSA9ICt4KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHg7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHkpIHtcbiAgdmFyIHN0cmVuZ3RoID0gY29uc3RhbnQoMC4xKSxcbiAgICAgIG5vZGVzLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgeXo7XG5cbiAgaWYgKHR5cGVvZiB5ICE9PSBcImZ1bmN0aW9uXCIpIHkgPSBjb25zdGFudCh5ID09IG51bGwgPyAwIDogK3kpO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS52eSArPSAoeXpbaV0gLSBub2RlLnkpICogc3RyZW5ndGhzW2ldICogYWxwaGE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgIHl6ID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9IGlzTmFOKHl6W2ldID0gK3kobm9kZXNbaV0sIGksIG5vZGVzKSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogeTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCIvLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWwoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC0oIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoe1xuICAgIGZpbGw6IG1hdGNoWzFdLFxuICAgIGFsaWduOiBtYXRjaFsyXSxcbiAgICBzaWduOiBtYXRjaFszXSxcbiAgICBzeW1ib2w6IG1hdGNoWzRdLFxuICAgIHplcm86IG1hdGNoWzVdLFxuICAgIHdpZHRoOiBtYXRjaFs2XSxcbiAgICBjb21tYTogbWF0Y2hbN10sXG4gICAgcHJlY2lzaW9uOiBtYXRjaFs4XSAmJiBtYXRjaFs4XS5zbGljZSgxKSxcbiAgICB0cmltOiBtYXRjaFs5XSxcbiAgICB0eXBlOiBtYXRjaFsxMF1cbiAgfSk7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHRoaXMuZmlsbCA9IHNwZWNpZmllci5maWxsID09PSB1bmRlZmluZWQgPyBcIiBcIiA6IHNwZWNpZmllci5maWxsICsgXCJcIjtcbiAgdGhpcy5hbGlnbiA9IHNwZWNpZmllci5hbGlnbiA9PT0gdW5kZWZpbmVkID8gXCI+XCIgOiBzcGVjaWZpZXIuYWxpZ24gKyBcIlwiO1xuICB0aGlzLnNpZ24gPSBzcGVjaWZpZXIuc2lnbiA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBzcGVjaWZpZXIuc2lnbiArIFwiXCI7XG4gIHRoaXMuc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci5zeW1ib2wgKyBcIlwiO1xuICB0aGlzLnplcm8gPSAhIXNwZWNpZmllci56ZXJvO1xuICB0aGlzLndpZHRoID0gc3BlY2lmaWVyLndpZHRoID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLndpZHRoO1xuICB0aGlzLmNvbW1hID0gISFzcGVjaWZpZXIuY29tbWE7XG4gIHRoaXMucHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci5wcmVjaXNpb247XG4gIHRoaXMudHJpbSA9ICEhc3BlY2lmaWVyLnRyaW07XG4gIHRoaXMudHlwZSA9IHNwZWNpZmllci50eXBlID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnR5cGUgKyBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiAoeCAqIDEwMCkudG9GaXhlZChwKTsgfSxcbiAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXG4gIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgXCJkXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTApOyB9LFxuICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICBcImdcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b1ByZWNpc2lvbihwKTsgfSxcbiAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICBcInhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXAuanNcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFscy5qc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXIuanNcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW0uanNcIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlcy5qc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyA9PT0gdW5kZWZpbmVkIHx8IGxvY2FsZS50aG91c2FuZHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0R3JvdXAobWFwLmNhbGwobG9jYWxlLmdyb3VwaW5nLCBOdW1iZXIpLCBsb2NhbGUudGhvdXNhbmRzICsgXCJcIiksXG4gICAgICBjdXJyZW5jeVByZWZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVswXSArIFwiXCIsXG4gICAgICBjdXJyZW5jeVN1ZmZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVsxXSArIFwiXCIsXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwgPT09IHVuZGVmaW5lZCA/IFwiLlwiIDogbG9jYWxlLmRlY2ltYWwgKyBcIlwiLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0TnVtZXJhbHMobWFwLmNhbGwobG9jYWxlLm51bWVyYWxzLCBTdHJpbmcpKSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCA9PT0gdW5kZWZpbmVkID8gXCIlXCIgOiBsb2NhbGUucGVyY2VudCArIFwiXCIsXG4gICAgICBtaW51cyA9IGxvY2FsZS5taW51cyA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBsb2NhbGUubWludXMgKyBcIlwiLFxuICAgICAgbmFuID0gbG9jYWxlLm5hbiA9PT0gdW5kZWZpbmVkID8gXCJOYU5cIiA6IGxvY2FsZS5uYW4gKyBcIlwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09PSB1bmRlZmluZWQgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVByZWZpeCA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5U3VmZml4IDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBzaWduLiAtMCBpcyBub3QgbGVzcyB0aGFuIDAsIGJ1dCAxIC8gLTAgaXMhXG4gICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gdmFsdWUgPCAwIHx8IDEgLyB2YWx1ZSA8IDA7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IG5hbiA6IGZvcm1hdFR5cGUoTWF0aC5hYnModmFsdWUpLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIC8vIFRyaW0gaW5zaWduaWZpY2FudCB6ZXJvcy5cbiAgICAgICAgaWYgKHRyaW0pIHZhbHVlID0gZm9ybWF0VHJpbSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBhZnRlciBmb3JtYXR0aW5nLCBhbmQgbm8gZXhwbGljaXQgcG9zaXRpdmUgc2lnbiBpcyByZXF1ZXN0ZWQsIGhpZGUgdGhlIHNpZ24uXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCAmJiBzaWduICE9PSBcIitcIikgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IG1pbnVzKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdLFxuICBtaW51czogXCItXCJcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG51bWVyYWxzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgIH0pO1xuICB9O1xufVxuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKCErc1tpXSkgYnJlYWsgb3V0OyBpZiAoaTAgPiAwKSBpMCA9IDA7IGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTAgPiAwID8gcy5zbGljZSgwLCBpMCkgKyBzLnNsaWNlKGkxICsgMSkgOiBzO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyAtIGV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgbWF4KSB7XG4gIHN0ZXAgPSBNYXRoLmFicyhzdGVwKSwgbWF4ID0gTWF0aC5hYnMobWF4KSAtIHN0ZXA7XG4gIHJldHVybiBNYXRoLm1heCgwLCBleHBvbmVudChtYXgpIC0gZXhwb25lbnQoc3RlcCkpICsgMTtcbn1cbiIsIi8vIEFkZHMgZmxvYXRpbmcgcG9pbnQgbnVtYmVycyB3aXRoIHR3aWNlIHRoZSBub3JtYWwgcHJlY2lzaW9uLlxuLy8gUmVmZXJlbmNlOiBKLiBSLiBTaGV3Y2h1aywgQWRhcHRpdmUgUHJlY2lzaW9uIEZsb2F0aW5nLVBvaW50IEFyaXRobWV0aWMgYW5kXG4vLyBGYXN0IFJvYnVzdCBHZW9tZXRyaWMgUHJlZGljYXRlcywgRGlzY3JldGUgJiBDb21wdXRhdGlvbmFsIEdlb21ldHJ5IDE4KDMpXG4vLyAzMDXigJMzNjMgKDE5OTcpLlxuLy8gQ29kZSBhZGFwdGVkIGZyb20gR2VvZ3JhcGhpY0xpYiBieSBDaGFybGVzIEYuIEYuIEthcm5leSxcbi8vIGh0dHA6Ly9nZW9ncmFwaGljbGliLnNvdXJjZWZvcmdlLm5ldC9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgQWRkZXI7XG59XG5cbmZ1bmN0aW9uIEFkZGVyKCkge1xuICB0aGlzLnJlc2V0KCk7XG59XG5cbkFkZGVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEFkZGVyLFxuICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zID0gLy8gcm91bmRlZCB2YWx1ZVxuICAgIHRoaXMudCA9IDA7IC8vIGV4YWN0IGVycm9yXG4gIH0sXG4gIGFkZDogZnVuY3Rpb24oeSkge1xuICAgIGFkZCh0ZW1wLCB5LCB0aGlzLnQpO1xuICAgIGFkZCh0aGlzLCB0ZW1wLnMsIHRoaXMucyk7XG4gICAgaWYgKHRoaXMucykgdGhpcy50ICs9IHRlbXAudDtcbiAgICBlbHNlIHRoaXMucyA9IHRlbXAudDtcbiAgfSxcbiAgdmFsdWVPZjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucztcbiAgfVxufTtcblxudmFyIHRlbXAgPSBuZXcgQWRkZXI7XG5cbmZ1bmN0aW9uIGFkZChhZGRlciwgYSwgYikge1xuICB2YXIgeCA9IGFkZGVyLnMgPSBhICsgYixcbiAgICAgIGJ2ID0geCAtIGEsXG4gICAgICBhdiA9IHggLSBidjtcbiAgYWRkZXIudCA9IChhIC0gYXYpICsgKGIgLSBidik7XG59XG4iLCJleHBvcnQgdmFyIGVwc2lsb24gPSAxZS02O1xuZXhwb3J0IHZhciBlcHNpbG9uMiA9IDFlLTEyO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgcXVhcnRlclBpID0gcGkgLyA0O1xuZXhwb3J0IHZhciB0YXUgPSBwaSAqIDI7XG5cbmV4cG9ydCB2YXIgZGVncmVlcyA9IDE4MCAvIHBpO1xuZXhwb3J0IHZhciByYWRpYW5zID0gcGkgLyAxODA7XG5cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnM7XG5leHBvcnQgdmFyIGF0YW4gPSBNYXRoLmF0YW47XG5leHBvcnQgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbmV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIGNlaWwgPSBNYXRoLmNlaWw7XG5leHBvcnQgdmFyIGV4cCA9IE1hdGguZXhwO1xuZXhwb3J0IHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5leHBvcnQgdmFyIGxvZyA9IE1hdGgubG9nO1xuZXhwb3J0IHZhciBwb3cgPSBNYXRoLnBvdztcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHNpZ24gPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24oeCkgeyByZXR1cm4geCA+IDAgPyAxIDogeCA8IDAgPyAtMSA6IDA7IH07XG5leHBvcnQgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5leHBvcnQgdmFyIHRhbiA9IE1hdGgudGFuO1xuXG5leHBvcnQgZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSA6IE1hdGguYWNvcyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+IDEgPyBoYWxmUGkgOiB4IDwgLTEgPyAtaGFsZlBpIDogTWF0aC5hc2luKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGF2ZXJzaW4oeCkge1xuICByZXR1cm4gKHggPSBzaW4oeCAvIDIpKSAqIHg7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub29wKCkge31cbiIsImZ1bmN0aW9uIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBzdHJlYW0pIHtcbiAgaWYgKGdlb21ldHJ5ICYmIHN0cmVhbUdlb21ldHJ5VHlwZS5oYXNPd25Qcm9wZXJ0eShnZW9tZXRyeS50eXBlKSkge1xuICAgIHN0cmVhbUdlb21ldHJ5VHlwZVtnZW9tZXRyeS50eXBlXShnZW9tZXRyeSwgc3RyZWFtKTtcbiAgfVxufVxuXG52YXIgc3RyZWFtT2JqZWN0VHlwZSA9IHtcbiAgRmVhdHVyZTogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1HZW9tZXRyeShvYmplY3QuZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH0sXG4gIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBmZWF0dXJlcyA9IG9iamVjdC5mZWF0dXJlcywgaSA9IC0xLCBuID0gZmVhdHVyZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShmZWF0dXJlc1tpXS5nZW9tZXRyeSwgc3RyZWFtKTtcbiAgfVxufTtcblxudmFyIHN0cmVhbUdlb21ldHJ5VHlwZSA9IHtcbiAgU3BoZXJlOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbS5zcGhlcmUoKTtcbiAgfSxcbiAgUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0LmNvb3JkaW5hdGVzO1xuICAgIHN0cmVhbS5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcbiAgfSxcbiAgTXVsdGlQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgb2JqZWN0ID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcbiAgfSxcbiAgTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1MaW5lKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtLCAwKTtcbiAgfSxcbiAgTXVsdGlMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0sIDApO1xuICB9LFxuICBQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbVBvbHlnb24ob2JqZWN0LmNvb3JkaW5hdGVzLCBzdHJlYW0pO1xuICB9LFxuICBNdWx0aVBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSk7XG4gIH0sXG4gIEdlb21ldHJ5Q29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgc3RyZWFtKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyZWFtTGluZShjb29yZGluYXRlcywgc3RyZWFtLCBjbG9zZWQpIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aCAtIGNsb3NlZCwgY29vcmRpbmF0ZTtcbiAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICB3aGlsZSAoKytpIDwgbikgY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0ucG9pbnQoY29vcmRpbmF0ZVswXSwgY29vcmRpbmF0ZVsxXSwgY29vcmRpbmF0ZVsyXSk7XG4gIHN0cmVhbS5saW5lRW5kKCk7XG59XG5cbmZ1bmN0aW9uIHN0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXMsIHN0cmVhbSkge1xuICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0sIDEpO1xuICBzdHJlYW0ucG9seWdvbkVuZCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICBpZiAob2JqZWN0ICYmIHN0cmVhbU9iamVjdFR5cGUuaGFzT3duUHJvcGVydHkob2JqZWN0LnR5cGUpKSB7XG4gICAgc3RyZWFtT2JqZWN0VHlwZVtvYmplY3QudHlwZV0ob2JqZWN0LCBzdHJlYW0pO1xuICB9IGVsc2Uge1xuICAgIHN0cmVhbUdlb21ldHJ5KG9iamVjdCwgc3RyZWFtKTtcbiAgfVxufVxuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuL2FkZGVyLmpzXCI7XG5pbXBvcnQge2F0YW4yLCBjb3MsIHF1YXJ0ZXJQaSwgcmFkaWFucywgc2luLCB0YXV9IGZyb20gXCIuL21hdGguanNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3AuanNcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtLmpzXCI7XG5cbmV4cG9ydCB2YXIgYXJlYVJpbmdTdW0gPSBhZGRlcigpO1xuXG52YXIgYXJlYVN1bSA9IGFkZGVyKCksXG4gICAgbGFtYmRhMDAsXG4gICAgcGhpMDAsXG4gICAgbGFtYmRhMCxcbiAgICBjb3NQaGkwLFxuICAgIHNpblBoaTA7XG5cbmV4cG9ydCB2YXIgYXJlYVN0cmVhbSA9IHtcbiAgcG9pbnQ6IG5vb3AsXG4gIGxpbmVTdGFydDogbm9vcCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBhcmVhUmluZ1N1bS5yZXNldCgpO1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydDtcbiAgICBhcmVhU3RyZWFtLmxpbmVFbmQgPSBhcmVhUmluZ0VuZDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWFSaW5nID0gK2FyZWFSaW5nU3VtO1xuICAgIGFyZWFTdW0uYWRkKGFyZWFSaW5nIDwgMCA/IHRhdSArIGFyZWFSaW5nIDogYXJlYVJpbmcpO1xuICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5saW5lRW5kID0gdGhpcy5wb2ludCA9IG5vb3A7XG4gIH0sXG4gIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN1bS5hZGQodGF1KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYXJlYVJpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBhcmVhUmluZ0VuZCgpIHtcbiAgYXJlYVBvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnQ7XG4gIGxhbWJkYTAwID0gbGFtYmRhLCBwaGkwMCA9IHBoaTtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBsYW1iZGEwID0gbGFtYmRhLCBjb3NQaGkwID0gY29zKHBoaSA9IHBoaSAvIDIgKyBxdWFydGVyUGkpLCBzaW5QaGkwID0gc2luKHBoaSk7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHBoaSA9IHBoaSAvIDIgKyBxdWFydGVyUGk7IC8vIGhhbGYgdGhlIGFuZ3VsYXIgZGlzdGFuY2UgZnJvbSBzb3V0aCBwb2xlXG5cbiAgLy8gU3BoZXJpY2FsIGV4Y2VzcyBFIGZvciBhIHNwaGVyaWNhbCB0cmlhbmdsZSB3aXRoIHZlcnRpY2VzOiBzb3V0aCBwb2xlLFxuICAvLyBwcmV2aW91cyBwb2ludCwgY3VycmVudCBwb2ludC4gIFVzZXMgYSBmb3JtdWxhIGRlcml2ZWQgZnJvbSBDYWdub2xp4oCZc1xuICAvLyB0aGVvcmVtLiAgU2VlIFRvZGh1bnRlciwgU3BoZXJpY2FsIFRyaWcuICgxODcxKSwgU2VjLiAxMDMsIEVxLiAoMikuXG4gIHZhciBkTGFtYmRhID0gbGFtYmRhIC0gbGFtYmRhMCxcbiAgICAgIHNkTGFtYmRhID0gZExhbWJkYSA+PSAwID8gMSA6IC0xLFxuICAgICAgYWRMYW1iZGEgPSBzZExhbWJkYSAqIGRMYW1iZGEsXG4gICAgICBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgIHNpblBoaSA9IHNpbihwaGkpLFxuICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGksXG4gICAgICB1ID0gY29zUGhpMCAqIGNvc1BoaSArIGsgKiBjb3MoYWRMYW1iZGEpLFxuICAgICAgdiA9IGsgKiBzZExhbWJkYSAqIHNpbihhZExhbWJkYSk7XG4gIGFyZWFSaW5nU3VtLmFkZChhdGFuMih2LCB1KSk7XG5cbiAgLy8gQWR2YW5jZSB0aGUgcHJldmlvdXMgcG9pbnRzLlxuICBsYW1iZGEwID0gbGFtYmRhLCBjb3NQaGkwID0gY29zUGhpLCBzaW5QaGkwID0gc2luUGhpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QpIHtcbiAgYXJlYVN1bS5yZXNldCgpO1xuICBzdHJlYW0ob2JqZWN0LCBhcmVhU3RyZWFtKTtcbiAgcmV0dXJuIGFyZWFTdW0gKiAyO1xufVxuIiwiaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNwaGVyaWNhbChjYXJ0ZXNpYW4pIHtcbiAgcmV0dXJuIFthdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGFzaW4oY2FydGVzaWFuWzJdKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW4oc3BoZXJpY2FsKSB7XG4gIHZhciBsYW1iZGEgPSBzcGhlcmljYWxbMF0sIHBoaSA9IHNwaGVyaWNhbFsxXSwgY29zUGhpID0gY29zKHBoaSk7XG4gIHJldHVybiBbY29zUGhpICogY29zKGxhbWJkYSksIGNvc1BoaSAqIHNpbihsYW1iZGEpLCBzaW4ocGhpKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuQ3Jvc3MoYSwgYikge1xuICByZXR1cm4gW2FbMV0gKiBiWzJdIC0gYVsyXSAqIGJbMV0sIGFbMl0gKiBiWzBdIC0gYVswXSAqIGJbMl0sIGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF1dO1xufVxuXG4vLyBUT0RPIHJldHVybiBhXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuQWRkSW5QbGFjZShhLCBiKSB7XG4gIGFbMF0gKz0gYlswXSwgYVsxXSArPSBiWzFdLCBhWzJdICs9IGJbMl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5TY2FsZSh2ZWN0b3IsIGspIHtcbiAgcmV0dXJuIFt2ZWN0b3JbMF0gKiBrLCB2ZWN0b3JbMV0gKiBrLCB2ZWN0b3JbMl0gKiBrXTtcbn1cblxuLy8gVE9ETyByZXR1cm4gZFxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoZCkge1xuICB2YXIgbCA9IHNxcnQoZFswXSAqIGRbMF0gKyBkWzFdICogZFsxXSArIGRbMl0gKiBkWzJdKTtcbiAgZFswXSAvPSBsLCBkWzFdIC89IGwsIGRbMl0gLz0gbDtcbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi9hZGRlci5qc1wiO1xuaW1wb3J0IHthcmVhU3RyZWFtLCBhcmVhUmluZ1N1bX0gZnJvbSBcIi4vYXJlYS5qc1wiO1xuaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbkNyb3NzLCBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlLCBzcGhlcmljYWx9IGZyb20gXCIuL2NhcnRlc2lhbi5qc1wiO1xuaW1wb3J0IHthYnMsIGRlZ3JlZXMsIGVwc2lsb24sIHJhZGlhbnN9IGZyb20gXCIuL21hdGguanNcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtLmpzXCI7XG5cbnZhciBsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxLCAvLyBib3VuZHNcbiAgICBsYW1iZGEyLCAvLyBwcmV2aW91cyBsYW1iZGEtY29vcmRpbmF0ZVxuICAgIGxhbWJkYTAwLCBwaGkwMCwgLy8gZmlyc3QgcG9pbnRcbiAgICBwMCwgLy8gcHJldmlvdXMgM0QgcG9pbnRcbiAgICBkZWx0YVN1bSA9IGFkZGVyKCksXG4gICAgcmFuZ2VzLFxuICAgIHJhbmdlO1xuXG52YXIgYm91bmRzU3RyZWFtID0ge1xuICBwb2ludDogYm91bmRzUG9pbnQsXG4gIGxpbmVTdGFydDogYm91bmRzTGluZVN0YXJ0LFxuICBsaW5lRW5kOiBib3VuZHNMaW5lRW5kLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGJvdW5kc1N0cmVhbS5wb2ludCA9IGJvdW5kc1JpbmdQb2ludDtcbiAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzUmluZ1N0YXJ0O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzUmluZ0VuZDtcbiAgICBkZWx0YVN1bS5yZXNldCgpO1xuICAgIGFyZWFTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgIGJvdW5kc1N0cmVhbS5wb2ludCA9IGJvdW5kc1BvaW50O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lU3RhcnQgPSBib3VuZHNMaW5lU3RhcnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVFbmQgPSBib3VuZHNMaW5lRW5kO1xuICAgIGlmIChhcmVhUmluZ1N1bSA8IDApIGxhbWJkYTAgPSAtKGxhbWJkYTEgPSAxODApLCBwaGkwID0gLShwaGkxID0gOTApO1xuICAgIGVsc2UgaWYgKGRlbHRhU3VtID4gZXBzaWxvbikgcGhpMSA9IDkwO1xuICAgIGVsc2UgaWYgKGRlbHRhU3VtIDwgLWVwc2lsb24pIHBoaTAgPSAtOTA7XG4gICAgcmFuZ2VbMF0gPSBsYW1iZGEwLCByYW5nZVsxXSA9IGxhbWJkYTE7XG4gIH0sXG4gIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgbGFtYmRhMCA9IC0obGFtYmRhMSA9IDE4MCksIHBoaTAgPSAtKHBoaTEgPSA5MCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGJvdW5kc1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIHJhbmdlcy5wdXNoKHJhbmdlID0gW2xhbWJkYTAgPSBsYW1iZGEsIGxhbWJkYTEgPSBsYW1iZGFdKTtcbiAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xufVxuXG5mdW5jdGlvbiBsaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgdmFyIHAgPSBjYXJ0ZXNpYW4oW2xhbWJkYSAqIHJhZGlhbnMsIHBoaSAqIHJhZGlhbnNdKTtcbiAgaWYgKHAwKSB7XG4gICAgdmFyIG5vcm1hbCA9IGNhcnRlc2lhbkNyb3NzKHAwLCBwKSxcbiAgICAgICAgZXF1YXRvcmlhbCA9IFtub3JtYWxbMV0sIC1ub3JtYWxbMF0sIDBdLFxuICAgICAgICBpbmZsZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3MoZXF1YXRvcmlhbCwgbm9ybWFsKTtcbiAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGluZmxlY3Rpb24pO1xuICAgIGluZmxlY3Rpb24gPSBzcGhlcmljYWwoaW5mbGVjdGlvbik7XG4gICAgdmFyIGRlbHRhID0gbGFtYmRhIC0gbGFtYmRhMixcbiAgICAgICAgc2lnbiA9IGRlbHRhID4gMCA/IDEgOiAtMSxcbiAgICAgICAgbGFtYmRhaSA9IGluZmxlY3Rpb25bMF0gKiBkZWdyZWVzICogc2lnbixcbiAgICAgICAgcGhpaSxcbiAgICAgICAgYW50aW1lcmlkaWFuID0gYWJzKGRlbHRhKSA+IDE4MDtcbiAgICBpZiAoYW50aW1lcmlkaWFuIF4gKHNpZ24gKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiAqIGxhbWJkYSkpIHtcbiAgICAgIHBoaWkgPSBpbmZsZWN0aW9uWzFdICogZGVncmVlcztcbiAgICAgIGlmIChwaGlpID4gcGhpMSkgcGhpMSA9IHBoaWk7XG4gICAgfSBlbHNlIGlmIChsYW1iZGFpID0gKGxhbWJkYWkgKyAzNjApICUgMzYwIC0gMTgwLCBhbnRpbWVyaWRpYW4gXiAoc2lnbiAqIGxhbWJkYTIgPCBsYW1iZGFpICYmIGxhbWJkYWkgPCBzaWduICogbGFtYmRhKSkge1xuICAgICAgcGhpaSA9IC1pbmZsZWN0aW9uWzFdICogZGVncmVlcztcbiAgICAgIGlmIChwaGlpIDwgcGhpMCkgcGhpMCA9IHBoaWk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICAgICAgaWYgKHBoaSA+IHBoaTEpIHBoaTEgPSBwaGk7XG4gICAgfVxuICAgIGlmIChhbnRpbWVyaWRpYW4pIHtcbiAgICAgIGlmIChsYW1iZGEgPCBsYW1iZGEyKSB7XG4gICAgICAgIGlmIChhbmdsZShsYW1iZGEwLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYW5nbGUobGFtYmRhLCBsYW1iZGExKSA+IGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpKSBsYW1iZGEwID0gbGFtYmRhO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobGFtYmRhMSA+PSBsYW1iZGEwKSB7XG4gICAgICAgIGlmIChsYW1iZGEgPCBsYW1iZGEwKSBsYW1iZGEwID0gbGFtYmRhO1xuICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsYW1iZGEgPiBsYW1iZGEyKSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYTAsIGxhbWJkYSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhLCBsYW1iZGExKSA+IGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpKSBsYW1iZGEwID0gbGFtYmRhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJhbmdlcy5wdXNoKHJhbmdlID0gW2xhbWJkYTAgPSBsYW1iZGEsIGxhbWJkYTEgPSBsYW1iZGFdKTtcbiAgfVxuICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgaWYgKHBoaSA+IHBoaTEpIHBoaTEgPSBwaGk7XG4gIHAwID0gcCwgbGFtYmRhMiA9IGxhbWJkYTtcbn1cblxuZnVuY3Rpb24gYm91bmRzTGluZVN0YXJ0KCkge1xuICBib3VuZHNTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0xpbmVFbmQoKSB7XG4gIHJhbmdlWzBdID0gbGFtYmRhMCwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgcDAgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBib3VuZHNSaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgaWYgKHAwKSB7XG4gICAgdmFyIGRlbHRhID0gbGFtYmRhIC0gbGFtYmRhMjtcbiAgICBkZWx0YVN1bS5hZGQoYWJzKGRlbHRhKSA+IDE4MCA/IGRlbHRhICsgKGRlbHRhID4gMCA/IDM2MCA6IC0zNjApIDogZGVsdGEpO1xuICB9IGVsc2Uge1xuICAgIGxhbWJkYTAwID0gbGFtYmRhLCBwaGkwMCA9IHBoaTtcbiAgfVxuICBhcmVhU3RyZWFtLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgbGluZVBvaW50KGxhbWJkYSwgcGhpKTtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ1N0YXJ0KCkge1xuICBhcmVhU3RyZWFtLmxpbmVTdGFydCgpO1xufVxuXG5mdW5jdGlvbiBib3VuZHNSaW5nRW5kKCkge1xuICBib3VuZHNSaW5nUG9pbnQobGFtYmRhMDAsIHBoaTAwKTtcbiAgYXJlYVN0cmVhbS5saW5lRW5kKCk7XG4gIGlmIChhYnMoZGVsdGFTdW0pID4gZXBzaWxvbikgbGFtYmRhMCA9IC0obGFtYmRhMSA9IDE4MCk7XG4gIHJhbmdlWzBdID0gbGFtYmRhMCwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICBwMCA9IG51bGw7XG59XG5cbi8vIEZpbmRzIHRoZSBsZWZ0LXJpZ2h0IGRpc3RhbmNlIGJldHdlZW4gdHdvIGxvbmdpdHVkZXMuXG4vLyBUaGlzIGlzIGFsbW9zdCB0aGUgc2FtZSBhcyAobGFtYmRhMSAtIGxhbWJkYTAgKyAzNjDCsCkgJSAzNjDCsCwgZXhjZXB0IHRoYXQgd2Ugd2FudFxuLy8gdGhlIGRpc3RhbmNlIGJldHdlZW4gwrExODDCsCB0byBiZSAzNjDCsC5cbmZ1bmN0aW9uIGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpIHtcbiAgcmV0dXJuIChsYW1iZGExIC09IGxhbWJkYTApIDwgMCA/IGxhbWJkYTEgKyAzNjAgOiBsYW1iZGExO1xufVxuXG5mdW5jdGlvbiByYW5nZUNvbXBhcmUoYSwgYikge1xuICByZXR1cm4gYVswXSAtIGJbMF07XG59XG5cbmZ1bmN0aW9uIHJhbmdlQ29udGFpbnMocmFuZ2UsIHgpIHtcbiAgcmV0dXJuIHJhbmdlWzBdIDw9IHJhbmdlWzFdID8gcmFuZ2VbMF0gPD0geCAmJiB4IDw9IHJhbmdlWzFdIDogeCA8IHJhbmdlWzBdIHx8IHJhbmdlWzFdIDwgeDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZmVhdHVyZSkge1xuICB2YXIgaSwgbiwgYSwgYiwgbWVyZ2VkLCBkZWx0YU1heCwgZGVsdGE7XG5cbiAgcGhpMSA9IGxhbWJkYTEgPSAtKGxhbWJkYTAgPSBwaGkwID0gSW5maW5pdHkpO1xuICByYW5nZXMgPSBbXTtcbiAgc3RyZWFtKGZlYXR1cmUsIGJvdW5kc1N0cmVhbSk7XG5cbiAgLy8gRmlyc3QsIHNvcnQgcmFuZ2VzIGJ5IHRoZWlyIG1pbmltdW0gbG9uZ2l0dWRlcy5cbiAgaWYgKG4gPSByYW5nZXMubGVuZ3RoKSB7XG4gICAgcmFuZ2VzLnNvcnQocmFuZ2VDb21wYXJlKTtcblxuICAgIC8vIFRoZW4sIG1lcmdlIGFueSByYW5nZXMgdGhhdCBvdmVybGFwLlxuICAgIGZvciAoaSA9IDEsIGEgPSByYW5nZXNbMF0sIG1lcmdlZCA9IFthXTsgaSA8IG47ICsraSkge1xuICAgICAgYiA9IHJhbmdlc1tpXTtcbiAgICAgIGlmIChyYW5nZUNvbnRhaW5zKGEsIGJbMF0pIHx8IHJhbmdlQ29udGFpbnMoYSwgYlsxXSkpIHtcbiAgICAgICAgaWYgKGFuZ2xlKGFbMF0sIGJbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMV0gPSBiWzFdO1xuICAgICAgICBpZiAoYW5nbGUoYlswXSwgYVsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVswXSA9IGJbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXJnZWQucHVzaChhID0gYik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmluYWxseSwgZmluZCB0aGUgbGFyZ2VzdCBnYXAgYmV0d2VlbiB0aGUgbWVyZ2VkIHJhbmdlcy5cbiAgICAvLyBUaGUgZmluYWwgYm91bmRpbmcgYm94IHdpbGwgYmUgdGhlIGludmVyc2Ugb2YgdGhpcyBnYXAuXG4gICAgZm9yIChkZWx0YU1heCA9IC1JbmZpbml0eSwgbiA9IG1lcmdlZC5sZW5ndGggLSAxLCBpID0gMCwgYSA9IG1lcmdlZFtuXTsgaSA8PSBuOyBhID0gYiwgKytpKSB7XG4gICAgICBiID0gbWVyZ2VkW2ldO1xuICAgICAgaWYgKChkZWx0YSA9IGFuZ2xlKGFbMV0sIGJbMF0pKSA+IGRlbHRhTWF4KSBkZWx0YU1heCA9IGRlbHRhLCBsYW1iZGEwID0gYlswXSwgbGFtYmRhMSA9IGFbMV07XG4gICAgfVxuICB9XG5cbiAgcmFuZ2VzID0gcmFuZ2UgPSBudWxsO1xuXG4gIHJldHVybiBsYW1iZGEwID09PSBJbmZpbml0eSB8fCBwaGkwID09PSBJbmZpbml0eVxuICAgICAgPyBbW05hTiwgTmFOXSwgW05hTiwgTmFOXV1cbiAgICAgIDogW1tsYW1iZGEwLCBwaGkwXSwgW2xhbWJkYTEsIHBoaTFdXTtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgZGVncmVlcywgZXBzaWxvbiwgZXBzaWxvbjIsIHJhZGlhbnMsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4vbm9vcC5qc1wiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW0uanNcIjtcblxudmFyIFcwLCBXMSxcbiAgICBYMCwgWTAsIFowLFxuICAgIFgxLCBZMSwgWjEsXG4gICAgWDIsIFkyLCBaMixcbiAgICBsYW1iZGEwMCwgcGhpMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgeDAsIHkwLCB6MDsgLy8gcHJldmlvdXMgcG9pbnRcblxudmFyIGNlbnRyb2lkU3RyZWFtID0ge1xuICBzcGhlcmU6IG5vb3AsXG4gIHBvaW50OiBjZW50cm9pZFBvaW50LFxuICBsaW5lU3RhcnQ6IGNlbnRyb2lkTGluZVN0YXJ0LFxuICBsaW5lRW5kOiBjZW50cm9pZExpbmVFbmQsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRSaW5nU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkUmluZ0VuZDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRMaW5lU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkTGluZUVuZDtcbiAgfVxufTtcblxuLy8gQXJpdGhtZXRpYyBtZWFuIG9mIENhcnRlc2lhbiB2ZWN0b3JzLlxuZnVuY3Rpb24gY2VudHJvaWRQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbihjb3NQaGkgKiBjb3MobGFtYmRhKSwgY29zUGhpICogc2luKGxhbWJkYSksIHNpbihwaGkpKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludENhcnRlc2lhbih4LCB5LCB6KSB7XG4gICsrVzA7XG4gIFgwICs9ICh4IC0gWDApIC8gVzA7XG4gIFkwICs9ICh5IC0gWTApIC8gVzA7XG4gIFowICs9ICh6IC0gWjApIC8gVzA7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0KCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkTGluZVBvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgY29zUGhpID0gY29zKHBoaSk7XG4gIHgwID0gY29zUGhpICogY29zKGxhbWJkYSk7XG4gIHkwID0gY29zUGhpICogc2luKGxhbWJkYSk7XG4gIHowID0gc2luKHBoaSk7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRMaW5lUG9pbnQ7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgeCA9IGNvc1BoaSAqIGNvcyhsYW1iZGEpLFxuICAgICAgeSA9IGNvc1BoaSAqIHNpbihsYW1iZGEpLFxuICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgdyA9IGF0YW4yKHNxcnQoKHcgPSB5MCAqIHogLSB6MCAqIHkpICogdyArICh3ID0gejAgKiB4IC0geDAgKiB6KSAqIHcgKyAodyA9IHgwICogeSAtIHkwICogeCkgKiB3KSwgeDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6KTtcbiAgVzEgKz0gdztcbiAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lRW5kKCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG59XG5cbi8vIFNlZSBKLiBFLiBCcm9jaywgVGhlIEluZXJ0aWEgVGVuc29yIGZvciBhIFNwaGVyaWNhbCBUcmlhbmdsZSxcbi8vIEouIEFwcGxpZWQgTWVjaGFuaWNzIDQyLCAyMzkgKDE5NzUpLlxuZnVuY3Rpb24gY2VudHJvaWRSaW5nU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRSaW5nUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kKCkge1xuICBjZW50cm9pZFJpbmdQb2ludChsYW1iZGEwMCwgcGhpMDApO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhMDAgPSBsYW1iZGEsIHBoaTAwID0gcGhpO1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRSaW5nUG9pbnQ7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKTtcbiAgeDAgPSBjb3NQaGkgKiBjb3MobGFtYmRhKTtcbiAgeTAgPSBjb3NQaGkgKiBzaW4obGFtYmRhKTtcbiAgejAgPSBzaW4ocGhpKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICB4ID0gY29zUGhpICogY29zKGxhbWJkYSksXG4gICAgICB5ID0gY29zUGhpICogc2luKGxhbWJkYSksXG4gICAgICB6ID0gc2luKHBoaSksXG4gICAgICBjeCA9IHkwICogeiAtIHowICogeSxcbiAgICAgIGN5ID0gejAgKiB4IC0geDAgKiB6LFxuICAgICAgY3ogPSB4MCAqIHkgLSB5MCAqIHgsXG4gICAgICBtID0gc3FydChjeCAqIGN4ICsgY3kgKiBjeSArIGN6ICogY3opLFxuICAgICAgdyA9IGFzaW4obSksIC8vIGxpbmUgd2VpZ2h0ID0gYW5nbGVcbiAgICAgIHYgPSBtICYmIC13IC8gbTsgLy8gYXJlYSB3ZWlnaHQgbXVsdGlwbGllclxuICBYMiArPSB2ICogY3g7XG4gIFkyICs9IHYgKiBjeTtcbiAgWjIgKz0gdiAqIGN6O1xuICBXMSArPSB3O1xuICBYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICBaMSArPSB3ICogKHowICsgKHowID0geikpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QpIHtcbiAgVzAgPSBXMSA9XG4gIFgwID0gWTAgPSBaMCA9XG4gIFgxID0gWTEgPSBaMSA9XG4gIFgyID0gWTIgPSBaMiA9IDA7XG4gIHN0cmVhbShvYmplY3QsIGNlbnRyb2lkU3RyZWFtKTtcblxuICB2YXIgeCA9IFgyLFxuICAgICAgeSA9IFkyLFxuICAgICAgeiA9IFoyLFxuICAgICAgbSA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcblxuICAvLyBJZiB0aGUgYXJlYS13ZWlnaHRlZCBjY2VudHJvaWQgaXMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbGVuZ3RoLXdlaWdodGVkIGNjZW50cm9pZC5cbiAgaWYgKG0gPCBlcHNpbG9uMikge1xuICAgIHggPSBYMSwgeSA9IFkxLCB6ID0gWjE7XG4gICAgLy8gSWYgdGhlIGZlYXR1cmUgaGFzIHplcm8gbGVuZ3RoLCBmYWxsIGJhY2sgdG8gYXJpdGhtZXRpYyBtZWFuIG9mIHBvaW50IHZlY3RvcnMuXG4gICAgaWYgKFcxIDwgZXBzaWxvbikgeCA9IFgwLCB5ID0gWTAsIHogPSBaMDtcbiAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgIC8vIElmIHRoZSBmZWF0dXJlIHN0aWxsIGhhcyBhbiB1bmRlZmluZWQgY2NlbnRyb2lkLCB0aGVuIHJldHVybi5cbiAgICBpZiAobSA8IGVwc2lsb24yKSByZXR1cm4gW05hTiwgTmFOXTtcbiAgfVxuXG4gIHJldHVybiBbYXRhbjIoeSwgeCkgKiBkZWdyZWVzLCBhc2luKHogLyBzcXJ0KG0pKSAqIGRlZ3JlZXNdO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG5cbiAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBhKHgsIHkpLCBiKHhbMF0sIHhbMV0pO1xuICB9XG5cbiAgaWYgKGEuaW52ZXJ0ICYmIGIuaW52ZXJ0KSBjb21wb3NlLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuICB9O1xuXG4gIHJldHVybiBjb21wb3NlO1xufVxuIiwiaW1wb3J0IGNvbXBvc2UgZnJvbSBcIi4vY29tcG9zZS5qc1wiO1xuaW1wb3J0IHthYnMsIGFzaW4sIGF0YW4yLCBjb3MsIGRlZ3JlZXMsIHBpLCByYWRpYW5zLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiByb3RhdGlvbklkZW50aXR5KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbYWJzKGxhbWJkYSkgPiBwaSA/IGxhbWJkYSArIE1hdGgucm91bmQoLWxhbWJkYSAvIHRhdSkgKiB0YXUgOiBsYW1iZGEsIHBoaV07XG59XG5cbnJvdGF0aW9uSWRlbnRpdHkuaW52ZXJ0ID0gcm90YXRpb25JZGVudGl0eTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVJhZGlhbnMoZGVsdGFMYW1iZGEsIGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XG4gIHJldHVybiAoZGVsdGFMYW1iZGEgJT0gdGF1KSA/IChkZWx0YVBoaSB8fCBkZWx0YUdhbW1hID8gY29tcG9zZShyb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSksIHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpKVxuICAgIDogcm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpKVxuICAgIDogKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKVxuICAgIDogcm90YXRpb25JZGVudGl0eSk7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICByZXR1cm4gZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gbGFtYmRhICs9IGRlbHRhTGFtYmRhLCBbbGFtYmRhID4gcGkgPyBsYW1iZGEgLSB0YXUgOiBsYW1iZGEgPCAtcGkgPyBsYW1iZGEgKyB0YXUgOiBsYW1iZGEsIHBoaV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gIHZhciByb3RhdGlvbiA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSk7XG4gIHJvdGF0aW9uLmludmVydCA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYSgtZGVsdGFMYW1iZGEpO1xuICByZXR1cm4gcm90YXRpb247XG59XG5cbmZ1bmN0aW9uIHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgdmFyIGNvc0RlbHRhUGhpID0gY29zKGRlbHRhUGhpKSxcbiAgICAgIHNpbkRlbHRhUGhpID0gc2luKGRlbHRhUGhpKSxcbiAgICAgIGNvc0RlbHRhR2FtbWEgPSBjb3MoZGVsdGFHYW1tYSksXG4gICAgICBzaW5EZWx0YUdhbW1hID0gc2luKGRlbHRhR2FtbWEpO1xuXG4gIGZ1bmN0aW9uIHJvdGF0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgICB4ID0gY29zKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHkgPSBzaW4obGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgICBrID0geiAqIGNvc0RlbHRhUGhpICsgeCAqIHNpbkRlbHRhUGhpO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSAtIGsgKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgLSB6ICogc2luRGVsdGFQaGkpLFxuICAgICAgYXNpbihrICogY29zRGVsdGFHYW1tYSArIHkgKiBzaW5EZWx0YUdhbW1hKVxuICAgIF07XG4gIH1cblxuICByb3RhdGlvbi5pbnZlcnQgPSBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgICAgeCA9IGNvcyhsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB5ID0gc2luKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgICAgayA9IHogKiBjb3NEZWx0YUdhbW1hIC0geSAqIHNpbkRlbHRhR2FtbWE7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hICsgeiAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSArIGsgKiBzaW5EZWx0YVBoaSksXG4gICAgICBhc2luKGsgKiBjb3NEZWx0YVBoaSAtIHggKiBzaW5EZWx0YVBoaSlcbiAgICBdO1xuICB9O1xuXG4gIHJldHVybiByb3RhdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocm90YXRlKSB7XG4gIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMocm90YXRlWzBdICogcmFkaWFucywgcm90YXRlWzFdICogcmFkaWFucywgcm90YXRlLmxlbmd0aCA+IDIgPyByb3RhdGVbMl0gKiByYWRpYW5zIDogMCk7XG5cbiAgZnVuY3Rpb24gZm9yd2FyZChjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXNbMV0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXM7XG4gIH1cblxuICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMgPSByb3RhdGUuaW52ZXJ0KGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXNbMV0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXM7XG4gIH07XG5cbiAgcmV0dXJuIGZvcndhcmQ7XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZSwgc3BoZXJpY2FsfSBmcm9tIFwiLi9jYXJ0ZXNpYW4uanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IHthY29zLCBjb3MsIGRlZ3JlZXMsIGVwc2lsb24sIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5pbXBvcnQge3JvdGF0ZVJhZGlhbnN9IGZyb20gXCIuL3JvdGF0aW9uLmpzXCI7XG5cbi8vIEdlbmVyYXRlcyBhIGNpcmNsZSBjZW50ZXJlZCBhdCBbMMKwLCAwwrBdLCB3aXRoIGEgZ2l2ZW4gcmFkaXVzIGFuZCBwcmVjaXNpb24uXG5leHBvcnQgZnVuY3Rpb24gY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCB0MCwgdDEpIHtcbiAgaWYgKCFkZWx0YSkgcmV0dXJuO1xuICB2YXIgY29zUmFkaXVzID0gY29zKHJhZGl1cyksXG4gICAgICBzaW5SYWRpdXMgPSBzaW4ocmFkaXVzKSxcbiAgICAgIHN0ZXAgPSBkaXJlY3Rpb24gKiBkZWx0YTtcbiAgaWYgKHQwID09IG51bGwpIHtcbiAgICB0MCA9IHJhZGl1cyArIGRpcmVjdGlvbiAqIHRhdTtcbiAgICB0MSA9IHJhZGl1cyAtIHN0ZXAgLyAyO1xuICB9IGVsc2Uge1xuICAgIHQwID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDApO1xuICAgIHQxID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDEpO1xuICAgIGlmIChkaXJlY3Rpb24gPiAwID8gdDAgPCB0MSA6IHQwID4gdDEpIHQwICs9IGRpcmVjdGlvbiAqIHRhdTtcbiAgfVxuICBmb3IgKHZhciBwb2ludCwgdCA9IHQwOyBkaXJlY3Rpb24gPiAwID8gdCA+IHQxIDogdCA8IHQxOyB0IC09IHN0ZXApIHtcbiAgICBwb2ludCA9IHNwaGVyaWNhbChbY29zUmFkaXVzLCAtc2luUmFkaXVzICogY29zKHQpLCAtc2luUmFkaXVzICogc2luKHQpXSk7XG4gICAgc3RyZWFtLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gIH1cbn1cblxuLy8gUmV0dXJucyB0aGUgc2lnbmVkIGFuZ2xlIG9mIGEgY2FydGVzaWFuIHBvaW50IHJlbGF0aXZlIHRvIFtjb3NSYWRpdXMsIDAsIDBdLlxuZnVuY3Rpb24gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgcG9pbnQpIHtcbiAgcG9pbnQgPSBjYXJ0ZXNpYW4ocG9pbnQpLCBwb2ludFswXSAtPSBjb3NSYWRpdXM7XG4gIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UocG9pbnQpO1xuICB2YXIgcmFkaXVzID0gYWNvcygtcG9pbnRbMV0pO1xuICByZXR1cm4gKCgtcG9pbnRbMl0gPCAwID8gLXJhZGl1cyA6IHJhZGl1cykgKyB0YXUgLSBlcHNpbG9uKSAlIHRhdTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjZW50ZXIgPSBjb25zdGFudChbMCwgMF0pLFxuICAgICAgcmFkaXVzID0gY29uc3RhbnQoOTApLFxuICAgICAgcHJlY2lzaW9uID0gY29uc3RhbnQoNiksXG4gICAgICByaW5nLFxuICAgICAgcm90YXRlLFxuICAgICAgc3RyZWFtID0ge3BvaW50OiBwb2ludH07XG5cbiAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgIHJpbmcucHVzaCh4ID0gcm90YXRlKHgsIHkpKTtcbiAgICB4WzBdICo9IGRlZ3JlZXMsIHhbMV0gKj0gZGVncmVlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNpcmNsZSgpIHtcbiAgICB2YXIgYyA9IGNlbnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICByID0gcmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKiByYWRpYW5zLFxuICAgICAgICBwID0gcHJlY2lzaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKiByYWRpYW5zO1xuICAgIHJpbmcgPSBbXTtcbiAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKC1jWzBdICogcmFkaWFucywgLWNbMV0gKiByYWRpYW5zLCAwKS5pbnZlcnQ7XG4gICAgY2lyY2xlU3RyZWFtKHN0cmVhbSwgciwgcCwgMSk7XG4gICAgYyA9IHt0eXBlOiBcIlBvbHlnb25cIiwgY29vcmRpbmF0ZXM6IFtyaW5nXX07XG4gICAgcmluZyA9IHJvdGF0ZSA9IG51bGw7XG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBjaXJjbGUuY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNlbnRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoWytfWzBdLCArX1sxXV0pLCBjaXJjbGUpIDogY2VudGVyO1xuICB9O1xuXG4gIGNpcmNsZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGNpcmNsZSkgOiByYWRpdXM7XG4gIH07XG5cbiAgY2lyY2xlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjaXNpb24gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgY2lyY2xlKSA6IHByZWNpc2lvbjtcbiAgfTtcblxuICByZXR1cm4gY2lyY2xlO1xufVxuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBsaW5lcyA9IFtdLFxuICAgICAgbGluZTtcbiAgcmV0dXJuIHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgbGluZS5wdXNoKFt4LCB5XSk7XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGluZXMucHVzaChsaW5lID0gW10pO1xuICAgIH0sXG4gICAgbGluZUVuZDogbm9vcCxcbiAgICByZWpvaW46IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIGxpbmVzLnB1c2gobGluZXMucG9wKCkuY29uY2F0KGxpbmVzLnNoaWZ0KCkpKTtcbiAgICB9LFxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbGluZXM7XG4gICAgICBsaW5lcyA9IFtdO1xuICAgICAgbGluZSA9IG51bGw7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7YWJzLCBlcHNpbG9ufSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGFicyhhWzBdIC0gYlswXSkgPCBlcHNpbG9uICYmIGFicyhhWzFdIC0gYlsxXSkgPCBlcHNpbG9uO1xufVxuIiwiaW1wb3J0IHBvaW50RXF1YWwgZnJvbSBcIi4uL3BvaW50RXF1YWwuanNcIjtcblxuZnVuY3Rpb24gSW50ZXJzZWN0aW9uKHBvaW50LCBwb2ludHMsIG90aGVyLCBlbnRyeSkge1xuICB0aGlzLnggPSBwb2ludDtcbiAgdGhpcy56ID0gcG9pbnRzO1xuICB0aGlzLm8gPSBvdGhlcjsgLy8gYW5vdGhlciBpbnRlcnNlY3Rpb25cbiAgdGhpcy5lID0gZW50cnk7IC8vIGlzIGFuIGVudHJ5P1xuICB0aGlzLnYgPSBmYWxzZTsgLy8gdmlzaXRlZFxuICB0aGlzLm4gPSB0aGlzLnAgPSBudWxsOyAvLyBuZXh0ICYgcHJldmlvdXNcbn1cblxuLy8gQSBnZW5lcmFsaXplZCBwb2x5Z29uIGNsaXBwaW5nIGFsZ29yaXRobTogZ2l2ZW4gYSBwb2x5Z29uIHRoYXQgaGFzIGJlZW4gY3V0XG4vLyBpbnRvIGl0cyB2aXNpYmxlIGxpbmUgc2VnbWVudHMsIGFuZCByZWpvaW5zIHRoZSBzZWdtZW50cyBieSBpbnRlcnBvbGF0aW5nXG4vLyBhbG9uZyB0aGUgY2xpcCBlZGdlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKSB7XG4gIHZhciBzdWJqZWN0ID0gW10sXG4gICAgICBjbGlwID0gW10sXG4gICAgICBpLFxuICAgICAgbjtcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHNlZ21lbnQpIHtcbiAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcbiAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl0sIHg7XG5cbiAgICAvLyBJZiB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzIG9mIGEgc2VnbWVudCBhcmUgY29pbmNpZGVudCwgdGhlbiB0cmVhdCBhcyBhXG4gICAgLy8gY2xvc2VkIHJpbmcuIFRPRE8gaWYgYWxsIHJpbmdzIGFyZSBjbG9zZWQsIHRoZW4gdGhlIHdpbmRpbmcgb3JkZXIgb2YgdGhlXG4gICAgLy8gZXh0ZXJpb3IgcmluZyBzaG91bGQgYmUgY2hlY2tlZC5cbiAgICBpZiAocG9pbnRFcXVhbChwMCwgcDEpKSB7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sIHAwWzFdKTtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBzZWdtZW50LCBudWxsLCB0cnVlKSk7XG4gICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIG51bGwsIHgsIGZhbHNlKSk7XG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBzZWdtZW50LCBudWxsLCBmYWxzZSkpO1xuICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBudWxsLCB4LCB0cnVlKSk7XG4gIH0pO1xuXG4gIGlmICghc3ViamVjdC5sZW5ndGgpIHJldHVybjtcblxuICBjbGlwLnNvcnQoY29tcGFyZUludGVyc2VjdGlvbik7XG4gIGxpbmsoc3ViamVjdCk7XG4gIGxpbmsoY2xpcCk7XG5cbiAgZm9yIChpID0gMCwgbiA9IGNsaXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgY2xpcFtpXS5lID0gc3RhcnRJbnNpZGUgPSAhc3RhcnRJbnNpZGU7XG4gIH1cblxuICB2YXIgc3RhcnQgPSBzdWJqZWN0WzBdLFxuICAgICAgcG9pbnRzLFxuICAgICAgcG9pbnQ7XG5cbiAgd2hpbGUgKDEpIHtcbiAgICAvLyBGaW5kIGZpcnN0IHVudmlzaXRlZCBpbnRlcnNlY3Rpb24uXG4gICAgdmFyIGN1cnJlbnQgPSBzdGFydCxcbiAgICAgICAgaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICB3aGlsZSAoY3VycmVudC52KSBpZiAoKGN1cnJlbnQgPSBjdXJyZW50Lm4pID09PSBzdGFydCkgcmV0dXJuO1xuICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgZG8ge1xuICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgaWYgKGN1cnJlbnQuZSkge1xuICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50Lm4ueCwgMSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgIHBvaW50cyA9IGN1cnJlbnQucC56O1xuICAgICAgICAgIGZvciAoaSA9IHBvaW50cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgc3RyZWFtLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQucC54LCAtMSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubztcbiAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICAgIGlzU3ViamVjdCA9ICFpc1N1YmplY3Q7XG4gICAgfSB3aGlsZSAoIWN1cnJlbnQudik7XG4gICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsaW5rKGFycmF5KSB7XG4gIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XG4gIHZhciBuLFxuICAgICAgaSA9IDAsXG4gICAgICBhID0gYXJyYXlbMF0sXG4gICAgICBiO1xuICB3aGlsZSAoKytpIDwgbikge1xuICAgIGEubiA9IGIgPSBhcnJheVtpXTtcbiAgICBiLnAgPSBhO1xuICAgIGEgPSBiO1xuICB9XG4gIGEubiA9IGIgPSBhcnJheVswXTtcbiAgYi5wID0gYTtcbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi9hZGRlci5qc1wiO1xuaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbkNyb3NzLCBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlfSBmcm9tIFwiLi9jYXJ0ZXNpYW4uanNcIjtcbmltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIHBpLCBxdWFydGVyUGksIHNpZ24sIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbnZhciBzdW0gPSBhZGRlcigpO1xuXG5mdW5jdGlvbiBsb25naXR1ZGUocG9pbnQpIHtcbiAgaWYgKGFicyhwb2ludFswXSkgPD0gcGkpXG4gICAgcmV0dXJuIHBvaW50WzBdO1xuICBlbHNlXG4gICAgcmV0dXJuIHNpZ24ocG9pbnRbMF0pICogKChhYnMocG9pbnRbMF0pICsgcGkpICUgdGF1IC0gcGkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbGFtYmRhID0gbG9uZ2l0dWRlKHBvaW50KSxcbiAgICAgIHBoaSA9IHBvaW50WzFdLFxuICAgICAgc2luUGhpID0gc2luKHBoaSksXG4gICAgICBub3JtYWwgPSBbc2luKGxhbWJkYSksIC1jb3MobGFtYmRhKSwgMF0sXG4gICAgICBhbmdsZSA9IDAsXG4gICAgICB3aW5kaW5nID0gMDtcblxuICBzdW0ucmVzZXQoKTtcblxuICBpZiAoc2luUGhpID09PSAxKSBwaGkgPSBoYWxmUGkgKyBlcHNpbG9uO1xuICBlbHNlIGlmIChzaW5QaGkgPT09IC0xKSBwaGkgPSAtaGFsZlBpIC0gZXBzaWxvbjtcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb24ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEobSA9IChyaW5nID0gcG9seWdvbltpXSkubGVuZ3RoKSkgY29udGludWU7XG4gICAgdmFyIHJpbmcsXG4gICAgICAgIG0sXG4gICAgICAgIHBvaW50MCA9IHJpbmdbbSAtIDFdLFxuICAgICAgICBsYW1iZGEwID0gbG9uZ2l0dWRlKHBvaW50MCksXG4gICAgICAgIHBoaTAgPSBwb2ludDBbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICBzaW5QaGkwID0gc2luKHBoaTApLFxuICAgICAgICBjb3NQaGkwID0gY29zKHBoaTApO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBtOyArK2osIGxhbWJkYTAgPSBsYW1iZGExLCBzaW5QaGkwID0gc2luUGhpMSwgY29zUGhpMCA9IGNvc1BoaTEsIHBvaW50MCA9IHBvaW50MSkge1xuICAgICAgdmFyIHBvaW50MSA9IHJpbmdbal0sXG4gICAgICAgICAgbGFtYmRhMSA9IGxvbmdpdHVkZShwb2ludDEpLFxuICAgICAgICAgIHBoaTEgPSBwb2ludDFbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICAgIHNpblBoaTEgPSBzaW4ocGhpMSksXG4gICAgICAgICAgY29zUGhpMSA9IGNvcyhwaGkxKSxcbiAgICAgICAgICBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgIHNpZ24gPSBkZWx0YSA+PSAwID8gMSA6IC0xLFxuICAgICAgICAgIGFic0RlbHRhID0gc2lnbiAqIGRlbHRhLFxuICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFic0RlbHRhID4gcGksXG4gICAgICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGkxO1xuXG4gICAgICBzdW0uYWRkKGF0YW4yKGsgKiBzaWduICogc2luKGFic0RlbHRhKSwgY29zUGhpMCAqIGNvc1BoaTEgKyBrICogY29zKGFic0RlbHRhKSkpO1xuICAgICAgYW5nbGUgKz0gYW50aW1lcmlkaWFuID8gZGVsdGEgKyBzaWduICogdGF1IDogZGVsdGE7XG5cbiAgICAgIC8vIEFyZSB0aGUgbG9uZ2l0dWRlcyBlaXRoZXIgc2lkZSBvZiB0aGUgcG9pbnTigJlzIG1lcmlkaWFuIChsYW1iZGEpLFxuICAgICAgLy8gYW5kIGFyZSB0aGUgbGF0aXR1ZGVzIHNtYWxsZXIgdGhhbiB0aGUgcGFyYWxsZWwgKHBoaSk/XG4gICAgICBpZiAoYW50aW1lcmlkaWFuIF4gbGFtYmRhMCA+PSBsYW1iZGEgXiBsYW1iZGExID49IGxhbWJkYSkge1xuICAgICAgICB2YXIgYXJjID0gY2FydGVzaWFuQ3Jvc3MoY2FydGVzaWFuKHBvaW50MCksIGNhcnRlc2lhbihwb2ludDEpKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShhcmMpO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3Mobm9ybWFsLCBhcmMpO1xuICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGludGVyc2VjdGlvbik7XG4gICAgICAgIHZhciBwaGlBcmMgPSAoYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IC0xIDogMSkgKiBhc2luKGludGVyc2VjdGlvblsyXSk7XG4gICAgICAgIGlmIChwaGkgPiBwaGlBcmMgfHwgcGhpID09PSBwaGlBcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG4gICAgICAgICAgd2luZGluZyArPSBhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gMSA6IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRmlyc3QsIGRldGVybWluZSB3aGV0aGVyIHRoZSBTb3V0aCBwb2xlIGlzIGluc2lkZSBvciBvdXRzaWRlOlxuICAvL1xuICAvLyBJdCBpcyBpbnNpZGUgaWY6XG4gIC8vICogdGhlIHBvbHlnb24gd2luZHMgYXJvdW5kIGl0IGluIGEgY2xvY2t3aXNlIGRpcmVjdGlvbi5cbiAgLy8gKiB0aGUgcG9seWdvbiBkb2VzIG5vdCAoY3VtdWxhdGl2ZWx5KSB3aW5kIGFyb3VuZCBpdCwgYnV0IGhhcyBhIG5lZ2F0aXZlXG4gIC8vICAgKGNvdW50ZXItY2xvY2t3aXNlKSBhcmVhLlxuICAvL1xuICAvLyBTZWNvbmQsIGNvdW50IHRoZSAoc2lnbmVkKSBudW1iZXIgb2YgdGltZXMgYSBzZWdtZW50IGNyb3NzZXMgYSBsYW1iZGFcbiAgLy8gZnJvbSB0aGUgcG9pbnQgdG8gdGhlIFNvdXRoIHBvbGUuICBJZiBpdCBpcyB6ZXJvLCB0aGVuIHRoZSBwb2ludCBpcyB0aGVcbiAgLy8gc2FtZSBzaWRlIGFzIHRoZSBTb3V0aCBwb2xlLlxuXG4gIHJldHVybiAoYW5nbGUgPCAtZXBzaWxvbiB8fCBhbmdsZSA8IGVwc2lsb24gJiYgc3VtIDwgLWVwc2lsb24pIF4gKHdpbmRpbmcgJiAxKTtcbn1cbiIsImltcG9ydCBjbGlwQnVmZmVyIGZyb20gXCIuL2J1ZmZlci5qc1wiO1xuaW1wb3J0IGNsaXBSZWpvaW4gZnJvbSBcIi4vcmVqb2luLmpzXCI7XG5pbXBvcnQge2Vwc2lsb24sIGhhbGZQaX0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCBwb2x5Z29uQ29udGFpbnMgZnJvbSBcIi4uL3BvbHlnb25Db250YWlucy5qc1wiO1xuaW1wb3J0IHttZXJnZX0gZnJvbSBcImQzLWFycmF5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvaW50VmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzdGFydCkge1xuICByZXR1cm4gZnVuY3Rpb24oc2luaykge1xuICAgIHZhciBsaW5lID0gY2xpcExpbmUoc2luayksXG4gICAgICAgIHJpbmdCdWZmZXIgPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHJpbmdTaW5rID0gY2xpcExpbmUocmluZ0J1ZmZlciksXG4gICAgICAgIHBvbHlnb25TdGFydGVkID0gZmFsc2UsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICByaW5nO1xuXG4gICAgdmFyIGNsaXAgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRSaW5nO1xuICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBjbGlwLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHN0YXJ0KTtcbiAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBjbGlwUmVqb2luKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHNpbmspO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25FbmQoKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgc2VnbWVudHMgPSBwb2x5Z29uID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzaW5rLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIHNpbmsucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgaWYgKHBvaW50VmlzaWJsZShsYW1iZGEsIHBoaSkpIHNpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50TGluZShsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZS5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgY2xpcC5wb2ludCA9IHBvaW50TGluZTtcbiAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50UmluZyhsYW1iZGEsIHBoaSkge1xuICAgICAgcmluZy5wdXNoKFtsYW1iZGEsIHBoaV0pO1xuICAgICAgcmluZ1NpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIHJpbmdTaW5rLmxpbmVTdGFydCgpO1xuICAgICAgcmluZyA9IFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICBwb2ludFJpbmcocmluZ1swXVswXSwgcmluZ1swXVsxXSk7XG4gICAgICByaW5nU2luay5saW5lRW5kKCk7XG5cbiAgICAgIHZhciBjbGVhbiA9IHJpbmdTaW5rLmNsZWFuKCksXG4gICAgICAgICAgcmluZ1NlZ21lbnRzID0gcmluZ0J1ZmZlci5yZXN1bHQoKSxcbiAgICAgICAgICBpLCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aCwgbSxcbiAgICAgICAgICBzZWdtZW50LFxuICAgICAgICAgIHBvaW50O1xuXG4gICAgICByaW5nLnBvcCgpO1xuICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgcmluZyA9IG51bGw7XG5cbiAgICAgIGlmICghbikgcmV0dXJuO1xuXG4gICAgICAvLyBObyBpbnRlcnNlY3Rpb25zLlxuICAgICAgaWYgKGNsZWFuICYgMSkge1xuICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICBpZiAoKG0gPSBzZWdtZW50Lmxlbmd0aCAtIDEpID4gMCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHNpbmsucG9pbnQoKHBvaW50ID0gc2VnbWVudFtpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFJlam9pbiBjb25uZWN0ZWQgc2VnbWVudHMuXG4gICAgICAvLyBUT0RPIHJldXNlIHJpbmdCdWZmZXIucmVqb2luKCk/XG4gICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG5cbiAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcih2YWxpZFNlZ21lbnQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRTZWdtZW50KHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQubGVuZ3RoID4gMTtcbn1cblxuLy8gSW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGFsb25nIHRoZSBjbGlwIGVkZ2UuIEZvciBib3RoIGFudGltZXJpZGlhbiBjdXR0aW5nXG4vLyBhbmQgY2lyY2xlIGNsaXBwaW5nLCB0aGUgc2FtZSBjb21wYXJpc29uIGlzIHVzZWQuXG5mdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuICgoYSA9IGEueClbMF0gPCAwID8gYVsxXSAtIGhhbGZQaSAtIGVwc2lsb24gOiBoYWxmUGkgLSBhWzFdKVxuICAgICAgIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZlBpIC0gZXBzaWxvbiA6IGhhbGZQaSAtIGJbMV0pO1xufVxuIiwiaW1wb3J0IGNsaXAgZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7YWJzLCBhdGFuLCBjb3MsIGVwc2lsb24sIGhhbGZQaSwgcGksIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xpcChcbiAgZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICBjbGlwQW50aW1lcmlkaWFuTGluZSxcbiAgY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlLFxuICBbLXBpLCAtaGFsZlBpXVxuKTtcblxuLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlczogMCAtIHRoZXJlIHdlcmVcbi8vIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm8gaW50ZXJzZWN0aW9uczsgMiAtIHRoZXJlIHdlcmVcbi8vIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgc2hvdWxkIGJlIHJlam9pbmVkLlxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkxpbmUoc3RyZWFtKSB7XG4gIHZhciBsYW1iZGEwID0gTmFOLFxuICAgICAgcGhpMCA9IE5hTixcbiAgICAgIHNpZ24wID0gTmFOLFxuICAgICAgY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcblxuICByZXR1cm4ge1xuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBjbGVhbiA9IDE7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24obGFtYmRhMSwgcGhpMSkge1xuICAgICAgdmFyIHNpZ24xID0gbGFtYmRhMSA+IDAgPyBwaSA6IC1waSxcbiAgICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGExIC0gbGFtYmRhMCk7XG4gICAgICBpZiAoYWJzKGRlbHRhIC0gcGkpIDwgZXBzaWxvbikgeyAvLyBsaW5lIGNyb3NzZXMgYSBwb2xlXG4gICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEwLCBwaGkwID0gKHBoaTAgKyBwaGkxKSAvIDIgPiAwID8gaGFsZlBpIDogLWhhbGZQaSk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHNpZ24wICE9PSBzaWduMSAmJiBkZWx0YSA+PSBwaSkgeyAvLyBsaW5lIGNyb3NzZXMgYW50aW1lcmlkaWFuXG4gICAgICAgIGlmIChhYnMobGFtYmRhMCAtIHNpZ24wKSA8IGVwc2lsb24pIGxhbWJkYTAgLT0gc2lnbjAgKiBlcHNpbG9uOyAvLyBoYW5kbGUgZGVnZW5lcmFjaWVzXG4gICAgICAgIGlmIChhYnMobGFtYmRhMSAtIHNpZ24xKSA8IGVwc2lsb24pIGxhbWJkYTEgLT0gc2lnbjEgKiBlcHNpbG9uO1xuICAgICAgICBwaGkwID0gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9XG4gICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCA9IGxhbWJkYTEsIHBoaTAgPSBwaGkxKTtcbiAgICAgIHNpZ24wID0gc2lnbjE7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICBsYW1iZGEwID0gcGhpMCA9IE5hTjtcbiAgICB9LFxuICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAyIC0gY2xlYW47IC8vIGlmIGludGVyc2VjdGlvbnMsIHJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKSB7XG4gIHZhciBjb3NQaGkwLFxuICAgICAgY29zUGhpMSxcbiAgICAgIHNpbkxhbWJkYTBMYW1iZGExID0gc2luKGxhbWJkYTAgLSBsYW1iZGExKTtcbiAgcmV0dXJuIGFicyhzaW5MYW1iZGEwTGFtYmRhMSkgPiBlcHNpbG9uXG4gICAgICA/IGF0YW4oKHNpbihwaGkwKSAqIChjb3NQaGkxID0gY29zKHBoaTEpKSAqIHNpbihsYW1iZGExKVxuICAgICAgICAgIC0gc2luKHBoaTEpICogKGNvc1BoaTAgPSBjb3MocGhpMCkpICogc2luKGxhbWJkYTApKVxuICAgICAgICAgIC8gKGNvc1BoaTAgKiBjb3NQaGkxICogc2luTGFtYmRhMExhbWJkYTEpKVxuICAgICAgOiAocGhpMCArIHBoaTEpIC8gMjtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICB2YXIgcGhpO1xuICBpZiAoZnJvbSA9PSBudWxsKSB7XG4gICAgcGhpID0gZGlyZWN0aW9uICogaGFsZlBpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChwaSwgMCk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgMCk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgcGhpKTtcbiAgfSBlbHNlIGlmIChhYnMoZnJvbVswXSAtIHRvWzBdKSA+IGVwc2lsb24pIHtcbiAgICB2YXIgbGFtYmRhID0gZnJvbVswXSA8IHRvWzBdID8gcGkgOiAtcGk7XG4gICAgcGhpID0gZGlyZWN0aW9uICogbGFtYmRhIC8gMjtcbiAgICBzdHJlYW0ucG9pbnQoLWxhbWJkYSwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xuICB9IGVsc2Uge1xuICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICB9XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQWRkSW5QbGFjZSwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbkRvdCwgY2FydGVzaWFuU2NhbGUsIHNwaGVyaWNhbH0gZnJvbSBcIi4uL2NhcnRlc2lhbi5qc1wiO1xuaW1wb3J0IHtjaXJjbGVTdHJlYW19IGZyb20gXCIuLi9jaXJjbGUuanNcIjtcbmltcG9ydCB7YWJzLCBjb3MsIGVwc2lsb24sIHBpLCByYWRpYW5zLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHBvaW50RXF1YWwgZnJvbSBcIi4uL3BvaW50RXF1YWwuanNcIjtcbmltcG9ydCBjbGlwIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhZGl1cykge1xuICB2YXIgY3IgPSBjb3MocmFkaXVzKSxcbiAgICAgIGRlbHRhID0gNiAqIHJhZGlhbnMsXG4gICAgICBzbWFsbFJhZGl1cyA9IGNyID4gMCxcbiAgICAgIG5vdEhlbWlzcGhlcmUgPSBhYnMoY3IpID4gZXBzaWxvbjsgLy8gVE9ETyBvcHRpbWlzZSBmb3IgdGhpcyBjb21tb24gY2FzZVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgZnJvbSwgdG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmlzaWJsZShsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBjb3MobGFtYmRhKSAqIGNvcyhwaGkpID4gY3I7XG4gIH1cblxuICAvLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzIHVzZWQgZm9yIHBvbHlnb25cbiAgLy8gY2xpcHBpbmc6IDAgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm9cbiAgLy8gaW50ZXJzZWN0aW9ucyAyIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gIC8vIHNob3VsZCBiZSByZWpvaW5lZC5cbiAgZnVuY3Rpb24gY2xpcExpbmUoc3RyZWFtKSB7XG4gICAgdmFyIHBvaW50MCwgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgICAgYzAsIC8vIGNvZGUgZm9yIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwLCAvLyB2aXNpYmlsaXR5IG9mIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwMCwgLy8gdmlzaWJpbGl0eSBvZiBmaXJzdCBwb2ludFxuICAgICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xuICAgICAgICBjbGVhbiA9IDE7XG4gICAgICB9LFxuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHZhciBwb2ludDEgPSBbbGFtYmRhLCBwaGldLFxuICAgICAgICAgICAgcG9pbnQyLFxuICAgICAgICAgICAgdiA9IHZpc2libGUobGFtYmRhLCBwaGkpLFxuICAgICAgICAgICAgYyA9IHNtYWxsUmFkaXVzXG4gICAgICAgICAgICAgID8gdiA/IDAgOiBjb2RlKGxhbWJkYSwgcGhpKVxuICAgICAgICAgICAgICA6IHYgPyBjb2RlKGxhbWJkYSArIChsYW1iZGEgPCAwID8gcGkgOiAtcGkpLCBwaGkpIDogMDtcbiAgICAgICAgaWYgKCFwb2ludDAgJiYgKHYwMCA9IHYwID0gdikpIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgLy8gSGFuZGxlIGRlZ2VuZXJhY2llcy5cbiAgICAgICAgLy8gVE9ETyBpZ25vcmUgaWYgbm90IGNsaXBwaW5nIHBvbHlnb25zLlxuICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgIGlmICghcG9pbnQyIHx8IHBvaW50RXF1YWwocG9pbnQwLCBwb2ludDIpIHx8IHBvaW50RXF1YWwocG9pbnQxLCBwb2ludDIpKSB7XG4gICAgICAgICAgICBwb2ludDFbMF0gKz0gZXBzaWxvbjtcbiAgICAgICAgICAgIHBvaW50MVsxXSArPSBlcHNpbG9uO1xuICAgICAgICAgICAgdiA9IHZpc2libGUocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIC8vIG91dHNpZGUgZ29pbmcgaW5cbiAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCk7XG4gICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpbnNpZGUgZ29pbmcgb3V0XG4gICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50MCA9IHBvaW50MjtcbiAgICAgICAgfSBlbHNlIGlmIChub3RIZW1pc3BoZXJlICYmIHBvaW50MCAmJiBzbWFsbFJhZGl1cyBeIHYpIHtcbiAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAvLyBJZiB0aGUgY29kZXMgZm9yIHR3byBwb2ludHMgYXJlIGRpZmZlcmVudCwgb3IgYXJlIGJvdGggemVybyxcbiAgICAgICAgICAvLyBhbmQgdGhlcmUgdGhpcyBzZWdtZW50IGludGVyc2VjdHMgd2l0aCB0aGUgc21hbGwgY2lyY2xlLlxuICAgICAgICAgIGlmICghKGMgJiBjMCkgJiYgKHQgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDAsIHRydWUpKSkge1xuICAgICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgICAgaWYgKHNtYWxsUmFkaXVzKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodiAmJiAoIXBvaW50MCB8fCAhcG9pbnRFcXVhbChwb2ludDAsIHBvaW50MSkpKSB7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBwb2ludDAgPSBwb2ludDEsIHYwID0gdiwgYzAgPSBjO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodjApIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHBvaW50MCA9IG51bGw7XG4gICAgICB9LFxuICAgICAgLy8gUmVqb2luIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIGlmIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucyBhbmQgdGhlIGZpcnN0XG4gICAgICAvLyBhbmQgbGFzdCBwb2ludHMgd2VyZSB2aXNpYmxlLlxuICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2xlYW4gfCAoKHYwMCAmJiB2MCkgPDwgMSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIEludGVyc2VjdHMgdGhlIGdyZWF0IGNpcmNsZSBiZXR3ZWVuIGEgYW5kIGIgd2l0aCB0aGUgY2xpcCBjaXJjbGUuXG4gIGZ1bmN0aW9uIGludGVyc2VjdChhLCBiLCB0d28pIHtcbiAgICB2YXIgcGEgPSBjYXJ0ZXNpYW4oYSksXG4gICAgICAgIHBiID0gY2FydGVzaWFuKGIpO1xuXG4gICAgLy8gV2UgaGF2ZSB0d28gcGxhbmVzLCBuMS5wID0gZDEgYW5kIG4yLnAgPSBkMi5cbiAgICAvLyBGaW5kIGludGVyc2VjdGlvbiBsaW5lIHAodCkgPSBjMSBuMSArIGMyIG4yICsgdCAobjEg4qivIG4yKS5cbiAgICB2YXIgbjEgPSBbMSwgMCwgMF0sIC8vIG5vcm1hbFxuICAgICAgICBuMiA9IGNhcnRlc2lhbkNyb3NzKHBhLCBwYiksXG4gICAgICAgIG4ybjIgPSBjYXJ0ZXNpYW5Eb3QobjIsIG4yKSxcbiAgICAgICAgbjFuMiA9IG4yWzBdLCAvLyBjYXJ0ZXNpYW5Eb3QobjEsIG4yKSxcbiAgICAgICAgZGV0ZXJtaW5hbnQgPSBuMm4yIC0gbjFuMiAqIG4xbjI7XG5cbiAgICAvLyBUd28gcG9sYXIgcG9pbnRzLlxuICAgIGlmICghZGV0ZXJtaW5hbnQpIHJldHVybiAhdHdvICYmIGE7XG5cbiAgICB2YXIgYzEgPSAgY3IgKiBuMm4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgIGMyID0gLWNyICogbjFuMiAvIGRldGVybWluYW50LFxuICAgICAgICBuMXhuMiA9IGNhcnRlc2lhbkNyb3NzKG4xLCBuMiksXG4gICAgICAgIEEgPSBjYXJ0ZXNpYW5TY2FsZShuMSwgYzEpLFxuICAgICAgICBCID0gY2FydGVzaWFuU2NhbGUobjIsIGMyKTtcbiAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKEEsIEIpO1xuXG4gICAgLy8gU29sdmUgfHAodCl8XjIgPSAxLlxuICAgIHZhciB1ID0gbjF4bjIsXG4gICAgICAgIHcgPSBjYXJ0ZXNpYW5Eb3QoQSwgdSksXG4gICAgICAgIHV1ID0gY2FydGVzaWFuRG90KHUsIHUpLFxuICAgICAgICB0MiA9IHcgKiB3IC0gdXUgKiAoY2FydGVzaWFuRG90KEEsIEEpIC0gMSk7XG5cbiAgICBpZiAodDIgPCAwKSByZXR1cm47XG5cbiAgICB2YXIgdCA9IHNxcnQodDIpLFxuICAgICAgICBxID0gY2FydGVzaWFuU2NhbGUodSwgKC13IC0gdCkgLyB1dSk7XG4gICAgY2FydGVzaWFuQWRkSW5QbGFjZShxLCBBKTtcbiAgICBxID0gc3BoZXJpY2FsKHEpO1xuXG4gICAgaWYgKCF0d28pIHJldHVybiBxO1xuXG4gICAgLy8gVHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gICAgdmFyIGxhbWJkYTAgPSBhWzBdLFxuICAgICAgICBsYW1iZGExID0gYlswXSxcbiAgICAgICAgcGhpMCA9IGFbMV0sXG4gICAgICAgIHBoaTEgPSBiWzFdLFxuICAgICAgICB6O1xuXG4gICAgaWYgKGxhbWJkYTEgPCBsYW1iZGEwKSB6ID0gbGFtYmRhMCwgbGFtYmRhMCA9IGxhbWJkYTEsIGxhbWJkYTEgPSB6O1xuXG4gICAgdmFyIGRlbHRhID0gbGFtYmRhMSAtIGxhbWJkYTAsXG4gICAgICAgIHBvbGFyID0gYWJzKGRlbHRhIC0gcGkpIDwgZXBzaWxvbixcbiAgICAgICAgbWVyaWRpYW4gPSBwb2xhciB8fCBkZWx0YSA8IGVwc2lsb247XG5cbiAgICBpZiAoIXBvbGFyICYmIHBoaTEgPCBwaGkwKSB6ID0gcGhpMCwgcGhpMCA9IHBoaTEsIHBoaTEgPSB6O1xuXG4gICAgLy8gQ2hlY2sgdGhhdCB0aGUgZmlyc3QgcG9pbnQgaXMgYmV0d2VlbiBhIGFuZCBiLlxuICAgIGlmIChtZXJpZGlhblxuICAgICAgICA/IHBvbGFyXG4gICAgICAgICAgPyBwaGkwICsgcGhpMSA+IDAgXiBxWzFdIDwgKGFicyhxWzBdIC0gbGFtYmRhMCkgPCBlcHNpbG9uID8gcGhpMCA6IHBoaTEpXG4gICAgICAgICAgOiBwaGkwIDw9IHFbMV0gJiYgcVsxXSA8PSBwaGkxXG4gICAgICAgIDogZGVsdGEgPiBwaSBeIChsYW1iZGEwIDw9IHFbMF0gJiYgcVswXSA8PSBsYW1iZGExKSkge1xuICAgICAgdmFyIHExID0gY2FydGVzaWFuU2NhbGUodSwgKC13ICsgdCkgLyB1dSk7XG4gICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHExLCBBKTtcbiAgICAgIHJldHVybiBbcSwgc3BoZXJpY2FsKHExKV07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhdGVzIGEgNC1iaXQgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYXRpb24gb2YgYSBwb2ludCByZWxhdGl2ZSB0b1xuICAvLyB0aGUgc21hbGwgY2lyY2xlJ3MgYm91bmRpbmcgYm94LlxuICBmdW5jdGlvbiBjb2RlKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIHIgPSBzbWFsbFJhZGl1cyA/IHJhZGl1cyA6IHBpIC0gcmFkaXVzLFxuICAgICAgICBjb2RlID0gMDtcbiAgICBpZiAobGFtYmRhIDwgLXIpIGNvZGUgfD0gMTsgLy8gbGVmdFxuICAgIGVsc2UgaWYgKGxhbWJkYSA+IHIpIGNvZGUgfD0gMjsgLy8gcmlnaHRcbiAgICBpZiAocGhpIDwgLXIpIGNvZGUgfD0gNDsgLy8gYmVsb3dcbiAgICBlbHNlIGlmIChwaGkgPiByKSBjb2RlIHw9IDg7IC8vIGFib3ZlXG4gICAgcmV0dXJuIGNvZGU7XG4gIH1cblxuICByZXR1cm4gY2xpcCh2aXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHNtYWxsUmFkaXVzID8gWzAsIC1yYWRpdXNdIDogWy1waSwgcmFkaXVzIC0gcGldKTtcbn1cbiIsImltcG9ydCB7YWJzLCBlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IGNsaXBCdWZmZXIgZnJvbSBcIi4vYnVmZmVyLmpzXCI7XG5pbXBvcnQgY2xpcExpbmUgZnJvbSBcIi4vbGluZS5qc1wiO1xuaW1wb3J0IGNsaXBSZWpvaW4gZnJvbSBcIi4vcmVqb2luLmpzXCI7XG5pbXBvcnQge21lcmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcblxudmFyIGNsaXBNYXggPSAxZTksIGNsaXBNaW4gPSAtY2xpcE1heDtcblxuLy8gVE9ETyBVc2UgZDMtcG9seWdvbuKAmXMgcG9seWdvbkNvbnRhaW5zIGhlcmUgZm9yIHRoZSByaW5nIGNoZWNrP1xuLy8gVE9ETyBFbGltaW5hdGUgZHVwbGljYXRlIGJ1ZmZlcmluZyBpbiBjbGlwQnVmZmVyIGFuZCBwb2x5Z29uLnB1c2g/XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsaXBSZWN0YW5nbGUoeDAsIHkwLCB4MSwgeTEpIHtcblxuICBmdW5jdGlvbiB2aXNpYmxlKHgsIHkpIHtcbiAgICByZXR1cm4geDAgPD0geCAmJiB4IDw9IHgxICYmIHkwIDw9IHkgJiYgeSA8PSB5MTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIHZhciBhID0gMCwgYTEgPSAwO1xuICAgIGlmIChmcm9tID09IG51bGxcbiAgICAgICAgfHwgKGEgPSBjb3JuZXIoZnJvbSwgZGlyZWN0aW9uKSkgIT09IChhMSA9IGNvcm5lcih0bywgZGlyZWN0aW9uKSlcbiAgICAgICAgfHwgY29tcGFyZVBvaW50KGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICBkbyBzdHJlYW0ucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgIHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3JuZXIocCwgZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIGFicyhwWzBdIC0geDApIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAwIDogM1xuICAgICAgICA6IGFicyhwWzBdIC0geDEpIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAyIDogMVxuICAgICAgICA6IGFicyhwWzFdIC0geTApIDwgZXBzaWxvbiA/IGRpcmVjdGlvbiA+IDAgPyAxIDogMFxuICAgICAgICA6IGRpcmVjdGlvbiA+IDAgPyAzIDogMjsgLy8gYWJzKHBbMV0gLSB5MSkgPCBlcHNpbG9uXG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZVBvaW50KGEueCwgYi54KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhcmVQb2ludChhLCBiKSB7XG4gICAgdmFyIGNhID0gY29ybmVyKGEsIDEpLFxuICAgICAgICBjYiA9IGNvcm5lcihiLCAxKTtcbiAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYlxuICAgICAgICA6IGNhID09PSAwID8gYlsxXSAtIGFbMV1cbiAgICAgICAgOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdXG4gICAgICAgIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXVxuICAgICAgICA6IGJbMF0gLSBhWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sXG4gICAgICAgIGJ1ZmZlclN0cmVhbSA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgc2VnbWVudHMsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHJpbmcsXG4gICAgICAgIHhfXywgeV9fLCB2X18sIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIHhfLCB5Xywgdl8sIC8vIHByZXZpb3VzIHBvaW50XG4gICAgICAgIGZpcnN0LFxuICAgICAgICBjbGVhbjtcblxuICAgIHZhciBjbGlwU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBwb2x5Z29uU3RhcnQsXG4gICAgICBwb2x5Z29uRW5kOiBwb2x5Z29uRW5kXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIGlmICh2aXNpYmxlKHgsIHkpKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9seWdvbkluc2lkZSgpIHtcbiAgICAgIHZhciB3aW5kaW5nID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBmb3IgKHZhciByaW5nID0gcG9seWdvbltpXSwgaiA9IDEsIG0gPSByaW5nLmxlbmd0aCwgcG9pbnQgPSByaW5nWzBdLCBhMCwgYTEsIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07IGogPCBtOyArK2opIHtcbiAgICAgICAgICBhMCA9IGIwLCBhMSA9IGIxLCBwb2ludCA9IHJpbmdbal0sIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07XG4gICAgICAgICAgaWYgKGExIDw9IHkxKSB7IGlmIChiMSA+IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA+IChiMSAtIGExKSAqICh4MCAtIGEwKSkgKyt3aW5kaW5nOyB9XG4gICAgICAgICAgZWxzZSB7IGlmIChiMSA8PSB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPCAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpIC0td2luZGluZzsgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aW5kaW5nO1xuICAgIH1cblxuICAgIC8vIEJ1ZmZlciBnZW9tZXRyeSB3aXRoaW4gYSBwb2x5Z29uIGFuZCB0aGVuIGNsaXAgaXQgZW4gbWFzc2UuXG4gICAgZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgYWN0aXZlU3RyZWFtID0gYnVmZmVyU3RyZWFtLCBzZWdtZW50cyA9IFtdLCBwb2x5Z29uID0gW10sIGNsZWFuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkluc2lkZSgpLFxuICAgICAgICAgIGNsZWFuSW5zaWRlID0gY2xlYW4gJiYgc3RhcnRJbnNpZGUsXG4gICAgICAgICAgdmlzaWJsZSA9IChzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKSkubGVuZ3RoO1xuICAgICAgaWYgKGNsZWFuSW5zaWRlIHx8IHZpc2libGUpIHtcbiAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBpZiAoY2xlYW5JbnNpZGUpIHtcbiAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgY2xpcFJlam9pbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICB9XG4gICAgICBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICBpZiAocG9seWdvbikgcG9seWdvbi5wdXNoKHJpbmcgPSBbXSk7XG4gICAgICBmaXJzdCA9IHRydWU7XG4gICAgICB2XyA9IGZhbHNlO1xuICAgICAgeF8gPSB5XyA9IE5hTjtcbiAgICB9XG5cbiAgICAvLyBUT0RPIHJhdGhlciB0aGFuIHNwZWNpYWwtY2FzZSBwb2x5Z29ucywgc2ltcGx5IGhhbmRsZSB0aGVtIHNlcGFyYXRlbHkuXG4gICAgLy8gSWRlYWxseSwgY29pbmNpZGVudCBpbnRlcnNlY3Rpb24gcG9pbnRzIHNob3VsZCBiZSBqaXR0ZXJlZCB0byBhdm9pZFxuICAgIC8vIGNsaXBwaW5nIGlzc3Vlcy5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgaWYgKHNlZ21lbnRzKSB7XG4gICAgICAgIGxpbmVQb2ludCh4X18sIHlfXyk7XG4gICAgICAgIGlmICh2X18gJiYgdl8pIGJ1ZmZlclN0cmVhbS5yZWpvaW4oKTtcbiAgICAgICAgc2VnbWVudHMucHVzaChidWZmZXJTdHJlYW0ucmVzdWx0KCkpO1xuICAgICAgfVxuICAgICAgY2xpcFN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgaWYgKHZfKSBhY3RpdmVTdHJlYW0ubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XG4gICAgICB2YXIgdiA9IHZpc2libGUoeCwgeSk7XG4gICAgICBpZiAocG9seWdvbikgcmluZy5wdXNoKFt4LCB5XSk7XG4gICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgeF9fID0geCwgeV9fID0geSwgdl9fID0gdjtcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodiAmJiB2XykgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgYSA9IFt4XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHhfKSksIHlfID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeV8pKV0sXG4gICAgICAgICAgICAgIGIgPSBbeCA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHgpKSwgeSA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHkpKV07XG4gICAgICAgICAgaWYgKGNsaXBMaW5lKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSkge1xuICAgICAgICAgICAgaWYgKCF2Xykge1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChhWzBdLCBhWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChiWzBdLCBiWzFdKTtcbiAgICAgICAgICAgIGlmICghdikgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmICh2KSB7XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgeF8gPSB4LCB5XyA9IHksIHZfID0gdjtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcFN0cmVhbTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICB0MCA9IDAsXG4gICAgICB0MSA9IDEsXG4gICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICByO1xuXG4gIHIgPSB4MCAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geDEgLSBheDtcbiAgaWYgKCFkeCAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgciA9IHkwIC0gYXk7XG4gIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB5MSAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICBpZiAodDAgPiAwKSBhWzBdID0gYXggKyB0MCAqIGR4LCBhWzFdID0gYXkgKyB0MCAqIGR5O1xuICBpZiAodDEgPCAxKSBiWzBdID0gYXggKyB0MSAqIGR4LCBiWzFdID0gYXkgKyB0MSAqIGR5O1xuICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCBjbGlwUmVjdGFuZ2xlIGZyb20gXCIuL3JlY3RhbmdsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHkwID0gMCxcbiAgICAgIHgxID0gOTYwLFxuICAgICAgeTEgPSA1MDAsXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgY2xpcDtcblxuICByZXR1cm4gY2xpcCA9IHtcbiAgICBzdHJlYW06IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gY2xpcFJlY3RhbmdsZSh4MCwgeTAsIHgxLCB5MSkoY2FjaGVTdHJlYW0gPSBzdHJlYW0pO1xuICAgIH0sXG4gICAgZXh0ZW50OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdLCBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbCwgY2xpcCkgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXIuanNcIjtcbmltcG9ydCB7YWJzLCBhdGFuMiwgY29zLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGguanNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3AuanNcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtLmpzXCI7XG5cbnZhciBsZW5ndGhTdW0gPSBhZGRlcigpLFxuICAgIGxhbWJkYTAsXG4gICAgc2luUGhpMCxcbiAgICBjb3NQaGkwO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBzcGhlcmU6IG5vb3AsXG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IGxlbmd0aExpbmVTdGFydCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBub29wLFxuICBwb2x5Z29uRW5kOiBub29wXG59O1xuXG5mdW5jdGlvbiBsZW5ndGhMaW5lU3RhcnQoKSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3Q7XG4gIGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbGVuZ3RoTGluZUVuZDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoTGluZUVuZCgpIHtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBub29wO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCA9IGxhbWJkYSwgc2luUGhpMCA9IHNpbihwaGkpLCBjb3NQaGkwID0gY29zKHBoaSk7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50O1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBzaW5QaGkgPSBzaW4ocGhpKSxcbiAgICAgIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgZGVsdGEgPSBhYnMobGFtYmRhIC0gbGFtYmRhMCksXG4gICAgICBjb3NEZWx0YSA9IGNvcyhkZWx0YSksXG4gICAgICBzaW5EZWx0YSA9IHNpbihkZWx0YSksXG4gICAgICB4ID0gY29zUGhpICogc2luRGVsdGEsXG4gICAgICB5ID0gY29zUGhpMCAqIHNpblBoaSAtIHNpblBoaTAgKiBjb3NQaGkgKiBjb3NEZWx0YSxcbiAgICAgIHogPSBzaW5QaGkwICogc2luUGhpICsgY29zUGhpMCAqIGNvc1BoaSAqIGNvc0RlbHRhO1xuICBsZW5ndGhTdW0uYWRkKGF0YW4yKHNxcnQoeCAqIHggKyB5ICogeSksIHopKTtcbiAgbGFtYmRhMCA9IGxhbWJkYSwgc2luUGhpMCA9IHNpblBoaSwgY29zUGhpMCA9IGNvc1BoaTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGxlbmd0aFN1bS5yZXNldCgpO1xuICBzdHJlYW0ob2JqZWN0LCBsZW5ndGhTdHJlYW0pO1xuICByZXR1cm4gK2xlbmd0aFN1bTtcbn1cbiIsImltcG9ydCBsZW5ndGggZnJvbSBcIi4vbGVuZ3RoLmpzXCI7XG5cbnZhciBjb29yZGluYXRlcyA9IFtudWxsLCBudWxsXSxcbiAgICBvYmplY3QgPSB7dHlwZTogXCJMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgY29vcmRpbmF0ZXNbMF0gPSBhO1xuICBjb29yZGluYXRlc1sxXSA9IGI7XG4gIHJldHVybiBsZW5ndGgob2JqZWN0KTtcbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBwb2x5Z29uQ29udGFpbnN9IGZyb20gXCIuL3BvbHlnb25Db250YWlucy5qc1wiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIGRpc3RhbmNlfSBmcm9tIFwiLi9kaXN0YW5jZS5qc1wiO1xuaW1wb3J0IHtlcHNpbG9uMiwgcmFkaWFuc30gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG52YXIgY29udGFpbnNPYmplY3RUeXBlID0ge1xuICBGZWF0dXJlOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zR2VvbWV0cnkob2JqZWN0Lmdlb21ldHJ5LCBwb2ludCk7XG4gIH0sXG4gIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGZlYXR1cmVzID0gb2JqZWN0LmZlYXR1cmVzLCBpID0gLTEsIG4gPSBmZWF0dXJlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc0dlb21ldHJ5KGZlYXR1cmVzW2ldLmdlb21ldHJ5LCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGNvbnRhaW5zR2VvbWV0cnlUeXBlID0ge1xuICBTcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHJldHVybiBjb250YWluc1BvaW50KG9iamVjdC5jb29yZGluYXRlcywgcG9pbnQpO1xuICB9LFxuICBNdWx0aVBvaW50OiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc1BvaW50KGNvb3JkaW5hdGVzW2ldLCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHJldHVybiBjb250YWluc0xpbmUob2JqZWN0LmNvb3JkaW5hdGVzLCBwb2ludCk7XG4gIH0sXG4gIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoY29udGFpbnNMaW5lKGNvb3JkaW5hdGVzW2ldLCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHJldHVybiBjb250YWluc1BvbHlnb24ob2JqZWN0LmNvb3JkaW5hdGVzLCBwb2ludCk7XG4gIH0sXG4gIE11bHRpUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoY29udGFpbnNQb2x5Z29uKGNvb3JkaW5hdGVzW2ldLCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcywgaSA9IC0xLCBuID0gZ2VvbWV0cmllcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc0dlb21ldHJ5KGdlb21ldHJpZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjb250YWluc0dlb21ldHJ5KGdlb21ldHJ5LCBwb2ludCkge1xuICByZXR1cm4gZ2VvbWV0cnkgJiYgY29udGFpbnNHZW9tZXRyeVR5cGUuaGFzT3duUHJvcGVydHkoZ2VvbWV0cnkudHlwZSlcbiAgICAgID8gY29udGFpbnNHZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHBvaW50KVxuICAgICAgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNQb2ludChjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgcmV0dXJuIGRpc3RhbmNlKGNvb3JkaW5hdGVzLCBwb2ludCkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zTGluZShjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgdmFyIGFvLCBibywgYWI7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgYm8gPSBkaXN0YW5jZShjb29yZGluYXRlc1tpXSwgcG9pbnQpO1xuICAgIGlmIChibyA9PT0gMCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKGkgPiAwKSB7XG4gICAgICBhYiA9IGRpc3RhbmNlKGNvb3JkaW5hdGVzW2ldLCBjb29yZGluYXRlc1tpIC0gMV0pO1xuICAgICAgaWYgKFxuICAgICAgICBhYiA+IDAgJiZcbiAgICAgICAgYW8gPD0gYWIgJiZcbiAgICAgICAgYm8gPD0gYWIgJiZcbiAgICAgICAgKGFvICsgYm8gLSBhYikgKiAoMSAtIE1hdGgucG93KChhbyAtIGJvKSAvIGFiLCAyKSkgPCBlcHNpbG9uMiAqIGFiXG4gICAgICApXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBhbyA9IGJvO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNQb2x5Z29uKGNvb3JkaW5hdGVzLCBwb2ludCkge1xuICByZXR1cm4gISFwb2x5Z29uQ29udGFpbnMoY29vcmRpbmF0ZXMubWFwKHJpbmdSYWRpYW5zKSwgcG9pbnRSYWRpYW5zKHBvaW50KSk7XG59XG5cbmZ1bmN0aW9uIHJpbmdSYWRpYW5zKHJpbmcpIHtcbiAgcmV0dXJuIHJpbmcgPSByaW5nLm1hcChwb2ludFJhZGlhbnMpLCByaW5nLnBvcCgpLCByaW5nO1xufVxuXG5mdW5jdGlvbiBwb2ludFJhZGlhbnMocG9pbnQpIHtcbiAgcmV0dXJuIFtwb2ludFswXSAqIHJhZGlhbnMsIHBvaW50WzFdICogcmFkaWFuc107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgcmV0dXJuIChvYmplY3QgJiYgY29udGFpbnNPYmplY3RUeXBlLmhhc093blByb3BlcnR5KG9iamVjdC50eXBlKVxuICAgICAgPyBjb250YWluc09iamVjdFR5cGVbb2JqZWN0LnR5cGVdXG4gICAgICA6IGNvbnRhaW5zR2VvbWV0cnkpKG9iamVjdCwgcG9pbnQpO1xufVxuIiwiaW1wb3J0IHtyYW5nZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2FicywgY2VpbCwgZXBzaWxvbn0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBncmF0aWN1bGVYKHkwLCB5MSwgZHkpIHtcbiAgdmFyIHkgPSByYW5nZSh5MCwgeTEgLSBlcHNpbG9uLCBkeSkuY29uY2F0KHkxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHkubWFwKGZ1bmN0aW9uKHkpIHsgcmV0dXJuIFt4LCB5XTsgfSk7IH07XG59XG5cbmZ1bmN0aW9uIGdyYXRpY3VsZVkoeDAsIHgxLCBkeCkge1xuICB2YXIgeCA9IHJhbmdlKHgwLCB4MSAtIGVwc2lsb24sIGR4KS5jb25jYXQoeDEpO1xuICByZXR1cm4gZnVuY3Rpb24oeSkgeyByZXR1cm4geC5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4gW3gsIHldOyB9KTsgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ3JhdGljdWxlKCkge1xuICB2YXIgeDEsIHgwLCBYMSwgWDAsXG4gICAgICB5MSwgeTAsIFkxLCBZMCxcbiAgICAgIGR4ID0gMTAsIGR5ID0gZHgsIERYID0gOTAsIERZID0gMzYwLFxuICAgICAgeCwgeSwgWCwgWSxcbiAgICAgIHByZWNpc2lvbiA9IDIuNTtcblxuICBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gICAgcmV0dXJuIHt0eXBlOiBcIk11bHRpTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogbGluZXMoKX07XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lcygpIHtcbiAgICByZXR1cm4gcmFuZ2UoY2VpbChYMCAvIERYKSAqIERYLCBYMSwgRFgpLm1hcChYKVxuICAgICAgICAuY29uY2F0KHJhbmdlKGNlaWwoWTAgLyBEWSkgKiBEWSwgWTEsIERZKS5tYXAoWSkpXG4gICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbCh4MCAvIGR4KSAqIGR4LCB4MSwgZHgpLmZpbHRlcihmdW5jdGlvbih4KSB7IHJldHVybiBhYnMoeCAlIERYKSA+IGVwc2lsb247IH0pLm1hcCh4KSlcbiAgICAgICAgLmNvbmNhdChyYW5nZShjZWlsKHkwIC8gZHkpICogZHksIHkxLCBkeSkuZmlsdGVyKGZ1bmN0aW9uKHkpIHsgcmV0dXJuIGFicyh5ICUgRFkpID4gZXBzaWxvbjsgfSkubWFwKHkpKTtcbiAgfVxuXG4gIGdyYXRpY3VsZS5saW5lcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBsaW5lcygpLm1hcChmdW5jdGlvbihjb29yZGluYXRlcykgeyByZXR1cm4ge3R5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9OyB9KTtcbiAgfTtcblxuICBncmF0aWN1bGUub3V0bGluZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlBvbHlnb25cIixcbiAgICAgIGNvb3JkaW5hdGVzOiBbXG4gICAgICAgIFgoWDApLmNvbmNhdChcbiAgICAgICAgWShZMSkuc2xpY2UoMSksXG4gICAgICAgIFgoWDEpLnJldmVyc2UoKS5zbGljZSgxKSxcbiAgICAgICAgWShZMCkucmV2ZXJzZSgpLnNsaWNlKDEpKVxuICAgICAgXVxuICAgIH07XG4gIH07XG5cbiAgZ3JhdGljdWxlLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF0aWN1bGUuZXh0ZW50TWlub3IoKTtcbiAgICByZXR1cm4gZ3JhdGljdWxlLmV4dGVudE1ham9yKF8pLmV4dGVudE1pbm9yKF8pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5leHRlbnRNYWpvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbW1gwLCBZMF0sIFtYMSwgWTFdXTtcbiAgICBYMCA9ICtfWzBdWzBdLCBYMSA9ICtfWzFdWzBdO1xuICAgIFkwID0gK19bMF1bMV0sIFkxID0gK19bMV1bMV07XG4gICAgaWYgKFgwID4gWDEpIF8gPSBYMCwgWDAgPSBYMSwgWDEgPSBfO1xuICAgIGlmIChZMCA+IFkxKSBfID0gWTAsIFkwID0gWTEsIFkxID0gXztcbiAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5leHRlbnRNaW5vciA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB4MCA9ICtfWzBdWzBdLCB4MSA9ICtfWzFdWzBdO1xuICAgIHkwID0gK19bMF1bMV0sIHkxID0gK19bMV1bMV07XG4gICAgaWYgKHgwID4geDEpIF8gPSB4MCwgeDAgPSB4MSwgeDEgPSBfO1xuICAgIGlmICh5MCA+IHkxKSBfID0geTAsIHkwID0geTEsIHkxID0gXztcbiAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5zdGVwID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5zdGVwTWlub3IoKTtcbiAgICByZXR1cm4gZ3JhdGljdWxlLnN0ZXBNYWpvcihfKS5zdGVwTWlub3IoXyk7XG4gIH07XG5cbiAgZ3JhdGljdWxlLnN0ZXBNYWpvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbRFgsIERZXTtcbiAgICBEWCA9ICtfWzBdLCBEWSA9ICtfWzFdO1xuICAgIHJldHVybiBncmF0aWN1bGU7XG4gIH07XG5cbiAgZ3JhdGljdWxlLnN0ZXBNaW5vciA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcbiAgICBkeCA9ICtfWzBdLCBkeSA9ICtfWzFdO1xuICAgIHJldHVybiBncmF0aWN1bGU7XG4gIH07XG5cbiAgZ3JhdGljdWxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcmVjaXNpb247XG4gICAgcHJlY2lzaW9uID0gK187XG4gICAgeCA9IGdyYXRpY3VsZVgoeTAsIHkxLCA5MCk7XG4gICAgeSA9IGdyYXRpY3VsZVkoeDAsIHgxLCBwcmVjaXNpb24pO1xuICAgIFggPSBncmF0aWN1bGVYKFkwLCBZMSwgOTApO1xuICAgIFkgPSBncmF0aWN1bGVZKFgwLCBYMSwgcHJlY2lzaW9uKTtcbiAgICByZXR1cm4gZ3JhdGljdWxlO1xuICB9O1xuXG4gIHJldHVybiBncmF0aWN1bGVcbiAgICAgIC5leHRlbnRNYWpvcihbWy0xODAsIC05MCArIGVwc2lsb25dLCBbMTgwLCA5MCAtIGVwc2lsb25dXSlcbiAgICAgIC5leHRlbnRNaW5vcihbWy0xODAsIC04MCAtIGVwc2lsb25dLCBbMTgwLCA4MCArIGVwc2lsb25dXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncmF0aWN1bGUxMCgpIHtcbiAgcmV0dXJuIGdyYXRpY3VsZSgpKCk7XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIGRlZ3JlZXMsIGhhdmVyc2luLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgeDAgPSBhWzBdICogcmFkaWFucyxcbiAgICAgIHkwID0gYVsxXSAqIHJhZGlhbnMsXG4gICAgICB4MSA9IGJbMF0gKiByYWRpYW5zLFxuICAgICAgeTEgPSBiWzFdICogcmFkaWFucyxcbiAgICAgIGN5MCA9IGNvcyh5MCksXG4gICAgICBzeTAgPSBzaW4oeTApLFxuICAgICAgY3kxID0gY29zKHkxKSxcbiAgICAgIHN5MSA9IHNpbih5MSksXG4gICAgICBreDAgPSBjeTAgKiBjb3MoeDApLFxuICAgICAga3kwID0gY3kwICogc2luKHgwKSxcbiAgICAgIGt4MSA9IGN5MSAqIGNvcyh4MSksXG4gICAgICBreTEgPSBjeTEgKiBzaW4oeDEpLFxuICAgICAgZCA9IDIgKiBhc2luKHNxcnQoaGF2ZXJzaW4oeTEgLSB5MCkgKyBjeTAgKiBjeTEgKiBoYXZlcnNpbih4MSAtIHgwKSkpLFxuICAgICAgayA9IHNpbihkKTtcblxuICB2YXIgaW50ZXJwb2xhdGUgPSBkID8gZnVuY3Rpb24odCkge1xuICAgIHZhciBCID0gc2luKHQgKj0gZCkgLyBrLFxuICAgICAgICBBID0gc2luKGQgLSB0KSAvIGssXG4gICAgICAgIHggPSBBICoga3gwICsgQiAqIGt4MSxcbiAgICAgICAgeSA9IEEgKiBreTAgKyBCICoga3kxLFxuICAgICAgICB6ID0gQSAqIHN5MCArIEIgKiBzeTE7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHksIHgpICogZGVncmVlcyxcbiAgICAgIGF0YW4yKHosIHNxcnQoeCAqIHggKyB5ICogeSkpICogZGVncmVlc1xuICAgIF07XG4gIH0gOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gW3gwICogZGVncmVlcywgeTAgKiBkZWdyZWVzXTtcbiAgfTtcblxuICBpbnRlcnBvbGF0ZS5kaXN0YW5jZSA9IGQ7XG5cbiAgcmV0dXJuIGludGVycG9sYXRlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi4vYWRkZXIuanNcIjtcbmltcG9ydCB7YWJzfSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcblxudmFyIGFyZWFTdW0gPSBhZGRlcigpLFxuICAgIGFyZWFSaW5nU3VtID0gYWRkZXIoKSxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwLFxuICAgIHkwO1xuXG52YXIgYXJlYVN0cmVhbSA9IHtcbiAgcG9pbnQ6IG5vb3AsXG4gIGxpbmVTdGFydDogbm9vcCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVN0cmVhbS5wb2ludCA9IG5vb3A7XG4gICAgYXJlYVN1bS5hZGQoYWJzKGFyZWFSaW5nU3VtKSk7XG4gICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJlYSA9IGFyZWFTdW0gLyAyO1xuICAgIGFyZWFTdW0ucmVzZXQoKTtcbiAgICByZXR1cm4gYXJlYTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYXJlYVJpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnRGaXJzdCh4LCB5KSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnQ7XG4gIHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5O1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQoeCwgeSkge1xuICBhcmVhUmluZ1N1bS5hZGQoeTAgKiB4IC0geDAgKiB5KTtcbiAgeDAgPSB4LCB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGFyZWFSaW5nRW5kKCkge1xuICBhcmVhUG9pbnQoeDAwLCB5MDApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcmVhU3RyZWFtO1xuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcblxudmFyIHgwID0gSW5maW5pdHksXG4gICAgeTAgPSB4MCxcbiAgICB4MSA9IC14MCxcbiAgICB5MSA9IHgxO1xuXG52YXIgYm91bmRzU3RyZWFtID0ge1xuICBwb2ludDogYm91bmRzUG9pbnQsXG4gIGxpbmVTdGFydDogbm9vcCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBub29wLFxuICBwb2x5Z29uRW5kOiBub29wLFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBib3VuZHMgPSBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB4MSA9IHkxID0gLSh5MCA9IHgwID0gSW5maW5pdHkpO1xuICAgIHJldHVybiBib3VuZHM7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGJvdW5kc1BvaW50KHgsIHkpIHtcbiAgaWYgKHggPCB4MCkgeDAgPSB4O1xuICBpZiAoeCA+IHgxKSB4MSA9IHg7XG4gIGlmICh5IDwgeTApIHkwID0geTtcbiAgaWYgKHkgPiB5MSkgeTEgPSB5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBib3VuZHNTdHJlYW07XG4iLCJpbXBvcnQge3NxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbi8vIFRPRE8gRW5mb3JjZSBwb3NpdGl2ZSBhcmVhIGZvciBleHRlcmlvciwgbmVnYXRpdmUgYXJlYSBmb3IgaW50ZXJpb3I/XG5cbnZhciBYMCA9IDAsXG4gICAgWTAgPSAwLFxuICAgIFowID0gMCxcbiAgICBYMSA9IDAsXG4gICAgWTEgPSAwLFxuICAgIFoxID0gMCxcbiAgICBYMiA9IDAsXG4gICAgWTIgPSAwLFxuICAgIFoyID0gMCxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwLFxuICAgIHkwO1xuXG52YXIgY2VudHJvaWRTdHJlYW0gPSB7XG4gIHBvaW50OiBjZW50cm9pZFBvaW50LFxuICBsaW5lU3RhcnQ6IGNlbnRyb2lkTGluZVN0YXJ0LFxuICBsaW5lRW5kOiBjZW50cm9pZExpbmVFbmQsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRSaW5nU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkUmluZ0VuZDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkTGluZVN0YXJ0O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZExpbmVFbmQ7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNlbnRyb2lkID0gWjIgPyBbWDIgLyBaMiwgWTIgLyBaMl1cbiAgICAgICAgOiBaMSA/IFtYMSAvIFoxLCBZMSAvIFoxXVxuICAgICAgICA6IFowID8gW1gwIC8gWjAsIFkwIC8gWjBdXG4gICAgICAgIDogW05hTiwgTmFOXTtcbiAgICBYMCA9IFkwID0gWjAgPVxuICAgIFgxID0gWTEgPSBaMSA9XG4gICAgWDIgPSBZMiA9IFoyID0gMDtcbiAgICByZXR1cm4gY2VudHJvaWQ7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnQoeCwgeSkge1xuICBYMCArPSB4O1xuICBZMCArPSB5O1xuICArK1owO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50Rmlyc3RMaW5lO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50Rmlyc3RMaW5lKHgsIHkpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50TGluZTtcbiAgY2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRMaW5lKHgsIHkpIHtcbiAgdmFyIGR4ID0geCAtIHgwLCBkeSA9IHkgLSB5MCwgeiA9IHNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICBYMSArPSB6ICogKHgwICsgeCkgLyAyO1xuICBZMSArPSB6ICogKHkwICsgeSkgLyAyO1xuICBaMSArPSB6O1xuICBjZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lRW5kKCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1N0YXJ0KCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRGaXJzdFJpbmc7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ0VuZCgpIHtcbiAgY2VudHJvaWRQb2ludFJpbmcoeDAwLCB5MDApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50Rmlyc3RSaW5nKHgsIHkpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50UmluZztcbiAgY2VudHJvaWRQb2ludCh4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRSaW5nKHgsIHkpIHtcbiAgdmFyIGR4ID0geCAtIHgwLFxuICAgICAgZHkgPSB5IC0geTAsXG4gICAgICB6ID0gc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgWDEgKz0geiAqICh4MCArIHgpIC8gMjtcbiAgWTEgKz0geiAqICh5MCArIHkpIC8gMjtcbiAgWjEgKz0gejtcblxuICB6ID0geTAgKiB4IC0geDAgKiB5O1xuICBYMiArPSB6ICogKHgwICsgeCk7XG4gIFkyICs9IHogKiAoeTAgKyB5KTtcbiAgWjIgKz0geiAqIDM7XG4gIGNlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjZW50cm9pZFN0cmVhbTtcbiIsImltcG9ydCB7dGF1fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGF0aENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUGF0aENvbnRleHQucHJvdG90eXBlID0ge1xuICBfcmFkaXVzOiA0LjUsXG4gIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JhZGl1cyA9IF8sIHRoaXM7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSA9PT0gMCkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9wb2ludCA9IE5hTjtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gICAgICAgIHRoaXMuX3BvaW50ID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4ICsgdGhpcy5fcmFkaXVzLCB5KTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5hcmMoeCwgeSwgdGhpcy5fcmFkaXVzLCAwLCB0YXUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlc3VsdDogbm9vcFxufTtcbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi4vYWRkZXIuanNcIjtcbmltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5cbnZhciBsZW5ndGhTdW0gPSBhZGRlcigpLFxuICAgIGxlbmd0aFJpbmcsXG4gICAgeDAwLFxuICAgIHkwMCxcbiAgICB4MCxcbiAgICB5MDtcblxudmFyIGxlbmd0aFN0cmVhbSA9IHtcbiAgcG9pbnQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoUG9pbnRGaXJzdDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKGxlbmd0aFJpbmcpIGxlbmd0aFBvaW50KHgwMCwgeTAwKTtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBub29wO1xuICB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFJpbmcgPSB0cnVlO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhSaW5nID0gbnVsbDtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gK2xlbmd0aFN1bTtcbiAgICBsZW5ndGhTdW0ucmVzZXQoKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9XG59O1xuXG5mdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KHgsIHkpIHtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoUG9pbnQ7XG4gIHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5O1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludCh4LCB5KSB7XG4gIHgwIC09IHgsIHkwIC09IHk7XG4gIGxlbmd0aFN1bS5hZGQoc3FydCh4MCAqIHgwICsgeTAgKiB5MCkpO1xuICB4MCA9IHgsIHkwID0geTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGVuZ3RoU3RyZWFtO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGF0aFN0cmluZygpIHtcbiAgdGhpcy5fc3RyaW5nID0gW107XG59XG5cblBhdGhTdHJpbmcucHJvdG90eXBlID0ge1xuICBfcmFkaXVzOiA0LjUsXG4gIF9jaXJjbGU6IGNpcmNsZSg0LjUpLFxuICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgIGlmICgoXyA9ICtfKSAhPT0gdGhpcy5fcmFkaXVzKSB0aGlzLl9yYWRpdXMgPSBfLCB0aGlzLl9jaXJjbGUgPSBudWxsO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgPT09IDApIHRoaXMuX3N0cmluZy5wdXNoKFwiWlwiKTtcbiAgICB0aGlzLl9wb2ludCA9IE5hTjtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5KTtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIkxcIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKHRoaXMuX2NpcmNsZSA9PSBudWxsKSB0aGlzLl9jaXJjbGUgPSBjaXJjbGUodGhpcy5fcmFkaXVzKTtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCB0aGlzLl9jaXJjbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3N0cmluZy5sZW5ndGgpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9zdHJpbmcuam9pbihcIlwiKTtcbiAgICAgIHRoaXMuX3N0cmluZyA9IFtdO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjaXJjbGUocmFkaXVzKSB7XG4gIHJldHVybiBcIm0wLFwiICsgcmFkaXVzXG4gICAgICArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgLTIgKiByYWRpdXNcbiAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAyICogcmFkaXVzXG4gICAgICArIFwielwiO1xufVxuIiwiaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuLi9pZGVudGl0eS5qc1wiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi4vc3RyZWFtLmpzXCI7XG5pbXBvcnQgcGF0aEFyZWEgZnJvbSBcIi4vYXJlYS5qc1wiO1xuaW1wb3J0IHBhdGhCb3VuZHMgZnJvbSBcIi4vYm91bmRzLmpzXCI7XG5pbXBvcnQgcGF0aENlbnRyb2lkIGZyb20gXCIuL2NlbnRyb2lkLmpzXCI7XG5pbXBvcnQgUGF0aENvbnRleHQgZnJvbSBcIi4vY29udGV4dC5qc1wiO1xuaW1wb3J0IHBhdGhNZWFzdXJlIGZyb20gXCIuL21lYXN1cmUuanNcIjtcbmltcG9ydCBQYXRoU3RyaW5nIGZyb20gXCIuL3N0cmluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwcm9qZWN0aW9uLCBjb250ZXh0KSB7XG4gIHZhciBwb2ludFJhZGl1cyA9IDQuNSxcbiAgICAgIHByb2plY3Rpb25TdHJlYW0sXG4gICAgICBjb250ZXh0U3RyZWFtO1xuXG4gIGZ1bmN0aW9uIHBhdGgob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCkge1xuICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyA9PT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtwb2ludFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oY29udGV4dFN0cmVhbSkpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dFN0cmVhbS5yZXN1bHQoKTtcbiAgfVxuXG4gIHBhdGguYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0ocGF0aEFyZWEpKTtcbiAgICByZXR1cm4gcGF0aEFyZWEucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5tZWFzdXJlID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoTWVhc3VyZSkpO1xuICAgIHJldHVybiBwYXRoTWVhc3VyZS5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLmJvdW5kcyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0ocGF0aEJvdW5kcykpO1xuICAgIHJldHVybiBwYXRoQm91bmRzLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGguY2VudHJvaWQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKHBhdGhDZW50cm9pZCkpO1xuICAgIHJldHVybiBwYXRoQ2VudHJvaWQucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5wcm9qZWN0aW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByb2plY3Rpb25TdHJlYW0gPSBfID09IG51bGwgPyAocHJvamVjdGlvbiA9IG51bGwsIGlkZW50aXR5KSA6IChwcm9qZWN0aW9uID0gXykuc3RyZWFtLCBwYXRoKSA6IHByb2plY3Rpb247XG4gIH07XG5cbiAgcGF0aC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNvbnRleHQ7XG4gICAgY29udGV4dFN0cmVhbSA9IF8gPT0gbnVsbCA/IChjb250ZXh0ID0gbnVsbCwgbmV3IFBhdGhTdHJpbmcpIDogbmV3IFBhdGhDb250ZXh0KGNvbnRleHQgPSBfKTtcbiAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMocG9pbnRSYWRpdXMpO1xuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIHBhdGgucG9pbnRSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcG9pbnRSYWRpdXM7XG4gICAgcG9pbnRSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IChjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtfKSwgK18pO1xuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIHJldHVybiBwYXRoLnByb2plY3Rpb24ocHJvamVjdGlvbikuY29udGV4dChjb250ZXh0KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1ldGhvZHMpIHtcbiAgcmV0dXJuIHtcbiAgICBzdHJlYW06IHRyYW5zZm9ybWVyKG1ldGhvZHMpXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1lcihtZXRob2RzKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgcyA9IG5ldyBUcmFuc2Zvcm1TdHJlYW07XG4gICAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHNba2V5XSA9IG1ldGhvZHNba2V5XTtcbiAgICBzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICByZXR1cm4gcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtKCkge31cblxuVHJhbnNmb3JtU3RyZWFtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zZm9ybVN0cmVhbSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5zdHJlYW0ucG9pbnQoeCwgeSk7IH0sXG4gIHNwaGVyZTogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnNwaGVyZSgpOyB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5saW5lU3RhcnQoKTsgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLmxpbmVFbmQoKTsgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ucG9seWdvblN0YXJ0KCk7IH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uRW5kKCk7IH1cbn07XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgZ2VvU3RyZWFtfSBmcm9tIFwiLi4vc3RyZWFtLmpzXCI7XG5pbXBvcnQgYm91bmRzU3RyZWFtIGZyb20gXCIuLi9wYXRoL2JvdW5kcy5qc1wiO1xuXG5mdW5jdGlvbiBmaXQocHJvamVjdGlvbiwgZml0Qm91bmRzLCBvYmplY3QpIHtcbiAgdmFyIGNsaXAgPSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgJiYgcHJvamVjdGlvbi5jbGlwRXh0ZW50KCk7XG4gIHByb2plY3Rpb24uc2NhbGUoMTUwKS50cmFuc2xhdGUoWzAsIDBdKTtcbiAgaWYgKGNsaXAgIT0gbnVsbCkgcHJvamVjdGlvbi5jbGlwRXh0ZW50KG51bGwpO1xuICBnZW9TdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uLnN0cmVhbShib3VuZHNTdHJlYW0pKTtcbiAgZml0Qm91bmRzKGJvdW5kc1N0cmVhbS5yZXN1bHQoKSk7XG4gIGlmIChjbGlwICE9IG51bGwpIHByb2plY3Rpb24uY2xpcEV4dGVudChjbGlwKTtcbiAgcmV0dXJuIHByb2plY3Rpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdChwcm9qZWN0aW9uLCBmdW5jdGlvbihiKSB7XG4gICAgdmFyIHcgPSBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0sXG4gICAgICAgIGggPSBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0sXG4gICAgICAgIGsgPSBNYXRoLm1pbih3IC8gKGJbMV1bMF0gLSBiWzBdWzBdKSwgaCAvIChiWzFdWzFdIC0gYlswXVsxXSkpLFxuICAgICAgICB4ID0gK2V4dGVudFswXVswXSArICh3IC0gayAqIChiWzFdWzBdICsgYlswXVswXSkpIC8gMixcbiAgICAgICAgeSA9ICtleHRlbnRbMF1bMV0gKyAoaCAtIGsgKiAoYlsxXVsxXSArIGJbMF1bMV0pKSAvIDI7XG4gICAgcHJvamVjdGlvbi5zY2FsZSgxNTAgKiBrKS50cmFuc2xhdGUoW3gsIHldKTtcbiAgfSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdFNpemUocHJvamVjdGlvbiwgc2l6ZSwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgW1swLCAwXSwgc2l6ZV0sIG9iamVjdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXRXaWR0aChwcm9qZWN0aW9uLCB3aWR0aCwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXQocHJvamVjdGlvbiwgZnVuY3Rpb24oYikge1xuICAgIHZhciB3ID0gK3dpZHRoLFxuICAgICAgICBrID0gdyAvIChiWzFdWzBdIC0gYlswXVswXSksXG4gICAgICAgIHggPSAodyAtIGsgKiAoYlsxXVswXSArIGJbMF1bMF0pKSAvIDIsXG4gICAgICAgIHkgPSAtayAqIGJbMF1bMV07XG4gICAgcHJvamVjdGlvbi5zY2FsZSgxNTAgKiBrKS50cmFuc2xhdGUoW3gsIHldKTtcbiAgfSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdEhlaWdodChwcm9qZWN0aW9uLCBoZWlnaHQsIG9iamVjdCkge1xuICByZXR1cm4gZml0KHByb2plY3Rpb24sIGZ1bmN0aW9uKGIpIHtcbiAgICB2YXIgaCA9ICtoZWlnaHQsXG4gICAgICAgIGsgPSBoIC8gKGJbMV1bMV0gLSBiWzBdWzFdKSxcbiAgICAgICAgeCA9IC1rICogYlswXVswXSxcbiAgICAgICAgeSA9IChoIC0gayAqIChiWzFdWzFdICsgYlswXVsxXSkpIC8gMjtcbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCAqIGspLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9LCBvYmplY3QpO1xufVxuIiwiaW1wb3J0IHtjYXJ0ZXNpYW59IGZyb20gXCIuLi9jYXJ0ZXNpYW4uanNcIjtcbmltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCByYWRpYW5zLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHt0cmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybS5qc1wiO1xuXG52YXIgbWF4RGVwdGggPSAxNiwgLy8gbWF4aW11bSBkZXB0aCBvZiBzdWJkaXZpc2lvblxuICAgIGNvc01pbkRpc3RhbmNlID0gY29zKDMwICogcmFkaWFucyk7IC8vIGNvcyhtaW5pbXVtIGFuZ3VsYXIgZGlzdGFuY2UpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHByb2plY3QsIGRlbHRhMikge1xuICByZXR1cm4gK2RlbHRhMiA/IHJlc2FtcGxlKHByb2plY3QsIGRlbHRhMikgOiByZXNhbXBsZU5vbmUocHJvamVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2FtcGxlTm9uZShwcm9qZWN0KSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcih7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgdGhpcy5zdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzYW1wbGUocHJvamVjdCwgZGVsdGEyKSB7XG5cbiAgZnVuY3Rpb24gcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pIHtcbiAgICB2YXIgZHggPSB4MSAtIHgwLFxuICAgICAgICBkeSA9IHkxIC0geTAsXG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgaWYgKGQyID4gNCAqIGRlbHRhMiAmJiBkZXB0aC0tKSB7XG4gICAgICB2YXIgYSA9IGEwICsgYTEsXG4gICAgICAgICAgYiA9IGIwICsgYjEsXG4gICAgICAgICAgYyA9IGMwICsgYzEsXG4gICAgICAgICAgbSA9IHNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSxcbiAgICAgICAgICBwaGkyID0gYXNpbihjIC89IG0pLFxuICAgICAgICAgIGxhbWJkYTIgPSBhYnMoYWJzKGMpIC0gMSkgPCBlcHNpbG9uIHx8IGFicyhsYW1iZGEwIC0gbGFtYmRhMSkgPCBlcHNpbG9uID8gKGxhbWJkYTAgKyBsYW1iZGExKSAvIDIgOiBhdGFuMihiLCBhKSxcbiAgICAgICAgICBwID0gcHJvamVjdChsYW1iZGEyLCBwaGkyKSxcbiAgICAgICAgICB4MiA9IHBbMF0sXG4gICAgICAgICAgeTIgPSBwWzFdLFxuICAgICAgICAgIGR4MiA9IHgyIC0geDAsXG4gICAgICAgICAgZHkyID0geTIgLSB5MCxcbiAgICAgICAgICBkeiA9IGR5ICogZHgyIC0gZHggKiBkeTI7XG4gICAgICBpZiAoZHogKiBkeiAvIGQyID4gZGVsdGEyIC8vIHBlcnBlbmRpY3VsYXIgcHJvamVjdGVkIGRpc3RhbmNlXG4gICAgICAgICAgfHwgYWJzKChkeCAqIGR4MiArIGR5ICogZHkyKSAvIGQyIC0gMC41KSA+IDAuMyAvLyBtaWRwb2ludCBjbG9zZSB0byBhbiBlbmRcbiAgICAgICAgICB8fCBhMCAqIGExICsgYjAgKiBiMSArIGMwICogYzEgPCBjb3NNaW5EaXN0YW5jZSkgeyAvLyBhbmd1bGFyIGRpc3RhbmNlXG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDIsIHkyLCBsYW1iZGEyLCBhIC89IG0sIGIgLz0gbSwgYywgZGVwdGgsIHN0cmVhbSk7XG4gICAgICAgIHN0cmVhbS5wb2ludCh4MiwgeTIpO1xuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MiwgeTIsIGxhbWJkYTIsIGEsIGIsIGMsIHgxLCB5MSwgbGFtYmRhMSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgbGFtYmRhMDAsIHgwMCwgeTAwLCBhMDAsIGIwMCwgYzAwLCAvLyBmaXJzdCBwb2ludFxuICAgICAgICBsYW1iZGEwLCB4MCwgeTAsIGEwLCBiMCwgYzA7IC8vIHByZXZpb3VzIHBvaW50XG5cbiAgICB2YXIgcmVzYW1wbGVTdHJlYW0gPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyBzdHJlYW0ucG9seWdvblN0YXJ0KCk7IHJlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IHJpbmdTdGFydDsgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyBzdHJlYW0ucG9seWdvbkVuZCgpOyByZXNhbXBsZVN0cmVhbS5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7IH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICBzdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgeDAgPSBOYU47XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgIHZhciBjID0gY2FydGVzaWFuKFtsYW1iZGEsIHBoaV0pLCBwID0gcHJvamVjdChsYW1iZGEsIHBoaSk7XG4gICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgwID0gcFswXSwgeTAgPSBwWzFdLCBsYW1iZGEwID0gbGFtYmRhLCBhMCA9IGNbMF0sIGIwID0gY1sxXSwgYzAgPSBjWzJdLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgIHN0cmVhbS5wb2ludCh4MCwgeTApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICBsaW5lU3RhcnQoKTtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gcmluZ1BvaW50O1xuICAgICAgcmVzYW1wbGVTdHJlYW0ubGluZUVuZCA9IHJpbmdFbmQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICBsaW5lUG9pbnQobGFtYmRhMDAgPSBsYW1iZGEsIHBoaSksIHgwMCA9IHgwLCB5MDAgPSB5MCwgYTAwID0gYTAsIGIwMCA9IGIwLCBjMDAgPSBjMDtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgwMCwgeTAwLCBsYW1iZGEwMCwgYTAwLCBiMDAsIGMwMCwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICByZXNhbXBsZVN0cmVhbS5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgIGxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzYW1wbGVTdHJlYW07XG4gIH07XG59XG4iLCJpbXBvcnQgY2xpcEFudGltZXJpZGlhbiBmcm9tIFwiLi4vY2xpcC9hbnRpbWVyaWRpYW4uanNcIjtcbmltcG9ydCBjbGlwQ2lyY2xlIGZyb20gXCIuLi9jbGlwL2NpcmNsZS5qc1wiO1xuaW1wb3J0IGNsaXBSZWN0YW5nbGUgZnJvbSBcIi4uL2NsaXAvcmVjdGFuZ2xlLmpzXCI7XG5pbXBvcnQgY29tcG9zZSBmcm9tIFwiLi4vY29tcG9zZS5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuLi9pZGVudGl0eS5qc1wiO1xuaW1wb3J0IHtjb3MsIGRlZ3JlZXMsIHJhZGlhbnMsIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7cm90YXRlUmFkaWFuc30gZnJvbSBcIi4uL3JvdGF0aW9uLmpzXCI7XG5pbXBvcnQge3RyYW5zZm9ybWVyfSBmcm9tIFwiLi4vdHJhbnNmb3JtLmpzXCI7XG5pbXBvcnQge2ZpdEV4dGVudCwgZml0U2l6ZSwgZml0V2lkdGgsIGZpdEhlaWdodH0gZnJvbSBcIi4vZml0LmpzXCI7XG5pbXBvcnQgcmVzYW1wbGUgZnJvbSBcIi4vcmVzYW1wbGUuanNcIjtcblxudmFyIHRyYW5zZm9ybVJhZGlhbnMgPSB0cmFuc2Zvcm1lcih7XG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5zdHJlYW0ucG9pbnQoeCAqIHJhZGlhbnMsIHkgKiByYWRpYW5zKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVJvdGF0ZShyb3RhdGUpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIHIgPSByb3RhdGUoeCwgeSk7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucG9pbnQoclswXSwgclsxXSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2NhbGVUcmFuc2xhdGUoaywgZHgsIGR5LCBzeCwgc3kpIHtcbiAgZnVuY3Rpb24gdHJhbnNmb3JtKHgsIHkpIHtcbiAgICB4ICo9IHN4OyB5ICo9IHN5O1xuICAgIHJldHVybiBbZHggKyBrICogeCwgZHkgLSBrICogeV07XG4gIH1cbiAgdHJhbnNmb3JtLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gWyh4IC0gZHgpIC8gayAqIHN4LCAoZHkgLSB5KSAvIGsgKiBzeV07XG4gIH07XG4gIHJldHVybiB0cmFuc2Zvcm07XG59XG5cbmZ1bmN0aW9uIHNjYWxlVHJhbnNsYXRlUm90YXRlKGssIGR4LCBkeSwgc3gsIHN5LCBhbHBoYSkge1xuICB2YXIgY29zQWxwaGEgPSBjb3MoYWxwaGEpLFxuICAgICAgc2luQWxwaGEgPSBzaW4oYWxwaGEpLFxuICAgICAgYSA9IGNvc0FscGhhICogayxcbiAgICAgIGIgPSBzaW5BbHBoYSAqIGssXG4gICAgICBhaSA9IGNvc0FscGhhIC8gayxcbiAgICAgIGJpID0gc2luQWxwaGEgLyBrLFxuICAgICAgY2kgPSAoc2luQWxwaGEgKiBkeSAtIGNvc0FscGhhICogZHgpIC8gayxcbiAgICAgIGZpID0gKHNpbkFscGhhICogZHggKyBjb3NBbHBoYSAqIGR5KSAvIGs7XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSh4LCB5KSB7XG4gICAgeCAqPSBzeDsgeSAqPSBzeTtcbiAgICByZXR1cm4gW2EgKiB4IC0gYiAqIHkgKyBkeCwgZHkgLSBiICogeCAtIGEgKiB5XTtcbiAgfVxuICB0cmFuc2Zvcm0uaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbc3ggKiAoYWkgKiB4IC0gYmkgKiB5ICsgY2kpLCBzeSAqIChmaSAtIGJpICogeCAtIGFpICogeSldO1xuICB9O1xuICByZXR1cm4gdHJhbnNmb3JtO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgcmV0dXJuIHByb2plY3Rpb25NdXRhdG9yKGZ1bmN0aW9uKCkgeyByZXR1cm4gcHJvamVjdDsgfSkoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCkge1xuICB2YXIgcHJvamVjdCxcbiAgICAgIGsgPSAxNTAsIC8vIHNjYWxlXG4gICAgICB4ID0gNDgwLCB5ID0gMjUwLCAvLyB0cmFuc2xhdGVcbiAgICAgIGxhbWJkYSA9IDAsIHBoaSA9IDAsIC8vIGNlbnRlclxuICAgICAgZGVsdGFMYW1iZGEgPSAwLCBkZWx0YVBoaSA9IDAsIGRlbHRhR2FtbWEgPSAwLCByb3RhdGUsIC8vIHByZS1yb3RhdGVcbiAgICAgIGFscGhhID0gMCwgLy8gcG9zdC1yb3RhdGUgYW5nbGVcbiAgICAgIHN4ID0gMSwgLy8gcmVmbGVjdFhcbiAgICAgIHN5ID0gMSwgLy8gcmVmbGVjdFhcbiAgICAgIHRoZXRhID0gbnVsbCwgcHJlY2xpcCA9IGNsaXBBbnRpbWVyaWRpYW4sIC8vIHByZS1jbGlwIGFuZ2xlXG4gICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTEsIHBvc3RjbGlwID0gaWRlbnRpdHksIC8vIHBvc3QtY2xpcCBleHRlbnRcbiAgICAgIGRlbHRhMiA9IDAuNSwgLy8gcHJlY2lzaW9uXG4gICAgICBwcm9qZWN0UmVzYW1wbGUsXG4gICAgICBwcm9qZWN0VHJhbnNmb3JtLFxuICAgICAgcHJvamVjdFJvdGF0ZVRyYW5zZm9ybSxcbiAgICAgIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW07XG5cbiAgZnVuY3Rpb24gcHJvamVjdGlvbihwb2ludCkge1xuICAgIHJldHVybiBwcm9qZWN0Um90YXRlVHJhbnNmb3JtKHBvaW50WzBdICogcmFkaWFucywgcG9pbnRbMV0gKiByYWRpYW5zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xuICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZVRyYW5zZm9ybS5pbnZlcnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgICByZXR1cm4gcG9pbnQgJiYgW3BvaW50WzBdICogZGVncmVlcywgcG9pbnRbMV0gKiBkZWdyZWVzXTtcbiAgfVxuXG4gIHByb2plY3Rpb24uc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gdHJhbnNmb3JtUmFkaWFucyh0cmFuc2Zvcm1Sb3RhdGUocm90YXRlKShwcmVjbGlwKHByb2plY3RSZXNhbXBsZShwb3N0Y2xpcChjYWNoZVN0cmVhbSA9IHN0cmVhbSkpKSkpO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucHJlY2xpcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjbGlwID0gXywgdGhldGEgPSB1bmRlZmluZWQsIHJlc2V0KCkpIDogcHJlY2xpcDtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnBvc3RjbGlwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXywgeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCByZXNldCgpKSA6IHBvc3RjbGlwO1xuICB9O1xuXG4gIHByb2plY3Rpb24uY2xpcEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNsaXAgPSArXyA/IGNsaXBDaXJjbGUodGhldGEgPSBfICogcmFkaWFucykgOiAodGhldGEgPSBudWxsLCBjbGlwQW50aW1lcmlkaWFuKSwgcmVzZXQoKSkgOiB0aGV0YSAqIGRlZ3JlZXM7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkpIDogY2xpcFJlY3RhbmdsZSh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVzZXQoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICB9O1xuXG4gIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoayA9ICtfLCByZWNlbnRlcigpKSA6IGs7XG4gIH07XG5cbiAgcHJvamVjdGlvbi50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfWzBdLCB5ID0gK19bMV0sIHJlY2VudGVyKCkpIDogW3gsIHldO1xuICB9O1xuXG4gIHByb2plY3Rpb24uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBwaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgcmVjZW50ZXIoKSkgOiBbbGFtYmRhICogZGVncmVlcywgcGhpICogZGVncmVlc107XG4gIH07XG5cbiAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVsdGFMYW1iZGEgPSBfWzBdICUgMzYwICogcmFkaWFucywgZGVsdGFQaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgZGVsdGFHYW1tYSA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiByYWRpYW5zIDogMCwgcmVjZW50ZXIoKSkgOiBbZGVsdGFMYW1iZGEgKiBkZWdyZWVzLCBkZWx0YVBoaSAqIGRlZ3JlZXMsIGRlbHRhR2FtbWEgKiBkZWdyZWVzXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhID0gXyAlIDM2MCAqIHJhZGlhbnMsIHJlY2VudGVyKCkpIDogYWxwaGEgKiBkZWdyZWVzO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucmVmbGVjdFggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3ggPSBfID8gLTEgOiAxLCByZWNlbnRlcigpKSA6IHN4IDwgMDtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnJlZmxlY3RZID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN5ID0gXyA/IC0xIDogMSwgcmVjZW50ZXIoKSkgOiBzeSA8IDA7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdFJlc2FtcGxlID0gcmVzYW1wbGUocHJvamVjdFRyYW5zZm9ybSwgZGVsdGEyID0gXyAqIF8pLCByZXNldCgpKSA6IHNxcnQoZGVsdGEyKTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdEV4dGVudCA9IGZ1bmN0aW9uKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEV4dGVudChwcm9qZWN0aW9uLCBleHRlbnQsIG9iamVjdCk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRTaXplID0gZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFNpemUocHJvamVjdGlvbiwgc2l6ZSwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdFdpZHRoID0gZnVuY3Rpb24od2lkdGgsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRXaWR0aChwcm9qZWN0aW9uLCB3aWR0aCwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdEhlaWdodCA9IGZ1bmN0aW9uKGhlaWdodCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEhlaWdodChwcm9qZWN0aW9uLCBoZWlnaHQsIG9iamVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVjZW50ZXIoKSB7XG4gICAgdmFyIGNlbnRlciA9IHNjYWxlVHJhbnNsYXRlUm90YXRlKGssIDAsIDAsIHN4LCBzeSwgYWxwaGEpLmFwcGx5KG51bGwsIHByb2plY3QobGFtYmRhLCBwaGkpKSxcbiAgICAgICAgdHJhbnNmb3JtID0gKGFscGhhID8gc2NhbGVUcmFuc2xhdGVSb3RhdGUgOiBzY2FsZVRyYW5zbGF0ZSkoaywgeCAtIGNlbnRlclswXSwgeSAtIGNlbnRlclsxXSwgc3gsIHN5LCBhbHBoYSk7XG4gICAgcm90YXRlID0gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpO1xuICAgIHByb2plY3RUcmFuc2Zvcm0gPSBjb21wb3NlKHByb2plY3QsIHRyYW5zZm9ybSk7XG4gICAgcHJvamVjdFJvdGF0ZVRyYW5zZm9ybSA9IGNvbXBvc2Uocm90YXRlLCBwcm9qZWN0VHJhbnNmb3JtKTtcbiAgICBwcm9qZWN0UmVzYW1wbGUgPSByZXNhbXBsZShwcm9qZWN0VHJhbnNmb3JtLCBkZWx0YTIpO1xuICAgIHJldHVybiByZXNldCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgcmV0dXJuIHByb2plY3Rpb247XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcHJvamVjdCA9IHByb2plY3RBdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHByb2plY3Rpb24uaW52ZXJ0ID0gcHJvamVjdC5pbnZlcnQgJiYgaW52ZXJ0O1xuICAgIHJldHVybiByZWNlbnRlcigpO1xuICB9O1xufVxuIiwiaW1wb3J0IHtkZWdyZWVzLCBwaSwgcmFkaWFuc30gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7cHJvamVjdGlvbk11dGF0b3J9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25pY1Byb2plY3Rpb24ocHJvamVjdEF0KSB7XG4gIHZhciBwaGkwID0gMCxcbiAgICAgIHBoaTEgPSBwaSAvIDMsXG4gICAgICBtID0gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSxcbiAgICAgIHAgPSBtKHBoaTAsIHBoaTEpO1xuXG4gIHAucGFyYWxsZWxzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gbShwaGkwID0gX1swXSAqIHJhZGlhbnMsIHBoaTEgPSBfWzFdICogcmFkaWFucykgOiBbcGhpMCAqIGRlZ3JlZXMsIHBoaTEgKiBkZWdyZWVzXTtcbiAgfTtcblxuICByZXR1cm4gcDtcbn1cbiIsImltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBwaSwgc2lnbiwgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHtjb25pY1Byb2plY3Rpb259IGZyb20gXCIuL2NvbmljLmpzXCI7XG5pbXBvcnQge2N5bGluZHJpY2FsRXF1YWxBcmVhUmF3fSBmcm9tIFwiLi9jeWxpbmRyaWNhbEVxdWFsQXJlYS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29uaWNFcXVhbEFyZWFSYXcoeTAsIHkxKSB7XG4gIHZhciBzeTAgPSBzaW4oeTApLCBuID0gKHN5MCArIHNpbih5MSkpIC8gMjtcblxuICAvLyBBcmUgdGhlIHBhcmFsbGVscyBzeW1tZXRyaWNhbCBhcm91bmQgdGhlIEVxdWF0b3I/XG4gIGlmIChhYnMobikgPCBlcHNpbG9uKSByZXR1cm4gY3lsaW5kcmljYWxFcXVhbEFyZWFSYXcoeTApO1xuXG4gIHZhciBjID0gMSArIHN5MCAqICgyICogbiAtIHN5MCksIHIwID0gc3FydChjKSAvIG47XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgdmFyIHIgPSBzcXJ0KGMgLSAyICogbiAqIHNpbih5KSkgLyBuO1xuICAgIHJldHVybiBbciAqIHNpbih4ICo9IG4pLCByMCAtIHIgKiBjb3MoeCldO1xuICB9XG5cbiAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHIweSA9IHIwIC0geSxcbiAgICAgICAgbCA9IGF0YW4yKHgsIGFicyhyMHkpKSAqIHNpZ24ocjB5KTtcbiAgICBpZiAocjB5ICogbiA8IDApXG4gICAgICBsIC09IHBpICogc2lnbih4KSAqIHNpZ24ocjB5KTtcbiAgICByZXR1cm4gW2wgLyBuLCBhc2luKChjIC0gKHggKiB4ICsgcjB5ICogcjB5KSAqIG4gKiBuKSAvICgyICogbikpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVhbEFyZWFSYXcpXG4gICAgICAuc2NhbGUoMTU1LjQyNClcbiAgICAgIC5jZW50ZXIoWzAsIDMzLjY0NDJdKTtcbn1cbiIsImltcG9ydCB7YXNpbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjeWxpbmRyaWNhbEVxdWFsQXJlYVJhdyhwaGkwKSB7XG4gIHZhciBjb3NQaGkwID0gY29zKHBoaTApO1xuXG4gIGZ1bmN0aW9uIGZvcndhcmQobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gW2xhbWJkYSAqIGNvc1BoaTAsIHNpbihwaGkpIC8gY29zUGhpMF07XG4gIH1cblxuICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gW3ggLyBjb3NQaGkwLCBhc2luKHkgKiBjb3NQaGkwKV07XG4gIH07XG5cbiAgcmV0dXJuIGZvcndhcmQ7XG59XG4iLCJpbXBvcnQgY29uaWNFcXVhbEFyZWEgZnJvbSBcIi4vY29uaWNFcXVhbEFyZWEuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY0VxdWFsQXJlYSgpXG4gICAgICAucGFyYWxsZWxzKFsyOS41LCA0NS41XSlcbiAgICAgIC5zY2FsZSgxMDcwKVxuICAgICAgLnRyYW5zbGF0ZShbNDgwLCAyNTBdKVxuICAgICAgLnJvdGF0ZShbOTYsIDBdKVxuICAgICAgLmNlbnRlcihbLTAuNiwgMzguN10pO1xufVxuIiwiaW1wb3J0IHtlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IGFsYmVycyBmcm9tIFwiLi9hbGJlcnMuanNcIjtcbmltcG9ydCBjb25pY0VxdWFsQXJlYSBmcm9tIFwiLi9jb25pY0VxdWFsQXJlYS5qc1wiO1xuaW1wb3J0IHtmaXRFeHRlbnQsIGZpdFNpemUsIGZpdFdpZHRoLCBmaXRIZWlnaHR9IGZyb20gXCIuL2ZpdC5qc1wiO1xuXG4vLyBUaGUgcHJvamVjdGlvbnMgbXVzdCBoYXZlIG11dHVhbGx5IGV4Y2x1c2l2ZSBjbGlwIHJlZ2lvbnMgb24gdGhlIHNwaGVyZSxcbi8vIGFzIHRoaXMgd2lsbCBhdm9pZCBlbWl0dGluZyBpbnRlcmxlYXZpbmcgbGluZXMgYW5kIHBvbHlnb25zLlxuZnVuY3Rpb24gbXVsdGlwbGV4KHN0cmVhbXMpIHtcbiAgdmFyIG4gPSBzdHJlYW1zLmxlbmd0aDtcbiAgcmV0dXJuIHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2ludCh4LCB5KTsgfSxcbiAgICBzcGhlcmU6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5zcGhlcmUoKTsgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5saW5lU3RhcnQoKTsgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ubGluZUVuZCgpOyB9LFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvbHlnb25TdGFydCgpOyB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2x5Z29uRW5kKCk7IH1cbiAgfTtcbn1cblxuLy8gQSBjb21wb3NpdGUgcHJvamVjdGlvbiBmb3IgdGhlIFVuaXRlZCBTdGF0ZXMsIGNvbmZpZ3VyZWQgYnkgZGVmYXVsdCBmb3Jcbi8vIDk2MMOXNTAwLiBUaGUgcHJvamVjdGlvbiBhbHNvIHdvcmtzIHF1aXRlIHdlbGwgYXQgOTYww5c2MDAgaWYgeW91IGNoYW5nZSB0aGVcbi8vIHNjYWxlIHRvIDEyODUgYW5kIGFkanVzdCB0aGUgdHJhbnNsYXRlIGFjY29yZGluZ2x5LiBUaGUgc2V0IG9mIHN0YW5kYXJkXG4vLyBwYXJhbGxlbHMgZm9yIGVhY2ggcmVnaW9uIGNvbWVzIGZyb20gVVNHUywgd2hpY2ggaXMgcHVibGlzaGVkIGhlcmU6XG4vLyBodHRwOi8vZWdzYy51c2dzLmdvdi9pc2IvcHVicy9NYXBQcm9qZWN0aW9ucy9wcm9qZWN0aW9ucy5odG1sI2FsYmVyc1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgbG93ZXI0OCA9IGFsYmVycygpLCBsb3dlcjQ4UG9pbnQsXG4gICAgICBhbGFza2EgPSBjb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU0LCAwXSkuY2VudGVyKFstMiwgNTguNV0pLnBhcmFsbGVscyhbNTUsIDY1XSksIGFsYXNrYVBvaW50LCAvLyBFUFNHOjMzMzhcbiAgICAgIGhhd2FpaSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTcsIDBdKS5jZW50ZXIoWy0zLCAxOS45XSkucGFyYWxsZWxzKFs4LCAxOF0pLCBoYXdhaWlQb2ludCwgLy8gRVNSSToxMDIwMDdcbiAgICAgIHBvaW50LCBwb2ludFN0cmVhbSA9IHtwb2ludDogZnVuY3Rpb24oeCwgeSkgeyBwb2ludCA9IFt4LCB5XTsgfX07XG5cbiAgZnVuY3Rpb24gYWxiZXJzVXNhKGNvb3JkaW5hdGVzKSB7XG4gICAgdmFyIHggPSBjb29yZGluYXRlc1swXSwgeSA9IGNvb3JkaW5hdGVzWzFdO1xuICAgIHJldHVybiBwb2ludCA9IG51bGwsXG4gICAgICAgIChsb3dlcjQ4UG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICB8fCAoYWxhc2thUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICB8fCAoaGF3YWlpUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KTtcbiAgfVxuXG4gIGFsYmVyc1VzYS5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLFxuICAgICAgICB0ID0gbG93ZXI0OC50cmFuc2xhdGUoKSxcbiAgICAgICAgeCA9IChjb29yZGluYXRlc1swXSAtIHRbMF0pIC8gayxcbiAgICAgICAgeSA9IChjb29yZGluYXRlc1sxXSAtIHRbMV0pIC8gaztcbiAgICByZXR1cm4gKHkgPj0gMC4xMjAgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuNDI1ICYmIHggPCAtMC4yMTQgPyBhbGFza2FcbiAgICAgICAgOiB5ID49IDAuMTY2ICYmIHkgPCAwLjIzNCAmJiB4ID49IC0wLjIxNCAmJiB4IDwgLTAuMTE1ID8gaGF3YWlpXG4gICAgICAgIDogbG93ZXI0OCkuaW52ZXJ0KGNvb3JkaW5hdGVzKTtcbiAgfTtcblxuICBhbGJlcnNVc2Euc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gbXVsdGlwbGV4KFtsb3dlcjQ4LnN0cmVhbShjYWNoZVN0cmVhbSA9IHN0cmVhbSksIGFsYXNrYS5zdHJlYW0oc3RyZWFtKSwgaGF3YWlpLnN0cmVhbShzdHJlYW0pXSk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnByZWNpc2lvbigpO1xuICAgIGxvd2VyNDgucHJlY2lzaW9uKF8pLCBhbGFza2EucHJlY2lzaW9uKF8pLCBoYXdhaWkucHJlY2lzaW9uKF8pO1xuICAgIHJldHVybiByZXNldCgpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnNjYWxlKCk7XG4gICAgbG93ZXI0OC5zY2FsZShfKSwgYWxhc2thLnNjYWxlKF8gKiAwLjM1KSwgaGF3YWlpLnNjYWxlKF8pO1xuICAgIHJldHVybiBhbGJlcnNVc2EudHJhbnNsYXRlKGxvd2VyNDgudHJhbnNsYXRlKCkpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC50cmFuc2xhdGUoKTtcbiAgICB2YXIgayA9IGxvd2VyNDguc2NhbGUoKSwgeCA9ICtfWzBdLCB5ID0gK19bMV07XG5cbiAgICBsb3dlcjQ4UG9pbnQgPSBsb3dlcjQ4XG4gICAgICAgIC50cmFuc2xhdGUoXylcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40NTUgKiBrLCB5IC0gMC4yMzggKiBrXSwgW3ggKyAwLjQ1NSAqIGssIHkgKyAwLjIzOCAqIGtdXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICBhbGFza2FQb2ludCA9IGFsYXNrYVxuICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4zMDcgKiBrLCB5ICsgMC4yMDEgKiBrXSlcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40MjUgKiBrICsgZXBzaWxvbiwgeSArIDAuMTIwICogayArIGVwc2lsb25dLCBbeCAtIDAuMjE0ICogayAtIGVwc2lsb24sIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uXV0pXG4gICAgICAgIC5zdHJlYW0ocG9pbnRTdHJlYW0pO1xuXG4gICAgaGF3YWlpUG9pbnQgPSBoYXdhaWlcbiAgICAgICAgLnRyYW5zbGF0ZShbeCAtIDAuMjA1ICogaywgeSArIDAuMjEyICoga10pXG4gICAgICAgIC5jbGlwRXh0ZW50KFtbeCAtIDAuMjE0ICogayArIGVwc2lsb24sIHkgKyAwLjE2NiAqIGsgKyBlcHNpbG9uXSwgW3ggLSAwLjExNSAqIGsgLSBlcHNpbG9uLCB5ICsgMC4yMzQgKiBrIC0gZXBzaWxvbl1dKVxuICAgICAgICAuc3RyZWFtKHBvaW50U3RyZWFtKTtcblxuICAgIHJldHVybiByZXNldCgpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5maXRFeHRlbnQgPSBmdW5jdGlvbihleHRlbnQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRFeHRlbnQoYWxiZXJzVXNhLCBleHRlbnQsIG9iamVjdCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLmZpdFNpemUgPSBmdW5jdGlvbihzaXplLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0U2l6ZShhbGJlcnNVc2EsIHNpemUsIG9iamVjdCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLmZpdFdpZHRoID0gZnVuY3Rpb24od2lkdGgsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRXaWR0aChhbGJlcnNVc2EsIHdpZHRoLCBvYmplY3QpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5maXRIZWlnaHQgPSBmdW5jdGlvbihoZWlnaHQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRIZWlnaHQoYWxiZXJzVXNhLCBoZWlnaHQsIG9iamVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgfVxuXG4gIHJldHVybiBhbGJlcnNVc2Euc2NhbGUoMTA3MCk7XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGF6aW11dGhhbFJhdyhzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBjeCA9IGNvcyh4KSxcbiAgICAgICAgY3kgPSBjb3MoeSksXG4gICAgICAgIGsgPSBzY2FsZShjeCAqIGN5KTtcbiAgICByZXR1cm4gW1xuICAgICAgayAqIGN5ICogc2luKHgpLFxuICAgICAgayAqIHNpbih5KVxuICAgIF07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF6aW11dGhhbEludmVydChhbmdsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB6ID0gc3FydCh4ICogeCArIHkgKiB5KSxcbiAgICAgICAgYyA9IGFuZ2xlKHopLFxuICAgICAgICBzYyA9IHNpbihjKSxcbiAgICAgICAgY2MgPSBjb3MoYyk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHggKiBzYywgeiAqIGNjKSxcbiAgICAgIGFzaW4oeiAmJiB5ICogc2MgLyB6KVxuICAgIF07XG4gIH1cbn1cbiIsImltcG9ydCB7YXNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7YXppbXV0aGFsUmF3LCBhemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbC5qc1wiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IHZhciBhemltdXRoYWxFcXVhbEFyZWFSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24oY3hjeSkge1xuICByZXR1cm4gc3FydCgyIC8gKDEgKyBjeGN5KSk7XG59KTtcblxuYXppbXV0aGFsRXF1YWxBcmVhUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiAyICogYXNpbih6IC8gMik7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWFsQXJlYVJhdylcbiAgICAgIC5zY2FsZSgxMjQuNzUpXG4gICAgICAuY2xpcEFuZ2xlKDE4MCAtIDFlLTMpO1xufVxuIiwiaW1wb3J0IHthY29zLCBzaW59IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge2F6aW11dGhhbFJhdywgYXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWwuanNcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCB2YXIgYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24oYykge1xuICByZXR1cm4gKGMgPSBhY29zKGMpKSAmJiBjIC8gc2luKGMpO1xufSk7XG5cbmF6aW11dGhhbEVxdWlkaXN0YW50UmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiB6O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihhemltdXRoYWxFcXVpZGlzdGFudFJhdylcbiAgICAgIC5zY2FsZSg3OS40MTg4KVxuICAgICAgLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcbn1cbiIsImltcG9ydCB7YXRhbiwgZXhwLCBoYWxmUGksIGxvZywgcGksIHRhbiwgdGF1fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHJvdGF0aW9uIGZyb20gXCIuLi9yb3RhdGlvbi5qc1wiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbbGFtYmRhLCBsb2codGFuKChoYWxmUGkgKyBwaGkpIC8gMikpXTtcbn1cblxubWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gW3gsIDIgKiBhdGFuKGV4cCh5KSkgLSBoYWxmUGldO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBtZXJjYXRvclByb2plY3Rpb24obWVyY2F0b3JSYXcpXG4gICAgICAuc2NhbGUoOTYxIC8gdGF1KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG4gIHZhciBtID0gcHJvamVjdGlvbihwcm9qZWN0KSxcbiAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgc2NhbGUgPSBtLnNjYWxlLFxuICAgICAgdHJhbnNsYXRlID0gbS50cmFuc2xhdGUsXG4gICAgICBjbGlwRXh0ZW50ID0gbS5jbGlwRXh0ZW50LFxuICAgICAgeDAgPSBudWxsLCB5MCwgeDEsIHkxOyAvLyBjbGlwIGV4dGVudFxuXG4gIG0uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUoXyksIHJlY2xpcCgpKSA6IHNjYWxlKCk7XG4gIH07XG5cbiAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlKF8pLCByZWNsaXAoKSkgOiB0cmFuc2xhdGUoKTtcbiAgfTtcblxuICBtLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIoXyksIHJlY2xpcCgpKSA6IGNlbnRlcigpO1xuICB9O1xuXG4gIG0uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoXyA9PSBudWxsID8geDAgPSB5MCA9IHgxID0geTEgPSBudWxsIDogKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pKSwgcmVjbGlwKCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWNsaXAoKSB7XG4gICAgdmFyIGsgPSBwaSAqIHNjYWxlKCksXG4gICAgICAgIHQgPSBtKHJvdGF0aW9uKG0ucm90YXRlKCkpLmludmVydChbMCwgMF0pKTtcbiAgICByZXR1cm4gY2xpcEV4dGVudCh4MCA9PSBudWxsXG4gICAgICAgID8gW1t0WzBdIC0gaywgdFsxXSAtIGtdLCBbdFswXSArIGssIHRbMV0gKyBrXV0gOiBwcm9qZWN0ID09PSBtZXJjYXRvclJhd1xuICAgICAgICA/IFtbTWF0aC5tYXgodFswXSAtIGssIHgwKSwgeTBdLCBbTWF0aC5taW4odFswXSArIGssIHgxKSwgeTFdXVxuICAgICAgICA6IFtbeDAsIE1hdGgubWF4KHRbMV0gLSBrLCB5MCldLCBbeDEsIE1hdGgubWluKHRbMV0gKyBrLCB5MSldXSk7XG4gIH1cblxuICByZXR1cm4gcmVjbGlwKCk7XG59XG4iLCJpbXBvcnQge2FicywgYXRhbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgaGFsZlBpLCBsb2csIHBpLCBwb3csIHNpZ24sIHNpbiwgc3FydCwgdGFufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHtjb25pY1Byb2plY3Rpb259IGZyb20gXCIuL2NvbmljLmpzXCI7XG5pbXBvcnQge21lcmNhdG9yUmF3fSBmcm9tIFwiLi9tZXJjYXRvci5qc1wiO1xuXG5mdW5jdGlvbiB0YW55KHkpIHtcbiAgcmV0dXJuIHRhbigoaGFsZlBpICsgeSkgLyAyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljQ29uZm9ybWFsUmF3KHkwLCB5MSkge1xuICB2YXIgY3kwID0gY29zKHkwKSxcbiAgICAgIG4gPSB5MCA9PT0geTEgPyBzaW4oeTApIDogbG9nKGN5MCAvIGNvcyh5MSkpIC8gbG9nKHRhbnkoeTEpIC8gdGFueSh5MCkpLFxuICAgICAgZiA9IGN5MCAqIHBvdyh0YW55KHkwKSwgbikgLyBuO1xuXG4gIGlmICghbikgcmV0dXJuIG1lcmNhdG9yUmF3O1xuXG4gIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgIGlmIChmID4gMCkgeyBpZiAoeSA8IC1oYWxmUGkgKyBlcHNpbG9uKSB5ID0gLWhhbGZQaSArIGVwc2lsb247IH1cbiAgICBlbHNlIHsgaWYgKHkgPiBoYWxmUGkgLSBlcHNpbG9uKSB5ID0gaGFsZlBpIC0gZXBzaWxvbjsgfVxuICAgIHZhciByID0gZiAvIHBvdyh0YW55KHkpLCBuKTtcbiAgICByZXR1cm4gW3IgKiBzaW4obiAqIHgpLCBmIC0gciAqIGNvcyhuICogeCldO1xuICB9XG5cbiAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIGZ5ID0gZiAtIHksIHIgPSBzaWduKG4pICogc3FydCh4ICogeCArIGZ5ICogZnkpLFxuICAgICAgbCA9IGF0YW4yKHgsIGFicyhmeSkpICogc2lnbihmeSk7XG4gICAgaWYgKGZ5ICogbiA8IDApXG4gICAgICBsIC09IHBpICogc2lnbih4KSAqIHNpZ24oZnkpO1xuICAgIHJldHVybiBbbCAvIG4sIDIgKiBhdGFuKHBvdyhmIC8gciwgMSAvIG4pKSAtIGhhbGZQaV07XG4gIH07XG5cbiAgcmV0dXJuIHByb2plY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljQ29uZm9ybWFsUmF3KVxuICAgICAgLnNjYWxlKDEwOS41KVxuICAgICAgLnBhcmFsbGVscyhbMzAsIDMwXSk7XG59XG4iLCJpbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1aXJlY3Rhbmd1bGFyUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbbGFtYmRhLCBwaGldO1xufVxuXG5lcXVpcmVjdGFuZ3VsYXJSYXcuaW52ZXJ0ID0gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oZXF1aXJlY3Rhbmd1bGFyUmF3KVxuICAgICAgLnNjYWxlKDE1Mi42Myk7XG59XG4iLCJpbXBvcnQge2FicywgYXRhbjIsIGNvcywgZXBzaWxvbiwgcGksIHNpZ24sIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7Y29uaWNQcm9qZWN0aW9ufSBmcm9tIFwiLi9jb25pYy5qc1wiO1xuaW1wb3J0IHtlcXVpcmVjdGFuZ3VsYXJSYXd9IGZyb20gXCIuL2VxdWlyZWN0YW5ndWxhci5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29uaWNFcXVpZGlzdGFudFJhdyh5MCwgeTEpIHtcbiAgdmFyIGN5MCA9IGNvcyh5MCksXG4gICAgICBuID0geTAgPT09IHkxID8gc2luKHkwKSA6IChjeTAgLSBjb3MoeTEpKSAvICh5MSAtIHkwKSxcbiAgICAgIGcgPSBjeTAgLyBuICsgeTA7XG5cbiAgaWYgKGFicyhuKSA8IGVwc2lsb24pIHJldHVybiBlcXVpcmVjdGFuZ3VsYXJSYXc7XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgdmFyIGd5ID0gZyAtIHksIG54ID0gbiAqIHg7XG4gICAgcmV0dXJuIFtneSAqIHNpbihueCksIGcgLSBneSAqIGNvcyhueCldO1xuICB9XG5cbiAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIGd5ID0gZyAtIHksXG4gICAgICAgIGwgPSBhdGFuMih4LCBhYnMoZ3kpKSAqIHNpZ24oZ3kpO1xuICAgIGlmIChneSAqIG4gPCAwKVxuICAgICAgbCAtPSBwaSAqIHNpZ24oeCkgKiBzaWduKGd5KTtcbiAgICByZXR1cm4gW2wgLyBuLCBnIC0gc2lnbihuKSAqIHNxcnQoeCAqIHggKyBneSAqIGd5KV07XG4gIH07XG5cbiAgcmV0dXJuIHByb2plY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljRXF1aWRpc3RhbnRSYXcpXG4gICAgICAuc2NhbGUoMTMxLjE1NClcbiAgICAgIC5jZW50ZXIoWzAsIDEzLjkzODldKTtcbn1cbiIsImltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQge2FicywgYXNpbiwgY29zLCBlcHNpbG9uMiwgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG52YXIgQTEgPSAxLjM0MDI2NCxcbiAgICBBMiA9IC0wLjA4MTEwNixcbiAgICBBMyA9IDAuMDAwODkzLFxuICAgIEE0ID0gMC4wMDM3OTYsXG4gICAgTSA9IHNxcnQoMykgLyAyLFxuICAgIGl0ZXJhdGlvbnMgPSAxMjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFsRWFydGhSYXcobGFtYmRhLCBwaGkpIHtcbiAgdmFyIGwgPSBhc2luKE0gKiBzaW4ocGhpKSksIGwyID0gbCAqIGwsIGw2ID0gbDIgKiBsMiAqIGwyO1xuICByZXR1cm4gW1xuICAgIGxhbWJkYSAqIGNvcyhsKSAvIChNICogKEExICsgMyAqIEEyICogbDIgKyBsNiAqICg3ICogQTMgKyA5ICogQTQgKiBsMikpKSxcbiAgICBsICogKEExICsgQTIgKiBsMiArIGw2ICogKEEzICsgQTQgKiBsMikpXG4gIF07XG59XG5cbmVxdWFsRWFydGhSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgbCA9IHksIGwyID0gbCAqIGwsIGw2ID0gbDIgKiBsMiAqIGwyO1xuICBmb3IgKHZhciBpID0gMCwgZGVsdGEsIGZ5LCBmcHk7IGkgPCBpdGVyYXRpb25zOyArK2kpIHtcbiAgICBmeSA9IGwgKiAoQTEgKyBBMiAqIGwyICsgbDYgKiAoQTMgKyBBNCAqIGwyKSkgLSB5O1xuICAgIGZweSA9IEExICsgMyAqIEEyICogbDIgKyBsNiAqICg3ICogQTMgKyA5ICogQTQgKiBsMik7XG4gICAgbCAtPSBkZWx0YSA9IGZ5IC8gZnB5LCBsMiA9IGwgKiBsLCBsNiA9IGwyICogbDIgKiBsMjtcbiAgICBpZiAoYWJzKGRlbHRhKSA8IGVwc2lsb24yKSBicmVhaztcbiAgfVxuICByZXR1cm4gW1xuICAgIE0gKiB4ICogKEExICsgMyAqIEEyICogbDIgKyBsNiAqICg3ICogQTMgKyA5ICogQTQgKiBsMikpIC8gY29zKGwpLFxuICAgIGFzaW4oc2luKGwpIC8gTSlcbiAgXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihlcXVhbEVhcnRoUmF3KVxuICAgICAgLnNjYWxlKDE3Ny4xNTgpO1xufVxuIiwiaW1wb3J0IHthdGFuLCBjb3MsIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7YXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWwuanNcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnbm9tb25pY1Jhdyh4LCB5KSB7XG4gIHZhciBjeSA9IGNvcyh5KSwgayA9IGNvcyh4KSAqIGN5O1xuICByZXR1cm4gW2N5ICogc2luKHgpIC8gaywgc2luKHkpIC8ga107XG59XG5cbmdub21vbmljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChhdGFuKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGdub21vbmljUmF3KVxuICAgICAgLnNjYWxlKDE0NC4wNDkpXG4gICAgICAuY2xpcEFuZ2xlKDYwKTtcbn1cbiIsImltcG9ydCBjbGlwUmVjdGFuZ2xlIGZyb20gXCIuLi9jbGlwL3JlY3RhbmdsZS5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuLi9pZGVudGl0eS5qc1wiO1xuaW1wb3J0IHt0cmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybS5qc1wiO1xuaW1wb3J0IHtmaXRFeHRlbnQsIGZpdFNpemUsIGZpdFdpZHRoLCBmaXRIZWlnaHR9IGZyb20gXCIuL2ZpdC5qc1wiO1xuaW1wb3J0IHtjb3MsIGRlZ3JlZXMsIHJhZGlhbnMsIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrID0gMSwgdHggPSAwLCB0eSA9IDAsIHN4ID0gMSwgc3kgPSAxLCAvLyBzY2FsZSwgdHJhbnNsYXRlIGFuZCByZWZsZWN0XG4gICAgICBhbHBoYSA9IDAsIGNhLCBzYSwgLy8gYW5nbGVcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MSwgLy8gY2xpcCBleHRlbnRcbiAgICAgIGt4ID0gMSwga3kgPSAxLFxuICAgICAgdHJhbnNmb3JtID0gdHJhbnNmb3JtZXIoe1xuICAgICAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICAgIHZhciBwID0gcHJvamVjdGlvbihbeCwgeV0pXG4gICAgICAgICAgdGhpcy5zdHJlYW0ucG9pbnQocFswXSwgcFsxXSk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgcG9zdGNsaXAgPSBpZGVudGl0eSxcbiAgICAgIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW07XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAga3ggPSBrICogc3g7XG4gICAga3kgPSBrICogc3k7XG4gICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgcmV0dXJuIHByb2plY3Rpb247XG4gIH1cblxuICBmdW5jdGlvbiBwcm9qZWN0aW9uIChwKSB7XG4gICAgdmFyIHggPSBwWzBdICoga3gsIHkgPSBwWzFdICoga3k7XG4gICAgaWYgKGFscGhhKSB7XG4gICAgICB2YXIgdCA9IHkgKiBjYSAtIHggKiBzYTtcbiAgICAgIHggPSB4ICogY2EgKyB5ICogc2E7XG4gICAgICB5ID0gdDtcbiAgICB9ICAgIFxuICAgIHJldHVybiBbeCArIHR4LCB5ICsgdHldO1xuICB9XG4gIHByb2plY3Rpb24uaW52ZXJ0ID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciB4ID0gcFswXSAtIHR4LCB5ID0gcFsxXSAtIHR5O1xuICAgIGlmIChhbHBoYSkge1xuICAgICAgdmFyIHQgPSB5ICogY2EgKyB4ICogc2E7XG4gICAgICB4ID0geCAqIGNhIC0geSAqIHNhO1xuICAgICAgeSA9IHQ7XG4gICAgfVxuICAgIHJldHVybiBbeCAvIGt4LCB5IC8ga3ldO1xuICB9O1xuICBwcm9qZWN0aW9uLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IHRyYW5zZm9ybShwb3N0Y2xpcChjYWNoZVN0cmVhbSA9IHN0cmVhbSkpO1xuICB9O1xuICBwcm9qZWN0aW9uLnBvc3RjbGlwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXywgeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCByZXNldCgpKSA6IHBvc3RjbGlwO1xuICB9O1xuICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfID09IG51bGwgPyAoeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCBpZGVudGl0eSkgOiBjbGlwUmVjdGFuZ2xlKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pLCByZXNldCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gIH07XG4gIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoayA9ICtfLCByZXNldCgpKSA6IGs7XG4gIH07XG4gIHByb2plY3Rpb24udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHR4ID0gK19bMF0sIHR5ID0gK19bMV0sIHJlc2V0KCkpIDogW3R4LCB0eV07XG4gIH1cbiAgcHJvamVjdGlvbi5hbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9IF8gJSAzNjAgKiByYWRpYW5zLCBzYSA9IHNpbihhbHBoYSksIGNhID0gY29zKGFscGhhKSwgcmVzZXQoKSkgOiBhbHBoYSAqIGRlZ3JlZXM7XG4gIH07XG4gIHByb2plY3Rpb24ucmVmbGVjdFggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3ggPSBfID8gLTEgOiAxLCByZXNldCgpKSA6IHN4IDwgMDtcbiAgfTtcbiAgcHJvamVjdGlvbi5yZWZsZWN0WSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzeSA9IF8gPyAtMSA6IDEsIHJlc2V0KCkpIDogc3kgPCAwO1xuICB9O1xuICBwcm9qZWN0aW9uLmZpdEV4dGVudCA9IGZ1bmN0aW9uKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEV4dGVudChwcm9qZWN0aW9uLCBleHRlbnQsIG9iamVjdCk7XG4gIH07XG4gIHByb2plY3Rpb24uZml0U2l6ZSA9IGZ1bmN0aW9uKHNpemUsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRTaXplKHByb2plY3Rpb24sIHNpemUsIG9iamVjdCk7XG4gIH07XG4gIHByb2plY3Rpb24uZml0V2lkdGggPSBmdW5jdGlvbih3aWR0aCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFdpZHRoKHByb2plY3Rpb24sIHdpZHRoLCBvYmplY3QpO1xuICB9O1xuICBwcm9qZWN0aW9uLmZpdEhlaWdodCA9IGZ1bmN0aW9uKGhlaWdodCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEhlaWdodChwcm9qZWN0aW9uLCBoZWlnaHQsIG9iamVjdCk7XG4gIH07XG5cbiAgcmV0dXJuIHByb2plY3Rpb247XG59XG4iLCJpbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHthYnMsIGVwc2lsb259IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXR1cmFsRWFydGgxUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwaGkyID0gcGhpICogcGhpLCBwaGk0ID0gcGhpMiAqIHBoaTI7XG4gIHJldHVybiBbXG4gICAgbGFtYmRhICogKDAuODcwNyAtIDAuMTMxOTc5ICogcGhpMiArIHBoaTQgKiAoLTAuMDEzNzkxICsgcGhpNCAqICgwLjAwMzk3MSAqIHBoaTIgLSAwLjAwMTUyOSAqIHBoaTQpKSksXG4gICAgcGhpICogKDEuMDA3MjI2ICsgcGhpMiAqICgwLjAxNTA4NSArIHBoaTQgKiAoLTAuMDQ0NDc1ICsgMC4wMjg4NzQgKiBwaGkyIC0gMC4wMDU5MTYgKiBwaGk0KSkpXG4gIF07XG59XG5cbm5hdHVyYWxFYXJ0aDFSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgcGhpID0geSwgaSA9IDI1LCBkZWx0YTtcbiAgZG8ge1xuICAgIHZhciBwaGkyID0gcGhpICogcGhpLCBwaGk0ID0gcGhpMiAqIHBoaTI7XG4gICAgcGhpIC09IGRlbHRhID0gKHBoaSAqICgxLjAwNzIyNiArIHBoaTIgKiAoMC4wMTUwODUgKyBwaGk0ICogKC0wLjA0NDQ3NSArIDAuMDI4ODc0ICogcGhpMiAtIDAuMDA1OTE2ICogcGhpNCkpKSAtIHkpIC9cbiAgICAgICAgKDEuMDA3MjI2ICsgcGhpMiAqICgwLjAxNTA4NSAqIDMgKyBwaGk0ICogKC0wLjA0NDQ3NSAqIDcgKyAwLjAyODg3NCAqIDkgKiBwaGkyIC0gMC4wMDU5MTYgKiAxMSAqIHBoaTQpKSk7XG4gIH0gd2hpbGUgKGFicyhkZWx0YSkgPiBlcHNpbG9uICYmIC0taSA+IDApO1xuICByZXR1cm4gW1xuICAgIHggLyAoMC44NzA3ICsgKHBoaTIgPSBwaGkgKiBwaGkpICogKC0wLjEzMTk3OSArIHBoaTIgKiAoLTAuMDEzNzkxICsgcGhpMiAqIHBoaTIgKiBwaGkyICogKDAuMDAzOTcxIC0gMC4wMDE1MjkgKiBwaGkyKSkpKSxcbiAgICBwaGlcbiAgXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihuYXR1cmFsRWFydGgxUmF3KVxuICAgICAgLnNjYWxlKDE3NS4yOTUpO1xufVxuIiwiaW1wb3J0IHthc2luLCBjb3MsIGVwc2lsb24sIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7YXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWwuanNcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRob2dyYXBoaWNSYXcoeCwgeSkge1xuICByZXR1cm4gW2Nvcyh5KSAqIHNpbih4KSwgc2luKHkpXTtcbn1cblxub3J0aG9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChhc2luKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKG9ydGhvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNDkuNSlcbiAgICAgIC5jbGlwQW5nbGUoOTAgKyBlcHNpbG9uKTtcbn1cbiIsImltcG9ydCB7YXRhbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge2F6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsLmpzXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RlcmVvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gIHZhciBjeSA9IGNvcyh5KSwgayA9IDEgKyBjb3MoeCkgKiBjeTtcbiAgcmV0dXJuIFtjeSAqIHNpbih4KSAvIGssIHNpbih5KSAvIGtdO1xufVxuXG5zdGVyZW9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiAyICogYXRhbih6KTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oc3RlcmVvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNTApXG4gICAgICAuY2xpcEFuZ2xlKDE0Mik7XG59XG4iLCJpbXBvcnQge2F0YW4sIGV4cCwgaGFsZlBpLCBsb2csIHRhbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7bWVyY2F0b3JQcm9qZWN0aW9ufSBmcm9tIFwiLi9tZXJjYXRvci5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnN2ZXJzZU1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbbG9nKHRhbigoaGFsZlBpICsgcGhpKSAvIDIpKSwgLWxhbWJkYV07XG59XG5cbnRyYW5zdmVyc2VNZXJjYXRvclJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiBbLXksIDIgKiBhdGFuKGV4cCh4KSkgLSBoYWxmUGldO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBtID0gbWVyY2F0b3JQcm9qZWN0aW9uKHRyYW5zdmVyc2VNZXJjYXRvclJhdyksXG4gICAgICBjZW50ZXIgPSBtLmNlbnRlcixcbiAgICAgIHJvdGF0ZSA9IG0ucm90YXRlO1xuXG4gIG0uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gY2VudGVyKFstX1sxXSwgX1swXV0pIDogKF8gPSBjZW50ZXIoKSwgW19bMV0sIC1fWzBdXSk7XG4gIH07XG5cbiAgbS5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByb3RhdGUoW19bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwXSkgOiAoXyA9IHJvdGF0ZSgpLCBbX1swXSwgX1sxXSwgX1syXSAtIDkwXSk7XG4gIH07XG5cbiAgcmV0dXJuIHJvdGF0ZShbMCwgMCwgOTBdKVxuICAgICAgLnNjYWxlKDE1OS4xNTUpO1xufVxuIiwiZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xuICByZXR1cm4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDI7XG59XG5cbmZ1bmN0aW9uIG1lYW5YKGNoaWxkcmVuKSB7XG4gIHJldHVybiBjaGlsZHJlbi5yZWR1Y2UobWVhblhSZWR1Y2UsIDApIC8gY2hpbGRyZW4ubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBtZWFuWFJlZHVjZSh4LCBjKSB7XG4gIHJldHVybiB4ICsgYy54O1xufVxuXG5mdW5jdGlvbiBtYXhZKGNoaWxkcmVuKSB7XG4gIHJldHVybiAxICsgY2hpbGRyZW4ucmVkdWNlKG1heFlSZWR1Y2UsIDApO1xufVxuXG5mdW5jdGlvbiBtYXhZUmVkdWNlKHksIGMpIHtcbiAgcmV0dXJuIE1hdGgubWF4KHksIGMueSk7XG59XG5cbmZ1bmN0aW9uIGxlYWZMZWZ0KG5vZGUpIHtcbiAgdmFyIGNoaWxkcmVuO1xuICB3aGlsZSAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSBub2RlID0gY2hpbGRyZW5bMF07XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBsZWFmUmlnaHQobm9kZSkge1xuICB2YXIgY2hpbGRyZW47XG4gIHdoaWxlIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIG5vZGUgPSBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VwYXJhdGlvbiA9IGRlZmF1bHRTZXBhcmF0aW9uLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgbm9kZVNpemUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBjbHVzdGVyKHJvb3QpIHtcbiAgICB2YXIgcHJldmlvdXNOb2RlLFxuICAgICAgICB4ID0gMDtcblxuICAgIC8vIEZpcnN0IHdhbGssIGNvbXB1dGluZyB0aGUgaW5pdGlhbCB4ICYgeSB2YWx1ZXMuXG4gICAgcm9vdC5lYWNoQWZ0ZXIoZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICBub2RlLnggPSBtZWFuWChjaGlsZHJlbik7XG4gICAgICAgIG5vZGUueSA9IG1heFkoY2hpbGRyZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS54ID0gcHJldmlvdXNOb2RlID8geCArPSBzZXBhcmF0aW9uKG5vZGUsIHByZXZpb3VzTm9kZSkgOiAwO1xuICAgICAgICBub2RlLnkgPSAwO1xuICAgICAgICBwcmV2aW91c05vZGUgPSBub2RlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGxlZnQgPSBsZWFmTGVmdChyb290KSxcbiAgICAgICAgcmlnaHQgPSBsZWFmUmlnaHQocm9vdCksXG4gICAgICAgIHgwID0gbGVmdC54IC0gc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLFxuICAgICAgICB4MSA9IHJpZ2h0LnggKyBzZXBhcmF0aW9uKHJpZ2h0LCBsZWZ0KSAvIDI7XG5cbiAgICAvLyBTZWNvbmQgd2Fsaywgbm9ybWFsaXppbmcgeCAmIHkgdG8gdGhlIGRlc2lyZWQgc2l6ZS5cbiAgICByZXR1cm4gcm9vdC5lYWNoQWZ0ZXIobm9kZVNpemUgPyBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlLnggPSAobm9kZS54IC0gcm9vdC54KSAqIGR4O1xuICAgICAgbm9kZS55ID0gKHJvb3QueSAtIG5vZGUueSkgKiBkeTtcbiAgICB9IDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZS54ID0gKG5vZGUueCAtIHgwKSAvICh4MSAtIHgwKSAqIGR4O1xuICAgICAgbm9kZS55ID0gKDEgLSAocm9vdC55ID8gbm9kZS55IC8gcm9vdC55IDogMSkpICogZHk7XG4gICAgfSk7XG4gIH1cblxuICBjbHVzdGVyLnNlcGFyYXRpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIGNsdXN0ZXIpIDogc2VwYXJhdGlvbjtcbiAgfTtcblxuICBjbHVzdGVyLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgY2x1c3RlcikgOiAobm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV0pO1xuICB9O1xuXG4gIGNsdXN0ZXIubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSB0cnVlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBjbHVzdGVyKSA6IChub2RlU2l6ZSA/IFtkeCwgZHldIDogbnVsbCk7XG4gIH07XG5cbiAgcmV0dXJuIGNsdXN0ZXI7XG59XG4iLCJmdW5jdGlvbiBjb3VudChub2RlKSB7XG4gIHZhciBzdW0gPSAwLFxuICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKCFpKSBzdW0gPSAxO1xuICBlbHNlIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICBub2RlLnZhbHVlID0gc3VtO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGNvdW50KTtcbn1cbiIsImltcG9ydCBub2RlX2NvdW50IGZyb20gXCIuL2NvdW50LmpzXCI7XG5pbXBvcnQgbm9kZV9lYWNoIGZyb20gXCIuL2VhY2guanNcIjtcbmltcG9ydCBub2RlX2VhY2hCZWZvcmUgZnJvbSBcIi4vZWFjaEJlZm9yZS5qc1wiO1xuaW1wb3J0IG5vZGVfZWFjaEFmdGVyIGZyb20gXCIuL2VhY2hBZnRlci5qc1wiO1xuaW1wb3J0IG5vZGVfc3VtIGZyb20gXCIuL3N1bS5qc1wiO1xuaW1wb3J0IG5vZGVfc29ydCBmcm9tIFwiLi9zb3J0LmpzXCI7XG5pbXBvcnQgbm9kZV9wYXRoIGZyb20gXCIuL3BhdGguanNcIjtcbmltcG9ydCBub2RlX2FuY2VzdG9ycyBmcm9tIFwiLi9hbmNlc3RvcnMuanNcIjtcbmltcG9ydCBub2RlX2Rlc2NlbmRhbnRzIGZyb20gXCIuL2Rlc2NlbmRhbnRzLmpzXCI7XG5pbXBvcnQgbm9kZV9sZWF2ZXMgZnJvbSBcIi4vbGVhdmVzLmpzXCI7XG5pbXBvcnQgbm9kZV9saW5rcyBmcm9tIFwiLi9saW5rcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoaWVyYXJjaHkoZGF0YSwgY2hpbGRyZW4pIHtcbiAgdmFyIHJvb3QgPSBuZXcgTm9kZShkYXRhKSxcbiAgICAgIHZhbHVlZCA9ICtkYXRhLnZhbHVlICYmIChyb290LnZhbHVlID0gZGF0YS52YWx1ZSksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbcm9vdF0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcyxcbiAgICAgIGksXG4gICAgICBuO1xuXG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSBjaGlsZHJlbiA9IGRlZmF1bHRDaGlsZHJlbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKHZhbHVlZCkgbm9kZS52YWx1ZSA9ICtub2RlLmRhdGEudmFsdWU7XG4gICAgaWYgKChjaGlsZHMgPSBjaGlsZHJlbihub2RlLmRhdGEpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IE5vZGUoY2hpbGRzW2ldKSk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICAgIGNoaWxkLmRlcHRoID0gbm9kZS5kZXB0aCArIDE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJvb3QuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gbm9kZV9jb3B5KCkge1xuICByZXR1cm4gaGllcmFyY2h5KHRoaXMpLmVhY2hCZWZvcmUoY29weURhdGEpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q2hpbGRyZW4oZCkge1xuICByZXR1cm4gZC5jaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY29weURhdGEobm9kZSkge1xuICBub2RlLmRhdGEgPSBub2RlLmRhdGEuZGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVIZWlnaHQobm9kZSkge1xuICB2YXIgaGVpZ2h0ID0gMDtcbiAgZG8gbm9kZS5oZWlnaHQgPSBoZWlnaHQ7XG4gIHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50KSAmJiAobm9kZS5oZWlnaHQgPCArK2hlaWdodCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTm9kZShkYXRhKSB7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuZGVwdGggPVxuICB0aGlzLmhlaWdodCA9IDA7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbn1cblxuTm9kZS5wcm90b3R5cGUgPSBoaWVyYXJjaHkucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTm9kZSxcbiAgY291bnQ6IG5vZGVfY291bnQsXG4gIGVhY2g6IG5vZGVfZWFjaCxcbiAgZWFjaEFmdGVyOiBub2RlX2VhY2hBZnRlcixcbiAgZWFjaEJlZm9yZTogbm9kZV9lYWNoQmVmb3JlLFxuICBzdW06IG5vZGVfc3VtLFxuICBzb3J0OiBub2RlX3NvcnQsXG4gIHBhdGg6IG5vZGVfcGF0aCxcbiAgYW5jZXN0b3JzOiBub2RlX2FuY2VzdG9ycyxcbiAgZGVzY2VuZGFudHM6IG5vZGVfZGVzY2VuZGFudHMsXG4gIGxlYXZlczogbm9kZV9sZWF2ZXMsXG4gIGxpbmtzOiBub2RlX2xpbmtzLFxuICBjb3B5OiBub2RlX2NvcHlcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIGN1cnJlbnQsIG5leHQgPSBbbm9kZV0sIGNoaWxkcmVuLCBpLCBuO1xuICBkbyB7XG4gICAgY3VycmVudCA9IG5leHQucmV2ZXJzZSgpLCBuZXh0ID0gW107XG4gICAgd2hpbGUgKG5vZGUgPSBjdXJyZW50LnBvcCgpKSB7XG4gICAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5leHQucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICB9IHdoaWxlIChuZXh0Lmxlbmd0aCk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgbmV4dCA9IFtdLCBjaGlsZHJlbiwgaSwgbjtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIG5leHQucHVzaChub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChub2RlID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgY2hpbGRyZW4sIGk7XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHN1bSA9ICt2YWx1ZShub2RlLmRhdGEpIHx8IDAsXG4gICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgICB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgICBub2RlLnZhbHVlID0gc3VtO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZW5kKSB7XG4gIHZhciBzdGFydCA9IHRoaXMsXG4gICAgICBhbmNlc3RvciA9IGxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksXG4gICAgICBub2RlcyA9IFtzdGFydF07XG4gIHdoaWxlIChzdGFydCAhPT0gYW5jZXN0b3IpIHtcbiAgICBzdGFydCA9IHN0YXJ0LnBhcmVudDtcbiAgICBub2Rlcy5wdXNoKHN0YXJ0KTtcbiAgfVxuICB2YXIgayA9IG5vZGVzLmxlbmd0aDtcbiAgd2hpbGUgKGVuZCAhPT0gYW5jZXN0b3IpIHtcbiAgICBub2Rlcy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICBlbmQgPSBlbmQucGFyZW50O1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cblxuZnVuY3Rpb24gbGVhc3RDb21tb25BbmNlc3RvcihhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gYTtcbiAgdmFyIGFOb2RlcyA9IGEuYW5jZXN0b3JzKCksXG4gICAgICBiTm9kZXMgPSBiLmFuY2VzdG9ycygpLFxuICAgICAgYyA9IG51bGw7XG4gIGEgPSBhTm9kZXMucG9wKCk7XG4gIGIgPSBiTm9kZXMucG9wKCk7XG4gIHdoaWxlIChhID09PSBiKSB7XG4gICAgYyA9IGE7XG4gICAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgICBiID0gYk5vZGVzLnBvcCgpO1xuICB9XG4gIHJldHVybiBjO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV07XG4gIHdoaWxlIChub2RlID0gbm9kZS5wYXJlbnQpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBbXTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBsZWF2ZXMgPSBbXTtcbiAgdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGxlYXZlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsZWF2ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3QgPSB0aGlzLCBsaW5rcyA9IFtdO1xuICByb290LmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlICE9PSByb290KSB7IC8vIERvbuKAmXQgaW5jbHVkZSB0aGUgcm9vdOKAmXMgcGFyZW50LCBpZiBhbnkuXG4gICAgICBsaW5rcy5wdXNoKHtzb3VyY2U6IG5vZGUucGFyZW50LCB0YXJnZXQ6IG5vZGV9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGlua3M7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5leHBvcnQgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xuICB2YXIgbSA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHQsXG4gICAgICBpO1xuXG4gIHdoaWxlIChtKSB7XG4gICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuICAgIHQgPSBhcnJheVttXTtcbiAgICBhcnJheVttXSA9IGFycmF5W2ldO1xuICAgIGFycmF5W2ldID0gdDtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cbiIsImltcG9ydCB7c2h1ZmZsZSwgc2xpY2V9IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjaXJjbGVzKSB7XG4gIHZhciBpID0gMCwgbiA9IChjaXJjbGVzID0gc2h1ZmZsZShzbGljZS5jYWxsKGNpcmNsZXMpKSkubGVuZ3RoLCBCID0gW10sIHAsIGU7XG5cbiAgd2hpbGUgKGkgPCBuKSB7XG4gICAgcCA9IGNpcmNsZXNbaV07XG4gICAgaWYgKGUgJiYgZW5jbG9zZXNXZWFrKGUsIHApKSArK2k7XG4gICAgZWxzZSBlID0gZW5jbG9zZUJhc2lzKEIgPSBleHRlbmRCYXNpcyhCLCBwKSksIGkgPSAwO1xuICB9XG5cbiAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZEJhc2lzKEIsIHApIHtcbiAgdmFyIGksIGo7XG5cbiAgaWYgKGVuY2xvc2VzV2Vha0FsbChwLCBCKSkgcmV0dXJuIFtwXTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIEIgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBlbGVtZW50LlxuICBmb3IgKGkgPSAwOyBpIDwgQi5sZW5ndGg7ICsraSkge1xuICAgIGlmIChlbmNsb3Nlc05vdChwLCBCW2ldKVxuICAgICAgICAmJiBlbmNsb3Nlc1dlYWtBbGwoZW5jbG9zZUJhc2lzMihCW2ldLCBwKSwgQikpIHtcbiAgICAgIHJldHVybiBbQltpXSwgcF07XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBCIG11c3QgaGF2ZSBhdCBsZWFzdCB0d28gZWxlbWVudHMuXG4gIGZvciAoaSA9IDA7IGkgPCBCLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgQi5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGVuY2xvc2VzTm90KGVuY2xvc2VCYXNpczIoQltpXSwgQltqXSksIHApXG4gICAgICAgICAgJiYgZW5jbG9zZXNOb3QoZW5jbG9zZUJhc2lzMihCW2ldLCBwKSwgQltqXSlcbiAgICAgICAgICAmJiBlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbal0sIHApLCBCW2ldKVxuICAgICAgICAgICYmIGVuY2xvc2VzV2Vha0FsbChlbmNsb3NlQmFzaXMzKEJbaV0sIEJbal0sIHApLCBCKSkge1xuICAgICAgICByZXR1cm4gW0JbaV0sIEJbal0sIHBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gc29tZXRoaW5nIGlzIHZlcnkgd3JvbmcuXG4gIHRocm93IG5ldyBFcnJvcjtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZXNOb3QoYSwgYikge1xuICB2YXIgZHIgPSBhLnIgLSBiLnIsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyIDwgMCB8fCBkciAqIGRyIDwgZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzV2VhayhhLCBiKSB7XG4gIHZhciBkciA9IGEuciAtIGIuciArIDFlLTYsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyID4gMCAmJiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzV2Vha0FsbChhLCBCKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQi5sZW5ndGg7ICsraSkge1xuICAgIGlmICghZW5jbG9zZXNXZWFrKGEsIEJbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMoQikge1xuICBzd2l0Y2ggKEIubGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZW5jbG9zZUJhc2lzMShCWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBlbmNsb3NlQmFzaXMyKEJbMF0sIEJbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGVuY2xvc2VCYXNpczMoQlswXSwgQlsxXSwgQlsyXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMShhKSB7XG4gIHJldHVybiB7XG4gICAgeDogYS54LFxuICAgIHk6IGEueSxcbiAgICByOiBhLnJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMihhLCBiKSB7XG4gIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgeDIgPSBiLngsIHkyID0gYi55LCByMiA9IGIucixcbiAgICAgIHgyMSA9IHgyIC0geDEsIHkyMSA9IHkyIC0geTEsIHIyMSA9IHIyIC0gcjEsXG4gICAgICBsID0gTWF0aC5zcXJ0KHgyMSAqIHgyMSArIHkyMSAqIHkyMSk7XG4gIHJldHVybiB7XG4gICAgeDogKHgxICsgeDIgKyB4MjEgLyBsICogcjIxKSAvIDIsXG4gICAgeTogKHkxICsgeTIgKyB5MjEgLyBsICogcjIxKSAvIDIsXG4gICAgcjogKGwgKyByMSArIHIyKSAvIDJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMyhhLCBiLCBjKSB7XG4gIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgeDIgPSBiLngsIHkyID0gYi55LCByMiA9IGIucixcbiAgICAgIHgzID0gYy54LCB5MyA9IGMueSwgcjMgPSBjLnIsXG4gICAgICBhMiA9IHgxIC0geDIsXG4gICAgICBhMyA9IHgxIC0geDMsXG4gICAgICBiMiA9IHkxIC0geTIsXG4gICAgICBiMyA9IHkxIC0geTMsXG4gICAgICBjMiA9IHIyIC0gcjEsXG4gICAgICBjMyA9IHIzIC0gcjEsXG4gICAgICBkMSA9IHgxICogeDEgKyB5MSAqIHkxIC0gcjEgKiByMSxcbiAgICAgIGQyID0gZDEgLSB4MiAqIHgyIC0geTIgKiB5MiArIHIyICogcjIsXG4gICAgICBkMyA9IGQxIC0geDMgKiB4MyAtIHkzICogeTMgKyByMyAqIHIzLFxuICAgICAgYWIgPSBhMyAqIGIyIC0gYTIgKiBiMyxcbiAgICAgIHhhID0gKGIyICogZDMgLSBiMyAqIGQyKSAvIChhYiAqIDIpIC0geDEsXG4gICAgICB4YiA9IChiMyAqIGMyIC0gYjIgKiBjMykgLyBhYixcbiAgICAgIHlhID0gKGEzICogZDIgLSBhMiAqIGQzKSAvIChhYiAqIDIpIC0geTEsXG4gICAgICB5YiA9IChhMiAqIGMzIC0gYTMgKiBjMikgLyBhYixcbiAgICAgIEEgPSB4YiAqIHhiICsgeWIgKiB5YiAtIDEsXG4gICAgICBCID0gMiAqIChyMSArIHhhICogeGIgKyB5YSAqIHliKSxcbiAgICAgIEMgPSB4YSAqIHhhICsgeWEgKiB5YSAtIHIxICogcjEsXG4gICAgICByID0gLShBID8gKEIgKyBNYXRoLnNxcnQoQiAqIEIgLSA0ICogQSAqIEMpKSAvICgyICogQSkgOiBDIC8gQik7XG4gIHJldHVybiB7XG4gICAgeDogeDEgKyB4YSArIHhiICogcixcbiAgICB5OiB5MSArIHlhICsgeWIgKiByLFxuICAgIHI6IHJcbiAgfTtcbn1cbiIsImltcG9ydCBlbmNsb3NlIGZyb20gXCIuL2VuY2xvc2UuanNcIjtcblxuZnVuY3Rpb24gcGxhY2UoYiwgYSwgYykge1xuICB2YXIgZHggPSBiLnggLSBhLngsIHgsIGEyLFxuICAgICAgZHkgPSBiLnkgLSBhLnksIHksIGIyLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgaWYgKGQyKSB7XG4gICAgYTIgPSBhLnIgKyBjLnIsIGEyICo9IGEyO1xuICAgIGIyID0gYi5yICsgYy5yLCBiMiAqPSBiMjtcbiAgICBpZiAoYTIgPiBiMikge1xuICAgICAgeCA9IChkMiArIGIyIC0gYTIpIC8gKDIgKiBkMik7XG4gICAgICB5ID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIGIyIC8gZDIgLSB4ICogeCkpO1xuICAgICAgYy54ID0gYi54IC0geCAqIGR4IC0geSAqIGR5O1xuICAgICAgYy55ID0gYi55IC0geCAqIGR5ICsgeSAqIGR4O1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gKGQyICsgYTIgLSBiMikgLyAoMiAqIGQyKTtcbiAgICAgIHkgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgYTIgLyBkMiAtIHggKiB4KSk7XG4gICAgICBjLnggPSBhLnggKyB4ICogZHggLSB5ICogZHk7XG4gICAgICBjLnkgPSBhLnkgKyB4ICogZHkgKyB5ICogZHg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGMueCA9IGEueCArIGMucjtcbiAgICBjLnkgPSBhLnk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0cyhhLCBiKSB7XG4gIHZhciBkciA9IGEuciArIGIuciAtIDFlLTYsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyID4gMCAmJiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIHNjb3JlKG5vZGUpIHtcbiAgdmFyIGEgPSBub2RlLl8sXG4gICAgICBiID0gbm9kZS5uZXh0Ll8sXG4gICAgICBhYiA9IGEuciArIGIucixcbiAgICAgIGR4ID0gKGEueCAqIGIuciArIGIueCAqIGEucikgLyBhYixcbiAgICAgIGR5ID0gKGEueSAqIGIuciArIGIueSAqIGEucikgLyBhYjtcbiAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBOb2RlKGNpcmNsZSkge1xuICB0aGlzLl8gPSBjaXJjbGU7XG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMucHJldmlvdXMgPSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFja0VuY2xvc2UoY2lyY2xlcykge1xuICBpZiAoIShuID0gY2lyY2xlcy5sZW5ndGgpKSByZXR1cm4gMDtcblxuICB2YXIgYSwgYiwgYywgbiwgYWEsIGNhLCBpLCBqLCBrLCBzaiwgc2s7XG5cbiAgLy8gUGxhY2UgdGhlIGZpcnN0IGNpcmNsZS5cbiAgYSA9IGNpcmNsZXNbMF0sIGEueCA9IDAsIGEueSA9IDA7XG4gIGlmICghKG4gPiAxKSkgcmV0dXJuIGEucjtcblxuICAvLyBQbGFjZSB0aGUgc2Vjb25kIGNpcmNsZS5cbiAgYiA9IGNpcmNsZXNbMV0sIGEueCA9IC1iLnIsIGIueCA9IGEuciwgYi55ID0gMDtcbiAgaWYgKCEobiA+IDIpKSByZXR1cm4gYS5yICsgYi5yO1xuXG4gIC8vIFBsYWNlIHRoZSB0aGlyZCBjaXJjbGUuXG4gIHBsYWNlKGIsIGEsIGMgPSBjaXJjbGVzWzJdKTtcblxuICAvLyBJbml0aWFsaXplIHRoZSBmcm9udC1jaGFpbiB1c2luZyB0aGUgZmlyc3QgdGhyZWUgY2lyY2xlcyBhLCBiIGFuZCBjLlxuICBhID0gbmV3IE5vZGUoYSksIGIgPSBuZXcgTm9kZShiKSwgYyA9IG5ldyBOb2RlKGMpO1xuICBhLm5leHQgPSBjLnByZXZpb3VzID0gYjtcbiAgYi5uZXh0ID0gYS5wcmV2aW91cyA9IGM7XG4gIGMubmV4dCA9IGIucHJldmlvdXMgPSBhO1xuXG4gIC8vIEF0dGVtcHQgdG8gcGxhY2UgZWFjaCByZW1haW5pbmcgY2lyY2xl4oCmXG4gIHBhY2s6IGZvciAoaSA9IDM7IGkgPCBuOyArK2kpIHtcbiAgICBwbGFjZShhLl8sIGIuXywgYyA9IGNpcmNsZXNbaV0pLCBjID0gbmV3IE5vZGUoYyk7XG5cbiAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IGludGVyc2VjdGluZyBjaXJjbGUgb24gdGhlIGZyb250LWNoYWluLCBpZiBhbnkuXG4gICAgLy8g4oCcQ2xvc2VuZXNz4oCdIGlzIGRldGVybWluZWQgYnkgbGluZWFyIGRpc3RhbmNlIGFsb25nIHRoZSBmcm9udC1jaGFpbi5cbiAgICAvLyDigJxBaGVhZOKAnSBvciDigJxiZWhpbmTigJ0gaXMgbGlrZXdpc2UgZGV0ZXJtaW5lZCBieSBsaW5lYXIgZGlzdGFuY2UuXG4gICAgaiA9IGIubmV4dCwgayA9IGEucHJldmlvdXMsIHNqID0gYi5fLnIsIHNrID0gYS5fLnI7XG4gICAgZG8ge1xuICAgICAgaWYgKHNqIDw9IHNrKSB7XG4gICAgICAgIGlmIChpbnRlcnNlY3RzKGouXywgYy5fKSkge1xuICAgICAgICAgIGIgPSBqLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgIGNvbnRpbnVlIHBhY2s7XG4gICAgICAgIH1cbiAgICAgICAgc2ogKz0gai5fLnIsIGogPSBqLm5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaW50ZXJzZWN0cyhrLl8sIGMuXykpIHtcbiAgICAgICAgICBhID0gaywgYS5uZXh0ID0gYiwgYi5wcmV2aW91cyA9IGEsIC0taTtcbiAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICB9XG4gICAgICAgIHNrICs9IGsuXy5yLCBrID0gay5wcmV2aW91cztcbiAgICAgIH1cbiAgICB9IHdoaWxlIChqICE9PSBrLm5leHQpO1xuXG4gICAgLy8gU3VjY2VzcyEgSW5zZXJ0IHRoZSBuZXcgY2lyY2xlIGMgYmV0d2VlbiBhIGFuZCBiLlxuICAgIGMucHJldmlvdXMgPSBhLCBjLm5leHQgPSBiLCBhLm5leHQgPSBiLnByZXZpb3VzID0gYiA9IGM7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBuZXcgY2xvc2VzdCBjaXJjbGUgcGFpciB0byB0aGUgY2VudHJvaWQuXG4gICAgYWEgPSBzY29yZShhKTtcbiAgICB3aGlsZSAoKGMgPSBjLm5leHQpICE9PSBiKSB7XG4gICAgICBpZiAoKGNhID0gc2NvcmUoYykpIDwgYWEpIHtcbiAgICAgICAgYSA9IGMsIGFhID0gY2E7XG4gICAgICB9XG4gICAgfVxuICAgIGIgPSBhLm5leHQ7XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBlbmNsb3NpbmcgY2lyY2xlIG9mIHRoZSBmcm9udCBjaGFpbi5cbiAgYSA9IFtiLl9dLCBjID0gYjsgd2hpbGUgKChjID0gYy5uZXh0KSAhPT0gYikgYS5wdXNoKGMuXyk7IGMgPSBlbmNsb3NlKGEpO1xuXG4gIC8vIFRyYW5zbGF0ZSB0aGUgY2lyY2xlcyB0byBwdXQgdGhlIGVuY2xvc2luZyBjaXJjbGUgYXJvdW5kIHRoZSBvcmlnaW4uXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGEgPSBjaXJjbGVzW2ldLCBhLnggLT0gYy54LCBhLnkgLT0gYy55O1xuXG4gIHJldHVybiBjLnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNpcmNsZXMpIHtcbiAgcGFja0VuY2xvc2UoY2lyY2xlcyk7XG4gIHJldHVybiBjaXJjbGVzO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIG9wdGlvbmFsKGYpIHtcbiAgcmV0dXJuIGYgPT0gbnVsbCA/IG51bGwgOiByZXF1aXJlZChmKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVkKGYpIHtcbiAgaWYgKHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGY7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY29uc3RhbnRaZXJvKCkge1xuICByZXR1cm4gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge3BhY2tFbmNsb3NlfSBmcm9tIFwiLi9zaWJsaW5ncy5qc1wiO1xuaW1wb3J0IHtvcHRpb25hbH0gZnJvbSBcIi4uL2FjY2Vzc29ycy5qc1wiO1xuaW1wb3J0IGNvbnN0YW50LCB7Y29uc3RhbnRaZXJvfSBmcm9tIFwiLi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFJhZGl1cyhkKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoZC52YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcmFkaXVzID0gbnVsbCxcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmcgPSBjb25zdGFudFplcm87XG5cbiAgZnVuY3Rpb24gcGFjayhyb290KSB7XG4gICAgcm9vdC54ID0gZHggLyAyLCByb290LnkgPSBkeSAvIDI7XG4gICAgaWYgKHJhZGl1cykge1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYocmFkaXVzKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCAwLjUpKVxuICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYoZGVmYXVsdFJhZGl1cykpXG4gICAgICAgICAgLmVhY2hBZnRlcihwYWNrQ2hpbGRyZW4oY29uc3RhbnRaZXJvLCAxKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCByb290LnIgLyBNYXRoLm1pbihkeCwgZHkpKSlcbiAgICAgICAgICAuZWFjaEJlZm9yZSh0cmFuc2xhdGVDaGlsZChNYXRoLm1pbihkeCwgZHkpIC8gKDIgKiByb290LnIpKSk7XG4gICAgfVxuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgcGFjay5yYWRpdXMgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gb3B0aW9uYWwoeCksIHBhY2spIDogcmFkaXVzO1xuICB9O1xuXG4gIHBhY2suc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYWNrKSA6IFtkeCwgZHldO1xuICB9O1xuXG4gIHBhY2sucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHBhY2spIDogcGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gcGFjaztcbn1cblxuZnVuY3Rpb24gcmFkaXVzTGVhZihyYWRpdXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUuciA9IE1hdGgubWF4KDAsICtyYWRpdXMobm9kZSkgfHwgMCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYWNrQ2hpbGRyZW4ocGFkZGluZywgaykge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIHZhciBjaGlsZHJlbixcbiAgICAgICAgICBpLFxuICAgICAgICAgIG4gPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgICAgciA9IHBhZGRpbmcobm9kZSkgKiBrIHx8IDAsXG4gICAgICAgICAgZTtcblxuICAgICAgaWYgKHIpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNoaWxkcmVuW2ldLnIgKz0gcjtcbiAgICAgIGUgPSBwYWNrRW5jbG9zZShjaGlsZHJlbik7XG4gICAgICBpZiAocikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hpbGRyZW5baV0uciAtPSByO1xuICAgICAgbm9kZS5yID0gZSArIHI7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVDaGlsZChrKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50O1xuICAgIG5vZGUuciAqPSBrO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIG5vZGUueCA9IHBhcmVudC54ICsgayAqIG5vZGUueDtcbiAgICAgIG5vZGUueSA9IHBhcmVudC55ICsgayAqIG5vZGUueTtcbiAgICB9XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIG5vZGUueDAgPSBNYXRoLnJvdW5kKG5vZGUueDApO1xuICBub2RlLnkwID0gTWF0aC5yb3VuZChub2RlLnkwKTtcbiAgbm9kZS54MSA9IE1hdGgucm91bmQobm9kZS54MSk7XG4gIG5vZGUueTEgPSBNYXRoLnJvdW5kKG5vZGUueTEpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICBub2RlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIGsgPSBwYXJlbnQudmFsdWUgJiYgKHgxIC0geDApIC8gcGFyZW50LnZhbHVlO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MTtcbiAgICBub2RlLngwID0geDAsIG5vZGUueDEgPSB4MCArPSBub2RlLnZhbHVlICogaztcbiAgfVxufVxuIiwiaW1wb3J0IHJvdW5kTm9kZSBmcm9tIFwiLi90cmVlbWFwL3JvdW5kLmpzXCI7XG5pbXBvcnQgdHJlZW1hcERpY2UgZnJvbSBcIi4vdHJlZW1hcC9kaWNlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgcGFkZGluZyA9IDAsXG4gICAgICByb3VuZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHBhcnRpdGlvbihyb290KSB7XG4gICAgdmFyIG4gPSByb290LmhlaWdodCArIDE7XG4gICAgcm9vdC54MCA9XG4gICAgcm9vdC55MCA9IHBhZGRpbmc7XG4gICAgcm9vdC54MSA9IGR4O1xuICAgIHJvb3QueTEgPSBkeSAvIG47XG4gICAgcm9vdC5lYWNoQmVmb3JlKHBvc2l0aW9uTm9kZShkeSwgbikpO1xuICAgIGlmIChyb3VuZCkgcm9vdC5lYWNoQmVmb3JlKHJvdW5kTm9kZSk7XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBmdW5jdGlvbiBwb3NpdGlvbk5vZGUoZHksIG4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgdHJlZW1hcERpY2Uobm9kZSwgbm9kZS54MCwgZHkgKiAobm9kZS5kZXB0aCArIDEpIC8gbiwgbm9kZS54MSwgZHkgKiAobm9kZS5kZXB0aCArIDIpIC8gbik7XG4gICAgICB9XG4gICAgICB2YXIgeDAgPSBub2RlLngwLFxuICAgICAgICAgIHkwID0gbm9kZS55MCxcbiAgICAgICAgICB4MSA9IG5vZGUueDEgLSBwYWRkaW5nLFxuICAgICAgICAgIHkxID0gbm9kZS55MSAtIHBhZGRpbmc7XG4gICAgICBpZiAoeDEgPCB4MCkgeDAgPSB4MSA9ICh4MCArIHgxKSAvIDI7XG4gICAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBub2RlLngwID0geDA7XG4gICAgICBub2RlLnkwID0geTA7XG4gICAgICBub2RlLngxID0geDE7XG4gICAgICBub2RlLnkxID0geTE7XG4gICAgfTtcbiAgfVxuXG4gIHBhcnRpdGlvbi5yb3VuZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgcGFydGl0aW9uKSA6IHJvdW5kO1xuICB9O1xuXG4gIHBhcnRpdGlvbi5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHBhcnRpdGlvbikgOiBbZHgsIGR5XTtcbiAgfTtcblxuICBwYXJ0aXRpb24ucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nID0gK3gsIHBhcnRpdGlvbikgOiBwYWRkaW5nO1xuICB9O1xuXG4gIHJldHVybiBwYXJ0aXRpb247XG59XG4iLCJpbXBvcnQge3JlcXVpcmVkfSBmcm9tIFwiLi9hY2Nlc3NvcnMuanNcIjtcbmltcG9ydCB7Tm9kZSwgY29tcHV0ZUhlaWdodH0gZnJvbSBcIi4vaGllcmFyY2h5L2luZGV4LmpzXCI7XG5cbnZhciBrZXlQcmVmaXggPSBcIiRcIiwgLy8gUHJvdGVjdCBhZ2FpbnN0IGtleXMgbGlrZSDigJxfX3Byb3RvX1/igJ0uXG4gICAgcHJlcm9vdCA9IHtkZXB0aDogLTF9LFxuICAgIGFtYmlndW91cyA9IHt9O1xuXG5mdW5jdGlvbiBkZWZhdWx0SWQoZCkge1xuICByZXR1cm4gZC5pZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFBhcmVudElkKGQpIHtcbiAgcmV0dXJuIGQucGFyZW50SWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgaWQgPSBkZWZhdWx0SWQsXG4gICAgICBwYXJlbnRJZCA9IGRlZmF1bHRQYXJlbnRJZDtcblxuICBmdW5jdGlvbiBzdHJhdGlmeShkYXRhKSB7XG4gICAgdmFyIGQsXG4gICAgICAgIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgbm9kZUlkLFxuICAgICAgICBub2RlS2V5LFxuICAgICAgICBub2RlQnlLZXkgPSB7fTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGQgPSBkYXRhW2ldLCBub2RlID0gbm9kZXNbaV0gPSBuZXcgTm9kZShkKTtcbiAgICAgIGlmICgobm9kZUlkID0gaWQoZCwgaSwgZGF0YSkpICE9IG51bGwgJiYgKG5vZGVJZCArPSBcIlwiKSkge1xuICAgICAgICBub2RlS2V5ID0ga2V5UHJlZml4ICsgKG5vZGUuaWQgPSBub2RlSWQpO1xuICAgICAgICBub2RlQnlLZXlbbm9kZUtleV0gPSBub2RlS2V5IGluIG5vZGVCeUtleSA/IGFtYmlndW91cyA6IG5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlSWQgPSBwYXJlbnRJZChkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICAgIGlmIChub2RlSWQgPT0gbnVsbCB8fCAhKG5vZGVJZCArPSBcIlwiKSkge1xuICAgICAgICBpZiAocm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibXVsdGlwbGUgcm9vdHNcIik7XG4gICAgICAgIHJvb3QgPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50ID0gbm9kZUJ5S2V5W2tleVByZWZpeCArIG5vZGVJZF07XG4gICAgICAgIGlmICghcGFyZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nOiBcIiArIG5vZGVJZCk7XG4gICAgICAgIGlmIChwYXJlbnQgPT09IGFtYmlndW91cykgdGhyb3cgbmV3IEVycm9yKFwiYW1iaWd1b3VzOiBcIiArIG5vZGVJZCk7XG4gICAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4pIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICBlbHNlIHBhcmVudC5jaGlsZHJlbiA9IFtub2RlXTtcbiAgICAgICAgbm9kZS5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFyb290KSB0aHJvdyBuZXcgRXJyb3IoXCJubyByb290XCIpO1xuICAgIHJvb3QucGFyZW50ID0gcHJlcm9vdDtcbiAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkgeyBub2RlLmRlcHRoID0gbm9kZS5wYXJlbnQuZGVwdGggKyAxOyAtLW47IH0pLmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG4gICAgcm9vdC5wYXJlbnQgPSBudWxsO1xuICAgIGlmIChuID4gMCkgdGhyb3cgbmV3IEVycm9yKFwiY3ljbGVcIik7XG5cbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIHN0cmF0aWZ5LmlkID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlkID0gcmVxdWlyZWQoeCksIHN0cmF0aWZ5KSA6IGlkO1xuICB9O1xuXG4gIHN0cmF0aWZ5LnBhcmVudElkID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhcmVudElkID0gcmVxdWlyZWQoeCksIHN0cmF0aWZ5KSA6IHBhcmVudElkO1xuICB9O1xuXG4gIHJldHVybiBzdHJhdGlmeTtcbn1cbiIsImltcG9ydCB7Tm9kZX0gZnJvbSBcIi4vaGllcmFyY2h5L2luZGV4LmpzXCI7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXBhcmF0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyO1xufVxuXG4vLyBmdW5jdGlvbiByYWRpYWxTZXBhcmF0aW9uKGEsIGIpIHtcbi8vICAgcmV0dXJuIChhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMikgLyBhLmRlcHRoO1xuLy8gfVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGxlZnQgY29udG91ciBvZiBhIHN1YnRyZWUgKG9yXG4vLyBzdWJmb3Jlc3QpLiBJdCByZXR1cm5zIHRoZSBzdWNjZXNzb3Igb2YgdiBvbiB0aGlzIGNvbnRvdXIuIFRoaXMgc3VjY2Vzc29yIGlzXG4vLyBlaXRoZXIgZ2l2ZW4gYnkgdGhlIGxlZnRtb3N0IGNoaWxkIG9mIHYgb3IgYnkgdGhlIHRocmVhZCBvZiB2LiBUaGUgZnVuY3Rpb25cbi8vIHJldHVybnMgbnVsbCBpZiBhbmQgb25seSBpZiB2IGlzIG9uIHRoZSBoaWdoZXN0IGxldmVsIG9mIGl0cyBzdWJ0cmVlLlxuZnVuY3Rpb24gbmV4dExlZnQodikge1xuICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlblswXSA6IHYudDtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3b3JrcyBhbmFsb2dvdXNseSB0byBuZXh0TGVmdC5cbmZ1bmN0aW9uIG5leHRSaWdodCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdIDogdi50O1xufVxuXG4vLyBTaGlmdHMgdGhlIGN1cnJlbnQgc3VidHJlZSByb290ZWQgYXQgdysuIFRoaXMgaXMgZG9uZSBieSBpbmNyZWFzaW5nXG4vLyBwcmVsaW0odyspIGFuZCBtb2QodyspIGJ5IHNoaWZ0LlxuZnVuY3Rpb24gbW92ZVN1YnRyZWUod20sIHdwLCBzaGlmdCkge1xuICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICB3cC5jIC09IGNoYW5nZTtcbiAgd3AucyArPSBzaGlmdDtcbiAgd20uYyArPSBjaGFuZ2U7XG4gIHdwLnogKz0gc2hpZnQ7XG4gIHdwLm0gKz0gc2hpZnQ7XG59XG5cbi8vIEFsbCBvdGhlciBzaGlmdHMsIGFwcGxpZWQgdG8gdGhlIHNtYWxsZXIgc3VidHJlZXMgYmV0d2VlbiB3LSBhbmQgdyssIGFyZVxuLy8gcGVyZm9ybWVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRvIHByZXBhcmUgdGhlIHNoaWZ0cywgd2UgaGF2ZSB0byBhZGp1c3Rcbi8vIGNoYW5nZSh3KyksIHNoaWZ0KHcrKSwgYW5kIGNoYW5nZSh3LSkuXG5mdW5jdGlvbiBleGVjdXRlU2hpZnRzKHYpIHtcbiAgdmFyIHNoaWZ0ID0gMCxcbiAgICAgIGNoYW5nZSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgdztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgdyA9IGNoaWxkcmVuW2ldO1xuICAgIHcueiArPSBzaGlmdDtcbiAgICB3Lm0gKz0gc2hpZnQ7XG4gICAgc2hpZnQgKz0gdy5zICsgKGNoYW5nZSArPSB3LmMpO1xuICB9XG59XG5cbi8vIElmIHZpLeKAmXMgYW5jZXN0b3IgaXMgYSBzaWJsaW5nIG9mIHYsIHJldHVybnMgdmkt4oCZcyBhbmNlc3Rvci4gT3RoZXJ3aXNlLFxuLy8gcmV0dXJucyB0aGUgc3BlY2lmaWVkIChkZWZhdWx0KSBhbmNlc3Rvci5cbmZ1bmN0aW9uIG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3Rvcjtcbn1cblxuZnVuY3Rpb24gVHJlZU5vZGUobm9kZSwgaSkge1xuICB0aGlzLl8gPSBub2RlO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG4gIHRoaXMuY2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLkEgPSBudWxsOyAvLyBkZWZhdWx0IGFuY2VzdG9yXG4gIHRoaXMuYSA9IHRoaXM7IC8vIGFuY2VzdG9yXG4gIHRoaXMueiA9IDA7IC8vIHByZWxpbVxuICB0aGlzLm0gPSAwOyAvLyBtb2RcbiAgdGhpcy5jID0gMDsgLy8gY2hhbmdlXG4gIHRoaXMucyA9IDA7IC8vIHNoaWZ0XG4gIHRoaXMudCA9IG51bGw7IC8vIHRocmVhZFxuICB0aGlzLmkgPSBpOyAvLyBudW1iZXJcbn1cblxuVHJlZU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIHRyZWVSb290KHJvb3QpIHtcbiAgdmFyIHRyZWUgPSBuZXcgVHJlZU5vZGUocm9vdCwgMCksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbdHJlZV0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuXy5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuID0gY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBUcmVlTm9kZShjaGlsZHJlbltpXSwgaSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICh0cmVlLnBhcmVudCA9IG5ldyBUcmVlTm9kZShudWxsLCAwKSkuY2hpbGRyZW4gPSBbdHJlZV07XG4gIHJldHVybiB0cmVlO1xufVxuXG4vLyBOb2RlLWxpbmsgdHJlZSBkaWFncmFtIHVzaW5nIHRoZSBSZWluZ29sZC1UaWxmb3JkIFwidGlkeVwiIGFsZ29yaXRobVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzZXBhcmF0aW9uID0gZGVmYXVsdFNlcGFyYXRpb24sXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBub2RlU2l6ZSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gdHJlZShyb290KSB7XG4gICAgdmFyIHQgPSB0cmVlUm9vdChyb290KTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGxheW91dCB1c2luZyBCdWNoaGVpbSBldCBhbC7igJlzIGFsZ29yaXRobS5cbiAgICB0LmVhY2hBZnRlcihmaXJzdFdhbGspLCB0LnBhcmVudC5tID0gLXQuejtcbiAgICB0LmVhY2hCZWZvcmUoc2Vjb25kV2Fsayk7XG5cbiAgICAvLyBJZiBhIGZpeGVkIG5vZGUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkuXG4gICAgaWYgKG5vZGVTaXplKSByb290LmVhY2hCZWZvcmUoc2l6ZU5vZGUpO1xuXG4gICAgLy8gSWYgYSBmaXhlZCB0cmVlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5IGJhc2VkIG9uIHRoZSBleHRlbnQuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbGVmdC1tb3N0LCByaWdodC1tb3N0LCBhbmQgZGVwdGgtbW9zdCBub2RlcyBmb3IgZXh0ZW50cy5cbiAgICBlbHNlIHtcbiAgICAgIHZhciBsZWZ0ID0gcm9vdCxcbiAgICAgICAgICByaWdodCA9IHJvb3QsXG4gICAgICAgICAgYm90dG9tID0gcm9vdDtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnggPCBsZWZ0LngpIGxlZnQgPSBub2RlO1xuICAgICAgICBpZiAobm9kZS54ID4gcmlnaHQueCkgcmlnaHQgPSBub2RlO1xuICAgICAgICBpZiAobm9kZS5kZXB0aCA+IGJvdHRvbS5kZXB0aCkgYm90dG9tID0gbm9kZTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHMgPSBsZWZ0ID09PSByaWdodCA/IDEgOiBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgICAgdHggPSBzIC0gbGVmdC54LFxuICAgICAgICAgIGt4ID0gZHggLyAocmlnaHQueCArIHMgKyB0eCksXG4gICAgICAgICAga3kgPSBkeSAvIChib3R0b20uZGVwdGggfHwgMSk7XG4gICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54ICsgdHgpICoga3g7XG4gICAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBreTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgLy8gQ29tcHV0ZXMgYSBwcmVsaW1pbmFyeSB4LWNvb3JkaW5hdGUgZm9yIHYuIEJlZm9yZSB0aGF0LCBGSVJTVCBXQUxLIGlzXG4gIC8vIGFwcGxpZWQgcmVjdXJzaXZlbHkgdG8gdGhlIGNoaWxkcmVuIG9mIHYsIGFzIHdlbGwgYXMgdGhlIGZ1bmN0aW9uXG4gIC8vIEFQUE9SVElPTi4gQWZ0ZXIgc3BhY2luZyBvdXQgdGhlIGNoaWxkcmVuIGJ5IGNhbGxpbmcgRVhFQ1VURSBTSElGVFMsIHRoZVxuICAvLyBub2RlIHYgaXMgcGxhY2VkIHRvIHRoZSBtaWRwb2ludCBvZiBpdHMgb3V0ZXJtb3N0IGNoaWxkcmVuLlxuICBmdW5jdGlvbiBmaXJzdFdhbGsodikge1xuICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICAgIHNpYmxpbmdzID0gdi5wYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBleGVjdXRlU2hpZnRzKHYpO1xuICAgICAgdmFyIG1pZHBvaW50ID0gKGNoaWxkcmVuWzBdLnogKyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS56KSAvIDI7XG4gICAgICBpZiAodykge1xuICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICAgICAgdi5tID0gdi56IC0gbWlkcG9pbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2LnogPSBtaWRwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHcpIHtcbiAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgIH1cbiAgICB2LnBhcmVudC5BID0gYXBwb3J0aW9uKHYsIHcsIHYucGFyZW50LkEgfHwgc2libGluZ3NbMF0pO1xuICB9XG5cbiAgLy8gQ29tcHV0ZXMgYWxsIHJlYWwgeC1jb29yZGluYXRlcyBieSBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgcmVjdXJzaXZlbHkuXG4gIGZ1bmN0aW9uIHNlY29uZFdhbGsodikge1xuICAgIHYuXy54ID0gdi56ICsgdi5wYXJlbnQubTtcbiAgICB2Lm0gKz0gdi5wYXJlbnQubTtcbiAgfVxuXG4gIC8vIFRoZSBjb3JlIG9mIHRoZSBhbGdvcml0aG0uIEhlcmUsIGEgbmV3IHN1YnRyZWUgaXMgY29tYmluZWQgd2l0aCB0aGVcbiAgLy8gcHJldmlvdXMgc3VidHJlZXMuIFRocmVhZHMgYXJlIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGluc2lkZSBhbmQgb3V0c2lkZVxuICAvLyBjb250b3VycyBvZiB0aGUgbGVmdCBhbmQgcmlnaHQgc3VidHJlZSB1cCB0byB0aGUgaGlnaGVzdCBjb21tb24gbGV2ZWwuIFRoZVxuICAvLyB2ZXJ0aWNlcyB1c2VkIGZvciB0aGUgdHJhdmVyc2FscyBhcmUgdmkrLCB2aS0sIHZvLSwgYW5kIHZvKywgd2hlcmUgdGhlXG4gIC8vIHN1cGVyc2NyaXB0IG8gbWVhbnMgb3V0c2lkZSBhbmQgaSBtZWFucyBpbnNpZGUsIHRoZSBzdWJzY3JpcHQgLSBtZWFucyBsZWZ0XG4gIC8vIHN1YnRyZWUgYW5kICsgbWVhbnMgcmlnaHQgc3VidHJlZS4gRm9yIHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyBhbG9uZyB0aGVcbiAgLy8gY29udG91ciwgd2UgdXNlIHJlc3BlY3RpdmUgdmFyaWFibGVzIHNpKywgc2ktLCBzby0sIGFuZCBzbysuIFdoZW5ldmVyIHR3b1xuICAvLyBub2RlcyBvZiB0aGUgaW5zaWRlIGNvbnRvdXJzIGNvbmZsaWN0LCB3ZSBjb21wdXRlIHRoZSBsZWZ0IG9uZSBvZiB0aGVcbiAgLy8gZ3JlYXRlc3QgdW5jb21tb24gYW5jZXN0b3JzIHVzaW5nIHRoZSBmdW5jdGlvbiBBTkNFU1RPUiBhbmQgY2FsbCBNT1ZFXG4gIC8vIFNVQlRSRUUgdG8gc2hpZnQgdGhlIHN1YnRyZWUgYW5kIHByZXBhcmUgdGhlIHNoaWZ0cyBvZiBzbWFsbGVyIHN1YnRyZWVzLlxuICAvLyBGaW5hbGx5LCB3ZSBhZGQgYSBuZXcgdGhyZWFkIChpZiBuZWNlc3NhcnkpLlxuICBmdW5jdGlvbiBhcHBvcnRpb24odiwgdywgYW5jZXN0b3IpIHtcbiAgICBpZiAodykge1xuICAgICAgdmFyIHZpcCA9IHYsXG4gICAgICAgICAgdm9wID0gdixcbiAgICAgICAgICB2aW0gPSB3LFxuICAgICAgICAgIHZvbSA9IHZpcC5wYXJlbnQuY2hpbGRyZW5bMF0sXG4gICAgICAgICAgc2lwID0gdmlwLm0sXG4gICAgICAgICAgc29wID0gdm9wLm0sXG4gICAgICAgICAgc2ltID0gdmltLm0sXG4gICAgICAgICAgc29tID0gdm9tLm0sXG4gICAgICAgICAgc2hpZnQ7XG4gICAgICB3aGlsZSAodmltID0gbmV4dFJpZ2h0KHZpbSksIHZpcCA9IG5leHRMZWZ0KHZpcCksIHZpbSAmJiB2aXApIHtcbiAgICAgICAgdm9tID0gbmV4dExlZnQodm9tKTtcbiAgICAgICAgdm9wID0gbmV4dFJpZ2h0KHZvcCk7XG4gICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgc2hpZnQgPSB2aW0ueiArIHNpbSAtIHZpcC56IC0gc2lwICsgc2VwYXJhdGlvbih2aW0uXywgdmlwLl8pO1xuICAgICAgICBpZiAoc2hpZnQgPiAwKSB7XG4gICAgICAgICAgbW92ZVN1YnRyZWUobmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLCB2LCBzaGlmdCk7XG4gICAgICAgICAgc2lwICs9IHNoaWZ0O1xuICAgICAgICAgIHNvcCArPSBzaGlmdDtcbiAgICAgICAgfVxuICAgICAgICBzaW0gKz0gdmltLm07XG4gICAgICAgIHNpcCArPSB2aXAubTtcbiAgICAgICAgc29tICs9IHZvbS5tO1xuICAgICAgICBzb3AgKz0gdm9wLm07XG4gICAgICB9XG4gICAgICBpZiAodmltICYmICFuZXh0UmlnaHQodm9wKSkge1xuICAgICAgICB2b3AudCA9IHZpbTtcbiAgICAgICAgdm9wLm0gKz0gc2ltIC0gc29wO1xuICAgICAgfVxuICAgICAgaWYgKHZpcCAmJiAhbmV4dExlZnQodm9tKSkge1xuICAgICAgICB2b20udCA9IHZpcDtcbiAgICAgICAgdm9tLm0gKz0gc2lwIC0gc29tO1xuICAgICAgICBhbmNlc3RvciA9IHY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbmNlc3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpemVOb2RlKG5vZGUpIHtcbiAgICBub2RlLnggKj0gZHg7XG4gICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGR5O1xuICB9XG5cbiAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNlcGFyYXRpb24gPSB4LCB0cmVlKSA6IHNlcGFyYXRpb247XG4gIH07XG5cbiAgdHJlZS5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gZmFsc2UsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogKG5vZGVTaXplID8gbnVsbCA6IFtkeCwgZHldKTtcbiAgfTtcblxuICB0cmVlLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gdHJ1ZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBbZHgsIGR5XSA6IG51bGwpO1xuICB9O1xuXG4gIHJldHVybiB0cmVlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICBub2RlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIGsgPSBwYXJlbnQudmFsdWUgJiYgKHkxIC0geTApIC8gcGFyZW50LnZhbHVlO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLngwID0geDAsIG5vZGUueDEgPSB4MTtcbiAgICBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MCArPSBub2RlLnZhbHVlICogaztcbiAgfVxufVxuIiwiaW1wb3J0IHRyZWVtYXBEaWNlIGZyb20gXCIuL2RpY2UuanNcIjtcbmltcG9ydCB0cmVlbWFwU2xpY2UgZnJvbSBcIi4vc2xpY2UuanNcIjtcblxuZXhwb3J0IHZhciBwaGkgPSAoMSArIE1hdGguc3FydCg1KSkgLyAyO1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcm93cyA9IFtdLFxuICAgICAgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICByb3csXG4gICAgICBub2RlVmFsdWUsXG4gICAgICBpMCA9IDAsXG4gICAgICBpMSA9IDAsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgZHgsIGR5LFxuICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWUsXG4gICAgICBzdW1WYWx1ZSxcbiAgICAgIG1pblZhbHVlLFxuICAgICAgbWF4VmFsdWUsXG4gICAgICBuZXdSYXRpbyxcbiAgICAgIG1pblJhdGlvLFxuICAgICAgYWxwaGEsXG4gICAgICBiZXRhO1xuXG4gIHdoaWxlIChpMCA8IG4pIHtcbiAgICBkeCA9IHgxIC0geDAsIGR5ID0geTEgLSB5MDtcblxuICAgIC8vIEZpbmQgdGhlIG5leHQgbm9uLWVtcHR5IG5vZGUuXG4gICAgZG8gc3VtVmFsdWUgPSBub2Rlc1tpMSsrXS52YWx1ZTsgd2hpbGUgKCFzdW1WYWx1ZSAmJiBpMSA8IG4pO1xuICAgIG1pblZhbHVlID0gbWF4VmFsdWUgPSBzdW1WYWx1ZTtcbiAgICBhbHBoYSA9IE1hdGgubWF4KGR5IC8gZHgsIGR4IC8gZHkpIC8gKHZhbHVlICogcmF0aW8pO1xuICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgbWluUmF0aW8gPSBNYXRoLm1heChtYXhWYWx1ZSAvIGJldGEsIGJldGEgLyBtaW5WYWx1ZSk7XG5cbiAgICAvLyBLZWVwIGFkZGluZyBub2RlcyB3aGlsZSB0aGUgYXNwZWN0IHJhdGlvIG1haW50YWlucyBvciBpbXByb3Zlcy5cbiAgICBmb3IgKDsgaTEgPCBuOyArK2kxKSB7XG4gICAgICBzdW1WYWx1ZSArPSBub2RlVmFsdWUgPSBub2Rlc1tpMV0udmFsdWU7XG4gICAgICBpZiAobm9kZVZhbHVlIDwgbWluVmFsdWUpIG1pblZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgaWYgKG5vZGVWYWx1ZSA+IG1heFZhbHVlKSBtYXhWYWx1ZSA9IG5vZGVWYWx1ZTtcbiAgICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgICBuZXdSYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcbiAgICAgIGlmIChuZXdSYXRpbyA+IG1pblJhdGlvKSB7IHN1bVZhbHVlIC09IG5vZGVWYWx1ZTsgYnJlYWs7IH1cbiAgICAgIG1pblJhdGlvID0gbmV3UmF0aW87XG4gICAgfVxuXG4gICAgLy8gUG9zaXRpb24gYW5kIHJlY29yZCB0aGUgcm93IG9yaWVudGF0aW9uLlxuICAgIHJvd3MucHVzaChyb3cgPSB7dmFsdWU6IHN1bVZhbHVlLCBkaWNlOiBkeCA8IGR5LCBjaGlsZHJlbjogbm9kZXMuc2xpY2UoaTAsIGkxKX0pO1xuICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB2YWx1ZSA/IHkwICs9IGR5ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHkxKTtcbiAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgdmFsdWUgPyB4MCArPSBkeCAqIHN1bVZhbHVlIC8gdmFsdWUgOiB4MSwgeTEpO1xuICAgIHZhbHVlIC09IHN1bVZhbHVlLCBpMCA9IGkxO1xuICB9XG5cbiAgcmV0dXJuIHJvd3M7XG59XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICBmdW5jdGlvbiBzcXVhcmlmeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICBzcXVhcmlmeS5yYXRpbyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gY3VzdG9tKCh4ID0gK3gpID4gMSA/IHggOiAxKTtcbiAgfTtcblxuICByZXR1cm4gc3F1YXJpZnk7XG59KShwaGkpO1xuIiwiaW1wb3J0IHJvdW5kTm9kZSBmcm9tIFwiLi9yb3VuZC5qc1wiO1xuaW1wb3J0IHNxdWFyaWZ5IGZyb20gXCIuL3NxdWFyaWZ5LmpzXCI7XG5pbXBvcnQge3JlcXVpcmVkfSBmcm9tIFwiLi4vYWNjZXNzb3JzLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQsIHtjb25zdGFudFplcm99IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHRpbGUgPSBzcXVhcmlmeSxcbiAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBwYWRkaW5nU3RhY2sgPSBbMF0sXG4gICAgICBwYWRkaW5nSW5uZXIgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nVG9wID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ1JpZ2h0ID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ0JvdHRvbSA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdMZWZ0ID0gY29uc3RhbnRaZXJvO1xuXG4gIGZ1bmN0aW9uIHRyZWVtYXAocm9vdCkge1xuICAgIHJvb3QueDAgPVxuICAgIHJvb3QueTAgPSAwO1xuICAgIHJvb3QueDEgPSBkeDtcbiAgICByb290LnkxID0gZHk7XG4gICAgcm9vdC5lYWNoQmVmb3JlKHBvc2l0aW9uTm9kZSk7XG4gICAgcGFkZGluZ1N0YWNrID0gWzBdO1xuICAgIGlmIChyb3VuZCkgcm9vdC5lYWNoQmVmb3JlKHJvdW5kTm9kZSk7XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBmdW5jdGlvbiBwb3NpdGlvbk5vZGUobm9kZSkge1xuICAgIHZhciBwID0gcGFkZGluZ1N0YWNrW25vZGUuZGVwdGhdLFxuICAgICAgICB4MCA9IG5vZGUueDAgKyBwLFxuICAgICAgICB5MCA9IG5vZGUueTAgKyBwLFxuICAgICAgICB4MSA9IG5vZGUueDEgLSBwLFxuICAgICAgICB5MSA9IG5vZGUueTEgLSBwO1xuICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgbm9kZS54MCA9IHgwO1xuICAgIG5vZGUueTAgPSB5MDtcbiAgICBub2RlLngxID0geDE7XG4gICAgbm9kZS55MSA9IHkxO1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBwID0gcGFkZGluZ1N0YWNrW25vZGUuZGVwdGggKyAxXSA9IHBhZGRpbmdJbm5lcihub2RlKSAvIDI7XG4gICAgICB4MCArPSBwYWRkaW5nTGVmdChub2RlKSAtIHA7XG4gICAgICB5MCArPSBwYWRkaW5nVG9wKG5vZGUpIC0gcDtcbiAgICAgIHgxIC09IHBhZGRpbmdSaWdodChub2RlKSAtIHA7XG4gICAgICB5MSAtPSBwYWRkaW5nQm90dG9tKG5vZGUpIC0gcDtcbiAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIHRpbGUobm9kZSwgeDAsIHkwLCB4MSwgeTEpO1xuICAgIH1cbiAgfVxuXG4gIHRyZWVtYXAucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIXgsIHRyZWVtYXApIDogcm91bmQ7XG4gIH07XG5cbiAgdHJlZW1hcC5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWVtYXApIDogW2R4LCBkeV07XG4gIH07XG5cbiAgdHJlZW1hcC50aWxlID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpbGUgPSByZXF1aXJlZCh4KSwgdHJlZW1hcCkgOiB0aWxlO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyZWVtYXAucGFkZGluZ0lubmVyKHgpLnBhZGRpbmdPdXRlcih4KSA6IHRyZWVtYXAucGFkZGluZ0lubmVyKCk7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ091dGVyID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJlZW1hcC5wYWRkaW5nVG9wKHgpLnBhZGRpbmdSaWdodCh4KS5wYWRkaW5nQm90dG9tKHgpLnBhZGRpbmdMZWZ0KHgpIDogdHJlZW1hcC5wYWRkaW5nVG9wKCk7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nVG9wID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdUb3AgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nVG9wO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ1JpZ2h0ID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdSaWdodCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdSaWdodDtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdCb3R0b20gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0JvdHRvbSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdCb3R0b207XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nTGVmdCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nTGVmdCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdMZWZ0O1xuICB9O1xuXG4gIHJldHVybiB0cmVlbWFwO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICBpLCBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgc3VtLCBzdW1zID0gbmV3IEFycmF5KG4gKyAxKTtcblxuICBmb3IgKHN1bXNbMF0gPSBzdW0gPSBpID0gMDsgaSA8IG47ICsraSkge1xuICAgIHN1bXNbaSArIDFdID0gc3VtICs9IG5vZGVzW2ldLnZhbHVlO1xuICB9XG5cbiAgcGFydGl0aW9uKDAsIG4sIHBhcmVudC52YWx1ZSwgeDAsIHkwLCB4MSwgeTEpO1xuXG4gIGZ1bmN0aW9uIHBhcnRpdGlvbihpLCBqLCB2YWx1ZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBpZiAoaSA+PSBqIC0gMSkge1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIG5vZGUueDAgPSB4MCwgbm9kZS55MCA9IHkwO1xuICAgICAgbm9kZS54MSA9IHgxLCBub2RlLnkxID0geTE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlT2Zmc2V0ID0gc3Vtc1tpXSxcbiAgICAgICAgdmFsdWVUYXJnZXQgPSAodmFsdWUgLyAyKSArIHZhbHVlT2Zmc2V0LFxuICAgICAgICBrID0gaSArIDEsXG4gICAgICAgIGhpID0gaiAtIDE7XG5cbiAgICB3aGlsZSAoayA8IGhpKSB7XG4gICAgICB2YXIgbWlkID0gayArIGhpID4+PiAxO1xuICAgICAgaWYgKHN1bXNbbWlkXSA8IHZhbHVlVGFyZ2V0KSBrID0gbWlkICsgMTtcbiAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgfVxuXG4gICAgaWYgKCh2YWx1ZVRhcmdldCAtIHN1bXNbayAtIDFdKSA8IChzdW1zW2tdIC0gdmFsdWVUYXJnZXQpICYmIGkgKyAxIDwgaykgLS1rO1xuXG4gICAgdmFyIHZhbHVlTGVmdCA9IHN1bXNba10gLSB2YWx1ZU9mZnNldCxcbiAgICAgICAgdmFsdWVSaWdodCA9IHZhbHVlIC0gdmFsdWVMZWZ0O1xuXG4gICAgaWYgKCh4MSAtIHgwKSA+ICh5MSAtIHkwKSkge1xuICAgICAgdmFyIHhrID0gKHgwICogdmFsdWVSaWdodCArIHgxICogdmFsdWVMZWZ0KSAvIHZhbHVlO1xuICAgICAgcGFydGl0aW9uKGksIGssIHZhbHVlTGVmdCwgeDAsIHkwLCB4aywgeTEpO1xuICAgICAgcGFydGl0aW9uKGssIGosIHZhbHVlUmlnaHQsIHhrLCB5MCwgeDEsIHkxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHlrID0gKHkwICogdmFsdWVSaWdodCArIHkxICogdmFsdWVMZWZ0KSAvIHZhbHVlO1xuICAgICAgcGFydGl0aW9uKGksIGssIHZhbHVlTGVmdCwgeDAsIHkwLCB4MSwgeWspO1xuICAgICAgcGFydGl0aW9uKGssIGosIHZhbHVlUmlnaHQsIHgwLCB5aywgeDEsIHkxKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBkaWNlIGZyb20gXCIuL2RpY2UuanNcIjtcbmltcG9ydCBzbGljZSBmcm9tIFwiLi9zbGljZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIChwYXJlbnQuZGVwdGggJiAxID8gc2xpY2UgOiBkaWNlKShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbn1cbiIsImltcG9ydCB0cmVlbWFwRGljZSBmcm9tIFwiLi9kaWNlLmpzXCI7XG5pbXBvcnQgdHJlZW1hcFNsaWNlIGZyb20gXCIuL3NsaWNlLmpzXCI7XG5pbXBvcnQge3BoaSwgc3F1YXJpZnlSYXRpb30gZnJvbSBcIi4vc3F1YXJpZnkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShyYXRpbykge1xuXG4gIGZ1bmN0aW9uIHJlc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIGlmICgocm93cyA9IHBhcmVudC5fc3F1YXJpZnkpICYmIChyb3dzLnJhdGlvID09PSByYXRpbykpIHtcbiAgICAgIHZhciByb3dzLFxuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBub2RlcyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGogPSAtMSxcbiAgICAgICAgICBuLFxuICAgICAgICAgIG0gPSByb3dzLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZTtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgcm93ID0gcm93c1tqXSwgbm9kZXMgPSByb3cuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaSA9IHJvdy52YWx1ZSA9IDAsIG4gPSBub2Rlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHJvdy52YWx1ZSArPSBub2Rlc1tpXS52YWx1ZTtcbiAgICAgICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHkwICs9ICh5MSAtIHkwKSAqIHJvdy52YWx1ZSAvIHZhbHVlKTtcbiAgICAgICAgZWxzZSB0cmVlbWFwU2xpY2Uocm93LCB4MCwgeTAsIHgwICs9ICh4MSAtIHgwKSAqIHJvdy52YWx1ZSAvIHZhbHVlLCB5MSk7XG4gICAgICAgIHZhbHVlIC09IHJvdy52YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Ll9zcXVhcmlmeSA9IHJvd3MgPSBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICAgIHJvd3MucmF0aW8gPSByYXRpbztcbiAgICB9XG4gIH1cblxuICByZXNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICB9O1xuXG4gIHJldHVybiByZXNxdWFyaWZ5O1xufSkocGhpKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhbmdlKSB7XG4gIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gIH07XG59XG4iLCJpbXBvcnQge2h1ZX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IGh1ZSgrYSwgK2IpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciB4ID0gaSh0KTtcbiAgICByZXR1cm4geCAtIDM2MCAqIE1hdGguZmxvb3IoeCAvIDM2MCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKiAoMSAtIHQpICsgYiAqIHQpO1xuICB9O1xufVxuIiwidmFyIHJobyA9IE1hdGguU1FSVDIsXG4gICAgcmhvMiA9IDIsXG4gICAgcmhvNCA9IDQsXG4gICAgZXBzaWxvbjIgPSAxZS0xMjtcblxuZnVuY3Rpb24gY29zaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgKyAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiBzaW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHRhbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbn1cblxuLy8gcDAgPSBbdXgwLCB1eTAsIHcwXVxuLy8gcDEgPSBbdXgxLCB1eTEsIHcxXVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocDAsIHAxKSB7XG4gIHZhciB1eDAgPSBwMFswXSwgdXkwID0gcDBbMV0sIHcwID0gcDBbMl0sXG4gICAgICB1eDEgPSBwMVswXSwgdXkxID0gcDFbMV0sIHcxID0gcDFbMl0sXG4gICAgICBkeCA9IHV4MSAtIHV4MCxcbiAgICAgIGR5ID0gdXkxIC0gdXkwLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgIGksXG4gICAgICBTO1xuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3IgdTAg4omFIHUxLlxuICBpZiAoZDIgPCBlcHNpbG9uMikge1xuICAgIFMgPSBNYXRoLmxvZyh3MSAvIHcwKSAvIHJobztcbiAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdCAqIGR4LFxuICAgICAgICB1eTAgKyB0ICogZHksXG4gICAgICAgIHcwICogTWF0aC5leHAocmhvICogdCAqIFMpXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdlbmVyYWwgY2FzZS5cbiAgZWxzZSB7XG4gICAgdmFyIGQxID0gTWF0aC5zcXJ0KGQyKSxcbiAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXG4gICAgICAgIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gcmhvNCAqIGQyKSAvICgyICogdzEgKiByaG8yICogZDEpLFxuICAgICAgICByMCA9IE1hdGgubG9nKE1hdGguc3FydChiMCAqIGIwICsgMSkgLSBiMCksXG4gICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcbiAgICBTID0gKHIxIC0gcjApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgcyA9IHQgKiBTLFxuICAgICAgICAgIGNvc2hyMCA9IGNvc2gocjApLFxuICAgICAgICAgIHUgPSB3MCAvIChyaG8yICogZDEpICogKGNvc2hyMCAqIHRhbmgocmhvICogcyArIHIwKSAtIHNpbmgocjApKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHUgKiBkeCxcbiAgICAgICAgdXkwICsgdSAqIGR5LFxuICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICBpLmR1cmF0aW9uID0gUyAqIDEwMDA7XG5cbiAgcmV0dXJuIGk7XG59XG4iLCJpbXBvcnQge2hzbCBhcyBjb2xvckhzbH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmZ1bmN0aW9uIGhzbChodWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhzbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhzbChlbmQpKS5oKSxcbiAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaHNsKGh1ZSk7XG5leHBvcnQgdmFyIGhzbExvbmcgPSBoc2woY29sb3IpO1xuIiwiaW1wb3J0IHtsYWIgYXMgY29sb3JMYWJ9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yIGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihzdGFydCwgZW5kKSB7XG4gIHZhciBsID0gY29sb3IoKHN0YXJ0ID0gY29sb3JMYWIoc3RhcnQpKS5sLCAoZW5kID0gY29sb3JMYWIoZW5kKSkubCksXG4gICAgICBhID0gY29sb3Ioc3RhcnQuYSwgZW5kLmEpLFxuICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgc3RhcnQubCA9IGwodCk7XG4gICAgc3RhcnQuYSA9IGEodCk7XG4gICAgc3RhcnQuYiA9IGIodCk7XG4gICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgfTtcbn1cbiIsImltcG9ydCB7aGNsIGFzIGNvbG9ySGNsfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZnVuY3Rpb24gaGNsKGh1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySGNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySGNsKGVuZCkpLmgpLFxuICAgICAgICBjID0gY29sb3Ioc3RhcnQuYywgZW5kLmMpLFxuICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgIHN0YXJ0LmMgPSBjKHQpO1xuICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoY2woaHVlKTtcbmV4cG9ydCB2YXIgaGNsTG9uZyA9IGhjbChjb2xvcik7XG4iLCJpbXBvcnQge2N1YmVoZWxpeCBhcyBjb2xvckN1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeChodWUpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiBjdWJlaGVsaXhHYW1tYSh5KSB7XG4gICAgeSA9ICt5O1xuXG4gICAgZnVuY3Rpb24gY3ViZWhlbGl4KHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9yQ3ViZWhlbGl4KHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9yQ3ViZWhlbGl4KGVuZCkpLmgpLFxuICAgICAgICAgIHMgPSBjb2xvcihzdGFydC5zLCBlbmQucyksXG4gICAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgICBzdGFydC5sID0gbChNYXRoLnBvdyh0LCB5KSk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBjdWJlaGVsaXguZ2FtbWEgPSBjdWJlaGVsaXhHYW1tYTtcblxuICAgIHJldHVybiBjdWJlaGVsaXg7XG4gIH0pKDEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjdWJlaGVsaXgoaHVlKTtcbmV4cG9ydCB2YXIgY3ViZWhlbGl4TG9uZyA9IGN1YmVoZWxpeChjb2xvcik7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwaWVjZXdpc2UoaW50ZXJwb2xhdGUsIHZhbHVlcykge1xuICB2YXIgaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMSwgdiA9IHZhbHVlc1swXSwgSSA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgd2hpbGUgKGkgPCBuKSBJW2ldID0gaW50ZXJwb2xhdGUodiwgdiA9IHZhbHVlc1srK2ldKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGgubWF4KDAsIE1hdGgubWluKG4gLSAxLCBNYXRoLmZsb29yKHQgKj0gbikpKTtcbiAgICByZXR1cm4gSVtpXSh0IC0gaSk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnRlcnBvbGF0b3IsIG4pIHtcbiAgdmFyIHNhbXBsZXMgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBzYW1wbGVzW2ldID0gaW50ZXJwb2xhdG9yKGkgLyAobiAtIDEpKTtcbiAgcmV0dXJuIHNhbXBsZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uKSB7XG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICBhLFxuICAgICAgYiA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgYXJlYSA9IDA7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhID0gYjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICBhcmVhICs9IGFbMV0gKiBiWzBdIC0gYVswXSAqIGJbMV07XG4gIH1cblxuICByZXR1cm4gYXJlYSAvIDI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uKSB7XG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICB4ID0gMCxcbiAgICAgIHkgPSAwLFxuICAgICAgYSxcbiAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgIGMsXG4gICAgICBrID0gMDtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIGEgPSBiO1xuICAgIGIgPSBwb2x5Z29uW2ldO1xuICAgIGsgKz0gYyA9IGFbMF0gKiBiWzFdIC0gYlswXSAqIGFbMV07XG4gICAgeCArPSAoYVswXSArIGJbMF0pICogYztcbiAgICB5ICs9IChhWzFdICsgYlsxXSkgKiBjO1xuICB9XG5cbiAgcmV0dXJuIGsgKj0gMywgW3ggLyBrLCB5IC8ga107XG59XG4iLCIvLyBSZXR1cm5zIHRoZSAyRCBjcm9zcyBwcm9kdWN0IG9mIEFCIGFuZCBBQyB2ZWN0b3JzLCBpLmUuLCB0aGUgei1jb21wb25lbnQgb2Zcbi8vIHRoZSAzRCBjcm9zcyBwcm9kdWN0IGluIGEgcXVhZHJhbnQgSSBDYXJ0ZXNpYW4gY29vcmRpbmF0ZSBzeXN0ZW0gKCt4IGlzXG4vLyByaWdodCwgK3kgaXMgdXApLiBSZXR1cm5zIGEgcG9zaXRpdmUgdmFsdWUgaWYgQUJDIGlzIGNvdW50ZXItY2xvY2t3aXNlLFxuLy8gbmVnYXRpdmUgaWYgY2xvY2t3aXNlLCBhbmQgemVybyBpZiB0aGUgcG9pbnRzIGFyZSBjb2xsaW5lYXIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gIHJldHVybiAoYlswXSAtIGFbMF0pICogKGNbMV0gLSBhWzFdKSAtIChiWzFdIC0gYVsxXSkgKiAoY1swXSAtIGFbMF0pO1xufVxuIiwiaW1wb3J0IGNyb3NzIGZyb20gXCIuL2Nyb3NzLmpzXCI7XG5cbmZ1bmN0aW9uIGxleGljb2dyYXBoaWNPcmRlcihhLCBiKSB7XG4gIHJldHVybiBhWzBdIC0gYlswXSB8fCBhWzFdIC0gYlsxXTtcbn1cblxuLy8gQ29tcHV0ZXMgdGhlIHVwcGVyIGNvbnZleCBodWxsIHBlciB0aGUgbW9ub3RvbmUgY2hhaW4gYWxnb3JpdGhtLlxuLy8gQXNzdW1lcyBwb2ludHMubGVuZ3RoID49IDMsIGlzIHNvcnRlZCBieSB4LCB1bmlxdWUgaW4geS5cbi8vIFJldHVybnMgYW4gYXJyYXkgb2YgaW5kaWNlcyBpbnRvIHBvaW50cyBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuZnVuY3Rpb24gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMocG9pbnRzKSB7XG4gIHZhciBuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgIGluZGV4ZXMgPSBbMCwgMV0sXG4gICAgICBzaXplID0gMjtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IG47ICsraSkge1xuICAgIHdoaWxlIChzaXplID4gMSAmJiBjcm9zcyhwb2ludHNbaW5kZXhlc1tzaXplIC0gMl1dLCBwb2ludHNbaW5kZXhlc1tzaXplIC0gMV1dLCBwb2ludHNbaV0pIDw9IDApIC0tc2l6ZTtcbiAgICBpbmRleGVzW3NpemUrK10gPSBpO1xuICB9XG5cbiAgcmV0dXJuIGluZGV4ZXMuc2xpY2UoMCwgc2l6ZSk7IC8vIHJlbW92ZSBwb3BwZWQgcG9pbnRzXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvaW50cykge1xuICBpZiAoKG4gPSBwb2ludHMubGVuZ3RoKSA8IDMpIHJldHVybiBudWxsO1xuXG4gIHZhciBpLFxuICAgICAgbixcbiAgICAgIHNvcnRlZFBvaW50cyA9IG5ldyBBcnJheShuKSxcbiAgICAgIGZsaXBwZWRQb2ludHMgPSBuZXcgQXJyYXkobik7XG5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc29ydGVkUG9pbnRzW2ldID0gWytwb2ludHNbaV1bMF0sICtwb2ludHNbaV1bMV0sIGldO1xuICBzb3J0ZWRQb2ludHMuc29ydChsZXhpY29ncmFwaGljT3JkZXIpO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBmbGlwcGVkUG9pbnRzW2ldID0gW3NvcnRlZFBvaW50c1tpXVswXSwgLXNvcnRlZFBvaW50c1tpXVsxXV07XG5cbiAgdmFyIHVwcGVySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHNvcnRlZFBvaW50cyksXG4gICAgICBsb3dlckluZGV4ZXMgPSBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhmbGlwcGVkUG9pbnRzKTtcblxuICAvLyBDb25zdHJ1Y3QgdGhlIGh1bGwgcG9seWdvbiwgcmVtb3ZpbmcgcG9zc2libGUgZHVwbGljYXRlIGVuZHBvaW50cy5cbiAgdmFyIHNraXBMZWZ0ID0gbG93ZXJJbmRleGVzWzBdID09PSB1cHBlckluZGV4ZXNbMF0sXG4gICAgICBza2lwUmlnaHQgPSBsb3dlckluZGV4ZXNbbG93ZXJJbmRleGVzLmxlbmd0aCAtIDFdID09PSB1cHBlckluZGV4ZXNbdXBwZXJJbmRleGVzLmxlbmd0aCAtIDFdLFxuICAgICAgaHVsbCA9IFtdO1xuXG4gIC8vIEFkZCB1cHBlciBodWxsIGluIHJpZ2h0LXRvLWwgb3JkZXIuXG4gIC8vIFRoZW4gYWRkIGxvd2VyIGh1bGwgaW4gbGVmdC10by1yaWdodCBvcmRlci5cbiAgZm9yIChpID0gdXBwZXJJbmRleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBodWxsLnB1c2gocG9pbnRzW3NvcnRlZFBvaW50c1t1cHBlckluZGV4ZXNbaV1dWzJdXSk7XG4gIGZvciAoaSA9ICtza2lwTGVmdDsgaSA8IGxvd2VySW5kZXhlcy5sZW5ndGggLSBza2lwUmlnaHQ7ICsraSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbbG93ZXJJbmRleGVzW2ldXVsyXV0pO1xuXG4gIHJldHVybiBodWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9seWdvbiwgcG9pbnQpIHtcbiAgdmFyIG4gPSBwb2x5Z29uLmxlbmd0aCxcbiAgICAgIHAgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgIHggPSBwb2ludFswXSwgeSA9IHBvaW50WzFdLFxuICAgICAgeDAgPSBwWzBdLCB5MCA9IHBbMV0sXG4gICAgICB4MSwgeTEsXG4gICAgICBpbnNpZGUgPSBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgIHAgPSBwb2x5Z29uW2ldLCB4MSA9IHBbMF0sIHkxID0gcFsxXTtcbiAgICBpZiAoKCh5MSA+IHkpICE9PSAoeTAgPiB5KSkgJiYgKHggPCAoeDAgLSB4MSkgKiAoeSAtIHkxKSAvICh5MCAtIHkxKSArIHgxKSkgaW5zaWRlID0gIWluc2lkZTtcbiAgICB4MCA9IHgxLCB5MCA9IHkxO1xuICB9XG5cbiAgcmV0dXJuIGluc2lkZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvbHlnb24pIHtcbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBwb2x5Z29uLmxlbmd0aCxcbiAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgIHhhLFxuICAgICAgeWEsXG4gICAgICB4YiA9IGJbMF0sXG4gICAgICB5YiA9IGJbMV0sXG4gICAgICBwZXJpbWV0ZXIgPSAwO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgeGEgPSB4YjtcbiAgICB5YSA9IHliO1xuICAgIGIgPSBwb2x5Z29uW2ldO1xuICAgIHhiID0gYlswXTtcbiAgICB5YiA9IGJbMV07XG4gICAgeGEgLT0geGI7XG4gICAgeWEgLT0geWI7XG4gICAgcGVyaW1ldGVyICs9IE1hdGguc3FydCh4YSAqIHhhICsgeWEgKiB5YSk7XG4gIH1cblxuICByZXR1cm4gcGVyaW1ldGVyO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpO1xufVxuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tVW5pZm9ybShzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tVW5pZm9ybShtaW4sIG1heCkge1xuICAgIG1pbiA9IG1pbiA9PSBudWxsID8gMCA6ICttaW47XG4gICAgbWF4ID0gbWF4ID09IG51bGwgPyAxIDogK21heDtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgbWF4ID0gbWluLCBtaW4gPSAwO1xuICAgIGVsc2UgbWF4IC09IG1pbjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc291cmNlKCkgKiBtYXggKyBtaW47XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbVVuaWZvcm0uc291cmNlID0gc291cmNlUmFuZG9tVW5pZm9ybTtcblxuICByZXR1cm4gcmFuZG9tVW5pZm9ybTtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Ob3JtYWwobXUsIHNpZ21hKSB7XG4gICAgdmFyIHgsIHI7XG4gICAgbXUgPSBtdSA9PSBudWxsID8gMCA6ICttdTtcbiAgICBzaWdtYSA9IHNpZ21hID09IG51bGwgPyAxIDogK3NpZ21hO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB5O1xuXG4gICAgICAvLyBJZiBhdmFpbGFibGUsIHVzZSB0aGUgc2Vjb25kIHByZXZpb3VzbHktZ2VuZXJhdGVkIHVuaWZvcm0gcmFuZG9tLlxuICAgICAgaWYgKHggIT0gbnVsbCkgeSA9IHgsIHggPSBudWxsO1xuXG4gICAgICAvLyBPdGhlcndpc2UsIGdlbmVyYXRlIGEgbmV3IHggYW5kIHkuXG4gICAgICBlbHNlIGRvIHtcbiAgICAgICAgeCA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHkgPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICAgIH0gd2hpbGUgKCFyIHx8IHIgPiAxKTtcblxuICAgICAgcmV0dXJuIG11ICsgc2lnbWEgKiB5ICogTWF0aC5zcXJ0KC0yICogTWF0aC5sb2cocikgLyByKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tTm9ybWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbU5vcm1hbDtcblxuICByZXR1cm4gcmFuZG9tTm9ybWFsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5pbXBvcnQgbm9ybWFsIGZyb20gXCIuL25vcm1hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTG9nTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Mb2dOb3JtYWwoKSB7XG4gICAgdmFyIHJhbmRvbU5vcm1hbCA9IG5vcm1hbC5zb3VyY2Uoc291cmNlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNYXRoLmV4cChyYW5kb21Ob3JtYWwoKSk7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUxvZ05vcm1hbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21Mb2dOb3JtYWw7XG5cbiAgcmV0dXJuIHJhbmRvbUxvZ05vcm1hbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tSXJ3aW5IYWxsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21JcndpbkhhbGwobikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIHN1bSA9IDAsIGkgPSAwOyBpIDwgbjsgKytpKSBzdW0gKz0gc291cmNlKCk7XG4gICAgICByZXR1cm4gc3VtO1xuICAgIH07XG4gIH1cblxuICByYW5kb21JcndpbkhhbGwuc291cmNlID0gc291cmNlUmFuZG9tSXJ3aW5IYWxsO1xuXG4gIHJldHVybiByYW5kb21JcndpbkhhbGw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcbmltcG9ydCBpcndpbkhhbGwgZnJvbSBcIi4vaXJ3aW5IYWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21CYXRlcyhzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tQmF0ZXMobikge1xuICAgIHZhciByYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGwuc291cmNlKHNvdXJjZSkobik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tQmF0ZXMuc291cmNlID0gc291cmNlUmFuZG9tQmF0ZXM7XG5cbiAgcmV0dXJuIHJhbmRvbUJhdGVzO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21FeHBvbmVudGlhbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tRXhwb25lbnRpYWwobGFtYmRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmxvZygxIC0gc291cmNlKCkpIC8gbGFtYmRhO1xuICAgIH07XG4gIH1cblxuICByYW5kb21FeHBvbmVudGlhbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21FeHBvbmVudGlhbDtcblxuICByZXR1cm4gcmFuZG9tRXhwb25lbnRpYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBpbml0UmFuZ2UoZG9tYWluLCByYW5nZSkge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5yYW5nZShkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLnJhbmdlKHJhbmdlKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0SW50ZXJwb2xhdG9yKGRvbWFpbiwgaW50ZXJwb2xhdG9yKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLmludGVycG9sYXRvcihkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLmludGVycG9sYXRvcihpbnRlcnBvbGF0b3IpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJpbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuXG5leHBvcnQgdmFyIGltcGxpY2l0ID0ge25hbWU6IFwiaW1wbGljaXRcIn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGluYWwoKSB7XG4gIHZhciBpbmRleCA9IG1hcCgpLFxuICAgICAgZG9tYWluID0gW10sXG4gICAgICByYW5nZSA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcbiAgICBpZiAoIWkpIHtcbiAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbWFwKCk7XG4gICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoZG9tYWluLCByYW5nZSkudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiaW1wb3J0IHtyYW5nZSBhcyBzZXF1ZW5jZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IG9yZGluYWwgZnJvbSBcIi4vb3JkaW5hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiYW5kKCkge1xuICB2YXIgc2NhbGUgPSBvcmRpbmFsKCkudW5rbm93bih1bmRlZmluZWQpLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgb3JkaW5hbFJhbmdlID0gc2NhbGUucmFuZ2UsXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHN0ZXAsXG4gICAgICBiYW5kd2lkdGgsXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgIHBhZGRpbmdPdXRlciA9IDAsXG4gICAgICBhbGlnbiA9IDAuNTtcblxuICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gZG9tYWluKCkubGVuZ3RoLFxuICAgICAgICByZXZlcnNlID0gcmFuZ2VbMV0gPCByYW5nZVswXSxcbiAgICAgICAgc3RhcnQgPSByYW5nZVtyZXZlcnNlIC0gMF0sXG4gICAgICAgIHN0b3AgPSByYW5nZVsxIC0gcmV2ZXJzZV07XG4gICAgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMSwgbiAtIHBhZGRpbmdJbm5lciArIHBhZGRpbmdPdXRlciAqIDIpO1xuICAgIGlmIChyb3VuZCkgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgc3RhcnQgKz0gKHN0b3AgLSBzdGFydCAtIHN0ZXAgKiAobiAtIHBhZGRpbmdJbm5lcikpICogYWxpZ247XG4gICAgYmFuZHdpZHRoID0gc3RlcCAqICgxIC0gcGFkZGluZ0lubmVyKTtcbiAgICBpZiAocm91bmQpIHN0YXJ0ID0gTWF0aC5yb3VuZChzdGFydCksIGJhbmR3aWR0aCA9IE1hdGgucm91bmQoYmFuZHdpZHRoKTtcbiAgICB2YXIgdmFsdWVzID0gc2VxdWVuY2UobikubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7IH0pO1xuICAgIHJldHVybiBvcmRpbmFsUmFuZ2UocmV2ZXJzZSA/IHZhbHVlcy5yZXZlcnNlKCkgOiB2YWx1ZXMpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gWytfWzBdLCArX1sxXV0sIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gWytfWzBdLCArX1sxXV0sIHJvdW5kID0gdHJ1ZSwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmJhbmR3aWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kd2lkdGg7XG4gIH07XG5cbiAgc2NhbGUuc3RlcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdGVwO1xuICB9O1xuXG4gIHNjYWxlLnJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISFfLCByZXNjYWxlKCkpIDogcm91bmQ7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1pbigxLCBwYWRkaW5nT3V0ZXIgPSArXyksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ0lubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWluKDEsIF8pLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nT3V0ZXIgPSArXywgcmVzY2FsZSgpKSA6IHBhZGRpbmdPdXRlcjtcbiAgfTtcblxuICBzY2FsZS5hbGlnbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbGlnbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IGFsaWduO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZChkb21haW4oKSwgcmFuZ2UpXG4gICAgICAgIC5yb3VuZChyb3VuZClcbiAgICAgICAgLnBhZGRpbmdJbm5lcihwYWRkaW5nSW5uZXIpXG4gICAgICAgIC5wYWRkaW5nT3V0ZXIocGFkZGluZ091dGVyKVxuICAgICAgICAuYWxpZ24oYWxpZ24pO1xuICB9O1xuXG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkocmVzY2FsZSgpLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBwb2ludGlzaChzY2FsZSkge1xuICB2YXIgY29weSA9IHNjYWxlLmNvcHk7XG5cbiAgc2NhbGUucGFkZGluZyA9IHNjYWxlLnBhZGRpbmdPdXRlcjtcbiAgZGVsZXRlIHNjYWxlLnBhZGRpbmdJbm5lcjtcbiAgZGVsZXRlIHNjYWxlLnBhZGRpbmdPdXRlcjtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHBvaW50aXNoKGNvcHkoKSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHJldHVybiBwb2ludGlzaChiYW5kLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFkZGluZ0lubmVyKDEpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZSBhcyBpbnRlcnBvbGF0ZVZhbHVlLCBpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSb3VuZH0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge21hcCwgc2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbnZhciB1bml0ID0gWzAsIDFdO1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICByZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKGEsIGIpIHtcbiAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxuICAgICAgOiBjb25zdGFudChpc05hTihiKSA/IE5hTiA6IDAuNSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wZXIoZG9tYWluKSB7XG4gIHZhciBhID0gZG9tYWluWzBdLCBiID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSwgdDtcbiAgaWYgKGEgPiBiKSB0ID0gYSwgYSA9IGIsIGIgPSB0O1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5tYXgoYSwgTWF0aC5taW4oYiwgeCkpOyB9O1xufVxuXG4vLyBub3JtYWxpemUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIGludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmFuZ2UgdmFsdWUgeCBpbiBbYSxiXS5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IG5vcm1hbGl6ZShkMSwgZDApLCByMCA9IGludGVycG9sYXRlKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBub3JtYWxpemUoZDAsIGQxKSwgcjAgPSBpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBqID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDEsXG4gICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgciA9IG5ldyBBcnJheShqKSxcbiAgICAgIGkgPSAtMTtcblxuICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgaWYgKGRvbWFpbltqXSA8IGRvbWFpblswXSkge1xuICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcbiAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG5cbiAgd2hpbGUgKCsraSA8IGopIHtcbiAgICBkW2ldID0gbm9ybWFsaXplKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IGludGVycG9sYXRlKHJhbmdlW2ldLCByYW5nZVtpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICB2YXIgaSA9IGJpc2VjdChkb21haW4sIHgsIDEsIGopIC0gMTtcbiAgICByZXR1cm4gcltpXShkW2ldKHgpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAucmFuZ2Uoc291cmNlLnJhbmdlKCkpXG4gICAgICAuaW50ZXJwb2xhdGUoc291cmNlLmludGVycG9sYXRlKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpXG4gICAgICAudW5rbm93bihzb3VyY2UudW5rbm93bigpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgZG9tYWluID0gdW5pdCxcbiAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHVudHJhbnNmb3JtLFxuICAgICAgdW5rbm93bixcbiAgICAgIGNsYW1wID0gaWRlbnRpdHksXG4gICAgICBwaWVjZXdpc2UsXG4gICAgICBvdXRwdXQsXG4gICAgICBpbnB1dDtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHBpZWNld2lzZSA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgcmFuZ2UsIGludGVycG9sYXRlKSkpKHRyYW5zZm9ybShjbGFtcCh4KSkpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBjbGFtcCh1bnRyYW5zZm9ybSgoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4ubWFwKHRyYW5zZm9ybSksIGludGVycG9sYXRlTnVtYmVyKSkpKHkpKSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IG1hcC5jYWxsKF8sIG51bWJlciksIGNsYW1wID09PSBpZGVudGl0eSB8fCAoY2xhbXAgPSBjbGFtcGVyKGRvbWFpbikpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IHNsaWNlLmNhbGwoXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gXyA/IGNsYW1wZXIoZG9tYWluKSA6IGlkZW50aXR5LCBzY2FsZSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKCkodHJhbnNmb3JtLCB1bnRyYW5zZm9ybSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weSwgaWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGlkZW50aXR5LCBpZGVudGl0eSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiaW1wb3J0IHttYXB9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpZGVudGl0eShkb21haW4pIHtcbiAgdmFyIHVua25vd247XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IHg7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBzY2FsZTtcblxuICBzY2FsZS5kb21haW4gPSBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaWRlbnRpdHkoZG9tYWluKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGRvbWFpbiA9IGFyZ3VtZW50cy5sZW5ndGggPyBtYXAuY2FsbChkb21haW4sIG51bWJlcikgOiBbMCwgMV07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkb21haW4sIGludGVydmFsKSB7XG4gIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpO1xuXG4gIHZhciBpMCA9IDAsXG4gICAgICBpMSA9IGRvbWFpbi5sZW5ndGggLSAxLFxuICAgICAgeDAgPSBkb21haW5baTBdLFxuICAgICAgeDEgPSBkb21haW5baTFdLFxuICAgICAgdDtcblxuICBpZiAoeDEgPCB4MCkge1xuICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xuICAgIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICB9XG5cbiAgZG9tYWluW2kwXSA9IGludGVydmFsLmZsb29yKHgwKTtcbiAgZG9tYWluW2kxXSA9IGludGVydmFsLmNlaWwoeDEpO1xuICByZXR1cm4gZG9tYWluO1xufVxuIiwiaW1wb3J0IHt0aWNrc30gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuaW1wb3J0IG5pY2UgZnJvbSBcIi4vbmljZVwiO1xuaW1wb3J0IHtjb3B5LCB0cmFuc2Zvcm1lcn0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtTG9nKHgpIHtcbiAgcmV0dXJuIE1hdGgubG9nKHgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1FeHAoeCkge1xuICByZXR1cm4gTWF0aC5leHAoeCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUxvZ24oeCkge1xuICByZXR1cm4gLU1hdGgubG9nKC14KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtRXhwbih4KSB7XG4gIHJldHVybiAtTWF0aC5leHAoLXgpO1xufVxuXG5mdW5jdGlvbiBwb3cxMCh4KSB7XG4gIHJldHVybiBpc0Zpbml0ZSh4KSA/ICsoXCIxZVwiICsgeCkgOiB4IDwgMCA/IDAgOiB4O1xufVxuXG5mdW5jdGlvbiBwb3dwKGJhc2UpIHtcbiAgcmV0dXJuIGJhc2UgPT09IDEwID8gcG93MTBcbiAgICAgIDogYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5leHBcbiAgICAgIDogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5wb3coYmFzZSwgeCk7IH07XG59XG5cbmZ1bmN0aW9uIGxvZ3AoYmFzZSkge1xuICByZXR1cm4gYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5sb2dcbiAgICAgIDogYmFzZSA9PT0gMTAgJiYgTWF0aC5sb2cxMFxuICAgICAgfHwgYmFzZSA9PT0gMiAmJiBNYXRoLmxvZzJcbiAgICAgIHx8IChiYXNlID0gTWF0aC5sb2coYmFzZSksIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubG9nKHgpIC8gYmFzZTsgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZmxlY3QoZikge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAtZigteCk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2dnaXNoKHRyYW5zZm9ybSkge1xuICB2YXIgc2NhbGUgPSB0cmFuc2Zvcm0odHJhbnNmb3JtTG9nLCB0cmFuc2Zvcm1FeHApLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgYmFzZSA9IDEwLFxuICAgICAgbG9ncyxcbiAgICAgIHBvd3M7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBsb2dzID0gbG9ncChiYXNlKSwgcG93cyA9IHBvd3AoYmFzZSk7XG4gICAgaWYgKGRvbWFpbigpWzBdIDwgMCkge1xuICAgICAgbG9ncyA9IHJlZmxlY3QobG9ncyksIHBvd3MgPSByZWZsZWN0KHBvd3MpO1xuICAgICAgdHJhbnNmb3JtKHRyYW5zZm9ybUxvZ24sIHRyYW5zZm9ybUV4cG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm0odHJhbnNmb3JtTG9nLCB0cmFuc2Zvcm1FeHApO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGJhc2UgPSArXywgcmVzY2FsZSgpKSA6IGJhc2U7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICB1ID0gZFswXSxcbiAgICAgICAgdiA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgcjtcblxuICAgIGlmIChyID0gdiA8IHUpIGkgPSB1LCB1ID0gdiwgdiA9IGk7XG5cbiAgICB2YXIgaSA9IGxvZ3ModSksXG4gICAgICAgIGogPSBsb2dzKHYpLFxuICAgICAgICBwLFxuICAgICAgICBrLFxuICAgICAgICB0LFxuICAgICAgICBuID0gY291bnQgPT0gbnVsbCA/IDEwIDogK2NvdW50LFxuICAgICAgICB6ID0gW107XG5cbiAgICBpZiAoIShiYXNlICUgMSkgJiYgaiAtIGkgPCBuKSB7XG4gICAgICBpID0gTWF0aC5yb3VuZChpKSAtIDEsIGogPSBNYXRoLnJvdW5kKGopICsgMTtcbiAgICAgIGlmICh1ID4gMCkgZm9yICg7IGkgPCBqOyArK2kpIHtcbiAgICAgICAgZm9yIChrID0gMSwgcCA9IHBvd3MoaSk7IGsgPCBiYXNlOyArK2spIHtcbiAgICAgICAgICB0ID0gcCAqIGs7XG4gICAgICAgICAgaWYgKHQgPCB1KSBjb250aW51ZTtcbiAgICAgICAgICBpZiAodCA+IHYpIGJyZWFrO1xuICAgICAgICAgIHoucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGZvciAoOyBpIDwgajsgKytpKSB7XG4gICAgICAgIGZvciAoayA9IGJhc2UgLSAxLCBwID0gcG93cyhpKTsgayA+PSAxOyAtLWspIHtcbiAgICAgICAgICB0ID0gcCAqIGs7XG4gICAgICAgICAgaWYgKHQgPCB1KSBjb250aW51ZTtcbiAgICAgICAgICBpZiAodCA+IHYpIGJyZWFrO1xuICAgICAgICAgIHoucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB6ID0gdGlja3MoaSwgaiwgTWF0aC5taW4oaiAtIGksIG4pKS5tYXAocG93cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHIgPyB6LnJldmVyc2UoKSA6IHo7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICBpZiAoc3BlY2lmaWVyID09IG51bGwpIHNwZWNpZmllciA9IGJhc2UgPT09IDEwID8gXCIuMGVcIiA6IFwiLFwiO1xuICAgIGlmICh0eXBlb2Ygc3BlY2lmaWVyICE9PSBcImZ1bmN0aW9uXCIpIHNwZWNpZmllciA9IGZvcm1hdChzcGVjaWZpZXIpO1xuICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG4gICAgdmFyIGsgPSBNYXRoLm1heCgxLCBiYXNlICogY291bnQgLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7IC8vIFRPRE8gZmFzdCBlc3RpbWF0ZT9cbiAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIGkgPSBkIC8gcG93cyhNYXRoLnJvdW5kKGxvZ3MoZCkpKTtcbiAgICAgIGlmIChpICogYmFzZSA8IGJhc2UgLSAwLjUpIGkgKj0gYmFzZTtcbiAgICAgIHJldHVybiBpIDw9IGsgPyBzcGVjaWZpZXIoZCkgOiBcIlwiO1xuICAgIH07XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4obmljZShkb21haW4oKSwge1xuICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBvd3MoTWF0aC5mbG9vcihsb2dzKHgpKSk7IH0sXG4gICAgICBjZWlsOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguY2VpbChsb2dzKHgpKSk7IH1cbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhclwiO1xuaW1wb3J0IHtjb3B5LCB0cmFuc2Zvcm1lcn0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtU3ltbG9nKGMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gTWF0aC5zaWduKHgpICogTWF0aC5sb2cxcChNYXRoLmFicyh4IC8gYykpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TeW1leHAoYykge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBNYXRoLnNpZ24oeCkgKiBNYXRoLmV4cG0xKE1hdGguYWJzKHgpKSAqIGM7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzeW1sb2dpc2godHJhbnNmb3JtKSB7XG4gIHZhciBjID0gMSwgc2NhbGUgPSB0cmFuc2Zvcm0odHJhbnNmb3JtU3ltbG9nKGMpLCB0cmFuc2Zvcm1TeW1leHAoYykpO1xuXG4gIHNjYWxlLmNvbnN0YW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJhbnNmb3JtKHRyYW5zZm9ybVN5bWxvZyhjID0gK18pLCB0cmFuc2Zvcm1TeW1leHAoYykpIDogYztcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzeW1sb2coKSkuY29uc3RhbnQoc2NhbGUuY29uc3RhbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCB7Y29weSwgaWRlbnRpdHksIHRyYW5zZm9ybWVyfSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Qb3coZXhwb25lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGV4cG9uZW50KSA6IE1hdGgucG93KHgsIGV4cG9uZW50KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3FydCh4KSB7XG4gIHJldHVybiB4IDwgMCA/IC1NYXRoLnNxcnQoLXgpIDogTWF0aC5zcXJ0KHgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TcXVhcmUoeCkge1xuICByZXR1cm4geCA8IDAgPyAteCAqIHggOiB4ICogeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvd2lzaCh0cmFuc2Zvcm0pIHtcbiAgdmFyIHNjYWxlID0gdHJhbnNmb3JtKGlkZW50aXR5LCBpZGVudGl0eSksXG4gICAgICBleHBvbmVudCA9IDE7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICByZXR1cm4gZXhwb25lbnQgPT09IDEgPyB0cmFuc2Zvcm0oaWRlbnRpdHksIGlkZW50aXR5KVxuICAgICAgICA6IGV4cG9uZW50ID09PSAwLjUgPyB0cmFuc2Zvcm0odHJhbnNmb3JtU3FydCwgdHJhbnNmb3JtU3F1YXJlKVxuICAgICAgICA6IHRyYW5zZm9ybSh0cmFuc2Zvcm1Qb3coZXhwb25lbnQpLCB0cmFuc2Zvcm1Qb3coMSAvIGV4cG9uZW50KSk7XG4gIH1cblxuICBzY2FsZS5leHBvbmVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHBvbmVudCA9ICtfLCByZXNjYWxlKCkpIDogZXhwb25lbnQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBvdygpIHtcbiAgdmFyIHNjYWxlID0gcG93aXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgcG93KCkpLmV4cG9uZW50KHNjYWxlLmV4cG9uZW50KCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcXJ0KCkge1xuICByZXR1cm4gcG93LmFwcGx5KG51bGwsIGFyZ3VtZW50cykuZXhwb25lbnQoMC41KTtcbn1cbiIsImltcG9ydCB7YXNjZW5kaW5nLCBiaXNlY3QsIHF1YW50aWxlIGFzIHRocmVzaG9sZH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhbnRpbGUoKSB7XG4gIHZhciBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB0aHJlc2hvbGRzID0gW10sXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIGkgPSAwLCBuID0gTWF0aC5tYXgoMSwgcmFuZ2UubGVuZ3RoKTtcbiAgICB0aHJlc2hvbGRzID0gbmV3IEFycmF5KG4gLSAxKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGhyZXNob2xkc1tpIC0gMV0gPSB0aHJlc2hvbGQoZG9tYWluLCBpIC8gbik7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IHJhbmdlW2Jpc2VjdCh0aHJlc2hvbGRzLCB4KV07XG4gIH1cblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl0gOiBbXG4gICAgICBpID4gMCA/IHRocmVzaG9sZHNbaSAtIDFdIDogZG9tYWluWzBdLFxuICAgICAgaSA8IHRocmVzaG9sZHMubGVuZ3RoID8gdGhyZXNob2xkc1tpXSA6IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV1cbiAgICBdO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IF8ubGVuZ3RoLCBkOyBpIDwgbjsgKytpKSBpZiAoZCA9IF9baV0sIGQgIT0gbnVsbCAmJiAhaXNOYU4oZCA9ICtkKSkgZG9tYWluLnB1c2goZCk7XG4gICAgZG9tYWluLnNvcnQoYXNjZW5kaW5nKTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhyZXNob2xkcy5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVhbnRpbGUoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YW50aXplKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgbiA9IDEsXG4gICAgICBkb21haW4gPSBbMC41XSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPD0geCA/IHJhbmdlW2Jpc2VjdChkb21haW4sIHgsIDAsIG4pXSA6IHVua25vd247XG4gIH1cblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBpID0gLTE7XG4gICAgZG9tYWluID0gbmV3IEFycmF5KG4pO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkb21haW5baV0gPSAoKGkgKyAxKSAqIHgxIC0gKGkgLSBuKSAqIHgwKSAvIChuICsgMSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF0sIHgxID0gK19bMV0sIHJlc2NhbGUoKSkgOiBbeDAsIHgxXTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChuID0gKHJhbmdlID0gc2xpY2UuY2FsbChfKSkubGVuZ3RoIC0gMSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICByZXR1cm4gaSA8IDAgPyBbTmFOLCBOYU5dXG4gICAgICAgIDogaSA8IDEgPyBbeDAsIGRvbWFpblswXV1cbiAgICAgICAgOiBpID49IG4gPyBbZG9tYWluW24gLSAxXSwgeDFdXG4gICAgICAgIDogW2RvbWFpbltpIC0gMV0sIGRvbWFpbltpXV07XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUudGhyZXNob2xkcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHF1YW50aXplKClcbiAgICAgICAgLmRvbWFpbihbeDAsIHgxXSlcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KGxpbmVhcmlzaChzY2FsZSksIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyZXNob2xkKCkge1xuICB2YXIgZG9tYWluID0gWzAuNV0sXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHVua25vd24sXG4gICAgICBuID0gMTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPD0geCA/IHJhbmdlW2Jpc2VjdChkb21haW4sIHgsIDAsIG4pXSA6IHVua25vd247XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gc2xpY2UuY2FsbChfKSwgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCAtIDEpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhyZXNob2xkKClcbiAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cbiIsInZhciB0MCA9IG5ldyBEYXRlLFxuICAgIHQxID0gbmV3IERhdGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgPyBuZXcgRGF0ZSA6IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW10sIHByZXZpb3VzO1xuICAgIHN0YXJ0ID0gaW50ZXJ2YWwuY2VpbChzdGFydCk7XG4gICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgIGRvIHJhbmdlLnB1c2gocHJldmlvdXMgPSBuZXcgRGF0ZSgrc3RhcnQpKSwgb2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCk7XG4gICAgd2hpbGUgKHByZXZpb3VzIDwgc3RhcnQgJiYgc3RhcnQgPCBzdG9wKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkgZGF0ZS5zZXRUaW1lKGRhdGUgLSAxKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB0MC5zZXRUaW1lKCtzdGFydCksIHQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDApLCBmbG9vcmkodDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAsIHQxKSk7XG4gICAgfTtcblxuICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgIDogaW50ZXJ2YWwuZmlsdGVyKGZpZWxkXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGludGVydmFsO1xufVxuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciB5ZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB5ZWFyO1xuZXhwb3J0IHZhciB5ZWFycyA9IHllYXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIG1vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbnRoO1xuZXhwb3J0IHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcbiIsImV4cG9ydCB2YXIgZHVyYXRpb25TZWNvbmQgPSAxZTM7XG5leHBvcnQgdmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xuZXhwb3J0IHZhciBkdXJhdGlvbkhvdXIgPSAzNmU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbkRheSA9IDg2NGU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxuZnVuY3Rpb24gd2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gKGRhdGUuZ2V0RGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBzdW5kYXkgPSB3ZWVrZGF5KDApO1xuZXhwb3J0IHZhciBtb25kYXkgPSB3ZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB0dWVzZGF5ID0gd2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5ID0gd2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuZXhwb3J0IHZhciBmcmlkYXkgPSB3ZWVrZGF5KDUpO1xuZXhwb3J0IHZhciBzYXR1cmRheSA9IHdlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgc3VuZGF5cyA9IHN1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgbW9uZGF5cyA9IG1vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdHVlc2RheXMgPSB0dWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgZnJpZGF5cyA9IGZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgZGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGF5O1xuZXhwb3J0IHZhciBkYXlzID0gZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCAtIGRhdGUuZ2V0TWludXRlcygpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIG1pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtaW51dGU7XG5leHBvcnQgdmFyIG1pbnV0ZXMgPSBtaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5fSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgdXRjRGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNEYXk7XG5leHBvcnQgdmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld0RhdGUoeSwgbSwgZCkge1xuICByZXR1cm4ge3k6IHksIG06IG0sIGQ6IGQsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0SG91cjEyLFxuICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0TW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICBcInFcIjogZm9ybWF0UXVhcnRlcixcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciB1dGNGb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFVUQ1Nob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRVVENNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcInFcIjogZm9ybWF0VVRDUXVhcnRlcixcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICBcIklcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogcGFyc2VNb250aE51bWJlcixcbiAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICBcInFcIjogcGFyc2VRdWFydGVyLFxuICAgIFwiUVwiOiBwYXJzZVVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IHBhcnNlU2Vjb25kcyxcbiAgICBcInVcIjogcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBwYXJzZVdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IHBhcnNlV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IHBhcnNlTG9jYWxlRGF0ZSxcbiAgICBcIlhcIjogcGFyc2VMb2NhbGVUaW1lLFxuICAgIFwieVwiOiBwYXJzZVllYXIsXG4gICAgXCJZXCI6IHBhcnNlRnVsbFllYXIsXG4gICAgXCJaXCI6IHBhcnNlWm9uZSxcbiAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIC8vIFRoZXNlIHJlY3Vyc2l2ZSBkaXJlY3RpdmUgZGVmaW5pdGlvbnMgbXVzdCBiZSBkZWZlcnJlZC5cbiAgZm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgZm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIHV0Y0Zvcm1hdHMpO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIsIGZvcm1hdHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIHN0cmluZyA9IFtdLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBqID0gMCxcbiAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgICBjLFxuICAgICAgICAgIHBhZCxcbiAgICAgICAgICBmb3JtYXQ7XG5cbiAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKTtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHNwZWNpZmllci5jaGFyQ29kZUF0KGkpID09PSAzNykge1xuICAgICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgICAgaWYgKChwYWQgPSBwYWRzW2MgPSBzcGVjaWZpZXIuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpO1xuICAgICAgICAgIGVsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgIGlmIChmb3JtYXQgPSBmb3JtYXRzW2NdKSBjID0gZm9ybWF0KGRhdGUsIHBhZCk7XG4gICAgICAgICAgc3RyaW5nLnB1c2goYyk7XG4gICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1BhcnNlKHNwZWNpZmllciwgWikge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciBkID0gbmV3RGF0ZSgxOTAwLCB1bmRlZmluZWQsIDEpLFxuICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKSxcbiAgICAgICAgICB3ZWVrLCBkYXk7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gSWYgYSBVTklYIHRpbWVzdGFtcCBpcyBzcGVjaWZpZWQsIHJldHVybiBpdC5cbiAgICAgIGlmIChcIlFcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5RKTtcbiAgICAgIGlmIChcInNcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5zICogMTAwMCArIChcIkxcIiBpbiBkID8gZC5MIDogMCkpO1xuXG4gICAgICAvLyBJZiB0aGlzIGlzIHV0Y1BhcnNlLCBuZXZlciB1c2UgdGhlIGxvY2FsIHRpbWV6b25lLlxuICAgICAgaWYgKFogJiYgIShcIlpcIiBpbiBkKSkgZC5aID0gMDtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBJZiB0aGUgbW9udGggd2FzIG5vdCBzcGVjaWZpZWQsIGluaGVyaXQgZnJvbSB0aGUgcXVhcnRlci5cbiAgICAgIGlmIChkLm0gPT09IHVuZGVmaW5lZCkgZC5tID0gXCJxXCIgaW4gZCA/IGQucSA6IDA7XG5cbiAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgIGlmIChcIlZcIiBpbiBkKSB7XG4gICAgICAgIGlmIChkLlYgPCAxIHx8IGQuViA+IDUzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IDE7XG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgd2VlayA9IHV0Y0RhdGUobmV3RGF0ZShkLnksIDAsIDEpKSwgZGF5ID0gd2Vlay5nZXRVVENEYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB1dGNNb25kYXkuY2VpbCh3ZWVrKSA6IHV0Y01vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRVVENNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0VVRDRGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ZWVrID0gbG9jYWxEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSksIGRheSA9IHdlZWsuZ2V0RGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdGltZU1vbmRheS5jZWlsKHdlZWspIDogdGltZU1vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdGltZURheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0TW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldERhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcInVcIiBpbiBkID8gZC51ICUgNyA6IFwiV1wiIGluIGQgPyAxIDogMDtcbiAgICAgICAgZGF5ID0gXCJaXCIgaW4gZCA/IHV0Y0RhdGUobmV3RGF0ZShkLnksIDAsIDEpKS5nZXRVVENEYXkoKSA6IGxvY2FsRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5ICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbG9jYWxEYXRlKGQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBjLFxuICAgICAgICBwYXJzZTtcblxuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQXQoaSsrKTtcbiAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgIGlmICghcGFyc2UgfHwgKChqID0gcGFyc2UoZCwgc3RyaW5nLCBqKSkgPCAwKSkgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQZXJpb2QoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydE1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFF1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRNb250aCgpIC8gMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0VVRDTW9udGgoKSAvIDMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBmYWxzZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIHRydWUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VRdWFydGVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQucSA9IG5bMF0gKiAzIC0gMywgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLnMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodGltZVRodXJzZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSArICh0aW1lWWVhcihkKS5nZXREYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0RGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVNb25kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcbiAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y1N1bmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0VVRDRGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHV0Y1RodXJzZGF5KGQpIDogdXRjVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh1dGNUaHVyc2RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSArICh1dGNZZWFyKGQpLmdldFVUQ0RheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXRVVENEYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjTW9uZGF5LmNvdW50KHV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIHRpbWVGb3JtYXQ7XG5leHBvcnQgdmFyIHRpbWVQYXJzZTtcbmV4cG9ydCB2YXIgdXRjRm9ybWF0O1xuZXhwb3J0IHZhciB1dGNQYXJzZTtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgdGltZUZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIHRpbWVQYXJzZSA9IGxvY2FsZS5wYXJzZTtcbiAgdXRjRm9ybWF0ID0gbG9jYWxlLnV0Y0Zvcm1hdDtcbiAgdXRjUGFyc2UgPSBsb2NhbGUudXRjUGFyc2U7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQge2Jpc2VjdG9yLCB0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3RpbWVZZWFyLCB0aW1lTW9udGgsIHRpbWVXZWVrLCB0aW1lRGF5LCB0aW1lSG91ciwgdGltZU1pbnV0ZSwgdGltZVNlY29uZCwgdGltZU1pbGxpc2Vjb25kfSBmcm9tIFwiZDMtdGltZVwiO1xuaW1wb3J0IHt0aW1lRm9ybWF0fSBmcm9tIFwiZDMtdGltZS1mb3JtYXRcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5LCBpZGVudGl0eX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCBuaWNlIGZyb20gXCIuL25pY2VcIjtcblxudmFyIGR1cmF0aW9uU2Vjb25kID0gMTAwMCxcbiAgICBkdXJhdGlvbk1pbnV0ZSA9IGR1cmF0aW9uU2Vjb25kICogNjAsXG4gICAgZHVyYXRpb25Ib3VyID0gZHVyYXRpb25NaW51dGUgKiA2MCxcbiAgICBkdXJhdGlvbkRheSA9IGR1cmF0aW9uSG91ciAqIDI0LFxuICAgIGR1cmF0aW9uV2VlayA9IGR1cmF0aW9uRGF5ICogNyxcbiAgICBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkgKiAzMCxcbiAgICBkdXJhdGlvblllYXIgPSBkdXJhdGlvbkRheSAqIDM2NTtcblxuZnVuY3Rpb24gZGF0ZSh0KSB7XG4gIHJldHVybiBuZXcgRGF0ZSh0KTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHQpIHtcbiAgcmV0dXJuIHQgaW5zdGFuY2VvZiBEYXRlID8gK3QgOiArbmV3IERhdGUoK3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsZW5kYXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBmb3JtYXQpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpLFxuICAgICAgaW52ZXJ0ID0gc2NhbGUuaW52ZXJ0LFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHZhciBmb3JtYXRNaWxsaXNlY29uZCA9IGZvcm1hdChcIi4lTFwiKSxcbiAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcbiAgICAgIGZvcm1hdE1pbnV0ZSA9IGZvcm1hdChcIiVJOiVNXCIpLFxuICAgICAgZm9ybWF0SG91ciA9IGZvcm1hdChcIiVJICVwXCIpLFxuICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXG4gICAgICBmb3JtYXRXZWVrID0gZm9ybWF0KFwiJWIgJWRcIiksXG4gICAgICBmb3JtYXRNb250aCA9IGZvcm1hdChcIiVCXCIpLFxuICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xuXG4gIHZhciB0aWNrSW50ZXJ2YWxzID0gW1xuICAgIFtzZWNvbmQsICAxLCAgICAgIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAgNSwgIDUgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgMTUsIDE1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbbWludXRlLCAgMSwgICAgICBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgIDUsICA1ICogZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsIDE1LCAxNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAzMCwgMzAgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgWyAgaG91ciwgIDEsICAgICAgZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsICAzLCAgMyAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgNiwgIDYgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgMTIsIDEyICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgICBkYXksICAxLCAgICAgIGR1cmF0aW9uRGF5ICAgXSxcbiAgICBbICAgZGF5LCAgMiwgIDIgKiBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgd2VlaywgIDEsICAgICAgZHVyYXRpb25XZWVrICBdLFxuICAgIFsgbW9udGgsICAxLCAgICAgIGR1cmF0aW9uTW9udGggXSxcbiAgICBbIG1vbnRoLCAgMywgIDMgKiBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyAgeWVhciwgIDEsICAgICAgZHVyYXRpb25ZZWFyICBdXG4gIF07XG5cbiAgZnVuY3Rpb24gdGlja0Zvcm1hdChkYXRlKSB7XG4gICAgcmV0dXJuIChzZWNvbmQoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWlsbGlzZWNvbmRcbiAgICAgICAgOiBtaW51dGUoZGF0ZSkgPCBkYXRlID8gZm9ybWF0U2Vjb25kXG4gICAgICAgIDogaG91cihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaW51dGVcbiAgICAgICAgOiBkYXkoZGF0ZSkgPCBkYXRlID8gZm9ybWF0SG91clxuICAgICAgICA6IG1vbnRoKGRhdGUpIDwgZGF0ZSA/ICh3ZWVrKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdERheSA6IGZvcm1hdFdlZWspXG4gICAgICAgIDogeWVhcihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNb250aFxuICAgICAgICA6IGZvcm1hdFllYXIpKGRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGlja0ludGVydmFsKGludGVydmFsLCBzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChpbnRlcnZhbCA9PSBudWxsKSBpbnRlcnZhbCA9IDEwO1xuXG4gICAgLy8gSWYgYSBkZXNpcmVkIHRpY2sgY291bnQgaXMgc3BlY2lmaWVkLCBwaWNrIGEgcmVhc29uYWJsZSB0aWNrIGludGVydmFsXG4gICAgLy8gYmFzZWQgb24gdGhlIGV4dGVudCBvZiB0aGUgZG9tYWluIGFuZCBhIHJvdWdoIGVzdGltYXRlIG9mIHRpY2sgc2l6ZS5cbiAgICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpbnRlcnZhbCBpcyBhbHJlYWR5IGEgdGltZSBpbnRlcnZhbCBhbmQgdXNlIGl0LlxuICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gaW50ZXJ2YWwsXG4gICAgICAgICAgaSA9IGJpc2VjdG9yKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGlbMl07IH0pLnJpZ2h0KHRpY2tJbnRlcnZhbHMsIHRhcmdldCk7XG4gICAgICBpZiAoaSA9PT0gdGlja0ludGVydmFscy5sZW5ndGgpIHtcbiAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0IC8gZHVyYXRpb25ZZWFyLCBzdG9wIC8gZHVyYXRpb25ZZWFyLCBpbnRlcnZhbCk7XG4gICAgICAgIGludGVydmFsID0geWVhcjtcbiAgICAgIH0gZWxzZSBpZiAoaSkge1xuICAgICAgICBpID0gdGlja0ludGVydmFsc1t0YXJnZXQgLyB0aWNrSW50ZXJ2YWxzW2kgLSAxXVsyXSA8IHRpY2tJbnRlcnZhbHNbaV1bMl0gLyB0YXJnZXQgPyBpIC0gMSA6IGldO1xuICAgICAgICBzdGVwID0gaVsxXTtcbiAgICAgICAgaW50ZXJ2YWwgPSBpWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcCA9IE1hdGgubWF4KHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBpbnRlcnZhbCksIDEpO1xuICAgICAgICBpbnRlcnZhbCA9IG1pbGxpc2Vjb25kO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdGVwID09IG51bGwgPyBpbnRlcnZhbCA6IGludGVydmFsLmV2ZXJ5KHN0ZXApO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShpbnZlcnQoeSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGRvbWFpbihtYXAuY2FsbChfLCBudW1iZXIpKSA6IGRvbWFpbigpLm1hcChkYXRlKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgdDAgPSBkWzBdLFxuICAgICAgICB0MSA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgciA9IHQxIDwgdDAsXG4gICAgICAgIHQ7XG4gICAgaWYgKHIpIHQgPSB0MCwgdDAgPSB0MSwgdDEgPSB0O1xuICAgIHQgPSB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIHQwLCB0MSwgc3RlcCk7XG4gICAgdCA9IHQgPyB0LnJhbmdlKHQwLCB0MSArIDEpIDogW107IC8vIGluY2x1c2l2ZSBzdG9wXG4gICAgcmV0dXJuIHIgPyB0LnJldmVyc2UoKSA6IHQ7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gc3BlY2lmaWVyID09IG51bGwgPyB0aWNrRm9ybWF0IDogZm9ybWF0KHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gKGludGVydmFsID0gdGlja0ludGVydmFsKGludGVydmFsLCBkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIHN0ZXApKVxuICAgICAgICA/IGRvbWFpbihuaWNlKGQsIGludGVydmFsKSlcbiAgICAgICAgOiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZm9ybWF0KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShjYWxlbmRhcih0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVNaWxsaXNlY29uZCwgdGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91cn0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIHV0Y0hvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0hvdXI7XG5leHBvcnQgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIHV0Y01pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTWludXRlO1xuZXhwb3J0IHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IHtjYWxlbmRhcn0gZnJvbSBcIi4vdGltZVwiO1xuaW1wb3J0IHt1dGNGb3JtYXR9IGZyb20gXCJkMy10aW1lLWZvcm1hdFwiO1xuaW1wb3J0IHt1dGNZZWFyLCB1dGNNb250aCwgdXRjV2VlaywgdXRjRGF5LCB1dGNIb3VyLCB1dGNNaW51dGUsIHV0Y1NlY29uZCwgdXRjTWlsbGlzZWNvbmR9IGZyb20gXCJkMy10aW1lXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShjYWxlbmRhcih1dGNZZWFyLCB1dGNNb250aCwgdXRjV2VlaywgdXRjRGF5LCB1dGNIb3VyLCB1dGNNaW51dGUsIHV0Y1NlY29uZCwgdXRjTWlsbGlzZWNvbmQsIHV0Y0Zvcm1hdCkuZG9tYWluKFtEYXRlLlVUQygyMDAwLCAwLCAxKSwgRGF0ZS5VVEMoMjAwMCwgMCwgMildKSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7aWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdEludGVycG9sYXRvcn0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhclwiO1xuaW1wb3J0IHtsb2dnaXNofSBmcm9tIFwiLi9sb2dcIjtcbmltcG9ydCB7c3ltbG9naXNofSBmcm9tIFwiLi9zeW1sb2dcIjtcbmltcG9ydCB7cG93aXNofSBmcm9tIFwiLi9wb3dcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICB0MCxcbiAgICAgIHQxLFxuICAgICAgazEwLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgaW50ZXJwb2xhdG9yID0gaWRlbnRpdHksXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogaW50ZXJwb2xhdG9yKGsxMCA9PT0gMCA/IDAuNSA6ICh4ID0gKHRyYW5zZm9ybSh4KSAtIHQwKSAqIGsxMCwgY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB4KSkgOiB4KSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodDAgPSB0cmFuc2Zvcm0oeDAgPSArX1swXSksIHQxID0gdHJhbnNmb3JtKHgxID0gK19bMV0pLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMSAvICh0MSAtIHQwKSwgc2NhbGUpIDogW3gwLCB4MV07XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHQwID0gdCh4MCksIHQxID0gdCh4MSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAuaW50ZXJwb2xhdG9yKHNvdXJjZS5pbnRlcnBvbGF0b3IoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXF1ZW50aWFsKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIoKShpZGVudGl0eSkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxMb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbExvZygpKS5iYXNlKHNjYWxlLmJhc2UoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsU3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzZXF1ZW50aWFsU3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbFBvdygpIHtcbiAgdmFyIHNjYWxlID0gcG93aXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbFBvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxTcXJ0KCkge1xuICByZXR1cm4gc2VxdWVudGlhbFBvdy5hcHBseShudWxsLCBhcmd1bWVudHMpLmV4cG9uZW50KDAuNSk7XG59XG4iLCJpbXBvcnQge2FzY2VuZGluZywgYmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdEludGVycG9sYXRvcn0gZnJvbSBcIi4vaW5pdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXF1ZW50aWFsUXVhbnRpbGUoKSB7XG4gIHZhciBkb21haW4gPSBbXSxcbiAgICAgIGludGVycG9sYXRvciA9IGlkZW50aXR5O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiBpbnRlcnBvbGF0b3IoKGJpc2VjdChkb21haW4sIHgpIC0gMSkgLyAoZG9tYWluLmxlbmd0aCAtIDEpKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IF8ubGVuZ3RoLCBkOyBpIDwgbjsgKytpKSBpZiAoZCA9IF9baV0sIGQgIT0gbnVsbCAmJiAhaXNOYU4oZCA9ICtkKSkgZG9tYWluLnB1c2goZCk7XG4gICAgZG9tYWluLnNvcnQoYXNjZW5kaW5nKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlcXVlbnRpYWxRdWFudGlsZShpbnRlcnBvbGF0b3IpLmRvbWFpbihkb21haW4pO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuIiwiaW1wb3J0IHtpZGVudGl0eX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0SW50ZXJwb2xhdG9yfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyXCI7XG5pbXBvcnQge2xvZ2dpc2h9IGZyb20gXCIuL2xvZ1wiO1xuaW1wb3J0IHtjb3B5fSBmcm9tIFwiLi9zZXF1ZW50aWFsXCI7XG5pbXBvcnQge3N5bWxvZ2lzaH0gZnJvbSBcIi4vc3ltbG9nXCI7XG5pbXBvcnQge3Bvd2lzaH0gZnJvbSBcIi4vcG93XCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAwLjUsXG4gICAgICB4MiA9IDEsXG4gICAgICB0MCxcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICBrMTAsXG4gICAgICBrMjEsXG4gICAgICBpbnRlcnBvbGF0b3IgPSBpZGVudGl0eSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIGNsYW1wID0gZmFsc2UsXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAoeCA9IDAuNSArICgoeCA9ICt0cmFuc2Zvcm0oeCkpIC0gdDEpICogKHggPCB0MSA/IGsxMCA6IGsyMSksIGludGVycG9sYXRvcihjbGFtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHgpKSA6IHgpKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0MCA9IHRyYW5zZm9ybSh4MCA9ICtfWzBdKSwgdDEgPSB0cmFuc2Zvcm0oeDEgPSArX1sxXSksIHQyID0gdHJhbnNmb3JtKHgyID0gK19bMl0pLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMC41IC8gKHQxIC0gdDApLCBrMjEgPSB0MSA9PT0gdDIgPyAwIDogMC41IC8gKHQyIC0gdDEpLCBzY2FsZSkgOiBbeDAsIHgxLCB4Ml07XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHQwID0gdCh4MCksIHQxID0gdCh4MSksIHQyID0gdCh4MiksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAwLjUgLyAodDEgLSB0MCksIGsyMSA9IHQxID09PSB0MiA/IDAgOiAwLjUgLyAodDIgLSB0MSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXZlcmdpbmcoKSB7XG4gIHZhciBzY2FsZSA9IGxpbmVhcmlzaCh0cmFuc2Zvcm1lcigpKGlkZW50aXR5KSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmcoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZlcmdpbmdMb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFswLjEsIDEsIDEwXSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmdMb2coKSkuYmFzZShzY2FsZS5iYXNlKCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2ZXJnaW5nU3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmdTeW1sb2coKSkuY29uc3RhbnQoc2NhbGUuY29uc3RhbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZlcmdpbmdQb3coKSB7XG4gIHZhciBzY2FsZSA9IHBvd2lzaCh0cmFuc2Zvcm1lcigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGRpdmVyZ2luZ1BvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmVyZ2luZ1NxcnQoKSB7XG4gIHJldHVybiBkaXZlcmdpbmdQb3cuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5leHBvbmVudCgwLjUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxZjc3YjRmZjdmMGUyY2EwMmNkNjI3Mjg5NDY3YmQ4YzU2NGJlMzc3YzI3ZjdmN2ZiY2JkMjIxN2JlY2ZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiN2ZjOTdmYmVhZWQ0ZmRjMDg2ZmZmZjk5Mzg2Y2IwZjAwMjdmYmY1YjE3NjY2NjY2XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjFiOWU3N2Q5NWYwMjc1NzBiM2U3Mjk4YTY2YTYxZWU2YWIwMmE2NzYxZDY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJhNmNlZTMxZjc4YjRiMmRmOGEzM2EwMmNmYjlhOTllMzFhMWNmZGJmNmZmZjdmMDBjYWIyZDY2YTNkOWFmZmZmOTliMTU5MjhcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZmJiNGFlYjNjZGUzY2NlYmM1ZGVjYmU0ZmVkOWE2ZmZmZmNjZTVkOGJkZmRkYWVjZjJmMmYyXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImIzZTJjZGZkY2RhY2NiZDVlOGY0Y2FlNGU2ZjVjOWZmZjJhZWYxZTJjY2NjY2NjY1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJlNDFhMWMzNzdlYjg0ZGFmNGE5ODRlYTNmZjdmMDBmZmZmMzNhNjU2MjhmNzgxYmY5OTk5OTlcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiNjZjMmE1ZmM4ZDYyOGRhMGNiZTc4YWMzYTZkODU0ZmZkOTJmZTVjNDk0YjNiM2IzXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjhkZDNjN2ZmZmZiM2JlYmFkYWZiODA3MjgwYjFkM2ZkYjQ2MmIzZGU2OWZjY2RlNWQ5ZDlkOWJjODBiZGNjZWJjNWZmZWQ2ZlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI0ZTc5YTdmMjhlMmNlMTU3NTk3NmI3YjI1OWExNGZlZGM5NDlhZjdhYTFmZjlkYTc5Yzc1NWZiYWIwYWJcIik7XG4iLCJpbXBvcnQge2ludGVycG9sYXRlUmdiQmFzaXN9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzY2hlbWUpIHtcbiAgcmV0dXJuIGludGVycG9sYXRlUmdiQmFzaXMoc2NoZW1lW3NjaGVtZS5sZW5ndGggLSAxXSk7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkOGIzNjVmNWY1ZjU1YWI0YWNcIixcbiAgXCJhNjYxMWFkZmMyN2Q4MGNkYzEwMTg1NzFcIixcbiAgXCJhNjYxMWFkZmMyN2RmNWY1ZjU4MGNkYzEwMTg1NzFcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNmNWY1ZjVjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiYWY4ZGMzZjdmN2Y3N2ZiZjdiXCIsXG4gIFwiN2IzMjk0YzJhNWNmYTZkYmEwMDA4ODM3XCIsXG4gIFwiN2IzMjk0YzJhNWNmZjdmN2Y3YTZkYmEwMDA4ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZjdmN2Y3ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU5YTNjOWY3ZjdmN2ExZDc2YVwiLFxuICBcImQwMWM4YmYxYjZkYWI4ZTE4NjRkYWMyNlwiLFxuICBcImQwMWM4YmYxYjZkYWY3ZjdmN2I4ZTE4NjRkYWMyNlwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmU2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmY3ZjdmN2U2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCI5OThlYzNmN2Y3ZjdmMWEzNDBcIixcbiAgXCI1ZTNjOTliMmFiZDJmZGI4NjNlNjYxMDFcIixcbiAgXCI1ZTNjOTliMmFiZDJmN2Y3ZjdmZGI4NjNlNjYxMDFcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmN2Y3ZjdmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZjdmN2Y3NjdhOWNmXCIsXG4gIFwiY2EwMDIwZjRhNTgyOTJjNWRlMDU3MWIwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZjdmN2Y3OTJjNWRlMDU3MWIwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZjdmN2Y3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmZmZmZmZjk5OTk5OVwiLFxuICBcImNhMDAyMGY0YTU4MmJhYmFiYTQwNDA0MFwiLFxuICBcImNhMDAyMGY0YTU4MmZmZmZmZmJhYmFiYTQwNDA0MFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2UwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2ZmZmZmZmUwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWJmZGJcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBmZmZmYmZlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTFjZjYwXCIsXG4gIFwiZDcxOTFjZmRhZTYxYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZmZmZmJmZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjk5ZDU5NFwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZGRhNDJiODNiYVwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZGRhNDJiODNiYVwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmZmZmZiZmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1Zjk5OWQ4YzkyY2EyNWZcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyMzhiNDVcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBlY2Y0OWViY2RhODg1NmE3XCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg0MTlkXCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkODEwZjdjNGQwMDRiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImUwZjNkYmE4ZGRiNTQzYTJjYVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDJiOGNiZVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NjhhYzA4NDA4MVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWU4YzhmZGJiODRlMzRhMzNcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTlkNzMwMWZcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWZiMzAwMDA3ZjAwMDBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlMmYwYTZiZGRiMWM5MDk5XCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMDI4MThhXCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2YzU5MDE0NjM2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVjZTdmMmE2YmRkYjJiOGNiZVwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjA1NzBiMFwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDA0NWE4ZDAyMzg1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlN2UxZWZjOTk0YzdkZDFjNzdcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBjZTEyNTZcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5ODAwNDM2NzAwMWZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmRlMGRkZmE5ZmI1YzUxYjhhXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYWUwMTdlXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3NDkwMDZhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVkZjhiMTdmY2RiYjJjN2ZiOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDIyNWVhOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODI1MzQ5NDA4MWQ1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmN2ZjYjlhZGRkOGUzMWEzNTRcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkyMzg0NDNcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDY4MzcwMDQ1MjlcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZmN2JjZmVjNDRmZDk1ZjBlXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5Y2M0YzAyXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOTkzNDA0NjYyNTA2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZWRhMGZlYjI0Y2YwM2IyMFwiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2UzMWExY1wiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2JkMDAyNjgwMDAyNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkZWViZjc5ZWNhZTEzMTgyYmRcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYyMTcxYjVcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODUxOWMwODMwNmJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWUwYTFkOTliMzFhMzU0XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MjM4YjQ1XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImYwZjBmMGJkYmRiZDYzNjM2M1wiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjUyNTI1MlwiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNTAwMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZmVkZjViY2JkZGM3NTZiYjFcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg2YTUxYTNcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM1NDI3OGYzZjAwN2RcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlMGQyZmM5MjcyZGUyZDI2XCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhY2IxODFkXCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkYTUwZjE1NjcwMDBkXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTZjZWZkYWU2YmU2NTUwZFwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2Q5NDcwMVwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMWE2MzYwMzdmMjcwNFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0KSB7XG4gIHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB0KSk7XG4gIHJldHVybiBcInJnYihcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQoLTQuNTQgLSB0ICogKDM1LjM0IC0gdCAqICgyMzgxLjczIC0gdCAqICg2NDAyLjcgLSB0ICogKDcwMjQuNzIgLSB0ICogMjcxMC41NykpKSkpKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKDMyLjQ5ICsgdCAqICgxNzAuNzMgKyB0ICogKDUyLjgyIC0gdCAqICgxMzEuNDYgLSB0ICogKDE3Ni41OCAtIHQgKiA2Ny4zNykpKSkpKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKDgxLjI0ICsgdCAqICg0NDIuMzYgLSB0ICogKDI0ODIuNDMgLSB0ICogKDYxNjcuMjQgLSB0ICogKDY2MTQuOTQgLSB0ICogMjQ3NS42NykpKSkpKSlcbiAgICAgICsgXCIpXCI7XG59XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMzAwLCAwLjUsIDAuMCksIGN1YmVoZWxpeCgtMjQwLCAwLjUsIDEuMCkpO1xuIiwiaW1wb3J0IHtjdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgdmFyIHdhcm0gPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KC0xMDAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG5leHBvcnQgdmFyIGNvb2wgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDI2MCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbnZhciBjID0gY3ViZWhlbGl4KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgaWYgKHQgPCAwIHx8IHQgPiAxKSB0IC09IE1hdGguZmxvb3IodCk7XG4gIHZhciB0cyA9IE1hdGguYWJzKHQgLSAwLjUpO1xuICBjLmggPSAzNjAgKiB0IC0gMTAwO1xuICBjLnMgPSAxLjUgLSAxLjUgKiB0cztcbiAgYy5sID0gMC44IC0gMC45ICogdHM7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiIsImltcG9ydCB7cmdifSBmcm9tIFwiZDMtY29sb3JcIjtcblxudmFyIGMgPSByZ2IoKSxcbiAgICBwaV8xXzMgPSBNYXRoLlBJIC8gMyxcbiAgICBwaV8yXzMgPSBNYXRoLlBJICogMiAvIDM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgdmFyIHg7XG4gIHQgPSAoMC41IC0gdCkgKiBNYXRoLlBJO1xuICBjLnIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQpKSAqIHg7XG4gIGMuZyA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCArIHBpXzFfMykpICogeDtcbiAgYy5iID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMl8zKSkgKiB4O1xuICByZXR1cm4gYyArIFwiXCI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0KSB7XG4gIHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB0KSk7XG4gIHJldHVybiBcInJnYihcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQoMzQuNjEgKyB0ICogKDExNzIuMzMgLSB0ICogKDEwNzkzLjU2IC0gdCAqICgzMzMwMC4xMiAtIHQgKiAoMzgzOTQuNDkgLSB0ICogMTQ4MjUuMDUpKSkpKSkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCgyMy4zMSArIHQgKiAoNTU3LjMzICsgdCAqICgxMjI1LjMzIC0gdCAqICgzNTc0Ljk2IC0gdCAqICgxMDczLjc3ICsgdCAqIDcwNy41NikpKSkpKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKDI3LjIgKyB0ICogKDMyMTEuMSAtIHQgKiAoMTUzMjcuOTcgLSB0ICogKDI3ODE0IC0gdCAqICgyMjU2OS4xOCAtIHQgKiA2ODM4LjY2KSkpKSkpKVxuICAgICAgKyBcIilcIjtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5mdW5jdGlvbiByYW1wKHJhbmdlKSB7XG4gIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxuZXhwb3J0IHZhciBtYWdtYSA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTA5MDIwMjBiMDIwMjBkMDMwMzBmMDMwMzEyMDQwNDE0MDUwNDE2MDYwNTE4MDYwNTFhMDcwNjFjMDgwNzFlMDkwNzIwMGEwODIyMGIwOTI0MGMwOTI2MGQwYTI5MGUwYjJiMTAwYjJkMTEwYzJmMTIwZDMxMTMwZDM0MTQwZTM2MTUwZTM4MTYwZjNiMTgwZjNkMTkxMDNmMWExMDQyMWMxMDQ0MWQxMTQ3MWUxMTQ5MjAxMTRiMjExMTRlMjIxMTUwMjQxMjUzMjUxMjU1MjcxMjU4MjkxMTVhMmExMTVjMmMxMTVmMmQxMTYxMmYxMTYzMzExMTY1MzMxMDY3MzQxMDY5MzYxMDZiMzgxMDZjMzkwZjZlM2IwZjcwM2QwZjcxM2YwZjcyNDAwZjc0NDIwZjc1NDQwZjc2NDUxMDc3NDcxMDc4NDkxMDc4NGExMDc5NGMxMTdhNGUxMTdiNGYxMjdiNTExMjdjNTIxMzdjNTQxMzdkNTYxNDdkNTcxNTdlNTkxNTdlNWExNjdlNWMxNjdmNWQxNzdmNWYxODdmNjAxODgwNjIxOTgwNjQxYTgwNjUxYTgwNjcxYjgwNjgxYzgxNmExYzgxNmIxZDgxNmQxZDgxNmUxZTgxNzAxZjgxNzIxZjgxNzMyMDgxNzUyMTgxNzYyMTgxNzgyMjgxNzkyMjgyN2IyMzgyN2MyMzgyN2UyNDgyODAyNTgyODEyNTgxODMyNjgxODQyNjgxODYyNzgxODgyNzgxODkyODgxOGIyOTgxOGMyOTgxOGUyYTgxOTAyYTgxOTEyYjgxOTMyYjgwOTQyYzgwOTYyYzgwOTgyZDgwOTkyZDgwOWIyZTdmOWMyZTdmOWUyZjdmYTAyZjdmYTEzMDdlYTMzMDdlYTUzMTdlYTYzMTdkYTgzMjdkYWEzMzdkYWIzMzdjYWQzNDdjYWUzNDdiYjAzNTdiYjIzNTdiYjMzNjdhYjUzNjdhYjczNzc5YjgzNzc5YmEzODc4YmMzOTc4YmQzOTc3YmYzYTc3YzAzYTc2YzIzYjc1YzQzYzc1YzUzYzc0YzczZDczYzgzZTczY2EzZTcyY2MzZjcxY2Q0MDcxY2Y0MDcwZDA0MTZmZDI0MjZmZDM0MzZlZDU0NDZkZDY0NTZjZDg0NTZjZDk0NjZiZGI0NzZhZGM0ODY5ZGU0OTY4ZGY0YTY4ZTA0YzY3ZTI0ZDY2ZTM0ZTY1ZTQ0ZjY0ZTU1MDY0ZTc1MjYzZTg1MzYyZTk1NDYyZWE1NjYxZWI1NzYwZWM1ODYwZWQ1YTVmZWU1YjVlZWY1ZDVlZjA1ZjVlZjE2MDVkZjI2MjVkZjI2NDVjZjM2NTVjZjQ2NzVjZjQ2OTVjZjU2YjVjZjY2YzVjZjY2ZTVjZjc3MDVjZjc3MjVjZjg3NDVjZjg3NjVjZjk3ODVkZjk3OTVkZjk3YjVkZmE3ZDVlZmE3ZjVlZmE4MTVmZmI4MzVmZmI4NTYwZmI4NzYxZmM4OTYxZmM4YTYyZmM4YzYzZmM4ZTY0ZmM5MDY1ZmQ5MjY2ZmQ5NDY3ZmQ5NjY4ZmQ5ODY5ZmQ5YTZhZmQ5YjZiZmU5ZDZjZmU5ZjZkZmVhMTZlZmVhMzZmZmVhNTcxZmVhNzcyZmVhOTczZmVhYTc0ZmVhYzc2ZmVhZTc3ZmViMDc4ZmViMjdhZmViNDdiZmViNjdjZmViNzdlZmViOTdmZmViYjgxZmViZDgyZmViZjg0ZmVjMTg1ZmVjMjg3ZmVjNDg4ZmVjNjhhZmVjODhjZmVjYThkZmVjYzhmZmVjZDkwZmVjZjkyZmVkMTk0ZmVkMzk1ZmVkNTk3ZmVkNzk5ZmVkODlhZmRkYTljZmRkYzllZmRkZWEwZmRlMGExZmRlMmEzZmRlM2E1ZmRlNWE3ZmRlN2E5ZmRlOWFhZmRlYmFjZmNlY2FlZmNlZWIwZmNmMGIyZmNmMmI0ZmNmNGI2ZmNmNmI4ZmNmN2I5ZmNmOWJiZmNmYmJkZmNmZGJmXCIpKTtcblxuZXhwb3J0IHZhciBpbmZlcm5vID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMGEwMjAyMGMwMjAyMGUwMzAyMTAwNDAzMTIwNDAzMTQwNTA0MTcwNjA0MTkwNzA1MWIwODA1MWQwOTA2MWYwYTA3MjIwYjA3MjQwYzA4MjYwZDA4MjkwZTA5MmIxMDA5MmQxMTBhMzAxMjBhMzIxNDBiMzQxNTBiMzcxNjBiMzkxODBjM2MxOTBjM2UxYjBjNDExYzBjNDMxZTBjNDUxZjBjNDgyMTBjNGEyMzBjNGMyNDBjNGYyNjBjNTEyODBiNTMyOTBiNTUyYjBiNTcyZDBiNTkyZjBhNWIzMTBhNWMzMjBhNWUzNDBhNWYzNjA5NjEzODA5NjIzOTA5NjMzYjA5NjQzZDA5NjUzZTA5NjY0MDBhNjc0MjBhNjg0NDBhNjg0NTBhNjk0NzBiNmE0OTBiNmE0YTBjNmI0YzBjNmI0ZDBkNmM0ZjBkNmM1MTBlNmM1MjBlNmQ1NDBmNmQ1NTBmNmQ1NzEwNmU1OTEwNmU1YTExNmU1YzEyNmU1ZDEyNmU1ZjEzNmU2MTEzNmU2MjE0NmU2NDE1NmU2NTE1NmU2NzE2NmU2OTE2NmU2YTE3NmU2YzE4NmU2ZDE4NmU2ZjE5NmU3MTE5NmU3MjFhNmU3NDFhNmU3NTFiNmU3NzFjNmQ3ODFjNmQ3YTFkNmQ3YzFkNmQ3ZDFlNmQ3ZjFlNmM4MDFmNmM4MjIwNmM4NDIwNmI4NTIxNmI4NzIxNmI4ODIyNmE4YTIyNmE4YzIzNjk4ZDIzNjk4ZjI0Njk5MDI1Njg5MjI1Njg5MzI2Njc5NTI2Njc5NzI3NjY5ODI3NjY5YTI4NjU5YjI5NjQ5ZDI5NjQ5ZjJhNjNhMDJhNjNhMjJiNjJhMzJjNjFhNTJjNjBhNjJkNjBhODJlNWZhOTJlNWVhYjJmNWVhZDMwNWRhZTMwNWNiMDMxNWJiMTMyNWFiMzMyNWFiNDMzNTliNjM0NThiNzM1NTdiOTM1NTZiYTM2NTViYzM3NTRiZDM4NTNiZjM5NTJjMDNhNTFjMTNhNTBjMzNiNGZjNDNjNGVjNjNkNGRjNzNlNGNjODNmNGJjYTQwNGFjYjQxNDljYzQyNDhjZTQzNDdjZjQ0NDZkMDQ1NDVkMjQ2NDRkMzQ3NDNkNDQ4NDJkNTRhNDFkNzRiM2ZkODRjM2VkOTRkM2RkYTRlM2NkYjUwM2JkZDUxM2FkZTUyMzhkZjUzMzdlMDU1MzZlMTU2MzVlMjU3MzRlMzU5MzNlNDVhMzFlNTVjMzBlNjVkMmZlNzVlMmVlODYwMmRlOTYxMmJlYTYzMmFlYjY0MjllYjY2MjhlYzY3MjZlZDY5MjVlZTZhMjRlZjZjMjNlZjZlMjFmMDZmMjBmMTcxMWZmMTczMWRmMjc0MWNmMzc2MWJmMzc4MTlmNDc5MThmNTdiMTdmNTdkMTVmNjdlMTRmNjgwMTNmNzgyMTJmNzg0MTBmODg1MGZmODg3MGVmODg5MGNmOThiMGJmOThjMGFmOThlMDlmYTkwMDhmYTkyMDdmYTk0MDdmYjk2MDZmYjk3MDZmYjk5MDZmYjliMDZmYjlkMDdmYzlmMDdmY2ExMDhmY2EzMDlmY2E1MGFmY2E2MGNmY2E4MGRmY2FhMGZmY2FjMTFmY2FlMTJmY2IwMTRmY2IyMTZmY2I0MThmYmI2MWFmYmI4MWRmYmJhMWZmYmJjMjFmYmJlMjNmYWMwMjZmYWMyMjhmYWM0MmFmYWM2MmRmOWM3MmZmOWM5MzJmOWNiMzVmOGNkMzdmOGNmM2FmN2QxM2RmN2QzNDBmNmQ1NDNmNmQ3NDZmNWQ5NDlmNWRiNGNmNGRkNGZmNGRmNTNmNGUxNTZmM2UzNWFmM2U1NWRmMmU2NjFmMmU4NjVmMmVhNjlmMWVjNmRmMWVkNzFmMWVmNzVmMWYxNzlmMmYyN2RmMmY0ODJmM2Y1ODZmM2Y2OGFmNGY4OGVmNWY5OTJmNmZhOTZmOGZiOWFmOWZjOWRmYWZkYTFmY2ZmYTRcIikpO1xuXG5leHBvcnQgdmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuL2NyZWF0b3JcIjtcbmltcG9ydCBzZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdChjcmVhdG9yKG5hbWUpLmNhbGwoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSk7XG59XG4iLCJ2YXIgbmV4dElkID0gMDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9jYWwoKSB7XG4gIHJldHVybiBuZXcgTG9jYWw7XG59XG5cbmZ1bmN0aW9uIExvY2FsKCkge1xuICB0aGlzLl8gPSBcIkBcIiArICgrK25leHRJZCkudG9TdHJpbmcoMzYpO1xufVxuXG5Mb2NhbC5wcm90b3R5cGUgPSBsb2NhbC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMb2NhbCxcbiAgZ2V0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5fO1xuICAgIHdoaWxlICghKGlkIGluIG5vZGUpKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICAgIHJldHVybiBub2RlW2lkXTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgIHJldHVybiBub2RlW3RoaXMuX10gPSB2YWx1ZTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuXyBpbiBub2RlICYmIGRlbGV0ZSBub2RlW3RoaXMuX107XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW3NlbGVjdG9yID09IG51bGwgPyBbXSA6IHNlbGVjdG9yXSwgcm9vdCk7XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnRcIjtcbmltcG9ydCBwb2ludCBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCB0b3VjaGVzKSB7XG4gIGlmICh0b3VjaGVzID09IG51bGwpIHRvdWNoZXMgPSBzb3VyY2VFdmVudCgpLnRvdWNoZXM7XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzID8gdG91Y2hlcy5sZW5ndGggOiAwLCBwb2ludHMgPSBuZXcgQXJyYXkobik7IGkgPCBuOyArK2kpIHtcbiAgICBwb2ludHNbaV0gPSBwb2ludChub2RlLCB0b3VjaGVzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBwb2ludHM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnM7XG5leHBvcnQgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbmV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTEyO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gMiAqIHBpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSA6IE1hdGguYWNvcyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+PSAxID8gaGFsZlBpIDogeCA8PSAtMSA/IC1oYWxmUGkgOiBNYXRoLmFzaW4oeCk7XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCB7YWJzLCBhY29zLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIG1heCwgbWluLCBwaSwgc2luLCBzcXJ0LCB0YXV9IGZyb20gXCIuL21hdGguanNcIjtcblxuZnVuY3Rpb24gYXJjSW5uZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5pbm5lclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjT3V0ZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5vdXRlclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjU3RhcnRBbmdsZShkKSB7XG4gIHJldHVybiBkLnN0YXJ0QW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY0VuZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuZW5kQW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY1BhZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQgJiYgZC5wYWRBbmdsZTsgLy8gTm90ZTogb3B0aW9uYWwhXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgdmFyIHgxMCA9IHgxIC0geDAsIHkxMCA9IHkxIC0geTAsXG4gICAgICB4MzIgPSB4MyAtIHgyLCB5MzIgPSB5MyAtIHkyLFxuICAgICAgdCA9IHkzMiAqIHgxMCAtIHgzMiAqIHkxMDtcbiAgaWYgKHQgKiB0IDwgZXBzaWxvbikgcmV0dXJuO1xuICB0ID0gKHgzMiAqICh5MCAtIHkyKSAtIHkzMiAqICh4MCAtIHgyKSkgLyB0O1xuICByZXR1cm4gW3gwICsgdCAqIHgxMCwgeTAgKyB0ICogeTEwXTtcbn1cblxuLy8gQ29tcHV0ZSBwZXJwZW5kaWN1bGFyIG9mZnNldCBsaW5lIG9mIGxlbmd0aCByYy5cbi8vIGh0dHA6Ly9tYXRod29ybGQud29sZnJhbS5jb20vQ2lyY2xlLUxpbmVJbnRlcnNlY3Rpb24uaHRtbFxuZnVuY3Rpb24gY29ybmVyVGFuZ2VudHMoeDAsIHkwLCB4MSwgeTEsIHIxLCByYywgY3cpIHtcbiAgdmFyIHgwMSA9IHgwIC0geDEsXG4gICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBzcXJ0KHgwMSAqIHgwMSArIHkwMSAqIHkwMSksXG4gICAgICBveCA9IGxvICogeTAxLFxuICAgICAgb3kgPSAtbG8gKiB4MDEsXG4gICAgICB4MTEgPSB4MCArIG94LFxuICAgICAgeTExID0geTAgKyBveSxcbiAgICAgIHgxMCA9IHgxICsgb3gsXG4gICAgICB5MTAgPSB5MSArIG95LFxuICAgICAgeDAwID0gKHgxMSArIHgxMCkgLyAyLFxuICAgICAgeTAwID0gKHkxMSArIHkxMCkgLyAyLFxuICAgICAgZHggPSB4MTAgLSB4MTEsXG4gICAgICBkeSA9IHkxMCAtIHkxMSxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICByID0gcjEgLSByYyxcbiAgICAgIEQgPSB4MTEgKiB5MTAgLSB4MTAgKiB5MTEsXG4gICAgICBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBzcXJ0KG1heCgwLCByICogciAqIGQyIC0gRCAqIEQpKSxcbiAgICAgIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsXG4gICAgICBjeTAgPSAoLUQgKiBkeCAtIGR5ICogZCkgLyBkMixcbiAgICAgIGN4MSA9IChEICogZHkgKyBkeCAqIGQpIC8gZDIsXG4gICAgICBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMixcbiAgICAgIGR4MCA9IGN4MCAtIHgwMCxcbiAgICAgIGR5MCA9IGN5MCAtIHkwMCxcbiAgICAgIGR4MSA9IGN4MSAtIHgwMCxcbiAgICAgIGR5MSA9IGN5MSAtIHkwMDtcblxuICAvLyBQaWNrIHRoZSBjbG9zZXIgb2YgdGhlIHR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuICAvLyBUT0RPIElzIHRoZXJlIGEgZmFzdGVyIHdheSB0byBkZXRlcm1pbmUgd2hpY2ggaW50ZXJzZWN0aW9uIHRvIHVzZT9cbiAgaWYgKGR4MCAqIGR4MCArIGR5MCAqIGR5MCA+IGR4MSAqIGR4MSArIGR5MSAqIGR5MSkgY3gwID0gY3gxLCBjeTAgPSBjeTE7XG5cbiAgcmV0dXJuIHtcbiAgICBjeDogY3gwLFxuICAgIGN5OiBjeTAsXG4gICAgeDAxOiAtb3gsXG4gICAgeTAxOiAtb3ksXG4gICAgeDExOiBjeDAgKiAocjEgLyByIC0gMSksXG4gICAgeTExOiBjeTAgKiAocjEgLyByIC0gMSlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBpbm5lclJhZGl1cyA9IGFyY0lubmVyUmFkaXVzLFxuICAgICAgb3V0ZXJSYWRpdXMgPSBhcmNPdXRlclJhZGl1cyxcbiAgICAgIGNvcm5lclJhZGl1cyA9IGNvbnN0YW50KDApLFxuICAgICAgcGFkUmFkaXVzID0gbnVsbCxcbiAgICAgIHN0YXJ0QW5nbGUgPSBhcmNTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBhcmNFbmRBbmdsZSxcbiAgICAgIHBhZEFuZ2xlID0gYXJjUGFkQW5nbGUsXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBhcmMoKSB7XG4gICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgcixcbiAgICAgICAgcjAgPSAraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgcjEgPSArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmUGksXG4gICAgICAgIGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSxcbiAgICAgICAgZGEgPSBhYnMoYTEgLSBhMCksXG4gICAgICAgIGN3ID0gYTEgPiBhMDtcblxuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcblxuICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBvdXRlciByYWRpdXMgaXMgYWx3YXlzIGxhcmdlciB0aGFuIHRoZSBpbm5lciByYWRpdXMuXG4gICAgaWYgKHIxIDwgcjApIHIgPSByMSwgcjEgPSByMCwgcjAgPSByO1xuXG4gICAgLy8gSXMgaXQgYSBwb2ludD9cbiAgICBpZiAoIShyMSA+IGVwc2lsb24pKSBjb250ZXh0Lm1vdmVUbygwLCAwKTtcblxuICAgIC8vIE9yIGlzIGl0IGEgY2lyY2xlIG9yIGFubnVsdXM/XG4gICAgZWxzZSBpZiAoZGEgPiB0YXUgLSBlcHNpbG9uKSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyhyMSAqIGNvcyhhMCksIHIxICogc2luKGEwKSk7XG4gICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAsIGExLCAhY3cpO1xuICAgICAgaWYgKHIwID4gZXBzaWxvbikge1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhyMCAqIGNvcyhhMSksIHIwICogc2luKGExKSk7XG4gICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMSwgYTAsIGN3KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPciBpcyBpdCBhIGNpcmN1bGFyIG9yIGFubnVsYXIgc2VjdG9yP1xuICAgIGVsc2Uge1xuICAgICAgdmFyIGEwMSA9IGEwLFxuICAgICAgICAgIGExMSA9IGExLFxuICAgICAgICAgIGEwMCA9IGEwLFxuICAgICAgICAgIGExMCA9IGExLFxuICAgICAgICAgIGRhMCA9IGRhLFxuICAgICAgICAgIGRhMSA9IGRhLFxuICAgICAgICAgIGFwID0gcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAvIDIsXG4gICAgICAgICAgcnAgPSAoYXAgPiBlcHNpbG9uKSAmJiAocGFkUmFkaXVzID8gK3BhZFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc3FydChyMCAqIHIwICsgcjEgKiByMSkpLFxuICAgICAgICAgIHJjID0gbWluKGFicyhyMSAtIHIwKSAvIDIsICtjb3JuZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksXG4gICAgICAgICAgcmMwID0gcmMsXG4gICAgICAgICAgcmMxID0gcmMsXG4gICAgICAgICAgdDAsXG4gICAgICAgICAgdDE7XG5cbiAgICAgIC8vIEFwcGx5IHBhZGRpbmc/IE5vdGUgdGhhdCBzaW5jZSByMSDiiaUgcjAsIGRhMSDiiaUgZGEwLlxuICAgICAgaWYgKHJwID4gZXBzaWxvbikge1xuICAgICAgICB2YXIgcDAgPSBhc2luKHJwIC8gcjAgKiBzaW4oYXApKSxcbiAgICAgICAgICAgIHAxID0gYXNpbihycCAvIHIxICogc2luKGFwKSk7XG4gICAgICAgIGlmICgoZGEwIC09IHAwICogMikgPiBlcHNpbG9uKSBwMCAqPSAoY3cgPyAxIDogLTEpLCBhMDAgKz0gcDAsIGExMCAtPSBwMDtcbiAgICAgICAgZWxzZSBkYTAgPSAwLCBhMDAgPSBhMTAgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgICBpZiAoKGRhMSAtPSBwMSAqIDIpID4gZXBzaWxvbikgcDEgKj0gKGN3ID8gMSA6IC0xKSwgYTAxICs9IHAxLCBhMTEgLT0gcDE7XG4gICAgICAgIGVsc2UgZGExID0gMCwgYTAxID0gYTExID0gKGEwICsgYTEpIC8gMjtcbiAgICAgIH1cblxuICAgICAgdmFyIHgwMSA9IHIxICogY29zKGEwMSksXG4gICAgICAgICAgeTAxID0gcjEgKiBzaW4oYTAxKSxcbiAgICAgICAgICB4MTAgPSByMCAqIGNvcyhhMTApLFxuICAgICAgICAgIHkxMCA9IHIwICogc2luKGExMCk7XG5cbiAgICAgIC8vIEFwcGx5IHJvdW5kZWQgY29ybmVycz9cbiAgICAgIGlmIChyYyA+IGVwc2lsb24pIHtcbiAgICAgICAgdmFyIHgxMSA9IHIxICogY29zKGExMSksXG4gICAgICAgICAgICB5MTEgPSByMSAqIHNpbihhMTEpLFxuICAgICAgICAgICAgeDAwID0gcjAgKiBjb3MoYTAwKSxcbiAgICAgICAgICAgIHkwMCA9IHIwICogc2luKGEwMCksXG4gICAgICAgICAgICBvYztcblxuICAgICAgICAvLyBSZXN0cmljdCB0aGUgY29ybmVyIHJhZGl1cyBhY2NvcmRpbmcgdG8gdGhlIHNlY3RvciBhbmdsZS5cbiAgICAgICAgaWYgKGRhIDwgcGkgJiYgKG9jID0gaW50ZXJzZWN0KHgwMSwgeTAxLCB4MDAsIHkwMCwgeDExLCB5MTEsIHgxMCwgeTEwKSkpIHtcbiAgICAgICAgICB2YXIgYXggPSB4MDEgLSBvY1swXSxcbiAgICAgICAgICAgICAgYXkgPSB5MDEgLSBvY1sxXSxcbiAgICAgICAgICAgICAgYnggPSB4MTEgLSBvY1swXSxcbiAgICAgICAgICAgICAgYnkgPSB5MTEgLSBvY1sxXSxcbiAgICAgICAgICAgICAga2MgPSAxIC8gc2luKGFjb3MoKGF4ICogYnggKyBheSAqIGJ5KSAvIChzcXJ0KGF4ICogYXggKyBheSAqIGF5KSAqIHNxcnQoYnggKiBieCArIGJ5ICogYnkpKSkgLyAyKSxcbiAgICAgICAgICAgICAgbGMgPSBzcXJ0KG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcbiAgICAgICAgICByYzAgPSBtaW4ocmMsIChyMCAtIGxjKSAvIChrYyAtIDEpKTtcbiAgICAgICAgICByYzEgPSBtaW4ocmMsIChyMSAtIGxjKSAvIChrYyArIDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJcyB0aGUgc2VjdG9yIGNvbGxhcHNlZCB0byBhIGxpbmU/XG4gICAgICBpZiAoIShkYTEgPiBlcHNpbG9uKSkgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpO1xuXG4gICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIG91dGVyIHJpbmcgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBlbHNlIGlmIChyYzEgPiBlcHNpbG9uKSB7XG4gICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDAwLCB5MDAsIHgwMSwgeTAxLCByMSwgcmMxLCBjdyk7XG4gICAgICAgIHQxID0gY29ybmVyVGFuZ2VudHMoeDExLCB5MTEsIHgxMCwgeTEwLCByMSwgcmMxLCBjdyk7XG5cbiAgICAgICAgY29udGV4dC5tb3ZlVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgaWYgKHJjMSA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgYXRhbjIodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MS5jeCwgdDEuY3ksIHJjMSwgYXRhbjIodDEueTExLCB0MS54MTEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3IgaXMgdGhlIG91dGVyIHJpbmcganVzdCBhIGNpcmN1bGFyIGFyYz9cbiAgICAgIGVsc2UgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpLCBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAxLCBhMTEsICFjdyk7XG5cbiAgICAgIC8vIElzIHRoZXJlIG5vIGlubmVyIHJpbmcsIGFuZCBpdOKAmXMgYSBjaXJjdWxhciBzZWN0b3I/XG4gICAgICAvLyBPciBwZXJoYXBzIGl04oCZcyBhbiBhbm51bGFyIHNlY3RvciBjb2xsYXBzZWQgZHVlIHRvIHBhZGRpbmc/XG4gICAgICBpZiAoIShyMCA+IGVwc2lsb24pIHx8ICEoZGEwID4gZXBzaWxvbikpIGNvbnRleHQubGluZVRvKHgxMCwgeTEwKTtcblxuICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBpbm5lciByaW5nIChvciBwb2ludCkgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBlbHNlIGlmIChyYzAgPiBlcHNpbG9uKSB7XG4gICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDEwLCB5MTAsIHgxMSwgeTExLCByMCwgLXJjMCwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgwMSwgeTAxLCB4MDAsIHkwMCwgcjAsIC1yYzAsIGN3KTtcblxuICAgICAgICBjb250ZXh0LmxpbmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICBpZiAocmMwIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAvLyBPdGhlcndpc2UsIGRyYXcgdGhlIHR3byBjb3JuZXJzIGFuZCB0aGUgcmluZy5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDAueTExLCB0MC54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhdGFuMih0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBhdGFuMih0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCBjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzAsIGF0YW4yKHQxLnkxMSwgdDEueDExKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9yIGlzIHRoZSBpbm5lciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICBlbHNlIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMTAsIGEwMCwgY3cpO1xuICAgIH1cblxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGFyYy5jZW50cm9pZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByID0gKCtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMixcbiAgICAgICAgYSA9ICgrc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK2VuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiAtIHBpIC8gMjtcbiAgICByZXR1cm4gW2NvcyhhKSAqIHIsIHNpbihhKSAqIHJdO1xuICB9O1xuXG4gIGFyYy5pbm5lclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbm5lclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogaW5uZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLm91dGVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG91dGVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBvdXRlclJhZGl1cztcbiAgfTtcblxuICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvcm5lclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogY29ybmVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5wYWRSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkUmFkaXVzID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogcGFkUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHN0YXJ0QW5nbGU7XG4gIH07XG5cbiAgYXJjLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBlbmRBbmdsZTtcbiAgfTtcblxuICBhcmMucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCBhcmMpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gYXJjO1xufVxuIiwiZnVuY3Rpb24gTGluZWFyKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhci5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhcihjb250ZXh0KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB4KHApIHtcbiAgcmV0dXJuIHBbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXIuanNcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXIuanNcIjtcbmltcG9ydCBsaW5lIGZyb20gXCIuL2xpbmUuanNcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHgwID0gcG9pbnRYLFxuICAgICAgeDEgPSBudWxsLFxuICAgICAgeTAgPSBjb25zdGFudCgwKSxcbiAgICAgIHkxID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBhcmVhKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXIsXG4gICAgICAgIHgweiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgeTB6ID0gbmV3IEFycmF5KG4pO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkge1xuICAgICAgICAgIGogPSBpO1xuICAgICAgICAgIG91dHB1dC5hcmVhU3RhcnQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZm9yIChrID0gaSAtIDE7IGsgPj0gajsgLS1rKSB7XG4gICAgICAgICAgICBvdXRwdXQucG9pbnQoeDB6W2tdLCB5MHpba10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5hcmVhRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkge1xuICAgICAgICB4MHpbaV0gPSAreDAoZCwgaSwgZGF0YSksIHkweltpXSA9ICt5MChkLCBpLCBkYXRhKTtcbiAgICAgICAgb3V0cHV0LnBvaW50KHgxID8gK3gxKGQsIGksIGRhdGEpIDogeDB6W2ldLCB5MSA/ICt5MShkLCBpLCBkYXRhKSA6IHkweltpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFsaW5lKCkge1xuICAgIHJldHVybiBsaW5lKCkuZGVmaW5lZChkZWZpbmVkKS5jdXJ2ZShjdXJ2ZSkuY29udGV4dChjb250ZXh0KTtcbiAgfVxuXG4gIGFyZWEueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB4MSA9IG51bGwsIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeDE7XG4gIH07XG5cbiAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHkxID0gbnVsbCwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB5MTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMCA9XG4gIGFyZWEubGluZVkwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5saW5lWTEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkxKTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDEpLnkoeTApO1xuICB9O1xuXG4gIGFyZWEuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBhcmVhKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgYXJlYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBhcmVhKSA6IGN1cnZlO1xuICB9O1xuXG4gIGFyZWEuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBhcmVhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIHJldHVybiBkO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgZGVzY2VuZGluZyBmcm9tIFwiLi9kZXNjZW5kaW5nLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCB7dGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcbiAgICAgIHNvcnRWYWx1ZXMgPSBkZXNjZW5kaW5nLFxuICAgICAgc29ydCA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gY29uc3RhbnQoMCksXG4gICAgICBlbmRBbmdsZSA9IGNvbnN0YW50KHRhdSksXG4gICAgICBwYWRBbmdsZSA9IGNvbnN0YW50KDApO1xuXG4gIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgc3VtID0gMCxcbiAgICAgICAgaW5kZXggPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGFyY3MgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGEwID0gK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgZGEgPSBNYXRoLm1pbih0YXUsIE1hdGgubWF4KC10YXUsIGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBhMCkpLFxuICAgICAgICBhMSxcbiAgICAgICAgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sIHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICBwYSA9IHAgKiAoZGEgPCAwID8gLTEgOiAxKSxcbiAgICAgICAgdjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodiA9IGFyY3NbaW5kZXhbaV0gPSBpXSA9ICt2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKSkgPiAwKSB7XG4gICAgICAgIHN1bSArPSB2O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9wdGlvbmFsbHkgc29ydCB0aGUgYXJjcyBieSBwcmV2aW91c2x5LWNvbXB1dGVkIHZhbHVlcyBvciBieSBkYXRhLlxuICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydFZhbHVlcyhhcmNzW2ldLCBhcmNzW2pdKTsgfSk7XG4gICAgZWxzZSBpZiAoc29ydCAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnQoZGF0YVtpXSwgZGF0YVtqXSk7IH0pO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgYXJjcyEgVGhleSBhcmUgc3RvcmVkIGluIHRoZSBvcmlnaW5hbCBkYXRhJ3Mgb3JkZXIuXG4gICAgZm9yIChpID0gMCwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwOyBpIDwgbjsgKytpLCBhMCA9IGExKSB7XG4gICAgICBqID0gaW5kZXhbaV0sIHYgPSBhcmNzW2pdLCBhMSA9IGEwICsgKHYgPiAwID8gdiAqIGsgOiAwKSArIHBhLCBhcmNzW2pdID0ge1xuICAgICAgICBkYXRhOiBkYXRhW2pdLFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgdmFsdWU6IHYsXG4gICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgIHBhZEFuZ2xlOiBwXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhcmNzO1xuICB9XG5cbiAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiB2YWx1ZTtcbiAgfTtcblxuICBwaWUuc29ydFZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0VmFsdWVzID0gXywgc29ydCA9IG51bGwsIHBpZSkgOiBzb3J0VmFsdWVzO1xuICB9O1xuXG4gIHBpZS5zb3J0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnQgPSBfLCBzb3J0VmFsdWVzID0gbnVsbCwgcGllKSA6IHNvcnQ7XG4gIH07XG5cbiAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIHBpZS5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgcmV0dXJuIHBpZTtcbn1cbiIsImltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9saW5lYXIuanNcIjtcblxuZXhwb3J0IHZhciBjdXJ2ZVJhZGlhbExpbmVhciA9IGN1cnZlUmFkaWFsKGN1cnZlTGluZWFyKTtcblxuZnVuY3Rpb24gUmFkaWFsKGN1cnZlKSB7XG4gIHRoaXMuX2N1cnZlID0gY3VydmU7XG59XG5cblJhZGlhbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUuYXJlYVN0YXJ0KCk7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmFyZWFFbmQoKTtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5saW5lU3RhcnQoKTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oYSwgcikge1xuICAgIHRoaXMuX2N1cnZlLnBvaW50KHIgKiBNYXRoLnNpbihhKSwgciAqIC1NYXRoLmNvcyhhKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1cnZlUmFkaWFsKGN1cnZlKSB7XG5cbiAgZnVuY3Rpb24gcmFkaWFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFJhZGlhbChjdXJ2ZShjb250ZXh0KSk7XG4gIH1cblxuICByYWRpYWwuX2N1cnZlID0gY3VydmU7XG5cbiAgcmV0dXJuIHJhZGlhbDtcbn1cbiIsImltcG9ydCBjdXJ2ZVJhZGlhbCwge2N1cnZlUmFkaWFsTGluZWFyfSBmcm9tIFwiLi9jdXJ2ZS9yYWRpYWwuanNcIjtcbmltcG9ydCBsaW5lIGZyb20gXCIuL2xpbmUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVSYWRpYWwobCkge1xuICB2YXIgYyA9IGwuY3VydmU7XG5cbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG5cbiAgbC5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgfTtcblxuICByZXR1cm4gbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBsaW5lUmFkaWFsKGxpbmUoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhcikpO1xufVxuIiwiaW1wb3J0IGN1cnZlUmFkaWFsLCB7Y3VydmVSYWRpYWxMaW5lYXJ9IGZyb20gXCIuL2N1cnZlL3JhZGlhbC5qc1wiO1xuaW1wb3J0IGFyZWEgZnJvbSBcIi4vYXJlYS5qc1wiO1xuaW1wb3J0IHtsaW5lUmFkaWFsfSBmcm9tIFwiLi9saW5lUmFkaWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgYSA9IGFyZWEoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhciksXG4gICAgICBjID0gYS5jdXJ2ZSxcbiAgICAgIHgwID0gYS5saW5lWDAsXG4gICAgICB4MSA9IGEubGluZVgxLFxuICAgICAgeTAgPSBhLmxpbmVZMCxcbiAgICAgIHkxID0gYS5saW5lWTE7XG5cbiAgYS5hbmdsZSA9IGEueCwgZGVsZXRlIGEueDtcbiAgYS5zdGFydEFuZ2xlID0gYS54MCwgZGVsZXRlIGEueDA7XG4gIGEuZW5kQW5nbGUgPSBhLngxLCBkZWxldGUgYS54MTtcbiAgYS5yYWRpdXMgPSBhLnksIGRlbGV0ZSBhLnk7XG4gIGEuaW5uZXJSYWRpdXMgPSBhLnkwLCBkZWxldGUgYS55MDtcbiAgYS5vdXRlclJhZGl1cyA9IGEueTEsIGRlbGV0ZSBhLnkxO1xuICBhLmxpbmVTdGFydEFuZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHgwKCkpOyB9LCBkZWxldGUgYS5saW5lWDA7XG4gIGEubGluZUVuZEFuZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHgxKCkpOyB9LCBkZWxldGUgYS5saW5lWDE7XG4gIGEubGluZUlubmVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHkwKCkpOyB9LCBkZWxldGUgYS5saW5lWTA7XG4gIGEubGluZU91dGVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHkxKCkpOyB9LCBkZWxldGUgYS5saW5lWTE7XG5cbiAgYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgfTtcblxuICByZXR1cm4gYTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFsoeSA9ICt5KSAqIE1hdGguY29zKHggLT0gTWF0aC5QSSAvIDIpLCB5ICogTWF0aC5zaW4oeCldO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuLi9wb2ludC5qc1wiO1xuaW1wb3J0IHBvaW50UmFkaWFsIGZyb20gXCIuLi9wb2ludFJhZGlhbC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5rU291cmNlKGQpIHtcbiAgcmV0dXJuIGQuc291cmNlO1xufVxuXG5mdW5jdGlvbiBsaW5rVGFyZ2V0KGQpIHtcbiAgcmV0dXJuIGQudGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBsaW5rKGN1cnZlKSB7XG4gIHZhciBzb3VyY2UgPSBsaW5rU291cmNlLFxuICAgICAgdGFyZ2V0ID0gbGlua1RhcmdldCxcbiAgICAgIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluaygpIHtcbiAgICB2YXIgYnVmZmVyLCBhcmd2ID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLCBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3YpLCB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICBjdXJ2ZShjb250ZXh0LCAreC5hcHBseSh0aGlzLCAoYXJndlswXSA9IHMsIGFyZ3YpKSwgK3kuYXBwbHkodGhpcywgYXJndiksICt4LmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLCAreS5hcHBseSh0aGlzLCBhcmd2KSk7XG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5rLnNvdXJjZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3VyY2UgPSBfLCBsaW5rKSA6IHNvdXJjZTtcbiAgfTtcblxuICBsaW5rLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCBsaW5rKSA6IHRhcmdldDtcbiAgfTtcblxuICBsaW5rLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5rKSA6IHg7XG4gIH07XG5cbiAgbGluay55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluaykgOiB5O1xuICB9O1xuXG4gIGxpbmsuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgbGluaykgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUhvcml6b250YWwoY29udGV4dCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwID0gKHgwICsgeDEpIC8gMiwgeTAsIHgwLCB5MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gY3VydmVWZXJ0aWNhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8oeDAsIHkwID0gKHkwICsgeTEpIC8gMiwgeDEsIHkwLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZVJhZGlhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcDAgPSBwb2ludFJhZGlhbCh4MCwgeTApLFxuICAgICAgcDEgPSBwb2ludFJhZGlhbCh4MCwgeTAgPSAoeTAgKyB5MSkgLyAyKSxcbiAgICAgIHAyID0gcG9pbnRSYWRpYWwoeDEsIHkwKSxcbiAgICAgIHAzID0gcG9pbnRSYWRpYWwoeDEsIHkxKTtcbiAgY29udGV4dC5tb3ZlVG8ocDBbMF0sIHAwWzFdKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHAxWzBdLCBwMVsxXSwgcDJbMF0sIHAyWzFdLCBwM1swXSwgcDNbMV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua0hvcml6b250YWwoKSB7XG4gIHJldHVybiBsaW5rKGN1cnZlSG9yaXpvbnRhbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rVmVydGljYWwoKSB7XG4gIHJldHVybiBsaW5rKGN1cnZlVmVydGljYWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua1JhZGlhbCgpIHtcbiAgdmFyIGwgPSBsaW5rKGN1cnZlUmFkaWFsKTtcbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG4gIHJldHVybiBsO1xufVxuIiwiaW1wb3J0IHtwaSwgdGF1fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gcGkpO1xuICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHIsIDAsIHRhdSk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gNSkgLyAyO1xuICAgIGNvbnRleHQubW92ZVRvKC0zICogciwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIC0zICogcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgLTMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oMyAqIHIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygzICogciwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAzICogcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC0zICogciwgcik7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsInZhciB0YW4zMCA9IE1hdGguc3FydCgxIC8gMyksXG4gICAgdGFuMzBfMiA9IHRhbjMwICogMjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHkgPSBNYXRoLnNxcnQoc2l6ZSAvIHRhbjMwXzIpLFxuICAgICAgICB4ID0geSAqIHRhbjMwO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIC15KTtcbiAgICBjb250ZXh0LmxpbmVUbyh4LCAwKTtcbiAgICBjb250ZXh0LmxpbmVUbygwLCB5KTtcbiAgICBjb250ZXh0LmxpbmVUbygteCwgMCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7cGksIHRhdX0gZnJvbSBcIi4uL21hdGguanNcIjtcblxudmFyIGthID0gMC44OTA4MTMwOTE1MjkyODUyMjgxMCxcbiAgICBrciA9IE1hdGguc2luKHBpIC8gMTApIC8gTWF0aC5zaW4oNyAqIHBpIC8gMTApLFxuICAgIGt4ID0gTWF0aC5zaW4odGF1IC8gMTApICoga3IsXG4gICAga3kgPSAtTWF0aC5jb3ModGF1IC8gMTApICoga3I7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgKiBrYSksXG4gICAgICAgIHggPSBreCAqIHIsXG4gICAgICAgIHkgPSBreSAqIHI7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNTsgKytpKSB7XG4gICAgICB2YXIgYSA9IHRhdSAqIGkgLyA1LFxuICAgICAgICAgIGMgPSBNYXRoLmNvcyhhKSxcbiAgICAgICAgICBzID0gTWF0aC5zaW4oYSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhzICogciwgLWMgKiByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4IC0gcyAqIHksIHMgKiB4ICsgYyAqIHkpO1xuICAgIH1cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHcgPSBNYXRoLnNxcnQoc2l6ZSksXG4gICAgICAgIHggPSAtdyAvIDI7XG4gICAgY29udGV4dC5yZWN0KHgsIHgsIHcsIHcpO1xuICB9XG59O1xuIiwidmFyIHNxcnQzID0gTWF0aC5zcXJ0KDMpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgeSA9IC1NYXRoLnNxcnQoc2l6ZSAvIChzcXJ0MyAqIDMpKTtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCB5ICogMik7XG4gICAgY29udGV4dC5saW5lVG8oLXNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQubGluZVRvKHNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJ2YXIgYyA9IC0wLjUsXG4gICAgcyA9IE1hdGguc3FydCgzKSAvIDIsXG4gICAgayA9IDEgLyBNYXRoLnNxcnQoMTIpLFxuICAgIGEgPSAoayAvIDIgKyAxKSAqIDM7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBhKSxcbiAgICAgICAgeDAgPSByIC8gMixcbiAgICAgICAgeTAgPSByICogayxcbiAgICAgICAgeDEgPSB4MCxcbiAgICAgICAgeTEgPSByICogayArIHIsXG4gICAgICAgIHgyID0gLXgxLFxuICAgICAgICB5MiA9IHkxO1xuICAgIGNvbnRleHQubW92ZVRvKHgwLCB5MCk7XG4gICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCAtIHMgKiB5MCwgcyAqIHgwICsgYyAqIHkwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgLSBzICogeTEsIHMgKiB4MSArIGMgKiB5MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyIC0gcyAqIHkyLCBzICogeDIgKyBjICogeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCArIHMgKiB5MCwgYyAqIHkwIC0gcyAqIHgwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgKyBzICogeTEsIGMgKiB5MSAtIHMgKiB4MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyICsgcyAqIHkyLCBjICogeTIgLSBzICogeDIpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY2lyY2xlIGZyb20gXCIuL3N5bWJvbC9jaXJjbGUuanNcIjtcbmltcG9ydCBjcm9zcyBmcm9tIFwiLi9zeW1ib2wvY3Jvc3MuanNcIjtcbmltcG9ydCBkaWFtb25kIGZyb20gXCIuL3N5bWJvbC9kaWFtb25kLmpzXCI7XG5pbXBvcnQgc3RhciBmcm9tIFwiLi9zeW1ib2wvc3Rhci5qc1wiO1xuaW1wb3J0IHNxdWFyZSBmcm9tIFwiLi9zeW1ib2wvc3F1YXJlLmpzXCI7XG5pbXBvcnQgdHJpYW5nbGUgZnJvbSBcIi4vc3ltYm9sL3RyaWFuZ2xlLmpzXCI7XG5pbXBvcnQgd3llIGZyb20gXCIuL3N5bWJvbC93eWUuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5leHBvcnQgdmFyIHN5bWJvbHMgPSBbXG4gIGNpcmNsZSxcbiAgY3Jvc3MsXG4gIGRpYW1vbmQsXG4gIHNxdWFyZSxcbiAgc3RhcixcbiAgdHJpYW5nbGUsXG4gIHd5ZVxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB0eXBlID0gY29uc3RhbnQoY2lyY2xlKSxcbiAgICAgIHNpemUgPSBjb25zdGFudCg2NCksXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzeW1ib2woKSB7XG4gICAgdmFyIGJ1ZmZlcjtcbiAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG4gICAgdHlwZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmRyYXcoY29udGV4dCwgK3NpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBzeW1ib2wudHlwZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0eXBlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgc3ltYm9sKSA6IHR5cGU7XG4gIH07XG5cbiAgc3ltYm9sLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2l6ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBzeW1ib2wpIDogc2l6ZTtcbiAgfTtcblxuICBzeW1ib2wuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8sIHN5bWJvbCkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBzeW1ib2w7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHt9XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgKDIgKiB0aGF0Ll94MCArIHRoYXQuX3gxKSAvIDMsXG4gICAgKDIgKiB0aGF0Ll95MCArIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgMiAqIHRoYXQuX3gxKSAvIDMsXG4gICAgKHRoYXQuX3kwICsgMiAqIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgNCAqIHRoYXQuX3gxICsgeCkgLyA2LFxuICAgICh0aGF0Ll95MCArIDQgKiB0aGF0Ll95MSArIHkpIC8gNlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQmFzaXMoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXMucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IC8vIHByb2NlZWRcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9jb250ZXh0LmxpbmVUbygoNSAqIHRoaXMuX3gwICsgdGhpcy5feDEpIC8gNiwgKDUgKiB0aGlzLl95MCArIHRoaXMuX3kxKSAvIDYpOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpcyhjb250ZXh0KTtcbn1cbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuXG5mdW5jdGlvbiBCYXNpc0Nsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc0Nsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MiArIDIgKiB0aGlzLl94MykgLyAzLCAodGhpcy5feTIgKyAyICogdGhpcy5feTMpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKCh0aGlzLl94MyArIDIgKiB0aGlzLl94MikgLyAzLCAodGhpcy5feTMgKyAyICogdGhpcy5feTIpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDIgPSB4LCB0aGlzLl95MiA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geTsgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDYpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzQ2xvc2VkKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vYmFzaXMuanNcIjtcblxuZnVuY3Rpb24gQmFzaXNPcGVuKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHZhciB4MCA9ICh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgeTAgPSAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDY7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MCwgeTApIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeDAsIHkwKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXNPcGVuKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtCYXNpc30gZnJvbSBcIi4vYmFzaXMuanNcIjtcblxuZnVuY3Rpb24gQnVuZGxlKGNvbnRleHQsIGJldGEpIHtcbiAgdGhpcy5fYmFzaXMgPSBuZXcgQmFzaXMoY29udGV4dCk7XG4gIHRoaXMuX2JldGEgPSBiZXRhO1xufVxuXG5CdW5kbGUucHJvdG90eXBlID0ge1xuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBbXTtcbiAgICB0aGlzLl95ID0gW107XG4gICAgdGhpcy5fYmFzaXMubGluZVN0YXJ0KCk7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgIGogPSB4Lmxlbmd0aCAtIDE7XG5cbiAgICBpZiAoaiA+IDApIHtcbiAgICAgIHZhciB4MCA9IHhbMF0sXG4gICAgICAgICAgeTAgPSB5WzBdLFxuICAgICAgICAgIGR4ID0geFtqXSAtIHgwLFxuICAgICAgICAgIGR5ID0geVtqXSAtIHkwLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICB0O1xuXG4gICAgICB3aGlsZSAoKytpIDw9IGopIHtcbiAgICAgICAgdCA9IGkgLyBqO1xuICAgICAgICB0aGlzLl9iYXNpcy5wb2ludChcbiAgICAgICAgICB0aGlzLl9iZXRhICogeFtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeDAgKyB0ICogZHgpLFxuICAgICAgICAgIHRoaXMuX2JldGEgKiB5W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh5MCArIHQgKiBkeSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gICAgdGhpcy5fYmFzaXMubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShiZXRhKSB7XG5cbiAgZnVuY3Rpb24gYnVuZGxlKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYmV0YSA9PT0gMSA/IG5ldyBCYXNpcyhjb250ZXh0KSA6IG5ldyBCdW5kbGUoY29udGV4dCwgYmV0YSk7XG4gIH1cblxuICBidW5kbGUuYmV0YSA9IGZ1bmN0aW9uKGJldGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCtiZXRhKTtcbiAgfTtcblxuICByZXR1cm4gYnVuZGxlO1xufSkoMC44NSk7XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgdGhhdC5feDEgKyB0aGF0Ll9rICogKHRoYXQuX3gyIC0gdGhhdC5feDApLFxuICAgIHRoYXQuX3kxICsgdGhhdC5fayAqICh0aGF0Ll95MiAtIHRoYXQuX3kwKSxcbiAgICB0aGF0Ll94MiArIHRoYXQuX2sgKiAodGhhdC5feDEgLSB4KSxcbiAgICB0aGF0Ll95MiArIHRoYXQuX2sgKiAodGhhdC5feTEgLSB5KSxcbiAgICB0aGF0Ll94MixcbiAgICB0aGF0Ll95MlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gxID0geCwgdGhpcy5feTEgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXJkaW5hbC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbENsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2FyZGluYWwuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCB7ZXBzaWxvbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7Q2FyZGluYWx9IGZyb20gXCIuL2NhcmRpbmFsLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHZhciB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIHgyID0gdGhhdC5feDIsXG4gICAgICB5MiA9IHRoYXQuX3kyO1xuXG4gIGlmICh0aGF0Ll9sMDFfYSA+IGVwc2lsb24pIHtcbiAgICB2YXIgYSA9IDIgKiB0aGF0Ll9sMDFfMmEgKyAzICogdGhhdC5fbDAxX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgbiA9IDMgKiB0aGF0Ll9sMDFfYSAqICh0aGF0Ll9sMDFfYSArIHRoYXQuX2wxMl9hKTtcbiAgICB4MSA9ICh4MSAqIGEgLSB0aGF0Ll94MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3gyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gICAgeTEgPSAoeTEgKiBhIC0gdGhhdC5feTAgKiB0aGF0Ll9sMTJfMmEgKyB0aGF0Ll95MiAqIHRoYXQuX2wwMV8yYSkgLyBuO1xuICB9XG5cbiAgaWYgKHRoYXQuX2wyM19hID4gZXBzaWxvbikge1xuICAgIHZhciBiID0gMiAqIHRoYXQuX2wyM18yYSArIDMgKiB0aGF0Ll9sMjNfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBtID0gMyAqIHRoYXQuX2wyM19hICogKHRoYXQuX2wyM19hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgyID0gKHgyICogYiArIHRoYXQuX3gxICogdGhhdC5fbDIzXzJhIC0geCAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICAgIHkyID0gKHkyICogYiArIHRoYXQuX3kxICogdGhhdC5fbDIzXzJhIC0geSAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICB9XG5cbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgxLCB5MSwgeDIsIHkyLCB0aGF0Ll94MiwgdGhhdC5feTIpO1xufVxuXG5mdW5jdGlvbiBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbShjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWwoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IHtDYXJkaW5hbENsb3NlZH0gZnJvbSBcIi4vY2FyZGluYWxDbG9zZWQuanNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXRtdWxsUm9tLmpzXCI7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb21DbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gdGhpcy5feTUgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IHtDYXJkaW5hbE9wZW59IGZyb20gXCIuL2NhcmRpbmFsT3Blbi5qc1wiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2F0bXVsbFJvbS5qc1wiO1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbU9wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuXG5mdW5jdGlvbiBMaW5lYXJDbG9zZWQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZWxzZSB0aGlzLl9wb2ludCA9IDEsIHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyQ2xvc2VkKGNvbnRleHQpO1xufVxuIiwiZnVuY3Rpb24gc2lnbih4KSB7XG4gIHJldHVybiB4IDwgMCA/IC0xIDogMTtcbn1cblxuLy8gQ2FsY3VsYXRlIHRoZSBzbG9wZXMgb2YgdGhlIHRhbmdlbnRzIChIZXJtaXRlLXR5cGUgaW50ZXJwb2xhdGlvbikgYmFzZWQgb25cbi8vIHRoZSBmb2xsb3dpbmcgcGFwZXI6IFN0ZWZmZW4sIE0uIDE5OTAuIEEgU2ltcGxlIE1ldGhvZCBmb3IgTW9ub3RvbmljXG4vLyBJbnRlcnBvbGF0aW9uIGluIE9uZSBEaW1lbnNpb24uIEFzdHJvbm9teSBhbmQgQXN0cm9waHlzaWNzLCBWb2wuIDIzOSwgTk8uXG4vLyBOT1YoSUkpLCBQLiA0NDMsIDE5OTAuXG5mdW5jdGlvbiBzbG9wZTModGhhdCwgeDIsIHkyKSB7XG4gIHZhciBoMCA9IHRoYXQuX3gxIC0gdGhhdC5feDAsXG4gICAgICBoMSA9IHgyIC0gdGhhdC5feDEsXG4gICAgICBzMCA9ICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIChoMCB8fCBoMSA8IDAgJiYgLTApLFxuICAgICAgczEgPSAoeTIgLSB0aGF0Ll95MSkgLyAoaDEgfHwgaDAgPCAwICYmIC0wKSxcbiAgICAgIHAgPSAoczAgKiBoMSArIHMxICogaDApIC8gKGgwICsgaDEpO1xuICByZXR1cm4gKHNpZ24oczApICsgc2lnbihzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xufVxuXG4vLyBDYWxjdWxhdGUgYSBvbmUtc2lkZWQgc2xvcGUuXG5mdW5jdGlvbiBzbG9wZTIodGhhdCwgdCkge1xuICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XG4gIHJldHVybiBoID8gKDMgKiAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyBoIC0gdCkgLyAyIDogdDtcbn1cblxuLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmljX0hlcm1pdGVfc3BsaW5lI1JlcHJlc2VudGF0aW9uc1xuLy8gXCJ5b3UgY2FuIGV4cHJlc3MgY3ViaWMgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGluIHRlcm1zIG9mIGN1YmljIELDqXppZXIgY3VydmVzXG4vLyB3aXRoIHJlc3BlY3QgdG8gdGhlIGZvdXIgdmFsdWVzIHAwLCBwMCArIG0wIC8gMywgcDEgLSBtMSAvIDMsIHAxXCIuXG5mdW5jdGlvbiBwb2ludCh0aGF0LCB0MCwgdDEpIHtcbiAgdmFyIHgwID0gdGhhdC5feDAsXG4gICAgICB5MCA9IHRoYXQuX3kwLFxuICAgICAgeDEgPSB0aGF0Ll94MSxcbiAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCArIGR4LCB5MCArIGR4ICogdDAsIHgxIC0gZHgsIHkxIC0gZHggKiB0MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk1vbm90b25lWC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9XG4gICAgdGhpcy5fdDAgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl90MCwgc2xvcGUyKHRoaXMsIHRoaXMuX3QwKSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB0MSA9IE5hTjtcblxuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh4ID09PSB0aGlzLl94MSAmJiB5ID09PSB0aGlzLl95MSkgcmV0dXJuOyAvLyBJZ25vcmUgY29pbmNpZGVudCBwb2ludHMuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyBwb2ludCh0aGlzLCBzbG9wZTIodGhpcywgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpLCB0MSk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgdGhpcy5fdDAsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB0aGlzLl90MCA9IHQxO1xuICB9XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBuZXcgUmVmbGVjdENvbnRleHQoY29udGV4dCk7XG59XG5cbihNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIE1vbm90b25lWC5wcm90b3R5cGUucG9pbnQuY2FsbCh0aGlzLCB5LCB4KTtcbn07XG5cbmZ1bmN0aW9uIFJlZmxlY3RDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblJlZmxlY3RDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubW92ZVRvKHksIHgpOyB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkgeyB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpOyB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5saW5lVG8oeSwgeCk7IH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7IHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh5MSwgeDEsIHkyLCB4MiwgeSwgeCk7IH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVgoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWChjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xufVxuIiwiZnVuY3Rpb24gTmF0dXJhbChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5OYXR1cmFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gW107XG4gICAgdGhpcy5feSA9IFtdO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgIHkgPSB0aGlzLl95LFxuICAgICAgICBuID0geC5sZW5ndGg7XG5cbiAgICBpZiAobikge1xuICAgICAgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHhbMF0sIHlbMF0pIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeFswXSwgeVswXSk7XG4gICAgICBpZiAobiA9PT0gMikge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzFdLCB5WzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBweCA9IGNvbnRyb2xQb2ludHMoeCksXG4gICAgICAgICAgICBweSA9IGNvbnRyb2xQb2ludHMoeSk7XG4gICAgICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAxOyBpMSA8IG47ICsraTAsICsraTEpIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8ocHhbMF1baTBdLCBweVswXVtpMF0sIHB4WzFdW2kwXSwgcHlbMV1baTBdLCB4W2kxXSwgeVtpMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgbiA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl94LnB1c2goK3gpO1xuICAgIHRoaXMuX3kucHVzaCgreSk7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL3d3dy5wYXJ0aWNsZWluY2VsbC5jb20vMjAxMi9iZXppZXItc3BsaW5lcy8gZm9yIGRlcml2YXRpb24uXG5mdW5jdGlvbiBjb250cm9sUG9pbnRzKHgpIHtcbiAgdmFyIGksXG4gICAgICBuID0geC5sZW5ndGggLSAxLFxuICAgICAgbSxcbiAgICAgIGEgPSBuZXcgQXJyYXkobiksXG4gICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgciA9IG5ldyBBcnJheShuKTtcbiAgYVswXSA9IDAsIGJbMF0gPSAyLCByWzBdID0geFswXSArIDIgKiB4WzFdO1xuICBmb3IgKGkgPSAxOyBpIDwgbiAtIDE7ICsraSkgYVtpXSA9IDEsIGJbaV0gPSA0LCByW2ldID0gNCAqIHhbaV0gKyAyICogeFtpICsgMV07XG4gIGFbbiAtIDFdID0gMiwgYltuIC0gMV0gPSA3LCByW24gLSAxXSA9IDggKiB4W24gLSAxXSArIHhbbl07XG4gIGZvciAoaSA9IDE7IGkgPCBuOyArK2kpIG0gPSBhW2ldIC8gYltpIC0gMV0sIGJbaV0gLT0gbSwgcltpXSAtPSBtICogcltpIC0gMV07XG4gIGFbbiAtIDFdID0gcltuIC0gMV0gLyBiW24gLSAxXTtcbiAgZm9yIChpID0gbiAtIDI7IGkgPj0gMDsgLS1pKSBhW2ldID0gKHJbaV0gLSBhW2kgKyAxXSkgLyBiW2ldO1xuICBiW24gLSAxXSA9ICh4W25dICsgYVtuIC0gMV0pIC8gMjtcbiAgZm9yIChpID0gMDsgaSA8IG4gLSAxOyArK2kpIGJbaV0gPSAyICogeFtpICsgMV0gLSBhW2kgKyAxXTtcbiAgcmV0dXJuIFthLCBiXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IE5hdHVyYWwoY29udGV4dCk7XG59XG4iLCJmdW5jdGlvbiBTdGVwKGNvbnRleHQsIHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX3QgPSB0O1xufVxuXG5TdGVwLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICgwIDwgdGhpcy5fdCAmJiB0aGlzLl90IDwgMSAmJiB0aGlzLl9wb2ludCA9PT0gMikgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgdGhpcy5feSk7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGlmICh0aGlzLl9saW5lID49IDApIHRoaXMuX3QgPSAxIC0gdGhpcy5fdCwgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodGhpcy5fdCA8PSAwKSB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgeSk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHgxID0gdGhpcy5feCAqICgxIC0gdGhpcy5fdCkgKyB4ICogdGhpcy5fdDtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgdGhpcy5feSk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl94ID0geCwgdGhpcy5feSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDAuNSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwQmVmb3JlKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RlcEFmdGVyKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDEpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMSkpIHJldHVybjtcbiAgZm9yICh2YXIgaSA9IDEsIGosIHMwLCBzMSA9IHNlcmllc1tvcmRlclswXV0sIG4sIG0gPSBzMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBzMCA9IHMxLCBzMSA9IHNlcmllc1tvcmRlcltpXV07XG4gICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgczFbal1bMV0gKz0gczFbal1bMF0gPSBpc05hTihzMFtqXVsxXSkgPyBzMFtqXVswXSA6IHMwW2pdWzFdO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHZhciBuID0gc2VyaWVzLmxlbmd0aCwgbyA9IG5ldyBBcnJheShuKTtcbiAgd2hpbGUgKC0tbiA+PSAwKSBvW25dID0gbjtcbiAgcmV0dXJuIG87XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgb2Zmc2V0Tm9uZSBmcm9tIFwiLi9vZmZzZXQvbm9uZS5qc1wiO1xuaW1wb3J0IG9yZGVyTm9uZSBmcm9tIFwiLi9vcmRlci9ub25lLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YWNrVmFsdWUoZCwga2V5KSB7XG4gIHJldHVybiBkW2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IGNvbnN0YW50KFtdKSxcbiAgICAgIG9yZGVyID0gb3JkZXJOb25lLFxuICAgICAgb2Zmc2V0ID0gb2Zmc2V0Tm9uZSxcbiAgICAgIHZhbHVlID0gc3RhY2tWYWx1ZTtcblxuICBmdW5jdGlvbiBzdGFjayhkYXRhKSB7XG4gICAgdmFyIGt6ID0ga2V5cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBpLFxuICAgICAgICBtID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIG4gPSBrei5sZW5ndGgsXG4gICAgICAgIHN6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBvejtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGZvciAodmFyIGtpID0ga3pbaV0sIHNpID0gc3pbaV0gPSBuZXcgQXJyYXkobSksIGogPSAwLCBzaWo7IGogPCBtOyArK2opIHtcbiAgICAgICAgc2lbal0gPSBzaWogPSBbMCwgK3ZhbHVlKGRhdGFbal0sIGtpLCBqLCBkYXRhKV07XG4gICAgICAgIHNpai5kYXRhID0gZGF0YVtqXTtcbiAgICAgIH1cbiAgICAgIHNpLmtleSA9IGtpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIG96ID0gb3JkZXIoc3opOyBpIDwgbjsgKytpKSB7XG4gICAgICBzeltveltpXV0uaW5kZXggPSBpO1xuICAgIH1cblxuICAgIG9mZnNldChzeiwgb3opO1xuICAgIHJldHVybiBzejtcbiAgfVxuXG4gIHN0YWNrLmtleXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoc2xpY2UuY2FsbChfKSksIHN0YWNrKSA6IGtleXM7XG4gIH07XG5cbiAgc3RhY2sudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgc3RhY2spIDogdmFsdWU7XG4gIH07XG5cbiAgc3RhY2sub3JkZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3JkZXIgPSBfID09IG51bGwgPyBvcmRlck5vbmUgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpLCBzdGFjaykgOiBvcmRlcjtcbiAgfTtcblxuICBzdGFjay5vZmZzZXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob2Zmc2V0ID0gXyA9PSBudWxsID8gb2Zmc2V0Tm9uZSA6IF8sIHN0YWNrKSA6IG9mZnNldDtcbiAgfTtcblxuICByZXR1cm4gc3RhY2s7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIGksIG4sIGogPSAwLCBtID0gc2VyaWVzWzBdLmxlbmd0aCwgeTsgaiA8IG07ICsraikge1xuICAgIGZvciAoeSA9IGkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xuICAgIGlmICh5KSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzZXJpZXNbaV1bal1bMV0gLz0geTtcbiAgfVxuICBub25lKHNlcmllcywgb3JkZXIpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgaSwgaiA9IDAsIGQsIGR5LCB5cCwgeW4sIG4sIG0gPSBzZXJpZXNbb3JkZXJbMF1dLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAoeXAgPSB5biA9IDAsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGR5ID0gKGQgPSBzZXJpZXNbb3JkZXJbaV1dW2pdKVsxXSAtIGRbMF0pID4gMCkge1xuICAgICAgICBkWzBdID0geXAsIGRbMV0gPSB5cCArPSBkeTtcbiAgICAgIH0gZWxzZSBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGRbMV0gPSB5biwgZFswXSA9IHluICs9IGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZFswXSA9IDAsIGRbMV0gPSBkeTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgaiA9IDAsIHMwID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMwLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGkgPSAwLCB5ID0gMDsgaSA8IG47ICsraSkgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICBzMFtqXVsxXSArPSBzMFtqXVswXSA9IC15IC8gMjtcbiAgfVxuICBub25lKHNlcmllcywgb3JkZXIpO1xufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSB8fCAhKChtID0gKHMwID0gc2VyaWVzW29yZGVyWzBdXSkubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIHkgPSAwLCBqID0gMSwgczAsIG0sIG47IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBpID0gMCwgczEgPSAwLCBzMiA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBzaSA9IHNlcmllc1tvcmRlcltpXV0sXG4gICAgICAgICAgc2lqMCA9IHNpW2pdWzFdIHx8IDAsXG4gICAgICAgICAgc2lqMSA9IHNpW2ogLSAxXVsxXSB8fCAwLFxuICAgICAgICAgIHMzID0gKHNpajAgLSBzaWoxKSAvIDI7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGk7ICsraykge1xuICAgICAgICB2YXIgc2sgPSBzZXJpZXNbb3JkZXJba11dLFxuICAgICAgICAgICAgc2tqMCA9IHNrW2pdWzFdIHx8IDAsXG4gICAgICAgICAgICBza2oxID0gc2tbaiAtIDFdWzFdIHx8IDA7XG4gICAgICAgIHMzICs9IHNrajAgLSBza2oxO1xuICAgICAgfVxuICAgICAgczEgKz0gc2lqMCwgczIgKz0gczMgKiBzaWowO1xuICAgIH1cbiAgICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgICBpZiAoczEpIHkgLT0gczIgLyBzMTtcbiAgfVxuICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgbm9uZShzZXJpZXMsIG9yZGVyKTtcbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHZhciBwZWFrcyA9IHNlcmllcy5tYXAocGVhayk7XG4gIHJldHVybiBub25lKHNlcmllcykuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBwZWFrc1thXSAtIHBlYWtzW2JdOyB9KTtcbn1cblxuZnVuY3Rpb24gcGVhayhzZXJpZXMpIHtcbiAgdmFyIGkgPSAtMSwgaiA9IDAsIG4gPSBzZXJpZXMubGVuZ3RoLCB2aSwgdmogPSAtSW5maW5pdHk7XG4gIHdoaWxlICgrK2kgPCBuKSBpZiAoKHZpID0gK3Nlcmllc1tpXVsxXSkgPiB2aikgdmogPSB2aSwgaiA9IGk7XG4gIHJldHVybiBqO1xufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgdmFyIHN1bXMgPSBzZXJpZXMubWFwKHN1bSk7XG4gIHJldHVybiBub25lKHNlcmllcykuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzdW1zW2FdIC0gc3Vtc1tiXTsgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdW0oc2VyaWVzKSB7XG4gIHZhciBzID0gMCwgaSA9IC0xLCBuID0gc2VyaWVzLmxlbmd0aCwgdjtcbiAgd2hpbGUgKCsraSA8IG4pIGlmICh2ID0gK3Nlcmllc1tpXVsxXSkgcyArPSB2O1xuICByZXR1cm4gcztcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICByZXR1cm4gYXNjZW5kaW5nKHNlcmllcykucmV2ZXJzZSgpO1xufVxuIiwiaW1wb3J0IGFwcGVhcmFuY2UgZnJvbSBcIi4vYXBwZWFyYW5jZS5qc1wiO1xuaW1wb3J0IHtzdW19IGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgdmFyIG4gPSBzZXJpZXMubGVuZ3RoLFxuICAgICAgaSxcbiAgICAgIGosXG4gICAgICBzdW1zID0gc2VyaWVzLm1hcChzdW0pLFxuICAgICAgb3JkZXIgPSBhcHBlYXJhbmNlKHNlcmllcyksXG4gICAgICB0b3AgPSAwLFxuICAgICAgYm90dG9tID0gMCxcbiAgICAgIHRvcHMgPSBbXSxcbiAgICAgIGJvdHRvbXMgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgaiA9IG9yZGVyW2ldO1xuICAgIGlmICh0b3AgPCBib3R0b20pIHtcbiAgICAgIHRvcCArPSBzdW1zW2pdO1xuICAgICAgdG9wcy5wdXNoKGopO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3R0b20gKz0gc3Vtc1tqXTtcbiAgICAgIGJvdHRvbXMucHVzaChqKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm90dG9tcy5yZXZlcnNlKCkuY29uY2F0KHRvcHMpO1xufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgcmV0dXJuIG5vbmUoc2VyaWVzKS5yZXZlcnNlKCk7XG59XG4iLCJpbXBvcnQge3V0Y0Zvcm1hdH0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZS5qc1wiO1xuXG5leHBvcnQgdmFyIGlzb1NwZWNpZmllciA9IFwiJVktJW0tJWRUJUg6JU06JVMuJUxaXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdElzb05hdGl2ZShkYXRlKSB7XG4gIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG59XG5cbnZhciBmb3JtYXRJc28gPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ1xuICAgID8gZm9ybWF0SXNvTmF0aXZlXG4gICAgOiB1dGNGb3JtYXQoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0SXNvO1xuIiwiaW1wb3J0IHtpc29TcGVjaWZpZXJ9IGZyb20gXCIuL2lzb0Zvcm1hdC5qc1wiO1xuaW1wb3J0IHt1dGNQYXJzZX0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZS5qc1wiO1xuXG5mdW5jdGlvbiBwYXJzZUlzb05hdGl2ZShzdHJpbmcpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBudWxsIDogZGF0ZTtcbn1cblxudmFyIHBhcnNlSXNvID0gK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpXG4gICAgPyBwYXJzZUlzb05hdGl2ZVxuICAgIDogdXRjUGFyc2UoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VJc287XG4iLCJpbXBvcnQge1RpbWVyLCBub3d9IGZyb20gXCIuL3RpbWVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lciwgdG90YWwgPSBkZWxheTtcbiAgaWYgKGRlbGF5ID09IG51bGwpIHJldHVybiB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSwgdDtcbiAgZGVsYXkgPSArZGVsYXksIHRpbWUgPSB0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lO1xuICB0LnJlc3RhcnQoZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgZWxhcHNlZCArPSB0b3RhbDtcbiAgICB0LnJlc3RhcnQodGljaywgdG90YWwgKz0gZGVsYXksIHRpbWUpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZnVuY3Rpb24geChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24geShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuIiwiZnVuY3Rpb24gUmVkQmxhY2tUcmVlKCkge1xuICB0aGlzLl8gPSBudWxsOyAvLyByb290IG5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlZEJsYWNrTm9kZShub2RlKSB7XG4gIG5vZGUuVSA9IC8vIHBhcmVudCBub2RlXG4gIG5vZGUuQyA9IC8vIGNvbG9yIC0gdHJ1ZSBmb3IgcmVkLCBmYWxzZSBmb3IgYmxhY2tcbiAgbm9kZS5MID0gLy8gbGVmdCBub2RlXG4gIG5vZGUuUiA9IC8vIHJpZ2h0IG5vZGVcbiAgbm9kZS5QID0gLy8gcHJldmlvdXMgbm9kZVxuICBub2RlLk4gPSBudWxsOyAvLyBuZXh0IG5vZGVcbn1cblxuUmVkQmxhY2tUcmVlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFJlZEJsYWNrVHJlZSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uKGFmdGVyLCBub2RlKSB7XG4gICAgdmFyIHBhcmVudCwgZ3JhbmRwYSwgdW5jbGU7XG5cbiAgICBpZiAoYWZ0ZXIpIHtcbiAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgbm9kZS5OID0gYWZ0ZXIuTjtcbiAgICAgIGlmIChhZnRlci5OKSBhZnRlci5OLlAgPSBub2RlO1xuICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICBpZiAoYWZ0ZXIuUikge1xuICAgICAgICBhZnRlciA9IGFmdGVyLlI7XG4gICAgICAgIHdoaWxlIChhZnRlci5MKSBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgIGFmdGVyLkwgPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWZ0ZXIuUiA9IG5vZGU7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuXykge1xuICAgICAgYWZ0ZXIgPSBSZWRCbGFja0ZpcnN0KHRoaXMuXyk7XG4gICAgICBub2RlLlAgPSBudWxsO1xuICAgICAgbm9kZS5OID0gYWZ0ZXI7XG4gICAgICBhZnRlci5QID0gYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgICAgIHRoaXMuXyA9IG5vZGU7XG4gICAgICBwYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgICBub2RlLkwgPSBub2RlLlIgPSBudWxsO1xuICAgIG5vZGUuVSA9IHBhcmVudDtcbiAgICBub2RlLkMgPSB0cnVlO1xuXG4gICAgYWZ0ZXIgPSBub2RlO1xuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LkMpIHtcbiAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcbiAgICAgIGlmIChwYXJlbnQgPT09IGdyYW5kcGEuTCkge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuUjtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5SKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuICAgICAgICBpZiAodW5jbGUgJiYgdW5jbGUuQykge1xuICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgYWZ0ZXIgPSBncmFuZHBhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBncmFuZHBhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICB9XG4gICAgdGhpcy5fLkMgPSBmYWxzZTtcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5OKSBub2RlLk4uUCA9IG5vZGUuUDtcbiAgICBpZiAobm9kZS5QKSBub2RlLlAuTiA9IG5vZGUuTjtcbiAgICBub2RlLk4gPSBub2RlLlAgPSBudWxsO1xuXG4gICAgdmFyIHBhcmVudCA9IG5vZGUuVSxcbiAgICAgICAgc2libGluZyxcbiAgICAgICAgbGVmdCA9IG5vZGUuTCxcbiAgICAgICAgcmlnaHQgPSBub2RlLlIsXG4gICAgICAgIG5leHQsXG4gICAgICAgIHJlZDtcblxuICAgIGlmICghbGVmdCkgbmV4dCA9IHJpZ2h0O1xuICAgIGVsc2UgaWYgKCFyaWdodCkgbmV4dCA9IGxlZnQ7XG4gICAgZWxzZSBuZXh0ID0gUmVkQmxhY2tGaXJzdChyaWdodCk7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IG5vZGUpIHBhcmVudC5MID0gbmV4dDtcbiAgICAgIGVsc2UgcGFyZW50LlIgPSBuZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl8gPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChsZWZ0ICYmIHJpZ2h0KSB7XG4gICAgICByZWQgPSBuZXh0LkM7XG4gICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICBuZXh0LkwgPSBsZWZ0O1xuICAgICAgbGVmdC5VID0gbmV4dDtcbiAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICBwYXJlbnQgPSBuZXh0LlU7XG4gICAgICAgIG5leHQuVSA9IG5vZGUuVTtcbiAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgcGFyZW50LkwgPSBub2RlO1xuICAgICAgICBuZXh0LlIgPSByaWdodDtcbiAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0LlUgPSBwYXJlbnQ7XG4gICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZCA9IG5vZGUuQztcbiAgICAgIG5vZGUgPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChub2RlKSBub2RlLlUgPSBwYXJlbnQ7XG4gICAgaWYgKHJlZCkgcmV0dXJuO1xuICAgIGlmIChub2RlICYmIG5vZGUuQykgeyBub2RlLkMgPSBmYWxzZTsgcmV0dXJuOyB9XG5cbiAgICBkbyB7XG4gICAgICBpZiAobm9kZSA9PT0gdGhpcy5fKSBicmVhaztcbiAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgICAgfHwgKHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykpIHtcbiAgICAgICAgICBpZiAoIXNpYmxpbmcuUiB8fCAhc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIHNpYmxpbmcuTC5DID0gZmFsc2U7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgIHNpYmxpbmcuQyA9IGZhbHNlO1xuICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLkwgfHwgIXNpYmxpbmcuTC5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5VO1xuICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuXG4gICAgaWYgKG5vZGUpIG5vZGUuQyA9IGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZWRCbGFja1JvdGF0ZUxlZnQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5SLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLlIgPSBxLkw7XG4gIGlmIChwLlIpIHAuUi5VID0gcDtcbiAgcS5MID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVSaWdodCh0cmVlLCBub2RlKSB7XG4gIHZhciBwID0gbm9kZSxcbiAgICAgIHEgPSBub2RlLkwsXG4gICAgICBwYXJlbnQgPSBwLlU7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO1xuICAgIGVsc2UgcGFyZW50LlIgPSBxO1xuICB9IGVsc2Uge1xuICAgIHRyZWUuXyA9IHE7XG4gIH1cblxuICBxLlUgPSBwYXJlbnQ7XG4gIHAuVSA9IHE7XG4gIHAuTCA9IHEuUjtcbiAgaWYgKHAuTCkgcC5MLlUgPSBwO1xuICBxLlIgPSBwO1xufVxuXG5mdW5jdGlvbiBSZWRCbGFja0ZpcnN0KG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZEJsYWNrVHJlZTtcbiIsImltcG9ydCB7Y2VsbHMsIGVkZ2VzLCBlcHNpbG9ufSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFZGdlKGxlZnQsIHJpZ2h0LCB2MCwgdjEpIHtcbiAgdmFyIGVkZ2UgPSBbbnVsbCwgbnVsbF0sXG4gICAgICBpbmRleCA9IGVkZ2VzLnB1c2goZWRnZSkgLSAxO1xuICBlZGdlLmxlZnQgPSBsZWZ0O1xuICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gIGlmICh2MCkgc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdjApO1xuICBpZiAodjEpIHNldEVkZ2VFbmQoZWRnZSwgcmlnaHQsIGxlZnQsIHYxKTtcbiAgY2VsbHNbbGVmdC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICBjZWxsc1tyaWdodC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICByZXR1cm4gZWRnZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJvcmRlckVkZ2UobGVmdCwgdjAsIHYxKSB7XG4gIHZhciBlZGdlID0gW3YwLCB2MV07XG4gIGVkZ2UubGVmdCA9IGxlZnQ7XG4gIHJldHVybiBlZGdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdmVydGV4KSB7XG4gIGlmICghZWRnZVswXSAmJiAhZWRnZVsxXSkge1xuICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gICAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gIH0gZWxzZSBpZiAoZWRnZS5sZWZ0ID09PSByaWdodCkge1xuICAgIGVkZ2VbMV0gPSB2ZXJ0ZXg7XG4gIH0gZWxzZSB7XG4gICAgZWRnZVswXSA9IHZlcnRleDtcbiAgfVxufVxuXG4vLyBMaWFuZ+KAk0JhcnNreSBsaW5lIGNsaXBwaW5nLlxuZnVuY3Rpb24gY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIGEgPSBlZGdlWzBdLFxuICAgICAgYiA9IGVkZ2VbMV0sXG4gICAgICBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICB0MCA9IDAsXG4gICAgICB0MSA9IDEsXG4gICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICByO1xuXG4gIHIgPSB4MCAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geDEgLSBheDtcbiAgaWYgKCFkeCAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgciA9IHkwIC0gYXk7XG4gIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB5MSAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICBpZiAoISh0MCA+IDApICYmICEodDEgPCAxKSkgcmV0dXJuIHRydWU7IC8vIFRPRE8gQmV0dGVyIGNoZWNrP1xuXG4gIGlmICh0MCA+IDApIGVkZ2VbMF0gPSBbYXggKyB0MCAqIGR4LCBheSArIHQwICogZHldO1xuICBpZiAodDEgPCAxKSBlZGdlWzFdID0gW2F4ICsgdDEgKiBkeCwgYXkgKyB0MSAqIGR5XTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbm5lY3RFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciB2MSA9IGVkZ2VbMV07XG4gIGlmICh2MSkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHYwID0gZWRnZVswXSxcbiAgICAgIGxlZnQgPSBlZGdlLmxlZnQsXG4gICAgICByaWdodCA9IGVkZ2UucmlnaHQsXG4gICAgICBseCA9IGxlZnRbMF0sXG4gICAgICBseSA9IGxlZnRbMV0sXG4gICAgICByeCA9IHJpZ2h0WzBdLFxuICAgICAgcnkgPSByaWdodFsxXSxcbiAgICAgIGZ4ID0gKGx4ICsgcngpIC8gMixcbiAgICAgIGZ5ID0gKGx5ICsgcnkpIC8gMixcbiAgICAgIGZtLFxuICAgICAgZmI7XG5cbiAgaWYgKHJ5ID09PSBseSkge1xuICAgIGlmIChmeCA8IHgwIHx8IGZ4ID49IHgxKSByZXR1cm47XG4gICAgaWYgKGx4ID4gcngpIHtcbiAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MF07XG4gICAgICBlbHNlIGlmICh2MFsxXSA+PSB5MSkgcmV0dXJuO1xuICAgICAgdjEgPSBbZngsIHkxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF2MCkgdjAgPSBbZngsIHkxXTtcbiAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgIHYxID0gW2Z4LCB5MF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZtID0gKGx4IC0gcngpIC8gKHJ5IC0gbHkpO1xuICAgIGZiID0gZnkgLSBmbSAqIGZ4O1xuICAgIGlmIChmbSA8IC0xIHx8IGZtID4gMSkge1xuICAgICAgaWYgKGx4ID4gcngpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbKHkwIC0gZmIpIC8gZm0sIHkwXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgICAgdjEgPSBbKHkxIC0gZmIpIC8gZm0sIHkxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgICAgdjEgPSBbKHkwIC0gZmIpIC8gZm0sIHkwXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGx5IDwgcnkpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICAgIGVsc2UgaWYgKHYwWzBdID49IHgxKSByZXR1cm47XG4gICAgICAgIHYxID0gW3gxLCBmbSAqIHgxICsgZmJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDEsIGZtICogeDEgKyBmYl07XG4gICAgICAgIGVsc2UgaWYgKHYwWzBdIDwgeDApIHJldHVybjtcbiAgICAgICAgdjEgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWRnZVswXSA9IHYwO1xuICBlZGdlWzFdID0gdjE7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xpcEVkZ2VzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBpID0gZWRnZXMubGVuZ3RoLFxuICAgICAgZWRnZTtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKCFjb25uZWN0RWRnZShlZGdlID0gZWRnZXNbaV0sIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICB8fCAhY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpXG4gICAgICAgIHx8ICEoTWF0aC5hYnMoZWRnZVswXVswXSAtIGVkZ2VbMV1bMF0pID4gZXBzaWxvblxuICAgICAgICAgICAgfHwgTWF0aC5hYnMoZWRnZVswXVsxXSAtIGVkZ2VbMV1bMV0pID4gZXBzaWxvbikpIHtcbiAgICAgIGRlbGV0ZSBlZGdlc1tpXTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7Y3JlYXRlQm9yZGVyRWRnZX0gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IHtjZWxscywgZWRnZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNlbGwoc2l0ZSkge1xuICByZXR1cm4gY2VsbHNbc2l0ZS5pbmRleF0gPSB7XG4gICAgc2l0ZTogc2l0ZSxcbiAgICBoYWxmZWRnZXM6IFtdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2UpIHtcbiAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXG4gICAgICB2YSA9IGVkZ2UubGVmdCxcbiAgICAgIHZiID0gZWRnZS5yaWdodDtcbiAgaWYgKHNpdGUgPT09IHZiKSB2YiA9IHZhLCB2YSA9IHNpdGU7XG4gIGlmICh2YikgcmV0dXJuIE1hdGguYXRhbjIodmJbMV0gLSB2YVsxXSwgdmJbMF0gLSB2YVswXSk7XG4gIGlmIChzaXRlID09PSB2YSkgdmEgPSBlZGdlWzFdLCB2YiA9IGVkZ2VbMF07XG4gIGVsc2UgdmEgPSBlZGdlWzBdLCB2YiA9IGVkZ2VbMV07XG4gIHJldHVybiBNYXRoLmF0YW4yKHZhWzBdIC0gdmJbMF0sIHZiWzFdIC0gdmFbMV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZSkge1xuICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCAhPT0gY2VsbC5zaXRlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZSkge1xuICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCA9PT0gY2VsbC5zaXRlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0Q2VsbEhhbGZlZGdlcygpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGhhbGZlZGdlcywgaiwgbTsgaSA8IG47ICsraSkge1xuICAgIGlmICgoY2VsbCA9IGNlbGxzW2ldKSAmJiAobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkge1xuICAgICAgdmFyIGluZGV4ID0gbmV3IEFycmF5KG0pLFxuICAgICAgICAgIGFycmF5ID0gbmV3IEFycmF5KG0pO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgaW5kZXhbal0gPSBqLCBhcnJheVtqXSA9IGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tqXV0pO1xuICAgICAgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBhcnJheVtqXSAtIGFycmF5W2ldOyB9KTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGFycmF5W2pdID0gaGFsZmVkZ2VzW2luZGV4W2pdXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGhhbGZlZGdlc1tqXSA9IGFycmF5W2pdO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBuQ2VsbHMgPSBjZWxscy5sZW5ndGgsXG4gICAgICBpQ2VsbCxcbiAgICAgIGNlbGwsXG4gICAgICBzaXRlLFxuICAgICAgaUhhbGZlZGdlLFxuICAgICAgaGFsZmVkZ2VzLFxuICAgICAgbkhhbGZlZGdlcyxcbiAgICAgIHN0YXJ0LFxuICAgICAgc3RhcnRYLFxuICAgICAgc3RhcnRZLFxuICAgICAgZW5kLFxuICAgICAgZW5kWCxcbiAgICAgIGVuZFksXG4gICAgICBjb3ZlciA9IHRydWU7XG5cbiAgZm9yIChpQ2VsbCA9IDA7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgIHNpdGUgPSBjZWxsLnNpdGU7XG4gICAgICBoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcztcbiAgICAgIGlIYWxmZWRnZSA9IGhhbGZlZGdlcy5sZW5ndGg7XG5cbiAgICAgIC8vIFJlbW92ZSBhbnkgZGFuZ2xpbmcgY2xpcHBlZCBlZGdlcy5cbiAgICAgIHdoaWxlIChpSGFsZmVkZ2UtLSkge1xuICAgICAgICBpZiAoIWVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSkge1xuICAgICAgICAgIGhhbGZlZGdlcy5zcGxpY2UoaUhhbGZlZGdlLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJbnNlcnQgYW55IGJvcmRlciBlZGdlcyBhcyBuZWNlc3NhcnkuXG4gICAgICBpSGFsZmVkZ2UgPSAwLCBuSGFsZmVkZ2VzID0gaGFsZmVkZ2VzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpSGFsZmVkZ2UgPCBuSGFsZmVkZ2VzKSB7XG4gICAgICAgIGVuZCA9IGNlbGxIYWxmZWRnZUVuZChjZWxsLCBlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pLCBlbmRYID0gZW5kWzBdLCBlbmRZID0gZW5kWzFdO1xuICAgICAgICBzdGFydCA9IGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1srK2lIYWxmZWRnZSAlIG5IYWxmZWRnZXNdXSksIHN0YXJ0WCA9IHN0YXJ0WzBdLCBzdGFydFkgPSBzdGFydFsxXTtcbiAgICAgICAgaWYgKE1hdGguYWJzKGVuZFggLSBzdGFydFgpID4gZXBzaWxvbiB8fCBNYXRoLmFicyhlbmRZIC0gc3RhcnRZKSA+IGVwc2lsb24pIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMCwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIGVuZCxcbiAgICAgICAgICAgICAgTWF0aC5hYnMoZW5kWCAtIHgwKSA8IGVwc2lsb24gJiYgeTEgLSBlbmRZID4gZXBzaWxvbiA/IFt4MCwgTWF0aC5hYnMoc3RhcnRYIC0geDApIDwgZXBzaWxvbiA/IHN0YXJ0WSA6IHkxXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MSkgPCBlcHNpbG9uICYmIHgxIC0gZW5kWCA+IGVwc2lsb24gPyBbTWF0aC5hYnMoc3RhcnRZIC0geTEpIDwgZXBzaWxvbiA/IHN0YXJ0WCA6IHgxLCB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRYIC0geDEpIDwgZXBzaWxvbiAmJiBlbmRZIC0geTAgPiBlcHNpbG9uID8gW3gxLCBNYXRoLmFicyhzdGFydFggLSB4MSkgPCBlcHNpbG9uID8gc3RhcnRZIDogeTBdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkwKSA8IGVwc2lsb24gJiYgZW5kWCAtIHgwID4gZXBzaWxvbiA/IFtNYXRoLmFicyhzdGFydFkgLSB5MCkgPCBlcHNpbG9uID8gc3RhcnRYIDogeDAsIHkwXVxuICAgICAgICAgICAgICA6IG51bGwpKSAtIDEpO1xuICAgICAgICAgICsrbkhhbGZlZGdlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobkhhbGZlZGdlcykgY292ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlbuKAmXQgYW55IGVkZ2VzLCBoYXZlIHRoZSBjbG9zZXN0IHNpdGUgY292ZXIgdGhlIGV4dGVudC5cbiAgLy8gSXQgZG9lc27igJl0IG1hdHRlciB3aGljaCBjb3JuZXIgb2YgdGhlIGV4dGVudCB3ZSBtZWFzdXJlIVxuICBpZiAoY292ZXIpIHtcbiAgICB2YXIgZHgsIGR5LCBkMiwgZGMgPSBJbmZpbml0eTtcblxuICAgIGZvciAoaUNlbGwgPSAwLCBjb3ZlciA9IG51bGw7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgICBkeCA9IHNpdGVbMF0gLSB4MDtcbiAgICAgICAgZHkgPSBzaXRlWzFdIC0geTA7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IGRjKSBkYyA9IGQyLCBjb3ZlciA9IGNlbGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdmVyKSB7XG4gICAgICB2YXIgdjAwID0gW3gwLCB5MF0sIHYwMSA9IFt4MCwgeTFdLCB2MTEgPSBbeDEsIHkxXSwgdjEwID0gW3gxLCB5MF07XG4gICAgICBjb3Zlci5oYWxmZWRnZXMucHVzaChcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUgPSBjb3Zlci5zaXRlLCB2MDAsIHYwMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYwMSwgdjExKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjExLCB2MTApKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTAsIHYwMCkpIC0gMVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBMYXN0bHkgZGVsZXRlIGFueSBjZWxscyB3aXRoIG5vIGVkZ2VzOyB0aGVzZSB3ZXJlIGVudGlyZWx5IGNsaXBwZWQuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBpZiAoIWNlbGwuaGFsZmVkZ2VzLmxlbmd0aCkge1xuICAgICAgICBkZWxldGUgY2VsbHNbaUNlbGxdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtSZWRCbGFja05vZGV9IGZyb20gXCIuL1JlZEJsYWNrVHJlZVwiO1xuaW1wb3J0IHtjaXJjbGVzLCBlcHNpbG9uMn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG52YXIgY2lyY2xlUG9vbCA9IFtdO1xuXG5leHBvcnQgdmFyIGZpcnN0Q2lyY2xlO1xuXG5mdW5jdGlvbiBDaXJjbGUoKSB7XG4gIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgdGhpcy54ID1cbiAgdGhpcy55ID1cbiAgdGhpcy5hcmMgPVxuICB0aGlzLnNpdGUgPVxuICB0aGlzLmN5ID0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaENpcmNsZShhcmMpIHtcbiAgdmFyIGxBcmMgPSBhcmMuUCxcbiAgICAgIHJBcmMgPSBhcmMuTjtcblxuICBpZiAoIWxBcmMgfHwgIXJBcmMpIHJldHVybjtcblxuICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICBjU2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgclNpdGUgPSByQXJjLnNpdGU7XG5cbiAgaWYgKGxTaXRlID09PSByU2l0ZSkgcmV0dXJuO1xuXG4gIHZhciBieCA9IGNTaXRlWzBdLFxuICAgICAgYnkgPSBjU2l0ZVsxXSxcbiAgICAgIGF4ID0gbFNpdGVbMF0gLSBieCxcbiAgICAgIGF5ID0gbFNpdGVbMV0gLSBieSxcbiAgICAgIGN4ID0gclNpdGVbMF0gLSBieCxcbiAgICAgIGN5ID0gclNpdGVbMV0gLSBieTtcblxuICB2YXIgZCA9IDIgKiAoYXggKiBjeSAtIGF5ICogY3gpO1xuICBpZiAoZCA+PSAtZXBzaWxvbjIpIHJldHVybjtcblxuICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXG4gICAgICB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQ7XG5cbiAgdmFyIGNpcmNsZSA9IGNpcmNsZVBvb2wucG9wKCkgfHwgbmV3IENpcmNsZTtcbiAgY2lyY2xlLmFyYyA9IGFyYztcbiAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcbiAgY2lyY2xlLnggPSB4ICsgYng7XG4gIGNpcmNsZS55ID0gKGNpcmNsZS5jeSA9IHkgKyBieSkgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7IC8vIHkgYm90dG9tXG5cbiAgYXJjLmNpcmNsZSA9IGNpcmNsZTtcblxuICB2YXIgYmVmb3JlID0gbnVsbCxcbiAgICAgIG5vZGUgPSBjaXJjbGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgKGNpcmNsZS55ID09PSBub2RlLnkgJiYgY2lyY2xlLnggPD0gbm9kZS54KSkge1xuICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlLlA7IGJyZWFrOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZTsgYnJlYWs7IH1cbiAgICB9XG4gIH1cblxuICBjaXJjbGVzLmluc2VydChiZWZvcmUsIGNpcmNsZSk7XG4gIGlmICghYmVmb3JlKSBmaXJzdENpcmNsZSA9IGNpcmNsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaENpcmNsZShhcmMpIHtcbiAgdmFyIGNpcmNsZSA9IGFyYy5jaXJjbGU7XG4gIGlmIChjaXJjbGUpIHtcbiAgICBpZiAoIWNpcmNsZS5QKSBmaXJzdENpcmNsZSA9IGNpcmNsZS5OO1xuICAgIGNpcmNsZXMucmVtb3ZlKGNpcmNsZSk7XG4gICAgY2lyY2xlUG9vbC5wdXNoKGNpcmNsZSk7XG4gICAgUmVkQmxhY2tOb2RlKGNpcmNsZSk7XG4gICAgYXJjLmNpcmNsZSA9IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7UmVkQmxhY2tOb2RlfSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcbmltcG9ydCB7Y3JlYXRlQ2VsbH0gZnJvbSBcIi4vQ2VsbFwiO1xuaW1wb3J0IHthdHRhY2hDaXJjbGUsIGRldGFjaENpcmNsZX0gZnJvbSBcIi4vQ2lyY2xlXCI7XG5pbXBvcnQge2NyZWF0ZUVkZ2UsIHNldEVkZ2VFbmR9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCB7YmVhY2hlcywgZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG52YXIgYmVhY2hQb29sID0gW107XG5cbmZ1bmN0aW9uIEJlYWNoKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMuZWRnZSA9XG4gIHRoaXMuc2l0ZSA9XG4gIHRoaXMuY2lyY2xlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmVhY2goc2l0ZSkge1xuICB2YXIgYmVhY2ggPSBiZWFjaFBvb2wucG9wKCkgfHwgbmV3IEJlYWNoO1xuICBiZWFjaC5zaXRlID0gc2l0ZTtcbiAgcmV0dXJuIGJlYWNoO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hCZWFjaChiZWFjaCkge1xuICBkZXRhY2hDaXJjbGUoYmVhY2gpO1xuICBiZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gIGJlYWNoUG9vbC5wdXNoKGJlYWNoKTtcbiAgUmVkQmxhY2tOb2RlKGJlYWNoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUJlYWNoKGJlYWNoKSB7XG4gIHZhciBjaXJjbGUgPSBiZWFjaC5jaXJjbGUsXG4gICAgICB4ID0gY2lyY2xlLngsXG4gICAgICB5ID0gY2lyY2xlLmN5LFxuICAgICAgdmVydGV4ID0gW3gsIHldLFxuICAgICAgcHJldmlvdXMgPSBiZWFjaC5QLFxuICAgICAgbmV4dCA9IGJlYWNoLk4sXG4gICAgICBkaXNhcHBlYXJpbmcgPSBbYmVhY2hdO1xuXG4gIGRldGFjaEJlYWNoKGJlYWNoKTtcblxuICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuICB3aGlsZSAobEFyYy5jaXJjbGVcbiAgICAgICYmIE1hdGguYWJzKHggLSBsQXJjLmNpcmNsZS54KSA8IGVwc2lsb25cbiAgICAgICYmIE1hdGguYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uKSB7XG4gICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgZGV0YWNoQmVhY2gobEFyYyk7XG4gICAgbEFyYyA9IHByZXZpb3VzO1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gIGRldGFjaENpcmNsZShsQXJjKTtcblxuICB2YXIgckFyYyA9IG5leHQ7XG4gIHdoaWxlIChyQXJjLmNpcmNsZVxuICAgICAgJiYgTWF0aC5hYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgZXBzaWxvblxuICAgICAgJiYgTWF0aC5hYnMoeSAtIHJBcmMuY2lyY2xlLmN5KSA8IGVwc2lsb24pIHtcbiAgICBuZXh0ID0gckFyYy5OO1xuICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgIGRldGFjaEJlYWNoKHJBcmMpO1xuICAgIHJBcmMgPSBuZXh0O1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gIGRldGFjaENpcmNsZShyQXJjKTtcblxuICB2YXIgbkFyY3MgPSBkaXNhcHBlYXJpbmcubGVuZ3RoLFxuICAgICAgaUFyYztcbiAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcbiAgICByQXJjID0gZGlzYXBwZWFyaW5nW2lBcmNdO1xuICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbaUFyYyAtIDFdO1xuICAgIHNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcbiAgfVxuXG4gIGxBcmMgPSBkaXNhcHBlYXJpbmdbMF07XG4gIHJBcmMgPSBkaXNhcHBlYXJpbmdbbkFyY3MgLSAxXTtcbiAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgbnVsbCwgdmVydGV4KTtcblxuICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gIGF0dGFjaENpcmNsZShyQXJjKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEJlYWNoKHNpdGUpIHtcbiAgdmFyIHggPSBzaXRlWzBdLFxuICAgICAgZGlyZWN0cml4ID0gc2l0ZVsxXSxcbiAgICAgIGxBcmMsXG4gICAgICByQXJjLFxuICAgICAgZHhsLFxuICAgICAgZHhyLFxuICAgICAgbm9kZSA9IGJlYWNoZXMuXztcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGR4bCA9IGxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuICAgIGlmIChkeGwgPiBlcHNpbG9uKSBub2RlID0gbm9kZS5MOyBlbHNlIHtcbiAgICAgIGR4ciA9IHggLSByaWdodEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KTtcbiAgICAgIGlmIChkeHIgPiBlcHNpbG9uKSB7XG4gICAgICAgIGlmICghbm9kZS5SKSB7XG4gICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUuUjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkeGwgPiAtZXBzaWxvbikge1xuICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgckFyYyA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSBpZiAoZHhyID4gLWVwc2lsb24pIHtcbiAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICByQXJjID0gbm9kZS5OO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxBcmMgPSByQXJjID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjcmVhdGVDZWxsKHNpdGUpO1xuICB2YXIgbmV3QXJjID0gY3JlYXRlQmVhY2goc2l0ZSk7XG4gIGJlYWNoZXMuaW5zZXJ0KGxBcmMsIG5ld0FyYyk7XG5cbiAgaWYgKCFsQXJjICYmICFyQXJjKSByZXR1cm47XG5cbiAgaWYgKGxBcmMgPT09IHJBcmMpIHtcbiAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgckFyYyA9IGNyZWF0ZUJlYWNoKGxBcmMuc2l0ZSk7XG4gICAgYmVhY2hlcy5pbnNlcnQobmV3QXJjLCByQXJjKTtcbiAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGF0dGFjaENpcmNsZShyQXJjKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXJBcmMpIHsgLy8gJiYgbEFyY1xuICAgIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBlbHNlIGxBcmMgIT09IHJBcmNcbiAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgYXggPSBsU2l0ZVswXSxcbiAgICAgIGF5ID0gbFNpdGVbMV0sXG4gICAgICBieCA9IHNpdGVbMF0gLSBheCxcbiAgICAgIGJ5ID0gc2l0ZVsxXSAtIGF5LFxuICAgICAgclNpdGUgPSByQXJjLnNpdGUsXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYXgsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYXksXG4gICAgICBkID0gMiAqIChieCAqIGN5IC0gYnkgKiBjeCksXG4gICAgICBoYiA9IGJ4ICogYnggKyBieSAqIGJ5LFxuICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcbiAgICAgIHZlcnRleCA9IFsoY3kgKiBoYiAtIGJ5ICogaGMpIC8gZCArIGF4LCAoYnggKiBoYyAtIGN4ICogaGIpIC8gZCArIGF5XTtcblxuICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xuICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobFNpdGUsIHNpdGUsIG51bGwsIHZlcnRleCk7XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2Uoc2l0ZSwgclNpdGUsIG51bGwsIHZlcnRleCk7XG4gIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xufVxuXG5mdW5jdGlvbiBsZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICB2YXIgc2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgcmZvY3ggPSBzaXRlWzBdLFxuICAgICAgcmZvY3kgPSBzaXRlWzFdLFxuICAgICAgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuXG4gIGlmICghcGJ5MikgcmV0dXJuIHJmb2N4O1xuXG4gIHZhciBsQXJjID0gYXJjLlA7XG4gIGlmICghbEFyYykgcmV0dXJuIC1JbmZpbml0eTtcblxuICBzaXRlID0gbEFyYy5zaXRlO1xuICB2YXIgbGZvY3ggPSBzaXRlWzBdLFxuICAgICAgbGZvY3kgPSBzaXRlWzFdLFxuICAgICAgcGxieTIgPSBsZm9jeSAtIGRpcmVjdHJpeDtcblxuICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG5cbiAgdmFyIGhsID0gbGZvY3ggLSByZm9jeCxcbiAgICAgIGFieTIgPSAxIC8gcGJ5MiAtIDEgLyBwbGJ5MixcbiAgICAgIGIgPSBobCAvIHBsYnkyO1xuXG4gIGlmIChhYnkyKSByZXR1cm4gKC1iICsgTWF0aC5zcXJ0KGIgKiBiIC0gMiAqIGFieTIgKiAoaGwgKiBobCAvICgtMiAqIHBsYnkyKSAtIGxmb2N5ICsgcGxieTIgLyAyICsgcmZvY3kgLSBwYnkyIC8gMikpKSAvIGFieTIgKyByZm9jeDtcblxuICByZXR1cm4gKHJmb2N4ICsgbGZvY3gpIC8gMjtcbn1cblxuZnVuY3Rpb24gcmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gIHZhciByQXJjID0gYXJjLk47XG4gIGlmIChyQXJjKSByZXR1cm4gbGVmdEJyZWFrUG9pbnQockFyYywgZGlyZWN0cml4KTtcbiAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcbiAgcmV0dXJuIHNpdGVbMV0gPT09IGRpcmVjdHJpeCA/IHNpdGVbMF0gOiBJbmZpbml0eTtcbn1cbiIsImltcG9ydCB7YWRkQmVhY2gsIHJlbW92ZUJlYWNofSBmcm9tIFwiLi9CZWFjaFwiO1xuaW1wb3J0IHtzb3J0Q2VsbEhhbGZlZGdlcywgY2VsbEhhbGZlZGdlU3RhcnQsIGNsaXBDZWxsc30gZnJvbSBcIi4vQ2VsbFwiO1xuaW1wb3J0IHtmaXJzdENpcmNsZX0gZnJvbSBcIi4vQ2lyY2xlXCI7XG5pbXBvcnQge2NsaXBFZGdlc30gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IFJlZEJsYWNrVHJlZSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgYmVhY2hlcztcbmV4cG9ydCB2YXIgY2VsbHM7XG5leHBvcnQgdmFyIGNpcmNsZXM7XG5leHBvcnQgdmFyIGVkZ2VzO1xuXG5mdW5jdGlvbiB0cmlhbmdsZUFyZWEoYSwgYiwgYykge1xuICByZXR1cm4gKGFbMF0gLSBjWzBdKSAqIChiWzFdIC0gYVsxXSkgLSAoYVswXSAtIGJbMF0pICogKGNbMV0gLSBhWzFdKTtcbn1cblxuZnVuY3Rpb24gbGV4aWNvZ3JhcGhpYyhhLCBiKSB7XG4gIHJldHVybiBiWzFdIC0gYVsxXVxuICAgICAgfHwgYlswXSAtIGFbMF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpYWdyYW0oc2l0ZXMsIGV4dGVudCkge1xuICB2YXIgc2l0ZSA9IHNpdGVzLnNvcnQobGV4aWNvZ3JhcGhpYykucG9wKCksXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGNpcmNsZTtcblxuICBlZGdlcyA9IFtdO1xuICBjZWxscyA9IG5ldyBBcnJheShzaXRlcy5sZW5ndGgpO1xuICBiZWFjaGVzID0gbmV3IFJlZEJsYWNrVHJlZTtcbiAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjaXJjbGUgPSBmaXJzdENpcmNsZTtcbiAgICBpZiAoc2l0ZSAmJiAoIWNpcmNsZSB8fCBzaXRlWzFdIDwgY2lyY2xlLnkgfHwgKHNpdGVbMV0gPT09IGNpcmNsZS55ICYmIHNpdGVbMF0gPCBjaXJjbGUueCkpKSB7XG4gICAgICBpZiAoc2l0ZVswXSAhPT0geCB8fCBzaXRlWzFdICE9PSB5KSB7XG4gICAgICAgIGFkZEJlYWNoKHNpdGUpO1xuICAgICAgICB4ID0gc2l0ZVswXSwgeSA9IHNpdGVbMV07XG4gICAgICB9XG4gICAgICBzaXRlID0gc2l0ZXMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgIHJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzb3J0Q2VsbEhhbGZlZGdlcygpO1xuXG4gIGlmIChleHRlbnQpIHtcbiAgICB2YXIgeDAgPSArZXh0ZW50WzBdWzBdLFxuICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXG4gICAgICAgIHgxID0gK2V4dGVudFsxXVswXSxcbiAgICAgICAgeTEgPSArZXh0ZW50WzFdWzFdO1xuICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XG4gICAgY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgdGhpcy5jZWxscyA9IGNlbGxzO1xuXG4gIGJlYWNoZXMgPVxuICBjaXJjbGVzID1cbiAgZWRnZXMgPVxuICBjZWxscyA9IG51bGw7XG59XG5cbkRpYWdyYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlhZ3JhbSxcblxuICBwb2x5Z29uczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHJldHVybiB0aGlzLmNlbGxzLm1hcChmdW5jdGlvbihjZWxsKSB7XG4gICAgICB2YXIgcG9seWdvbiA9IGNlbGwuaGFsZmVkZ2VzLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1tpXSk7IH0pO1xuICAgICAgcG9seWdvbi5kYXRhID0gY2VsbC5zaXRlLmRhdGE7XG4gICAgICByZXR1cm4gcG9seWdvbjtcbiAgICB9KTtcbiAgfSxcblxuICB0cmlhbmdsZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0cmlhbmdsZXMgPSBbXSxcbiAgICAgICAgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgdGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcbiAgICAgIGlmICghKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHJldHVybjtcbiAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgICAgIGhhbGZlZGdlcyxcbiAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBzMCxcbiAgICAgICAgICBlMSA9IGVkZ2VzW2hhbGZlZGdlc1ttIC0gMV1dLFxuICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbal1dO1xuICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG4gICAgICAgIGlmIChzMCAmJiBzMSAmJiBpIDwgczAuaW5kZXggJiYgaSA8IHMxLmluZGV4ICYmIHRyaWFuZ2xlQXJlYShzaXRlLCBzMCwgczEpIDwgMCkge1xuICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKFtzaXRlLmRhdGEsIHMwLmRhdGEsIHMxLmRhdGFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyaWFuZ2xlcztcbiAgfSxcblxuICBsaW5rczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgIHJldHVybiBlZGdlLnJpZ2h0O1xuICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IGVkZ2UubGVmdC5kYXRhLFxuICAgICAgICB0YXJnZXQ6IGVkZ2UucmlnaHQuZGF0YVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXMsIGkwLCBpMSA9IHRoYXQuX2ZvdW5kIHx8IDAsIG4gPSB0aGF0LmNlbGxzLmxlbmd0aCwgY2VsbDtcblxuICAgIC8vIFVzZSB0aGUgcHJldmlvdXNseS1mb3VuZCBjZWxsLCBvciBzdGFydCB3aXRoIGFuIGFyYml0cmFyeSBvbmUuXG4gICAgd2hpbGUgKCEoY2VsbCA9IHRoYXQuY2VsbHNbaTFdKSkgaWYgKCsraTEgPj0gbikgcmV0dXJuIG51bGw7XG4gICAgdmFyIGR4ID0geCAtIGNlbGwuc2l0ZVswXSwgZHkgPSB5IC0gY2VsbC5zaXRlWzFdLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuXG4gICAgLy8gVHJhdmVyc2UgdGhlIGhhbGYtZWRnZXMgdG8gZmluZCBhIGNsb3NlciBjZWxsLCBpZiBhbnkuXG4gICAgZG8ge1xuICAgICAgY2VsbCA9IHRoYXQuY2VsbHNbaTAgPSBpMV0sIGkxID0gbnVsbDtcbiAgICAgIGNlbGwuaGFsZmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZWRnZSA9IHRoYXQuZWRnZXNbZV0sIHYgPSBlZGdlLmxlZnQ7XG4gICAgICAgIGlmICgodiA9PT0gY2VsbC5zaXRlIHx8ICF2KSAmJiAhKHYgPSBlZGdlLnJpZ2h0KSkgcmV0dXJuO1xuICAgICAgICB2YXIgdnggPSB4IC0gdlswXSwgdnkgPSB5IC0gdlsxXSwgdjIgPSB2eCAqIHZ4ICsgdnkgKiB2eTtcbiAgICAgICAgaWYgKHYyIDwgZDIpIGQyID0gdjIsIGkxID0gdi5pbmRleDtcbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKGkxICE9PSBudWxsKTtcblxuICAgIHRoYXQuX2ZvdW5kID0gaTA7XG5cbiAgICByZXR1cm4gcmFkaXVzID09IG51bGwgfHwgZDIgPD0gcmFkaXVzICogcmFkaXVzID8gY2VsbC5zaXRlIDogbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcbmltcG9ydCBEaWFncmFtLCB7ZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgZXh0ZW50ID0gbnVsbDtcblxuICBmdW5jdGlvbiB2b3Jvbm9pKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IERpYWdyYW0oZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgdmFyIHMgPSBbTWF0aC5yb3VuZCh4KGQsIGksIGRhdGEpIC8gZXBzaWxvbikgKiBlcHNpbG9uLCBNYXRoLnJvdW5kKHkoZCwgaSwgZGF0YSkgLyBlcHNpbG9uKSAqIGVwc2lsb25dO1xuICAgICAgcy5pbmRleCA9IGk7XG4gICAgICBzLmRhdGEgPSBkO1xuICAgICAgcmV0dXJuIHM7XG4gICAgfSksIGV4dGVudCk7XG4gIH1cblxuICB2b3Jvbm9pLnBvbHlnb25zID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLnBvbHlnb25zKCk7XG4gIH07XG5cbiAgdm9yb25vaS5saW5rcyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gdm9yb25vaShkYXRhKS5saW5rcygpO1xuICB9O1xuXG4gIHZvcm9ub2kudHJpYW5nbGVzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLnRyaWFuZ2xlcygpO1xuICB9O1xuXG4gIHZvcm9ub2kueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHZvcm9ub2kpIDogeDtcbiAgfTtcblxuICB2b3Jvbm9pLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB2b3Jvbm9pKSA6IHk7XG4gIH07XG5cbiAgdm9yb25vaS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gXyA9PSBudWxsID8gbnVsbCA6IFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dLCB2b3Jvbm9pKSA6IGV4dGVudCAmJiBbW2V4dGVudFswXVswXSwgZXh0ZW50WzBdWzFdXSwgW2V4dGVudFsxXVswXSwgZXh0ZW50WzFdWzFdXV07XG4gIH07XG5cbiAgdm9yb25vaS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IF8gPT0gbnVsbCA/IG51bGwgOiBbWzAsIDBdLCBbK19bMF0sICtfWzFdXV0sIHZvcm9ub2kpIDogZXh0ZW50ICYmIFtleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0sIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXV07XG4gIH07XG5cbiAgcmV0dXJuIHZvcm9ub2k7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFpvb21FdmVudCh0YXJnZXQsIHR5cGUsIHRyYW5zZm9ybSkge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gVHJhbnNmb3JtKGssIHgsIHkpIHtcbiAgdGhpcy5rID0gaztcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zZm9ybSxcbiAgc2NhbGU6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gayA9PT0gMSA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuayAqIGssIHRoaXMueCwgdGhpcy55KTtcbiAgfSxcbiAgdHJhbnNsYXRlOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPT09IDAgJiB5ID09PSAwID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rLCB0aGlzLnggKyB0aGlzLmsgKiB4LCB0aGlzLnkgKyB0aGlzLmsgKiB5KTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIFtwb2ludFswXSAqIHRoaXMuayArIHRoaXMueCwgcG9pbnRbMV0gKiB0aGlzLmsgKyB0aGlzLnldO1xuICB9LFxuICBhcHBseVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCAqIHRoaXMuayArIHRoaXMueDtcbiAgfSxcbiAgYXBwbHlZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkgKiB0aGlzLmsgKyB0aGlzLnk7XG4gIH0sXG4gIGludmVydDogZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICByZXR1cm4gWyhsb2NhdGlvblswXSAtIHRoaXMueCkgLyB0aGlzLmssIChsb2NhdGlvblsxXSAtIHRoaXMueSkgLyB0aGlzLmtdO1xuICB9LFxuICBpbnZlcnRYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuICh4IC0gdGhpcy54KSAvIHRoaXMuaztcbiAgfSxcbiAgaW52ZXJ0WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiAoeSAtIHRoaXMueSkgLyB0aGlzLms7XG4gIH0sXG4gIHJlc2NhbGVYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHguY29weSgpLmRvbWFpbih4LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WCwgdGhpcykubWFwKHguaW52ZXJ0LCB4KSk7XG4gIH0sXG4gIHJlc2NhbGVZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkuY29weSgpLmRvbWFpbih5LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WSwgdGhpcykubWFwKHkuaW52ZXJ0LCB5KSk7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLnggKyBcIixcIiArIHRoaXMueSArIFwiKSBzY2FsZShcIiArIHRoaXMuayArIFwiKVwiO1xuICB9XG59O1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0gbmV3IFRyYW5zZm9ybSgxLCAwLCAwKTtcblxudHJhbnNmb3JtLnByb3RvdHlwZSA9IFRyYW5zZm9ybS5wcm90b3R5cGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybShub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX3pvb20pIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHJldHVybiBub2RlLl9fem9vbTtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlWm9vbX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2V2ZW50LCBjdXN0b21FdmVudCwgc2VsZWN0LCBtb3VzZSwgdG91Y2h9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgWm9vbUV2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5pbXBvcnQge1RyYW5zZm9ybSwgaWRlbnRpdHl9IGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBlID0gdGhpcztcbiAgaWYgKGUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgZSA9IGUub3duZXJTVkdFbGVtZW50IHx8IGU7XG4gICAgaWYgKGUuaGFzQXR0cmlidXRlKFwidmlld0JveFwiKSkge1xuICAgICAgZSA9IGUudmlld0JveC5iYXNlVmFsO1xuICAgICAgcmV0dXJuIFtbZS54LCBlLnldLCBbZS54ICsgZS53aWR0aCwgZS55ICsgZS5oZWlnaHRdXTtcbiAgICB9XG4gICAgcmV0dXJuIFtbMCwgMF0sIFtlLndpZHRoLmJhc2VWYWwudmFsdWUsIGUuaGVpZ2h0LmJhc2VWYWwudmFsdWVdXTtcbiAgfVxuICByZXR1cm4gW1swLCAwXSwgW2UuY2xpZW50V2lkdGgsIGUuY2xpZW50SGVpZ2h0XV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUcmFuc2Zvcm0oKSB7XG4gIHJldHVybiB0aGlzLl9fem9vbSB8fCBpZGVudGl0eTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFdoZWVsRGVsdGEoKSB7XG4gIHJldHVybiAtZXZlbnQuZGVsdGFZICogKGV2ZW50LmRlbHRhTW9kZSA9PT0gMSA/IDAuMDUgOiBldmVudC5kZWx0YU1vZGUgPyAxIDogMC4wMDIpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29uc3RyYWluKHRyYW5zZm9ybSwgZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpIHtcbiAgdmFyIGR4MCA9IHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFswXVswXSkgLSB0cmFuc2xhdGVFeHRlbnRbMF1bMF0sXG4gICAgICBkeDEgPSB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMV1bMF0pIC0gdHJhbnNsYXRlRXh0ZW50WzFdWzBdLFxuICAgICAgZHkwID0gdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzBdWzFdKSAtIHRyYW5zbGF0ZUV4dGVudFswXVsxXSxcbiAgICAgIGR5MSA9IHRyYW5zZm9ybS5pbnZlcnRZKGV4dGVudFsxXVsxXSkgLSB0cmFuc2xhdGVFeHRlbnRbMV1bMV07XG4gIHJldHVybiB0cmFuc2Zvcm0udHJhbnNsYXRlKFxuICAgIGR4MSA+IGR4MCA/IChkeDAgKyBkeDEpIC8gMiA6IE1hdGgubWluKDAsIGR4MCkgfHwgTWF0aC5tYXgoMCwgZHgxKSxcbiAgICBkeTEgPiBkeTAgPyAoZHkwICsgZHkxKSAvIDIgOiBNYXRoLm1pbigwLCBkeTApIHx8IE1hdGgubWF4KDAsIGR5MSlcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGNvbnN0cmFpbiA9IGRlZmF1bHRDb25zdHJhaW4sXG4gICAgICB3aGVlbERlbHRhID0gZGVmYXVsdFdoZWVsRGVsdGEsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAgc2NhbGVFeHRlbnQgPSBbMCwgSW5maW5pdHldLFxuICAgICAgdHJhbnNsYXRlRXh0ZW50ID0gW1stSW5maW5pdHksIC1JbmZpbml0eV0sIFtJbmZpbml0eSwgSW5maW5pdHldXSxcbiAgICAgIGR1cmF0aW9uID0gMjUwLFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVpvb20sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiem9vbVwiLCBcImVuZFwiKSxcbiAgICAgIHRvdWNoc3RhcnRpbmcsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIHRvdWNoRGVsYXkgPSA1MDAsXG4gICAgICB3aGVlbERlbGF5ID0gMTUwLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwO1xuXG4gIGZ1bmN0aW9uIHpvb20oc2VsZWN0aW9uKSB7XG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKVxuICAgICAgICAub24oXCJ3aGVlbC56b29tXCIsIHdoZWVsZWQpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi56b29tXCIsIG1vdXNlZG93bmVkKVxuICAgICAgICAub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC56b29tXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLnpvb21cIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuem9vbSB0b3VjaGNhbmNlbC56b29tXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIHpvb20udHJhbnNmb3JtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgdHJhbnNmb3JtLCBwb2ludCkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBjb2xsZWN0aW9uLnNlbGVjdGlvbiA/IGNvbGxlY3Rpb24uc2VsZWN0aW9uKCkgOiBjb2xsZWN0aW9uO1xuICAgIHNlbGVjdGlvbi5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKTtcbiAgICBpZiAoY29sbGVjdGlvbiAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBzY2hlZHVsZShjb2xsZWN0aW9uLCB0cmFuc2Zvcm0sIHBvaW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0aW9uLmludGVycnVwdCgpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGdlc3R1cmUodGhpcywgYXJndW1lbnRzKVxuICAgICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAgIC56b29tKG51bGwsIHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIiA/IHRyYW5zZm9ybS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdHJhbnNmb3JtKVxuICAgICAgICAgICAgLmVuZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHpvb20uc2NhbGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaywgcCkge1xuICAgIHpvb20uc2NhbGVUbyhzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGswID0gdGhpcy5fX3pvb20uayxcbiAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xuICAgICAgcmV0dXJuIGswICogazE7XG4gICAgfSwgcCk7XG4gIH07XG5cbiAgem9vbS5zY2FsZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrLCBwKSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICBwMCA9IHAgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHAgPT09IFwiZnVuY3Rpb25cIiA/IHAuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHAsXG4gICAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBlLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0sIHApO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24sIHgsIHkpIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbih0aGlzLl9fem9vbS50cmFuc2xhdGUoXG4gICAgICAgIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB4LFxuICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8geS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeVxuICAgICAgKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSk7XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgeCwgeSwgcCkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHQgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICBwMCA9IHAgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHAgPT09IFwiZnVuY3Rpb25cIiA/IHAuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHA7XG4gICAgICByZXR1cm4gY29uc3RyYWluKGlkZW50aXR5LnRyYW5zbGF0ZShwMFswXSwgcDBbMV0pLnNjYWxlKHQuaykudHJhbnNsYXRlKFxuICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8gLXguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC14LFxuICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8gLXkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC15XG4gICAgICApLCBlLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0sIHApO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHRyYW5zZm9ybSwgaykge1xuICAgIGsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIGspKTtcbiAgICByZXR1cm4gayA9PT0gdHJhbnNmb3JtLmsgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKGssIHRyYW5zZm9ybS54LCB0cmFuc2Zvcm0ueSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUodHJhbnNmb3JtLCBwMCwgcDEpIHtcbiAgICB2YXIgeCA9IHAwWzBdIC0gcDFbMF0gKiB0cmFuc2Zvcm0uaywgeSA9IHAwWzFdIC0gcDFbMV0gKiB0cmFuc2Zvcm0uaztcbiAgICByZXR1cm4geCA9PT0gdHJhbnNmb3JtLnggJiYgeSA9PT0gdHJhbnNmb3JtLnkgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKHRyYW5zZm9ybS5rLCB4LCB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkKGV4dGVudCkge1xuICAgIHJldHVybiBbKCtleHRlbnRbMF1bMF0gKyArZXh0ZW50WzFdWzBdKSAvIDIsICgrZXh0ZW50WzBdWzFdICsgK2V4dGVudFsxXVsxXSkgLyAyXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKHRyYW5zaXRpb24sIHRyYW5zZm9ybSwgcG9pbnQpIHtcbiAgICB0cmFuc2l0aW9uXG4gICAgICAgIC5vbihcInN0YXJ0Lnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5zdGFydCgpOyB9KVxuICAgICAgICAub24oXCJpbnRlcnJ1cHQuem9vbSBlbmQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAudHdlZW4oXCJ6b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgZyA9IGdlc3R1cmUodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgIGUgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgIHAgPSBwb2ludCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcG9pbnQgPT09IFwiZnVuY3Rpb25cIiA/IHBvaW50LmFwcGx5KHRoYXQsIGFyZ3MpIDogcG9pbnQsXG4gICAgICAgICAgICAgIHcgPSBNYXRoLm1heChlWzFdWzBdIC0gZVswXVswXSwgZVsxXVsxXSAtIGVbMF1bMV0pLFxuICAgICAgICAgICAgICBhID0gdGhhdC5fX3pvb20sXG4gICAgICAgICAgICAgIGIgPSB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhhdCwgYXJncykgOiB0cmFuc2Zvcm0sXG4gICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShhLmludmVydChwKS5jb25jYXQodyAvIGEuayksIGIuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYi5rKSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0ID09PSAxKSB0ID0gYjsgLy8gQXZvaWQgcm91bmRpbmcgZXJyb3Igb24gZW5kLlxuICAgICAgICAgICAgZWxzZSB7IHZhciBsID0gaSh0KSwgayA9IHcgLyBsWzJdOyB0ID0gbmV3IFRyYW5zZm9ybShrLCBwWzBdIC0gbFswXSAqIGssIHBbMV0gLSBsWzFdICogayk7IH1cbiAgICAgICAgICAgIGcuem9vbShudWxsLCB0KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlc3R1cmUodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICByZXR1cm4gKCFjbGVhbiAmJiB0aGF0Ll9fem9vbWluZykgfHwgbmV3IEdlc3R1cmUodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBHZXN0dXJlKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgIHRoaXMuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIHRoaXMudGFwcyA9IDA7XG4gIH1cblxuICBHZXN0dXJlLnByb3RvdHlwZSA9IHtcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkge1xuICAgICAgICB0aGlzLnRoYXQuX196b29taW5nID0gdGhpcztcbiAgICAgICAgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHpvb206IGZ1bmN0aW9uKGtleSwgdHJhbnNmb3JtKSB7XG4gICAgICBpZiAodGhpcy5tb3VzZSAmJiBrZXkgIT09IFwibW91c2VcIikgdGhpcy5tb3VzZVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy5tb3VzZVswXSk7XG4gICAgICBpZiAodGhpcy50b3VjaDAgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gwWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLnRvdWNoMFswXSk7XG4gICAgICBpZiAodGhpcy50b3VjaDEgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gxWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLnRvdWNoMVswXSk7XG4gICAgICB0aGlzLnRoYXQuX196b29tID0gdHJhbnNmb3JtO1xuICAgICAgdGhpcy5lbWl0KFwiem9vbVwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnRoYXQuX196b29taW5nO1xuICAgICAgICB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBab29tRXZlbnQoem9vbSwgdHlwZSwgdGhpcy50aGF0Ll9fem9vbSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gd2hlZWxlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHQgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgayA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgdC5rICogTWF0aC5wb3coMiwgd2hlZWxEZWx0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSkpLFxuICAgICAgICBwID0gbW91c2UodGhpcyk7XG5cbiAgICAvLyBJZiB0aGUgbW91c2UgaXMgaW4gdGhlIHNhbWUgbG9jYXRpb24gYXMgYmVmb3JlLCByZXVzZSBpdC5cbiAgICAvLyBJZiB0aGVyZSB3ZXJlIHJlY2VudCB3aGVlbCBldmVudHMsIHJlc2V0IHRoZSB3aGVlbCBpZGxlIHRpbWVvdXQuXG4gICAgaWYgKGcud2hlZWwpIHtcbiAgICAgIGlmIChnLm1vdXNlWzBdWzBdICE9PSBwWzBdIHx8IGcubW91c2VbMF1bMV0gIT09IHBbMV0pIHtcbiAgICAgICAgZy5tb3VzZVsxXSA9IHQuaW52ZXJ0KGcubW91c2VbMF0gPSBwKTtcbiAgICAgIH1cbiAgICAgIGNsZWFyVGltZW91dChnLndoZWVsKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIHdoZWVsIGV2ZW50IHdvbuKAmXQgdHJpZ2dlciBhIHRyYW5zZm9ybSBjaGFuZ2UsIGlnbm9yZSBpdC5cbiAgICBlbHNlIGlmICh0LmsgPT09IGspIHJldHVybjtcblxuICAgIC8vIE90aGVyd2lzZSwgY2FwdHVyZSB0aGUgbW91c2UgcG9pbnQgYW5kIGxvY2F0aW9uIGF0IHRoZSBzdGFydC5cbiAgICBlbHNlIHtcbiAgICAgIGcubW91c2UgPSBbcCwgdC5pbnZlcnQocCldO1xuICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgZy5zdGFydCgpO1xuICAgIH1cblxuICAgIG5vZXZlbnQoKTtcbiAgICBnLndoZWVsID0gc2V0VGltZW91dCh3aGVlbGlkbGVkLCB3aGVlbERlbGF5KTtcbiAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQsIGspLCBnLm1vdXNlWzBdLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuXG4gICAgZnVuY3Rpb24gd2hlZWxpZGxlZCgpIHtcbiAgICAgIGcud2hlZWwgPSBudWxsO1xuICAgICAgZy5lbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cywgdHJ1ZSksXG4gICAgICAgIHYgPSBzZWxlY3QoZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuem9vbVwiLCBtb3VzZXVwcGVkLCB0cnVlKSxcbiAgICAgICAgcCA9IG1vdXNlKHRoaXMpLFxuICAgICAgICB4MCA9IGV2ZW50LmNsaWVudFgsXG4gICAgICAgIHkwID0gZXZlbnQuY2xpZW50WTtcblxuICAgIGRyYWdEaXNhYmxlKGV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBnLm1vdXNlID0gW3AsIHRoaXMuX196b29tLmludmVydChwKV07XG4gICAgaW50ZXJydXB0KHRoaXMpO1xuICAgIGcuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdXNlbW92ZWQoKSB7XG4gICAgICBub2V2ZW50KCk7XG4gICAgICBpZiAoIWcubW92ZWQpIHtcbiAgICAgICAgdmFyIGR4ID0gZXZlbnQuY2xpZW50WCAtIHgwLCBkeSA9IGV2ZW50LmNsaWVudFkgLSB5MDtcbiAgICAgICAgZy5tb3ZlZCA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgICB9XG4gICAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKGcudGhhdC5fX3pvb20sIGcubW91c2VbMF0gPSBtb3VzZShnLnRoYXQpLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgICB2Lm9uKFwibW91c2Vtb3ZlLnpvb20gbW91c2V1cC56b29tXCIsIG51bGwpO1xuICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBnLm1vdmVkKTtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIGcuZW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGJsY2xpY2tlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgIHAwID0gbW91c2UodGhpcyksXG4gICAgICAgIHAxID0gdDAuaW52ZXJ0KHAwKSxcbiAgICAgICAgazEgPSB0MC5rICogKGV2ZW50LnNoaWZ0S2V5ID8gMC41IDogMiksXG4gICAgICAgIHQxID0gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdHJhbnNsYXRlRXh0ZW50KTtcblxuICAgIG5vZXZlbnQoKTtcbiAgICBpZiAoZHVyYXRpb24gPiAwKSBzZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmR1cmF0aW9uKGR1cmF0aW9uKS5jYWxsKHNjaGVkdWxlLCB0MSwgcDApO1xuICAgIGVsc2Ugc2VsZWN0KHRoaXMpLmNhbGwoem9vbS50cmFuc2Zvcm0sIHQxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC50b3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsXG4gICAgICAgIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cywgZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID09PSBuKSxcbiAgICAgICAgc3RhcnRlZCwgaSwgdCwgcDtcblxuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlc1tpXSwgcCA9IHRvdWNoKHRoaXMsIHRvdWNoZXMsIHQuaWRlbnRpZmllcik7XG4gICAgICBwID0gW3AsIHRoaXMuX196b29tLmludmVydChwKSwgdC5pZGVudGlmaWVyXTtcbiAgICAgIGlmICghZy50b3VjaDApIGcudG91Y2gwID0gcCwgc3RhcnRlZCA9IHRydWUsIGcudGFwcyA9IDEgKyAhIXRvdWNoc3RhcnRpbmc7XG4gICAgICBlbHNlIGlmICghZy50b3VjaDEgJiYgZy50b3VjaDBbMl0gIT09IHBbMl0pIGcudG91Y2gxID0gcCwgZy50YXBzID0gMDtcbiAgICB9XG5cbiAgICBpZiAodG91Y2hzdGFydGluZykgdG91Y2hzdGFydGluZyA9IGNsZWFyVGltZW91dCh0b3VjaHN0YXJ0aW5nKTtcblxuICAgIGlmIChzdGFydGVkKSB7XG4gICAgICBpZiAoZy50YXBzIDwgMikgdG91Y2hzdGFydGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoc3RhcnRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIGlmICghdGhpcy5fX3pvb21pbmcpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQsIHAsIGw7XG5cbiAgICBub2V2ZW50KCk7XG4gICAgaWYgKHRvdWNoc3RhcnRpbmcpIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG4gICAgZy50YXBzID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlc1tpXSwgcCA9IHRvdWNoKHRoaXMsIHRvdWNoZXMsIHQuaWRlbnRpZmllcik7XG4gICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDBbMF0gPSBwO1xuICAgICAgZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDFbMF0gPSBwO1xuICAgIH1cbiAgICB0ID0gZy50aGF0Ll9fem9vbTtcbiAgICBpZiAoZy50b3VjaDEpIHtcbiAgICAgIHZhciBwMCA9IGcudG91Y2gwWzBdLCBsMCA9IGcudG91Y2gwWzFdLFxuICAgICAgICAgIHAxID0gZy50b3VjaDFbMF0sIGwxID0gZy50b3VjaDFbMV0sXG4gICAgICAgICAgZHAgPSAoZHAgPSBwMVswXSAtIHAwWzBdKSAqIGRwICsgKGRwID0gcDFbMV0gLSBwMFsxXSkgKiBkcCxcbiAgICAgICAgICBkbCA9IChkbCA9IGwxWzBdIC0gbDBbMF0pICogZGwgKyAoZGwgPSBsMVsxXSAtIGwwWzFdKSAqIGRsO1xuICAgICAgdCA9IHNjYWxlKHQsIE1hdGguc3FydChkcCAvIGRsKSk7XG4gICAgICBwID0gWyhwMFswXSArIHAxWzBdKSAvIDIsIChwMFsxXSArIHAxWzFdKSAvIDJdO1xuICAgICAgbCA9IFsobDBbMF0gKyBsMVswXSkgLyAyLCAobDBbMV0gKyBsMVsxXSkgLyAyXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZy50b3VjaDApIHAgPSBnLnRvdWNoMFswXSwgbCA9IGcudG91Y2gwWzFdO1xuICAgIGVsc2UgcmV0dXJuO1xuICAgIGcuem9vbShcInRvdWNoXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUodCwgcCwgbCksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XG4gICAgaWYgKCF0aGlzLl9fem9vbWluZykgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdDtcblxuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICB9XG4gICAgaWYgKGcudG91Y2gxICYmICFnLnRvdWNoMCkgZy50b3VjaDAgPSBnLnRvdWNoMSwgZGVsZXRlIGcudG91Y2gxO1xuICAgIGlmIChnLnRvdWNoMCkgZy50b3VjaDBbMV0gPSB0aGlzLl9fem9vbS5pbnZlcnQoZy50b3VjaDBbMF0pO1xuICAgIGVsc2Uge1xuICAgICAgZy5lbmQoKTtcbiAgICAgIC8vIElmIHRoaXMgd2FzIGEgZGJsdGFwLCByZXJvdXRlIHRvIHRoZSAob3B0aW9uYWwpIGRibGNsaWNrLnpvb20gaGFuZGxlci5cbiAgICAgIGlmIChnLnRhcHMgPT09IDIpIHtcbiAgICAgICAgdmFyIHAgPSBzZWxlY3QodGhpcykub24oXCJkYmxjbGljay56b29tXCIpO1xuICAgICAgICBpZiAocCkgcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHpvb20ud2hlZWxEZWx0YSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh3aGVlbERlbHRhID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHpvb20pIDogd2hlZWxEZWx0YTtcbiAgfTtcblxuICB6b29tLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIHpvb20pIDogZmlsdGVyO1xuICB9O1xuXG4gIHpvb20udG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgem9vbSkgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgem9vbS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIHpvb20pIDogZXh0ZW50O1xuICB9O1xuXG4gIHpvb20uc2NhbGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGVFeHRlbnRbMF0gPSArX1swXSwgc2NhbGVFeHRlbnRbMV0gPSArX1sxXSwgem9vbSkgOiBbc2NhbGVFeHRlbnRbMF0sIHNjYWxlRXh0ZW50WzFdXTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2xhdGVFeHRlbnRbMF1bMF0gPSArX1swXVswXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzBdID0gK19bMV1bMF0sIHRyYW5zbGF0ZUV4dGVudFswXVsxXSA9ICtfWzBdWzFdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMV0gPSArX1sxXVsxXSwgem9vbSkgOiBbW3RyYW5zbGF0ZUV4dGVudFswXVswXSwgdHJhbnNsYXRlRXh0ZW50WzBdWzFdXSwgW3RyYW5zbGF0ZUV4dGVudFsxXVswXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzFdXV07XG4gIH07XG5cbiAgem9vbS5jb25zdHJhaW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29uc3RyYWluID0gXywgem9vbSkgOiBjb25zdHJhaW47XG4gIH07XG5cbiAgem9vbS5kdXJhdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkdXJhdGlvbiA9ICtfLCB6b29tKSA6IGR1cmF0aW9uO1xuICB9O1xuXG4gIHpvb20uaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCB6b29tKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHpvb20ub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gem9vbSA6IHZhbHVlO1xuICB9O1xuXG4gIHpvb20uY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgem9vbSkgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICB9O1xuXG4gIHJldHVybiB6b29tO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4xNSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZyxcbiAgICAgIHJlVHJpbVN0YXJ0ID0gL15cXHMrLyxcbiAgICAgIHJlVHJpbUVuZCA9IC9cXHMrJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcy5sZW5ndGggPyBpdGVyYXRlZXMgOiBbaWRlbnRpdHldLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgLy8gVGhlIHNvdXJjZVVSTCBnZXRzIGluamVjdGVkIGludG8gdGhlIHNvdXJjZSB0aGF0J3MgZXZhbC1lZCwgc28gYmUgY2FyZWZ1bFxuICAgICAgLy8gd2l0aCBsb29rdXAgKGluIGNhc2Ugb2YgZS5nLiBwcm90b3R5cGUgcG9sbHV0aW9uKSwgYW5kIHN0cmlwIG5ld2xpbmVzIGlmIGFueS5cbiAgICAgIC8vIEEgbmV3bGluZSB3b3VsZG4ndCBiZSBhIHZhbGlkIHNvdXJjZVVSTCBhbnl3YXksIGFuZCBpdCdkIGVuYWJsZSBjb2RlIGluamVjdGlvbi5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3NvdXJjZVVSTCcpXG4gICAgICAgICAgPyAob3B0aW9ucy5zb3VyY2VVUkwgKyAnJykucmVwbGFjZSgvW1xcclxcbl0vZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICAvLyBMaWtlIHdpdGggc291cmNlVVJMLCB3ZSB0YWtlIGNhcmUgdG8gbm90IGNoZWNrIHRoZSBvcHRpb24ncyBwcm90b3R5cGUsXG4gICAgICAvLyBhcyB0aGlzIGNvbmZpZ3VyYXRpb24gaXMgYSBjb2RlIGluamVjdGlvbiB2ZWN0b3IuXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbUVuZCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArICcnO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgcmVhbE5hbWVzW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX0FzeW5jQWN0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xudmFyIEFuaW1hdGlvbkZyYW1lQWN0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFuaW1hdGlvbkZyYW1lQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFuaW1hdGlvbkZyYW1lQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5pbWF0aW9uRnJhbWVBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbGF5ICE9PSBudWxsICYmIGRlbGF5ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVyLmFjdGlvbnMucHVzaCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZWQgfHwgKHNjaGVkdWxlci5zY2hlZHVsZWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NoZWR1bGVyLmZsdXNoKG51bGwpOyB9KSk7XG4gICAgfTtcbiAgICBBbmltYXRpb25GcmFtZUFjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGRlbGF5ICE9PSBudWxsICYmIGRlbGF5ID4gMCkgfHwgKGRlbGF5ID09PSBudWxsICYmIHRoaXMuZGVsYXkgPiAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVkdWxlci5hY3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgICAgICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgcmV0dXJuIEFuaW1hdGlvbkZyYW1lQWN0aW9uO1xufShBc3luY0FjdGlvbikpO1xuZXhwb3J0IHsgQW5pbWF0aW9uRnJhbWVBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFuaW1hdGlvbkZyYW1lQWN0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfQW5pbWF0aW9uRnJhbWVBY3Rpb24sX0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEFuaW1hdGlvbkZyYW1lQWN0aW9uIH0gZnJvbSAnLi9BbmltYXRpb25GcmFtZUFjdGlvbic7XG5pbXBvcnQgeyBBbmltYXRpb25GcmFtZVNjaGVkdWxlciB9IGZyb20gJy4vQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXInO1xuZXhwb3J0IHZhciBhbmltYXRpb25GcmFtZSA9IC8qQF9fUFVSRV9fKi8gbmV3IEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyKEFuaW1hdGlvbkZyYW1lQWN0aW9uKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuaW1hdGlvbkZyYW1lLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfQXN5bmNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9Bc3luY1NjaGVkdWxlcic7XG52YXIgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIGNvdW50ID0gYWN0aW9ucy5sZW5ndGg7XG4gICAgICAgIGFjdGlvbiA9IGFjdGlvbiB8fCBhY3Rpb25zLnNoaWZ0KCk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgrK2luZGV4IDwgY291bnQgJiYgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgY291bnQgJiYgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXI7XG59KEFzeW5jU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBBbmltYXRpb25GcmFtZVNjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9Bc3luY0FjdGlvbixfQXN5bmNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xudmFyIFZpcnR1YWxUaW1lU2NoZWR1bGVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFZpcnR1YWxUaW1lU2NoZWR1bGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFZpcnR1YWxUaW1lU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbWF4RnJhbWVzKSB7XG4gICAgICAgIGlmIChTY2hlZHVsZXJBY3Rpb24gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgU2NoZWR1bGVyQWN0aW9uID0gVmlydHVhbEFjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4RnJhbWVzID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG1heEZyYW1lcyA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTY2hlZHVsZXJBY3Rpb24sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmZyYW1lOyB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5tYXhGcmFtZXMgPSBtYXhGcmFtZXM7XG4gICAgICAgIF90aGlzLmZyYW1lID0gMDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAtMTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBWaXJ0dWFsVGltZVNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGFjdGlvbnMgPSBfYS5hY3Rpb25zLCBtYXhGcmFtZXMgPSBfYS5tYXhGcmFtZXM7XG4gICAgICAgIHZhciBlcnJvciwgYWN0aW9uO1xuICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnNbMF0pICYmIGFjdGlvbi5kZWxheSA8PSBtYXhGcmFtZXMpIHtcbiAgICAgICAgICAgIGFjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgICAgIHRoaXMuZnJhbWUgPSBhY3Rpb24uZGVsYXk7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaXJ0dWFsVGltZVNjaGVkdWxlci5mcmFtZVRpbWVGYWN0b3IgPSAxMDtcbiAgICByZXR1cm4gVmlydHVhbFRpbWVTY2hlZHVsZXI7XG59KEFzeW5jU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBWaXJ0dWFsVGltZVNjaGVkdWxlciB9O1xudmFyIFZpcnR1YWxBY3Rpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVmlydHVhbEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBWaXJ0dWFsQWN0aW9uKHNjaGVkdWxlciwgd29yaywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGluZGV4ID0gc2NoZWR1bGVyLmluZGV4ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICBfdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBfdGhpcy5pbmRleCA9IHNjaGVkdWxlci5pbmRleCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFZpcnR1YWxBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuc2NoZWR1bGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHZhciBhY3Rpb24gPSBuZXcgVmlydHVhbEFjdGlvbih0aGlzLnNjaGVkdWxlciwgdGhpcy53b3JrKTtcbiAgICAgICAgdGhpcy5hZGQoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGF5ID0gc2NoZWR1bGVyLmZyYW1lICsgZGVsYXk7XG4gICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgIGFjdGlvbnMucHVzaCh0aGlzKTtcbiAgICAgICAgYWN0aW9ucy5zb3J0KFZpcnR1YWxBY3Rpb24uc29ydEFjdGlvbnMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFZpcnR1YWxBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFZpcnR1YWxBY3Rpb24ucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl9leGVjdXRlLmNhbGwodGhpcywgc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5zb3J0QWN0aW9ucyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGlmIChhLmRlbGF5ID09PSBiLmRlbGF5KSB7XG4gICAgICAgICAgICBpZiAoYS5pbmRleCA9PT0gYi5pbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYS5pbmRleCA+IGIuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhLmRlbGF5ID4gYi5kZWxheSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBWaXJ0dWFsQWN0aW9uO1xufShBc3luY0FjdGlvbikpO1xuZXhwb3J0IHsgVmlydHVhbEFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmlydHVhbFRpbWVTY2hlZHVsZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGUob2JqKSB7XG4gICAgcmV0dXJuICEhb2JqICYmIChvYmogaW5zdGFuY2VvZiBPYnNlcnZhYmxlIHx8ICh0eXBlb2Ygb2JqLmxpZnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzT2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX0FzeW5jU3ViamVjdCxfb3BlcmF0b3JzX21hcCxfdXRpbF9jYW5SZXBvcnRFcnJvcixfdXRpbF9pc0FycmF5LF91dGlsX2lzU2NoZWR1bGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IEFzeW5jU3ViamVjdCB9IGZyb20gJy4uL0FzeW5jU3ViamVjdCc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWFwJztcbmltcG9ydCB7IGNhblJlcG9ydEVycm9yIH0gZnJvbSAnLi4vdXRpbC9jYW5SZXBvcnRFcnJvcic7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5leHBvcnQgZnVuY3Rpb24gYmluZENhbGxiYWNrKGNhbGxiYWNrRnVuYywgcmVzdWx0U2VsZWN0b3IsIHNjaGVkdWxlcikge1xuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICBpZiAoaXNTY2hlZHVsZXIocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSByZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kQ2FsbGJhY2soY2FsbGJhY2tGdW5jLCBzY2hlZHVsZXIpLmFwcGx5KHZvaWQgMCwgYXJncykucGlwZShtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGlzQXJyYXkoYXJncykgPyByZXN1bHRTZWxlY3Rvci5hcHBseSh2b2lkIDAsIGFyZ3MpIDogcmVzdWx0U2VsZWN0b3IoYXJncyk7IH0pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICAgIHZhciBzdWJqZWN0O1xuICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgICAgICAgICBjYWxsYmFja0Z1bmM6IGNhbGxiYWNrRnVuYyxcbiAgICAgICAgICAgIHNjaGVkdWxlcjogc2NoZWR1bGVyLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlubmVyQXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lckFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QubmV4dChpbm5lckFyZ3MubGVuZ3RoIDw9IDEgPyBpbm5lckFyZ3NbMF0gOiBpbm5lckFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tGdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MuY29uY2F0KFtoYW5kbGVyXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYW5SZXBvcnRFcnJvcihzdWJqZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzdWJqZWN0LnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYXJnczogYXJncywgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCAwLCBzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5mdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhcmdzID0gc3RhdGUuYXJncywgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHBhcmFtcyA9IHN0YXRlLnBhcmFtcztcbiAgICB2YXIgY2FsbGJhY2tGdW5jID0gcGFyYW1zLmNhbGxiYWNrRnVuYywgY29udGV4dCA9IHBhcmFtcy5jb250ZXh0LCBzY2hlZHVsZXIgPSBwYXJhbXMuc2NoZWR1bGVyO1xuICAgIHZhciBzdWJqZWN0ID0gcGFyYW1zLnN1YmplY3Q7XG4gICAgaWYgKCFzdWJqZWN0KSB7XG4gICAgICAgIHN1YmplY3QgPSBwYXJhbXMuc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3QoKTtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJBcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGlubmVyQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbHVlID0gaW5uZXJBcmdzLmxlbmd0aCA8PSAxID8gaW5uZXJBcmdzWzBdIDogaW5uZXJBcmdzO1xuICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIDAsIHsgdmFsdWU6IHZhbHVlLCBzdWJqZWN0OiBzdWJqZWN0IH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNhbGxiYWNrRnVuYy5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChbaGFuZGxlcl0pKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGQoc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hOZXh0KHN0YXRlKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWUsIHN1YmplY3QgPSBzdGF0ZS5zdWJqZWN0O1xuICAgIHN1YmplY3QubmV4dCh2YWx1ZSk7XG4gICAgc3ViamVjdC5jb21wbGV0ZSgpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hFcnJvcihzdGF0ZSkge1xuICAgIHZhciBlcnIgPSBzdGF0ZS5lcnIsIHN1YmplY3QgPSBzdGF0ZS5zdWJqZWN0O1xuICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpbmRDYWxsYmFjay5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX0FzeW5jU3ViamVjdCxfb3BlcmF0b3JzX21hcCxfdXRpbF9jYW5SZXBvcnRFcnJvcixfdXRpbF9pc1NjaGVkdWxlcixfdXRpbF9pc0FycmF5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IEFzeW5jU3ViamVjdCB9IGZyb20gJy4uL0FzeW5jU3ViamVjdCc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWFwJztcbmltcG9ydCB7IGNhblJlcG9ydEVycm9yIH0gZnJvbSAnLi4vdXRpbC9jYW5SZXBvcnRFcnJvcic7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5leHBvcnQgZnVuY3Rpb24gYmluZE5vZGVDYWxsYmFjayhjYWxsYmFja0Z1bmMsIHJlc3VsdFNlbGVjdG9yLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKGlzU2NoZWR1bGVyKHJlc3VsdFNlbGVjdG9yKSkge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYmluZE5vZGVDYWxsYmFjayhjYWxsYmFja0Z1bmMsIHNjaGVkdWxlcikuYXBwbHkodm9pZCAwLCBhcmdzKS5waXBlKG1hcChmdW5jdGlvbiAoYXJncykgeyByZXR1cm4gaXNBcnJheShhcmdzKSA/IHJlc3VsdFNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJncykgOiByZXN1bHRTZWxlY3RvcihhcmdzKTsgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICBzdWJqZWN0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzOiBhcmdzLFxuICAgICAgICAgICAgY2FsbGJhY2tGdW5jOiBjYWxsYmFja0Z1bmMsXG4gICAgICAgICAgICBzY2hlZHVsZXI6IHNjaGVkdWxlcixcbiAgICAgICAgICAgIGNvbnRleHQ6IHRoaXMsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBwYXJhbXMuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBzdWJqZWN0ID0gcGFyYW1zLnN1YmplY3Q7XG4gICAgICAgICAgICBpZiAoIXNjaGVkdWxlcikge1xuICAgICAgICAgICAgICAgIGlmICghc3ViamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0ID0gcGFyYW1zLnN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlubmVyQXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lckFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSBpbm5lckFyZ3Muc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KGlubmVyQXJncy5sZW5ndGggPD0gMSA/IGlubmVyQXJnc1swXSA6IGlubmVyQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja0Z1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoW2hhbmRsZXJdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhblJlcG9ydEVycm9yKHN1YmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgMCwgeyBwYXJhbXM6IHBhcmFtcywgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgY29udGV4dDogY29udGV4dCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3RhdGUucGFyYW1zLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgY29udGV4dCA9IHN0YXRlLmNvbnRleHQ7XG4gICAgdmFyIGNhbGxiYWNrRnVuYyA9IHBhcmFtcy5jYWxsYmFja0Z1bmMsIGFyZ3MgPSBwYXJhbXMuYXJncywgc2NoZWR1bGVyID0gcGFyYW1zLnNjaGVkdWxlcjtcbiAgICB2YXIgc3ViamVjdCA9IHBhcmFtcy5zdWJqZWN0O1xuICAgIGlmICghc3ViamVjdCkge1xuICAgICAgICBzdWJqZWN0ID0gcGFyYW1zLnN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0KCk7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGlubmVyQXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBpbm5lckFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlcnIgPSBpbm5lckFyZ3Muc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoRXJyb3IsIDAsIHsgZXJyOiBlcnIsIHN1YmplY3Q6IHN1YmplY3QgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaW5uZXJBcmdzLmxlbmd0aCA8PSAxID8gaW5uZXJBcmdzWzBdIDogaW5uZXJBcmdzO1xuICAgICAgICAgICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCAwLCB7IHZhbHVlOiB2YWx1ZSwgc3ViamVjdDogc3ViamVjdCB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYWxsYmFja0Z1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoW2hhbmRsZXJdKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoRXJyb3IsIDAsIHsgZXJyOiBlcnIsIHN1YmplY3Q6IHN1YmplY3QgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkKHN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoTmV4dChhcmcpIHtcbiAgICB2YXIgdmFsdWUgPSBhcmcudmFsdWUsIHN1YmplY3QgPSBhcmcuc3ViamVjdDtcbiAgICBzdWJqZWN0Lm5leHQodmFsdWUpO1xuICAgIHN1YmplY3QuY29tcGxldGUoKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXJyb3IoYXJnKSB7XG4gICAgdmFyIGVyciA9IGFyZy5lcnIsIHN1YmplY3QgPSBhcmcuc3ViamVjdDtcbiAgICBzdWJqZWN0LmVycm9yKGVycik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kTm9kZUNhbGxiYWNrLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfdXRpbF9pc0FycmF5LF9vcGVyYXRvcnNfbWFwLF91dGlsX2lzT2JqZWN0LF9mcm9tIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi4vb3BlcmF0b3JzL21hcCc7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4uL3V0aWwvaXNPYmplY3QnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gZm9ya0pvaW4oKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGlmIChzb3VyY2VzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgZmlyc3RfMSA9IHNvdXJjZXNbMF07XG4gICAgICAgIGlmIChpc0FycmF5KGZpcnN0XzEpKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ya0pvaW5JbnRlcm5hbChmaXJzdF8xLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYmplY3QoZmlyc3RfMSkgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGZpcnN0XzEpID09PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZpcnN0XzEpO1xuICAgICAgICAgICAgcmV0dXJuIGZvcmtKb2luSW50ZXJuYWwoa2V5cy5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZmlyc3RfMVtrZXldOyB9KSwga2V5cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VzW3NvdXJjZXMubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIHJlc3VsdFNlbGVjdG9yXzEgPSBzb3VyY2VzLnBvcCgpO1xuICAgICAgICBzb3VyY2VzID0gKHNvdXJjZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkoc291cmNlc1swXSkpID8gc291cmNlc1swXSA6IHNvdXJjZXM7XG4gICAgICAgIHJldHVybiBmb3JrSm9pbkludGVybmFsKHNvdXJjZXMsIG51bGwpLnBpcGUobWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiByZXN1bHRTZWxlY3Rvcl8xLmFwcGx5KHZvaWQgMCwgYXJncyk7IH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGZvcmtKb2luSW50ZXJuYWwoc291cmNlcywgbnVsbCk7XG59XG5mdW5jdGlvbiBmb3JrSm9pbkludGVybmFsKHNvdXJjZXMsIGtleXMpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGxlbiA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgICB2YXIgY29tcGxldGVkID0gMDtcbiAgICAgICAgdmFyIGVtaXR0ZWQgPSAwO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZnJvbShzb3VyY2VzW2ldKTtcbiAgICAgICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc291cmNlLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaGFzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXR0ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWQgPT09IGxlbiB8fCAhaGFzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbWl0dGVkID09PSBsZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoa2V5cyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXMucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGtleSwgaSkgeyByZXR1cm4gKHJlc3VsdFtrZXldID0gdmFsdWVzW2ldLCByZXN1bHQpOyB9LCB7fSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JrSm9pbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfaXNBcnJheSxfdXRpbF9pc0Z1bmN0aW9uLF9vcGVyYXRvcnNfbWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWFwJztcbnZhciB0b1N0cmluZyA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7IH0pKCk7XG5leHBvcnQgZnVuY3Rpb24gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpLnBpcGUobWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBpc0FycmF5KGFyZ3MpID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHJlc3VsdFNlbGVjdG9yKGFyZ3MpOyB9KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmdW5jdGlvbiBoYW5kbGVyKGUpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXR1cFN1YnNjcmlwdGlvbih0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlciwgc3Vic2NyaWJlciwgb3B0aW9ucyk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZXR1cFN1YnNjcmlwdGlvbihzb3VyY2VPYmosIGV2ZW50TmFtZSwgaGFuZGxlciwgc3Vic2NyaWJlciwgb3B0aW9ucykge1xuICAgIHZhciB1bnN1YnNjcmliZTtcbiAgICBpZiAoaXNFdmVudFRhcmdldChzb3VyY2VPYmopKSB7XG4gICAgICAgIHZhciBzb3VyY2VfMSA9IHNvdXJjZU9iajtcbiAgICAgICAgc291cmNlT2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2VfMS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIoc291cmNlT2JqKSkge1xuICAgICAgICB2YXIgc291cmNlXzIgPSBzb3VyY2VPYmo7XG4gICAgICAgIHNvdXJjZU9iai5vbihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZV8yLm9mZihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChpc05vZGVTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopKSB7XG4gICAgICAgIHZhciBzb3VyY2VfMyA9IHNvdXJjZU9iajtcbiAgICAgICAgc291cmNlT2JqLmFkZExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlXzMucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc291cmNlT2JqICYmIHNvdXJjZU9iai5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZU9iai5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgc2V0dXBTdWJzY3JpcHRpb24oc291cmNlT2JqW2ldLCBldmVudE5hbWUsIGhhbmRsZXIsIHN1YnNjcmliZXIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGV2ZW50IHRhcmdldCcpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVyLmFkZCh1bnN1YnNjcmliZSk7XG59XG5mdW5jdGlvbiBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gc291cmNlT2JqICYmIHR5cGVvZiBzb3VyY2VPYmouYWRkTGlzdGVuZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNvdXJjZU9iai5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIoc291cmNlT2JqKSB7XG4gICAgcmV0dXJuIHNvdXJjZU9iaiAmJiB0eXBlb2Ygc291cmNlT2JqLm9uID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzb3VyY2VPYmoub2ZmID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNFdmVudFRhcmdldChzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gc291cmNlT2JqICYmIHR5cGVvZiBzb3VyY2VPYmouYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF91dGlsX2lzQXJyYXksX3V0aWxfaXNGdW5jdGlvbixfb3BlcmF0b3JzX21hcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi4vb3BlcmF0b3JzL21hcCc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbUV2ZW50UGF0dGVybihhZGRIYW5kbGVyLCByZW1vdmVIYW5kbGVyLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbUV2ZW50UGF0dGVybihhZGRIYW5kbGVyLCByZW1vdmVIYW5kbGVyKS5waXBlKG1hcChmdW5jdGlvbiAoYXJncykgeyByZXR1cm4gaXNBcnJheShhcmdzKSA/IHJlc3VsdFNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJncykgOiByZXN1bHRTZWxlY3RvcihhcmdzKTsgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBlW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5uZXh0KGUubGVuZ3RoID09PSAxID8gZVswXSA6IGUpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcmV0VmFsdWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXRWYWx1ZSA9IGFkZEhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24ocmVtb3ZlSGFuZGxlcikpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZUhhbmRsZXIoaGFuZGxlciwgcmV0VmFsdWUpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50UGF0dGVybi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfaWRlbnRpdHksX3V0aWxfaXNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGUoaW5pdGlhbFN0YXRlT3JPcHRpb25zLCBjb25kaXRpb24sIGl0ZXJhdGUsIHJlc3VsdFNlbGVjdG9yT3JPYnNlcnZhYmxlLCBzY2hlZHVsZXIpIHtcbiAgICB2YXIgcmVzdWx0U2VsZWN0b3I7XG4gICAgdmFyIGluaXRpYWxTdGF0ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gaW5pdGlhbFN0YXRlT3JPcHRpb25zO1xuICAgICAgICBpbml0aWFsU3RhdGUgPSBvcHRpb25zLmluaXRpYWxTdGF0ZTtcbiAgICAgICAgY29uZGl0aW9uID0gb3B0aW9ucy5jb25kaXRpb247XG4gICAgICAgIGl0ZXJhdGUgPSBvcHRpb25zLml0ZXJhdGU7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb3B0aW9ucy5yZXN1bHRTZWxlY3RvciB8fCBpZGVudGl0eTtcbiAgICAgICAgc2NoZWR1bGVyID0gb3B0aW9ucy5zY2hlZHVsZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlc3VsdFNlbGVjdG9yT3JPYnNlcnZhYmxlID09PSB1bmRlZmluZWQgfHwgaXNTY2hlZHVsZXIocmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUpKSB7XG4gICAgICAgIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZU9yT3B0aW9ucztcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBpZGVudGl0eTtcbiAgICAgICAgc2NoZWR1bGVyID0gcmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGVPck9wdGlvbnM7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2gsIDAsIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLFxuICAgICAgICAgICAgICAgIGl0ZXJhdGU6IGl0ZXJhdGUsXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uOiBjb25kaXRpb24sXG4gICAgICAgICAgICAgICAgcmVzdWx0U2VsZWN0b3I6IHJlc3VsdFNlbGVjdG9yLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBjb25kaXRpb25SZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gY29uZGl0aW9uKHN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghY29uZGl0aW9uUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdFNlbGVjdG9yKHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3RhdGUgPSBpdGVyYXRlKHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgY29uZGl0aW9uID0gc3RhdGUuY29uZGl0aW9uO1xuICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoc3RhdGUubmVlZEl0ZXJhdGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN0YXRlLnN0YXRlID0gc3RhdGUuaXRlcmF0ZShzdGF0ZS5zdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RhdGUubmVlZEl0ZXJhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHZhciBjb25kaXRpb25SZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25kaXRpb25SZXN1bHQgPSBjb25kaXRpb24oc3RhdGUuc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb25kaXRpb25SZXN1bHQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciB2YWx1ZTtcbiAgICB0cnkge1xuICAgICAgICB2YWx1ZSA9IHN0YXRlLnJlc3VsdFNlbGVjdG9yKHN0YXRlLnN0YXRlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zY2hlZHVsZShzdGF0ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX2RlZmVyLF9lbXB0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBkZWZlciB9IGZyb20gJy4vZGVmZXInO1xuaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuL2VtcHR5JztcbmV4cG9ydCBmdW5jdGlvbiBpaWYoY29uZGl0aW9uLCB0cnVlUmVzdWx0LCBmYWxzZVJlc3VsdCkge1xuICAgIGlmICh0cnVlUmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgICAgdHJ1ZVJlc3VsdCA9IEVNUFRZO1xuICAgIH1cbiAgICBpZiAoZmFsc2VSZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgICBmYWxzZVJlc3VsdCA9IEVNUFRZO1xuICAgIH1cbiAgICByZXR1cm4gZGVmZXIoZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZGl0aW9uKCkgPyB0cnVlUmVzdWx0IDogZmFsc2VSZXN1bHQ7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWlmLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfc2NoZWR1bGVyX2FzeW5jLF91dGlsX2lzTnVtZXJpYyBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc051bWVyaWMgfSBmcm9tICcuLi91dGlsL2lzTnVtZXJpYyc7XG5leHBvcnQgZnVuY3Rpb24gaW50ZXJ2YWwocGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAocGVyaW9kID09PSB2b2lkIDApIHtcbiAgICAgICAgcGVyaW9kID0gMDtcbiAgICB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICBpZiAoIWlzTnVtZXJpYyhwZXJpb2QpIHx8IHBlcmlvZCA8IDApIHtcbiAgICAgICAgcGVyaW9kID0gMDtcbiAgICB9XG4gICAgaWYgKCFzY2hlZHVsZXIgfHwgdHlwZW9mIHNjaGVkdWxlci5zY2hlZHVsZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgcGVyaW9kLCB7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIGNvdW50ZXI6IDAsIHBlcmlvZDogcGVyaW9kIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgY291bnRlciA9IHN0YXRlLmNvdW50ZXIsIHBlcmlvZCA9IHN0YXRlLnBlcmlvZDtcbiAgICBzdWJzY3JpYmVyLm5leHQoY291bnRlcik7XG4gICAgdGhpcy5zY2hlZHVsZSh7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIGNvdW50ZXI6IGNvdW50ZXIgKyAxLCBwZXJpb2Q6IHBlcmlvZCB9LCBwZXJpb2QpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF91dGlsX25vb3AgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWwvbm9vcCc7XG5leHBvcnQgdmFyIE5FVkVSID0gLypAX19QVVJFX18qLyBuZXcgT2JzZXJ2YWJsZShub29wKTtcbmV4cG9ydCBmdW5jdGlvbiBuZXZlcigpIHtcbiAgICByZXR1cm4gTkVWRVI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXZlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX2Zyb20sX3V0aWxfaXNBcnJheSxfZW1wdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IEVNUFRZIH0gZnJvbSAnLi9lbXB0eSc7XG5leHBvcnQgZnVuY3Rpb24gb25FcnJvclJlc3VtZU5leHQoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGlmIChzb3VyY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuICAgIHZhciBmaXJzdCA9IHNvdXJjZXNbMF0sIHJlbWFpbmRlciA9IHNvdXJjZXMuc2xpY2UoMSk7XG4gICAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkoZmlyc3QpKSB7XG4gICAgICAgIHJldHVybiBvbkVycm9yUmVzdW1lTmV4dC5hcHBseSh2b2lkIDAsIGZpcnN0KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJOZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5hZGQob25FcnJvclJlc3VtZU5leHQuYXBwbHkodm9pZCAwLCByZW1haW5kZXIpLnN1YnNjcmliZShzdWJzY3JpYmVyKSk7IH07XG4gICAgICAgIHJldHVybiBmcm9tKGZpcnN0KS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0sXG4gICAgICAgICAgICBlcnJvcjogc3ViTmV4dCxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBzdWJOZXh0LFxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9uRXJyb3JSZXN1bWVOZXh0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gcGFpcnMob2JqLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIXNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGggJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KFtrZXksIG9ialtrZXldXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCAwLCB7IGtleXM6IGtleXMsIGluZGV4OiAwLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvbiwgb2JqOiBvYmogfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIGtleXMgPSBzdGF0ZS5rZXlzLCBpbmRleCA9IHN0YXRlLmluZGV4LCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgc3Vic2NyaXB0aW9uID0gc3RhdGUuc3Vic2NyaXB0aW9uLCBvYmogPSBzdGF0ZS5vYmo7XG4gICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICBpZiAoaW5kZXggPCBrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KFtrZXksIG9ialtrZXldXSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uYWRkKHRoaXMuc2NoZWR1bGUoeyBrZXlzOiBrZXlzLCBpbmRleDogaW5kZXggKyAxLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvbiwgb2JqOiBvYmogfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFpcnMuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX25vdCxfdXRpbF9zdWJzY3JpYmVUbyxfb3BlcmF0b3JzX2ZpbHRlcixfT2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBub3QgfSBmcm9tICcuLi91dGlsL25vdCc7XG5pbXBvcnQgeyBzdWJzY3JpYmVUbyB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG8nO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnLi4vb3BlcmF0b3JzL2ZpbHRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gcGFydGl0aW9uKHNvdXJjZSwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykobmV3IE9ic2VydmFibGUoc3Vic2NyaWJlVG8oc291cmNlKSkpLFxuICAgICAgICBmaWx0ZXIobm90KHByZWRpY2F0ZSwgdGhpc0FyZykpKG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZVRvKHNvdXJjZSkpKVxuICAgIF07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0aXRpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiByYW5nZShzdGFydCwgY291bnQsIHNjaGVkdWxlcikge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmIChjb3VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb3VudCA9IHN0YXJ0O1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBjdXJyZW50ID0gc3RhcnQ7XG4gICAgICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2gsIDAsIHtcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsIGNvdW50OiBjb3VudCwgc3RhcnQ6IHN0YXJ0LCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXgrKyA+PSBjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoY3VycmVudCsrKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBzdGFydCA9IHN0YXRlLnN0YXJ0LCBpbmRleCA9IHN0YXRlLmluZGV4LCBjb3VudCA9IHN0YXRlLmNvdW50LCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcbiAgICBpZiAoaW5kZXggPj0gY291bnQpIHtcbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHN1YnNjcmliZXIubmV4dChzdGFydCk7XG4gICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhdGUuaW5kZXggPSBpbmRleCArIDE7XG4gICAgc3RhdGUuc3RhcnQgPSBzdGFydCArIDE7XG4gICAgdGhpcy5zY2hlZHVsZShzdGF0ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYW5nZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX2Zyb20sX2VtcHR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuL2VtcHR5JztcbmV4cG9ydCBmdW5jdGlvbiB1c2luZyhyZXNvdXJjZUZhY3RvcnksIG9ic2VydmFibGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciByZXNvdXJjZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc291cmNlID0gcmVzb3VyY2VGYWN0b3J5KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gb2JzZXJ2YWJsZUZhY3RvcnkocmVzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNvdXJjZSA9IHJlc3VsdCA/IGZyb20ocmVzdWx0KSA6IEVNUFRZO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgaWYgKHJlc291cmNlKSB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2UudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzaW5nLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0JztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbnZhciBBc3luY1N1YmplY3QgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXN5bmNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaGFzTmV4dCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aGlzLnRocm93bkVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5oYXNOZXh0KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmhhc05leHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaGFzTmV4dCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQXN5bmNTdWJqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY1N1YmplY3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJqZWN0LF91dGlsX09iamVjdFVuc3Vic2NyaWJlZEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0JztcbmltcG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbnZhciBCZWhhdmlvclN1YmplY3QgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQmVoYXZpb3JTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJlaGF2aW9yU3ViamVjdChfdmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3N1cGVyLnByb3RvdHlwZS5fc3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24gJiYgIXN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh0aGlzLl92YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyB0aGlzLnRocm93bkVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmV4dC5jYWxsKHRoaXMsIHRoaXMuX3ZhbHVlID0gdmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIEJlaGF2aW9yU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CZWhhdmlvclN1YmplY3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbnZhciBJbm5lclN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoSW5uZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElubmVyU3Vic2NyaWJlcihwYXJlbnQsIG91dGVyVmFsdWUsIG91dGVySW5kZXgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBfdGhpcy5vdXRlclZhbHVlID0gb3V0ZXJWYWx1ZTtcbiAgICAgICAgX3RoaXMub3V0ZXJJbmRleCA9IG91dGVySW5kZXg7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeU5leHQodGhpcy5vdXRlclZhbHVlLCB2YWx1ZSwgdGhpcy5vdXRlckluZGV4LCB0aGlzLmluZGV4KyssIHRoaXMpO1xuICAgIH07XG4gICAgSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5RXJyb3IoZXJyb3IsIHRoaXMpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5Q29tcGxldGUodGhpcyk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBJbm5lclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IElubmVyU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5uZXJTdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV9lbXB0eSxfb2JzZXJ2YWJsZV9vZixfb2JzZXJ2YWJsZV90aHJvd0Vycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi9vYnNlcnZhYmxlL2VtcHR5JztcbmltcG9ydCB7IG9mIH0gZnJvbSAnLi9vYnNlcnZhYmxlL29mJztcbmltcG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICcuL29ic2VydmFibGUvdGhyb3dFcnJvcic7XG5leHBvcnQgdmFyIE5vdGlmaWNhdGlvbktpbmQ7XG4vKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoTm90aWZpY2F0aW9uS2luZCkge1xuICAgIE5vdGlmaWNhdGlvbktpbmRbXCJORVhUXCJdID0gXCJOXCI7XG4gICAgTm90aWZpY2F0aW9uS2luZFtcIkVSUk9SXCJdID0gXCJFXCI7XG4gICAgTm90aWZpY2F0aW9uS2luZFtcIkNPTVBMRVRFXCJdID0gXCJDXCI7XG59KShOb3RpZmljYXRpb25LaW5kIHx8IChOb3RpZmljYXRpb25LaW5kID0ge30pKTtcbnZhciBOb3RpZmljYXRpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBlcnJvcikge1xuICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGtpbmQgPT09ICdOJztcbiAgICB9XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5raW5kKSB7XG4gICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIubmV4dCAmJiBvYnNlcnZlci5uZXh0KHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmVycm9yICYmIG9ic2VydmVyLmVycm9yKHRoaXMuZXJyb3IpO1xuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmNvbXBsZXRlICYmIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUuZG8gPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBraW5kID0gdGhpcy5raW5kO1xuICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0ICYmIG5leHQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3IgJiYgZXJyb3IodGhpcy5lcnJvcik7XG4gICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGxldGUgJiYgY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgJiYgdHlwZW9mIG5leHRPck9ic2VydmVyLm5leHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9ic2VydmUobmV4dE9yT2JzZXJ2ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG8obmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUudG9PYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIga2luZCA9IHRoaXMua2luZDtcbiAgICAgICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcih0aGlzLmVycm9yKTtcbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5leHBlY3RlZCBub3RpZmljYXRpb24ga2luZCB2YWx1ZScpO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLmNyZWF0ZU5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm90aWZpY2F0aW9uKCdOJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOb3RpZmljYXRpb24udW5kZWZpbmVkVmFsdWVOb3RpZmljYXRpb247XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY3JlYXRlRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnIpO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTm90aWZpY2F0aW9uLmNvbXBsZXRlTm90aWZpY2F0aW9uO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLmNvbXBsZXRlTm90aWZpY2F0aW9uID0gbmV3IE5vdGlmaWNhdGlvbignQycpO1xuICAgIE5vdGlmaWNhdGlvbi51bmRlZmluZWRWYWx1ZU5vdGlmaWNhdGlvbiA9IG5ldyBOb3RpZmljYXRpb24oJ04nLCB1bmRlZmluZWQpO1xuICAgIHJldHVybiBOb3RpZmljYXRpb247XG59KCkpO1xuZXhwb3J0IHsgTm90aWZpY2F0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX2NhblJlcG9ydEVycm9yLF91dGlsX3RvU3Vic2NyaWJlcixfc3ltYm9sX29ic2VydmFibGUsX3V0aWxfcGlwZSxfY29uZmlnIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNhblJlcG9ydEVycm9yIH0gZnJvbSAnLi91dGlsL2NhblJlcG9ydEVycm9yJztcbmltcG9ydCB7IHRvU3Vic2NyaWJlciB9IGZyb20gJy4vdXRpbC90b1N1YnNjcmliZXInO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgcGlwZUZyb21BcnJheSB9IGZyb20gJy4vdXRpbC9waXBlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbnZhciBPYnNlcnZhYmxlID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMuX2lzU2NhbGFyID0gZmFsc2U7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIG9wZXJhdG9yID0gdGhpcy5vcGVyYXRvcjtcbiAgICAgICAgdmFyIHNpbmsgPSB0b1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGlmIChvcGVyYXRvcikge1xuICAgICAgICAgICAgc2luay5hZGQob3BlcmF0b3IuY2FsbChzaW5rLCB0aGlzLnNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2luay5hZGQodGhpcy5zb3VyY2UgfHwgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmICFzaW5rLnN5bmNFcnJvclRocm93YWJsZSkgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZShzaW5rKSA6XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5U3Vic2NyaWJlKHNpbmspKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHNpbmsuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHNpbmsuc3luY0Vycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IHNpbmsuc3luY0Vycm9yVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaW5rO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHNpbmsuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhblJlcG9ydEVycm9yKHNpbmspKSB7XG4gICAgICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZWplY3QsIHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc291cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgICAgIHJldHVybiBzb3VyY2UgJiYgc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlW1N5bWJvbF9vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcGVyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiB2YWx1ZSA9IHg7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpIHtcbiAgICBpZiAoIXByb21pc2VDdG9yKSB7XG4gICAgICAgIHByb21pc2VDdG9yID0gY29uZmlnLlByb21pc2UgfHwgUHJvbWlzZTtcbiAgICB9XG4gICAgaWYgKCFwcm9taXNlQ3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIFByb21pc2UgaW1wbCBmb3VuZCcpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZUN0b3I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfU3Vic2NyaWJlcixfc3ltYm9sX3J4U3Vic2NyaWJlcixfT2JzZXJ2ZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgcnhTdWJzY3JpYmVyIGFzIHJ4U3Vic2NyaWJlclN5bWJvbCB9IGZyb20gJy4uL3N5bWJvbC9yeFN1YnNjcmliZXInO1xuaW1wb3J0IHsgZW1wdHkgYXMgZW1wdHlPYnNlcnZlciB9IGZyb20gJy4uL09ic2VydmVyJztcbmV4cG9ydCBmdW5jdGlvbiB0b1N1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgIGlmIChuZXh0T3JPYnNlcnZlcikge1xuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlclN5bWJvbF0pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJTeW1ib2xdKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFuZXh0T3JPYnNlcnZlciAmJiAhZXJyb3IgJiYgIWNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcihlbXB0eU9ic2VydmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9TdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfY29uZmlnLF91dGlsX2hvc3RSZXBvcnRFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBob3N0UmVwb3J0RXJyb3IgfSBmcm9tICcuL3V0aWwvaG9zdFJlcG9ydEVycm9yJztcbmV4cG9ydCB2YXIgZW1wdHkgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xudmFyIE91dGVyU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhPdXRlclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3V0ZXJTdWJzY3JpYmVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIE91dGVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PdXRlclN1YnNjcmliZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJqZWN0LF9zY2hlZHVsZXJfcXVldWUsX1N1YnNjcmlwdGlvbixfb3BlcmF0b3JzX29ic2VydmVPbixfdXRpbF9PYmplY3RVbnN1YnNjcmliZWRFcnJvcixfU3ViamVjdFN1YnNjcmlwdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4vU3ViamVjdCc7XG5pbXBvcnQgeyBxdWV1ZSB9IGZyb20gJy4vc2NoZWR1bGVyL3F1ZXVlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9ic2VydmVPblN1YnNjcmliZXIgfSBmcm9tICcuL29wZXJhdG9ycy9vYnNlcnZlT24nO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuaW1wb3J0IHsgU3ViamVjdFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3ViamVjdFN1YnNjcmlwdGlvbic7XG52YXIgUmVwbGF5U3ViamVjdCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZXBsYXlTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlcGxheVN1YmplY3QoYnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIGlmIChidWZmZXJTaXplID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGJ1ZmZlclNpemUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbmRvd1RpbWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgd2luZG93VGltZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLl9ldmVudHMgPSBbXTtcbiAgICAgICAgX3RoaXMuX2luZmluaXRlVGltZVdpbmRvdyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemUgPCAxID8gMSA6IGJ1ZmZlclNpemU7XG4gICAgICAgIF90aGlzLl93aW5kb3dUaW1lID0gd2luZG93VGltZSA8IDEgPyAxIDogd2luZG93VGltZTtcbiAgICAgICAgaWYgKHdpbmRvd1RpbWUgPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgICAgICAgX3RoaXMuX2luZmluaXRlVGltZVdpbmRvdyA9IHRydWU7XG4gICAgICAgICAgICBfdGhpcy5uZXh0ID0gX3RoaXMubmV4dEluZmluaXRlVGltZVdpbmRvdztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLm5leHQgPSBfdGhpcy5uZXh0VGltZVdpbmRvdztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLm5leHRJbmZpbml0ZVRpbWVXaW5kb3cgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9ldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICAgIF9ldmVudHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIGlmIChfZXZlbnRzLmxlbmd0aCA+IHRoaXMuX2J1ZmZlclNpemUpIHtcbiAgICAgICAgICAgIF9ldmVudHMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5uZXh0VGltZVdpbmRvdyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9ldmVudHMucHVzaChuZXcgUmVwbGF5RXZlbnQodGhpcy5fZ2V0Tm93KCksIHZhbHVlKSk7XG4gICAgICAgIHRoaXMuX3RyaW1CdWZmZXJUaGVuR2V0RXZlbnRzKCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmV4dC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICB9O1xuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2luZmluaXRlVGltZVdpbmRvdyA9IHRoaXMuX2luZmluaXRlVGltZVdpbmRvdztcbiAgICAgICAgdmFyIF9ldmVudHMgPSBfaW5maW5pdGVUaW1lV2luZG93ID8gdGhpcy5fZXZlbnRzIDogdGhpcy5fdHJpbUJ1ZmZlclRoZW5HZXRFdmVudHMoKTtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICB2YXIgbGVuID0gX2V2ZW50cy5sZW5ndGg7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5pc1N0b3BwZWQgfHwgdGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJqZWN0U3Vic2NyaXB0aW9uKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHN1YnNjcmliZXIgPSBuZXcgT2JzZXJ2ZU9uU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBzY2hlZHVsZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2luZmluaXRlVGltZVdpbmRvdykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW4gJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoX2V2ZW50c1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbiAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChfZXZlbnRzW2ldLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aGlzLnRocm93bkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5fZ2V0Tm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuc2NoZWR1bGVyIHx8IHF1ZXVlKS5ub3coKTtcbiAgICB9O1xuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLl90cmltQnVmZmVyVGhlbkdldEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5vdyA9IHRoaXMuX2dldE5vdygpO1xuICAgICAgICB2YXIgX2J1ZmZlclNpemUgPSB0aGlzLl9idWZmZXJTaXplO1xuICAgICAgICB2YXIgX3dpbmRvd1RpbWUgPSB0aGlzLl93aW5kb3dUaW1lO1xuICAgICAgICB2YXIgX2V2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgICAgdmFyIGV2ZW50c0NvdW50ID0gX2V2ZW50cy5sZW5ndGg7XG4gICAgICAgIHZhciBzcGxpY2VDb3VudCA9IDA7XG4gICAgICAgIHdoaWxlIChzcGxpY2VDb3VudCA8IGV2ZW50c0NvdW50KSB7XG4gICAgICAgICAgICBpZiAoKG5vdyAtIF9ldmVudHNbc3BsaWNlQ291bnRdLnRpbWUpIDwgX3dpbmRvd1RpbWUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNwbGljZUNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50c0NvdW50ID4gX2J1ZmZlclNpemUpIHtcbiAgICAgICAgICAgIHNwbGljZUNvdW50ID0gTWF0aC5tYXgoc3BsaWNlQ291bnQsIGV2ZW50c0NvdW50IC0gX2J1ZmZlclNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGxpY2VDb3VudCA+IDApIHtcbiAgICAgICAgICAgIF9ldmVudHMuc3BsaWNlKDAsIHNwbGljZUNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2V2ZW50cztcbiAgICB9O1xuICAgIHJldHVybiBSZXBsYXlTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnQgeyBSZXBsYXlTdWJqZWN0IH07XG52YXIgUmVwbGF5RXZlbnQgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVwbGF5RXZlbnQodGltZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy50aW1lID0gdGltZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gUmVwbGF5RXZlbnQ7XG59KCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVwbGF5U3ViamVjdC5qcy5tYXBcbiIsInZhciBTY2hlZHVsZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbm93ID0gU2NoZWR1bGVyLm5vdztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLlNjaGVkdWxlckFjdGlvbiA9IFNjaGVkdWxlckFjdGlvbjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLlNjaGVkdWxlckFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIERhdGUubm93KCk7IH07XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX09ic2VydmFibGUsX1N1YnNjcmliZXIsX1N1YnNjcmlwdGlvbixfdXRpbF9PYmplY3RVbnN1YnNjcmliZWRFcnJvcixfU3ViamVjdFN1YnNjcmlwdGlvbixfaW50ZXJuYWxfc3ltYm9sX3J4U3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbmltcG9ydCB7IFN1YmplY3RTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YmplY3RTdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgcnhTdWJzY3JpYmVyIGFzIHJ4U3Vic2NyaWJlclN5bWJvbCB9IGZyb20gJy4uL2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXInO1xudmFyIFN1YmplY3RTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YmplY3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTdWJqZWN0U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU3ViamVjdFN1YnNjcmliZXIgfTtcbnZhciBTdWJqZWN0ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICAgIF90aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlW3J4U3Vic2NyaWJlclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3ViamVjdFN1YnNjcmliZXIodGhpcyk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvcHlbaV0ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICB0aGlzLnRocm93bkVycm9yID0gZXJyO1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgIHZhciBjb3B5ID0gb2JzZXJ2ZXJzLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvcHlbaV0uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9ic2VydmVycy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb3B5W2ldLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IodGhpcy50aHJvd25FcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3ViamVjdFN1YnNjcmlwdGlvbih0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdWJqZWN0IH07XG52YXIgQW5vbnltb3VzU3ViamVjdCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24ubmV4dCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24uZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiAmJiBkZXN0aW5hdGlvbi5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEFub255bW91c1N1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbnZhciBTdWJqZWN0U3Vic2NyaXB0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YmplY3RTdWJzY3JpcHRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdFN1YnNjcmlwdGlvbihzdWJqZWN0LCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN1YmplY3QgPSBzdWJqZWN0O1xuICAgICAgICBfdGhpcy5zdWJzY3JpYmVyID0gc3Vic2NyaWJlcjtcbiAgICAgICAgX3RoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3ViamVjdFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSBzdWJqZWN0Lm9ic2VydmVycztcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMgfHwgb2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCB8fCBzdWJqZWN0LmlzU3RvcHBlZCB8fCBzdWJqZWN0LmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpYmVySW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZih0aGlzLnN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShzdWJzY3JpYmVySW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdFN1YnNjcmlwdGlvbjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJqZWN0U3Vic2NyaXB0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0U3Vic2NyaXB0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9pc0Z1bmN0aW9uLF9PYnNlcnZlcixfU3Vic2NyaXB0aW9uLF9pbnRlcm5hbF9zeW1ib2xfcnhTdWJzY3JpYmVyLF9jb25maWcsX3V0aWxfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZW1wdHkgYXMgZW1wdHlPYnNlcnZlciB9IGZyb20gJy4vT2JzZXJ2ZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgcnhTdWJzY3JpYmVyIGFzIHJ4U3Vic2NyaWJlclN5bWJvbCB9IGZyb20gJy4uL2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXInO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaG9zdFJlcG9ydEVycm9yIH0gZnJvbSAnLi91dGlsL2hvc3RSZXBvcnRFcnJvcic7XG52YXIgU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb25Pck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zeW5jRXJyb3JWYWx1ZSA9IG51bGw7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZW1wdHlPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoIWRlc3RpbmF0aW9uT3JOZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZW1wdHlPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25Pck5leHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbk9yTmV4dCBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IGRlc3RpbmF0aW9uT3JOZXh0LnN5bmNFcnJvclRocm93YWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb25Pck5leHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbk9yTmV4dC5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKF90aGlzLCBkZXN0aW5hdGlvbk9yTmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKF90aGlzLCBkZXN0aW5hdGlvbk9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlW3J4U3Vic2NyaWJlclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIHN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3BhcmVudE9yUGFyZW50cyA9IHRoaXMuX3BhcmVudE9yUGFyZW50cztcbiAgICAgICAgdGhpcy5fcGFyZW50T3JQYXJlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBfcGFyZW50T3JQYXJlbnRzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YnNjcmliZXIgfTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihfcGFyZW50U3Vic2NyaWJlciwgb2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcGFyZW50U3Vic2NyaWJlciA9IF9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBfdGhpcztcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0O1xuICAgICAgICAgICAgZXJyb3IgPSBvYnNlcnZlck9yTmV4dC5lcnJvcjtcbiAgICAgICAgICAgIGNvbXBsZXRlID0gb2JzZXJ2ZXJPck5leHQuY29tcGxldGU7XG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXJPck5leHQgIT09IGVtcHR5T2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dC51bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkKGNvbnRleHQudW5zdWJzY3JpYmUuYmluZChjb250ZXh0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRleHQudW5zdWJzY3JpYmUgPSBfdGhpcy51bnN1YnNjcmliZS5iaW5kKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIF90aGlzLl9uZXh0ID0gbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gZXJyb3I7XG4gICAgICAgIF90aGlzLl9jb21wbGV0ZSA9IGNvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQgJiYgdGhpcy5fbmV4dCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHRoaXMuX25leHQsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB0aGlzLl9uZXh0LCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIHZhciB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nID0gY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc7XG4gICAgICAgICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9lcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHRoaXMuX2Vycm9yLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBpZiAodXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlZENvbXBsZXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NvbXBsZXRlLmNhbGwoX3RoaXMuX2NvbnRleHQpOyB9O1xuICAgICAgICAgICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih3cmFwcGVkQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgd3JhcHBlZENvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl9fdHJ5T3JVbnN1YiA9IGZ1bmN0aW9uIChmbiwgdmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclNldEVycm9yID0gZnVuY3Rpb24gKHBhcmVudCwgZm4sIHZhbHVlKSB7XG4gICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIGNhbGwnKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgICAgIHBhcmVudC5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcmVudFN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICBfcGFyZW50U3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfaXNBcnJheSxfdXRpbF9pc09iamVjdCxfdXRpbF9pc0Z1bmN0aW9uLF91dGlsX1Vuc3Vic2NyaXB0aW9uRXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi91dGlsL2lzT2JqZWN0JztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xudmFyIFN1YnNjcmlwdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24odW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50T3JQYXJlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSB1bnN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfcGFyZW50T3JQYXJlbnRzID0gX2EuX3BhcmVudE9yUGFyZW50cywgX3Vuc3Vic2NyaWJlID0gX2EuX3Vuc3Vic2NyaWJlLCBfc3Vic2NyaXB0aW9ucyA9IF9hLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3BhcmVudE9yUGFyZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICBpZiAoX3BhcmVudE9yUGFyZW50cyBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgX3BhcmVudE9yUGFyZW50cy5yZW1vdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IF9wYXJlbnRPclBhcmVudHMubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudE9yUGFyZW50c1tpbmRleF07XG4gICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKF91bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgX3Vuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yID8gZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGUuZXJyb3JzKSA6IFtlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheShfc3Vic2NyaXB0aW9ucykpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICAgICAgdmFyIGxlbiA9IF9zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IF9zdWJzY3JpcHRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3Qoc3ViKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGUuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGVhcmRvd247XG4gICAgICAgIGlmICghdGVhcmRvd24pIHtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0eXBlb2YgdGVhcmRvd24pIHtcbiAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHRlYXJkb3duKTtcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiA9PT0gdGhpcyB8fCBzdWJzY3JpcHRpb24uY2xvc2VkIHx8IHR5cGVvZiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEoc3Vic2NyaXB0aW9uIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5fc3Vic2NyaXB0aW9ucyA9IFt0bXBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VucmVjb2duaXplZCB0ZWFyZG93biAnICsgdGVhcmRvd24gKyAnIGFkZGVkIHRvIFN1YnNjcmlwdGlvbi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgX3BhcmVudE9yUGFyZW50cyA9IHN1YnNjcmlwdGlvbi5fcGFyZW50T3JQYXJlbnRzO1xuICAgICAgICBpZiAoX3BhcmVudE9yUGFyZW50cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9wYXJlbnRPclBhcmVudHMgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9wYXJlbnRPclBhcmVudHMgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChfcGFyZW50T3JQYXJlbnRzID09PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5fcGFyZW50T3JQYXJlbnRzID0gW19wYXJlbnRPclBhcmVudHMsIHRoaXNdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9wYXJlbnRPclBhcmVudHMuaW5kZXhPZih0aGlzKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIF9wYXJlbnRPclBhcmVudHMucHVzaCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IFtzdWJzY3JpcHRpb25dO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uSW5kZXggPSBzdWJzY3JpcHRpb25zLmluZGV4T2Yoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25JbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zLnNwbGljZShzdWJzY3JpcHRpb25JbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoZW1wdHkpIHtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0obmV3IFN1YnNjcmlwdGlvbigpKSk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmZ1bmN0aW9uIGZsYXR0ZW5VbnN1YnNjcmlwdGlvbkVycm9ycyhlcnJvcnMpIHtcbiAgICByZXR1cm4gZXJyb3JzLnJlZHVjZShmdW5jdGlvbiAoZXJycywgZXJyKSB7IHJldHVybiBlcnJzLmNvbmNhdCgoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikgPyBlcnIuZXJyb3JzIDogZXJyKTsgfSwgW10pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xudmFyIF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncyA9IGZhbHNlO1xuZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgUHJvbWlzZTogdW5kZWZpbmVkLFxuICAgIHNldCB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGVycm9yID0gLypAX19QVVJFX18qLyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgIC8qQF9fUFVSRV9fKi8gY29uc29sZS53YXJuKCdERVBSRUNBVEVEISBSeEpTIHdhcyBzZXQgdG8gdXNlIGRlcHJlY2F0ZWQgc3luY2hyb25vdXMgZXJyb3IgaGFuZGxpbmcgYmVoYXZpb3IgYnkgY29kZSBhdDogXFxuJyArIGVycm9yLnN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MpIHtcbiAgICAgICAgICAgIC8qQF9fUFVSRV9fKi8gY29uc29sZS5sb2coJ1J4SlM6IEJhY2sgdG8gYSBiZXR0ZXIgZXJyb3IgYmVoYXZpb3IuIFRoYW5rIHlvdS4gPDMnKTtcbiAgICAgICAgfVxuICAgICAgICBfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MgPSB2YWx1ZTtcbiAgICB9LFxuICAgIGdldCB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKCkge1xuICAgICAgICByZXR1cm4gX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfT2JzZXJ2YWJsZSxfU3Vic2NyaWJlcixfU3Vic2NyaXB0aW9uLF9vcGVyYXRvcnNfcmVmQ291bnQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3RTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3ViamVjdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgcmVmQ291bnQgYXMgaGlnaGVyT3JkZXJSZWZDb3VudCB9IGZyb20gJy4uL29wZXJhdG9ycy9yZWZDb3VudCc7XG52YXIgQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKENvbm5lY3RhYmxlT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0YWJsZU9ic2VydmFibGUoc291cmNlLCBzdWJqZWN0RmFjdG9yeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLnN1YmplY3RGYWN0b3J5ID0gc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIF90aGlzLl9yZWZDb3VudCA9IDA7XG4gICAgICAgIF90aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ViamVjdCgpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuZ2V0U3ViamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLl9zdWJqZWN0O1xuICAgICAgICBpZiAoIXN1YmplY3QgfHwgc3ViamVjdC5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YmplY3QgPSB0aGlzLnN1YmplY3RGYWN0b3J5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YmplY3Q7XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbjtcbiAgICAgICAgaWYgKCFjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgICAgICBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uYWRkKHRoaXMuc291cmNlXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShuZXcgQ29ubmVjdGFibGVTdWJzY3JpYmVyKHRoaXMuZ2V0U3ViamVjdCgpLCB0aGlzKSkpO1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUucmVmQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBoaWdoZXJPcmRlclJlZkNvdW50KCkodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGFibGVPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBDb25uZWN0YWJsZU9ic2VydmFibGUgfTtcbmV4cG9ydCB2YXIgY29ubmVjdGFibGVPYnNlcnZhYmxlRGVzY3JpcHRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29ubmVjdGFibGVQcm90byA9IENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGU7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3BlcmF0b3I6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgX3JlZkNvdW50OiB7IHZhbHVlOiAwLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgICBfc3ViamVjdDogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgICAgX2Nvbm5lY3Rpb246IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICAgIF9zdWJzY3JpYmU6IHsgdmFsdWU6IGNvbm5lY3RhYmxlUHJvdG8uX3N1YnNjcmliZSB9LFxuICAgICAgICBfaXNDb21wbGV0ZTogeyB2YWx1ZTogY29ubmVjdGFibGVQcm90by5faXNDb21wbGV0ZSwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgICAgZ2V0U3ViamVjdDogeyB2YWx1ZTogY29ubmVjdGFibGVQcm90by5nZXRTdWJqZWN0IH0sXG4gICAgICAgIGNvbm5lY3Q6IHsgdmFsdWU6IGNvbm5lY3RhYmxlUHJvdG8uY29ubmVjdCB9LFxuICAgICAgICByZWZDb3VudDogeyB2YWx1ZTogY29ubmVjdGFibGVQcm90by5yZWZDb3VudCB9XG4gICAgfTtcbn0pKCk7XG52YXIgQ29ubmVjdGFibGVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKENvbm5lY3RhYmxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0YWJsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbm5lY3RhYmxlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb25uZWN0YWJsZSA9IGNvbm5lY3RhYmxlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbm5lY3RhYmxlU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9lcnJvci5jYWxsKHRoaXMsIGVycik7XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0YWJsZS5faXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlKCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZVN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gdGhpcy5jb25uZWN0YWJsZTtcbiAgICAgICAgaWYgKGNvbm5lY3RhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBjb25uZWN0aW9uID0gY29ubmVjdGFibGUuX2Nvbm5lY3Rpb247XG4gICAgICAgICAgICBjb25uZWN0YWJsZS5fcmVmQ291bnQgPSAwO1xuICAgICAgICAgICAgY29ubmVjdGFibGUuX3N1YmplY3QgPSBudWxsO1xuICAgICAgICAgICAgY29ubmVjdGFibGUuX2Nvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25uZWN0YWJsZVN1YnNjcmliZXI7XG59KFN1YmplY3RTdWJzY3JpYmVyKSk7XG52YXIgUmVmQ291bnRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWZDb3VudE9wZXJhdG9yKGNvbm5lY3RhYmxlKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICB9XG4gICAgUmVmQ291bnRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gdGhpcy5jb25uZWN0YWJsZTtcbiAgICAgICAgY29ubmVjdGFibGUuX3JlZkNvdW50Kys7XG4gICAgICAgIHZhciByZWZDb3VudGVyID0gbmV3IFJlZkNvdW50U3Vic2NyaWJlcihzdWJzY3JpYmVyLCBjb25uZWN0YWJsZSk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKHJlZkNvdW50ZXIpO1xuICAgICAgICBpZiAoIXJlZkNvdW50ZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICByZWZDb3VudGVyLmNvbm5lY3Rpb24gPSBjb25uZWN0YWJsZS5jb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBSZWZDb3VudE9wZXJhdG9yO1xufSgpKTtcbnZhciBSZWZDb3VudFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUmVmQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlZkNvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY29ubmVjdGFibGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvbm5lY3RhYmxlID0gY29ubmVjdGFibGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVmQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG4gICAgICAgIGlmICghY29ubmVjdGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25uZWN0YWJsZSA9IG51bGw7XG4gICAgICAgIHZhciByZWZDb3VudCA9IGNvbm5lY3RhYmxlLl9yZWZDb3VudDtcbiAgICAgICAgaWYgKHJlZkNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29ubmVjdGFibGUuX3JlZkNvdW50ID0gcmVmQ291bnQgLSAxO1xuICAgICAgICBpZiAocmVmQ291bnQgPiAxKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9uO1xuICAgICAgICB2YXIgc2hhcmVkQ29ubmVjdGlvbiA9IGNvbm5lY3RhYmxlLl9jb25uZWN0aW9uO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICBpZiAoc2hhcmVkQ29ubmVjdGlvbiAmJiAoIWNvbm5lY3Rpb24gfHwgc2hhcmVkQ29ubmVjdGlvbiA9PT0gY29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgIHNoYXJlZENvbm5lY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJlZkNvdW50U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29ubmVjdGFibGVPYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9pc1NjaGVkdWxlcixfdXRpbF9pc0FycmF5LF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQsX2Zyb21BcnJheSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5pbXBvcnQgeyBmcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG52YXIgTk9ORSA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3QoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gbnVsbDtcbiAgICB2YXIgc2NoZWR1bGVyID0gbnVsbDtcbiAgICBpZiAoaXNTY2hlZHVsZXIob2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgfVxuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShvYnNlcnZhYmxlc1swXSkpIHtcbiAgICAgICAgb2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheShvYnNlcnZhYmxlcywgc2NoZWR1bGVyKS5saWZ0KG5ldyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IocmVzdWx0U2VsZWN0b3IpKTtcbn1cbnZhciBDb21iaW5lTGF0ZXN0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tYmluZUxhdGVzdE9wZXJhdG9yKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgQ29tYmluZUxhdGVzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5yZXN1bHRTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbWJpbmVMYXRlc3RPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IgfTtcbnZhciBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgIF90aGlzLnZhbHVlcyA9IFtdO1xuICAgICAgICBfdGhpcy5vYnNlcnZhYmxlcyA9IFtdO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uIChvYnNlcnZhYmxlKSB7XG4gICAgICAgIHRoaXMudmFsdWVzLnB1c2goTk9ORSk7XG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZXMucHVzaChvYnNlcnZhYmxlKTtcbiAgICB9O1xuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlcyA9IHRoaXMub2JzZXJ2YWJsZXM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZhYmxlcy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gbGVuO1xuICAgICAgICAgICAgdGhpcy50b1Jlc3BvbmQgPSBsZW47XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1tpXTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBvYnNlcnZhYmxlLCBvYnNlcnZhYmxlLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICh1bnVzZWQpIHtcbiAgICAgICAgaWYgKCh0aGlzLmFjdGl2ZSAtPSAxKSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG4gICAgICAgIHZhciBvbGRWYWwgPSB2YWx1ZXNbb3V0ZXJJbmRleF07XG4gICAgICAgIHZhciB0b1Jlc3BvbmQgPSAhdGhpcy50b1Jlc3BvbmRcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiBvbGRWYWwgPT09IE5PTkUgPyAtLXRoaXMudG9SZXNwb25kIDogdGhpcy50b1Jlc3BvbmQ7XG4gICAgICAgIHZhbHVlc1tvdXRlckluZGV4XSA9IGlubmVyVmFsdWU7XG4gICAgICAgIGlmICh0b1Jlc3BvbmQgPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5UmVzdWx0U2VsZWN0b3IodmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZXMuc2xpY2UoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5UmVzdWx0U2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlc3VsdFNlbGVjdG9yLmFwcGx5KHRoaXMsIHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChyZXN1bHQpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lTGF0ZXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2YsX29wZXJhdG9yc19jb25jYXRBbGwgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgb2YgfSBmcm9tICcuL29mJztcbmltcG9ydCB7IGNvbmNhdEFsbCB9IGZyb20gJy4uL29wZXJhdG9ycy9jb25jYXRBbGwnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gY29uY2F0QWxsKCkob2YuYXBwbHkodm9pZCAwLCBvYnNlcnZhYmxlcykpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfZnJvbSxfZW1wdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4vZW1wdHknO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmVyKG9ic2VydmFibGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbnB1dDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlucHV0ID0gb2JzZXJ2YWJsZUZhY3RvcnkoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzb3VyY2UgPSBpbnB1dCA/IGZyb20oaW5wdXQpIDogZW1wdHkoKTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IHZhciBFTVBUWSA9IC8qQF9fUFVSRV9fKi8gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7XG5leHBvcnQgZnVuY3Rpb24gZW1wdHkoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikgOiBFTVBUWTtcbn1cbmZ1bmN0aW9uIGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1wdHkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF91dGlsX3N1YnNjcmliZVRvLF9zY2hlZHVsZWRfc2NoZWR1bGVkIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IHN1YnNjcmliZVRvIH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUbyc7XG5pbXBvcnQgeyBzY2hlZHVsZWQgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVkJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIXNjaGVkdWxlcikge1xuICAgICAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZVRvKGlucHV0KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb20uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF91dGlsX3N1YnNjcmliZVRvQXJyYXksX3NjaGVkdWxlZF9zY2hlZHVsZUFycmF5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IHN1YnNjcmliZVRvQXJyYXkgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5JztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmVUb0FycmF5KGlucHV0KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tQXJyYXkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF91dGlsX2lzU2NoZWR1bGVyLF9vcGVyYXRvcnNfbWVyZ2VBbGwsX2Zyb21BcnJheSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuaW1wb3J0IHsgbWVyZ2VBbGwgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWVyZ2VBbGwnO1xuaW1wb3J0IHsgZnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tQXJyYXknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIHZhciBzY2hlZHVsZXIgPSBudWxsO1xuICAgIHZhciBsYXN0ID0gb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzU2NoZWR1bGVyKGxhc3QpKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgICAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID4gMSAmJiB0eXBlb2Ygb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25jdXJyZW50ID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGxhc3QgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gbnVsbCAmJiBvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEgJiYgb2JzZXJ2YWJsZXNbMF0gaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlQWxsKGNvbmN1cnJlbnQpKGZyb21BcnJheShvYnNlcnZhYmxlcywgc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfaXNTY2hlZHVsZXIsX2Zyb21BcnJheSxfc2NoZWR1bGVkX3NjaGVkdWxlQXJyYXkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmltcG9ydCB7IGZyb21BcnJheSB9IGZyb20gJy4vZnJvbUFycmF5JztcbmltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheSc7XG5leHBvcnQgZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcbiAgICAgICAgYXJncy5wb3AoKTtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoYXJncywgc2NoZWR1bGVyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmcm9tQXJyYXkoYXJncyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2YuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF91dGlsX2lzQXJyYXksX2Zyb21BcnJheSxfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IGZyb21BcnJheSB9IGZyb20gJy4vZnJvbUFycmF5JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHJhY2UoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAoaXNBcnJheShvYnNlcnZhYmxlc1swXSkpIHtcbiAgICAgICAgICAgIG9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXNbMF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZXNbMF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheShvYnNlcnZhYmxlcywgdW5kZWZpbmVkKS5saWZ0KG5ldyBSYWNlT3BlcmF0b3IoKSk7XG59XG52YXIgUmFjZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJhY2VPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgUmFjZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgUmFjZVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFJhY2VPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBSYWNlT3BlcmF0b3IgfTtcbnZhciBSYWNlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSYWNlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSYWNlU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFzRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMub2JzZXJ2YWJsZXMgPSBbXTtcbiAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJhY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uIChvYnNlcnZhYmxlKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZXMucHVzaChvYnNlcnZhYmxlKTtcbiAgICB9O1xuICAgIFJhY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlcyA9IHRoaXMub2JzZXJ2YWJsZXM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZhYmxlcy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuICYmICF0aGlzLmhhc0ZpcnN0OyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGVzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBvYnNlcnZhYmxlLCBvYnNlcnZhYmxlLCBpKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYWRkKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGVzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmFjZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0ZpcnN0KSB7XG4gICAgICAgICAgICB0aGlzLmhhc0ZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgIT09IG91dGVySW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaXB0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmFjZVN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgUmFjZVN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhY2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiB0aHJvd0Vycm9yKGVycm9yLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIXNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyb3IpOyB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCAwLCB7IGVycm9yOiBlcnJvciwgc3Vic2NyaWJlcjogc3Vic2NyaWJlciB9KTsgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2goX2EpIHtcbiAgICB2YXIgZXJyb3IgPSBfYS5lcnJvciwgc3Vic2NyaWJlciA9IF9hLnN1YnNjcmliZXI7XG4gICAgc3Vic2NyaWJlci5lcnJvcihlcnJvcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd0Vycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfc2NoZWR1bGVyX2FzeW5jLF91dGlsX2lzTnVtZXJpYyxfdXRpbF9pc1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc051bWVyaWMgfSBmcm9tICcuLi91dGlsL2lzTnVtZXJpYyc7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGR1ZVRpbWUsIHBlcmlvZE9yU2NoZWR1bGVyLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoZHVlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGR1ZVRpbWUgPSAwO1xuICAgIH1cbiAgICB2YXIgcGVyaW9kID0gLTE7XG4gICAgaWYgKGlzTnVtZXJpYyhwZXJpb2RPclNjaGVkdWxlcikpIHtcbiAgICAgICAgcGVyaW9kID0gTnVtYmVyKHBlcmlvZE9yU2NoZWR1bGVyKSA8IDEgJiYgMSB8fCBOdW1iZXIocGVyaW9kT3JTY2hlZHVsZXIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1NjaGVkdWxlcihwZXJpb2RPclNjaGVkdWxlcikpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gcGVyaW9kT3JTY2hlZHVsZXI7XG4gICAgfVxuICAgIGlmICghaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBkdWUgPSBpc051bWVyaWMoZHVlVGltZSlcbiAgICAgICAgICAgID8gZHVlVGltZVxuICAgICAgICAgICAgOiAoK2R1ZVRpbWUgLSBzY2hlZHVsZXIubm93KCkpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCBkdWUsIHtcbiAgICAgICAgICAgIGluZGV4OiAwLCBwZXJpb2Q6IHBlcmlvZCwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgsIHBlcmlvZCA9IHN0YXRlLnBlcmlvZCwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG4gICAgc3Vic2NyaWJlci5uZXh0KGluZGV4KTtcbiAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmIChwZXJpb2QgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfVxuICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIHBlcmlvZCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX2Zyb21BcnJheSxfdXRpbF9pc0FycmF5LF9TdWJzY3JpYmVyLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQsXy4uX2ludGVybmFsX3N5bWJvbF9pdGVyYXRvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tQXJyYXknO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uLy4uL2ludGVybmFsL3N5bWJvbC9pdGVyYXRvcic7XG5leHBvcnQgZnVuY3Rpb24gemlwKCkge1xuICAgIHZhciBvYnNlcnZhYmxlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmFibGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXkob2JzZXJ2YWJsZXMsIHVuZGVmaW5lZCkubGlmdChuZXcgWmlwT3BlcmF0b3IocmVzdWx0U2VsZWN0b3IpKTtcbn1cbnZhciBaaXBPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBaaXBPcGVyYXRvcihyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIFppcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgWmlwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnJlc3VsdFNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gWmlwT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgWmlwT3BlcmF0b3IgfTtcbnZhciBaaXBTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFppcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gWmlwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcmVzdWx0U2VsZWN0b3IsIHZhbHVlcykge1xuICAgICAgICBpZiAodmFsdWVzID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLml0ZXJhdG9ycyA9IFtdO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICBfdGhpcy5yZXN1bHRTZWxlY3RvciA9ICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpID8gcmVzdWx0U2VsZWN0b3IgOiBudWxsO1xuICAgICAgICBfdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgWmlwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9ycyA9IHRoaXMuaXRlcmF0b3JzO1xuICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9ycy5wdXNoKG5ldyBTdGF0aWNBcnJheUl0ZXJhdG9yKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlW1N5bWJvbF9pdGVyYXRvcl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9ycy5wdXNoKG5ldyBTdGF0aWNJdGVyYXRvcih2YWx1ZVtTeW1ib2xfaXRlcmF0b3JdKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGl0ZXJhdG9ycy5wdXNoKG5ldyBaaXBCdWZmZXJJdGVyYXRvcih0aGlzLmRlc3RpbmF0aW9uLCB0aGlzLCB2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcnMgPSB0aGlzLml0ZXJhdG9ycztcbiAgICAgICAgdmFyIGxlbiA9IGl0ZXJhdG9ycy5sZW5ndGg7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZlID0gbGVuO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvcnNbaV07XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3Iuc3RpbGxVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChpdGVyYXRvci5zdWJzY3JpYmUoaXRlcmF0b3IsIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUluYWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwU3Vic2NyaWJlci5wcm90b3R5cGUuY2hlY2tJdGVyYXRvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcnMgPSB0aGlzLml0ZXJhdG9ycztcbiAgICAgICAgdmFyIGxlbiA9IGl0ZXJhdG9ycy5sZW5ndGg7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yc1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3IuaGFzVmFsdWUgPT09ICdmdW5jdGlvbicgJiYgIWl0ZXJhdG9yLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNob3VsZENvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yc1tpXTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IuaGFzQ29tcGxldGVkKCkpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFyZ3MucHVzaChyZXN1bHQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLl90cnlyZXN1bHRTZWxlY3RvcihhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZENvbXBsZXRlKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5cmVzdWx0U2VsZWN0b3IgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5yZXN1bHRTZWxlY3Rvci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gWmlwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgWmlwU3Vic2NyaWJlciB9O1xudmFyIFN0YXRpY0l0ZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXRpY0l0ZXJhdG9yKGl0ZXJhdG9yKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0b3IgPSBpdGVyYXRvcjtcbiAgICAgICAgdGhpcy5uZXh0UmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgIH1cbiAgICBTdGF0aWNJdGVyYXRvci5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgU3RhdGljSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLm5leHRSZXN1bHQ7XG4gICAgICAgIHRoaXMubmV4dFJlc3VsdCA9IHRoaXMuaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgU3RhdGljSXRlcmF0b3IucHJvdG90eXBlLmhhc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5leHRSZXN1bHQgPSB0aGlzLm5leHRSZXN1bHQ7XG4gICAgICAgIHJldHVybiBuZXh0UmVzdWx0ICYmIG5leHRSZXN1bHQuZG9uZTtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0aWNJdGVyYXRvcjtcbn0oKSk7XG52YXIgU3RhdGljQXJyYXlJdGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGF0aWNBcnJheUl0ZXJhdG9yKGFycmF5KSB7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgfVxuICAgIFN0YXRpY0FycmF5SXRlcmF0b3IucHJvdG90eXBlW1N5bWJvbF9pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgU3RhdGljQXJyYXlJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdmFyIGFycmF5ID0gdGhpcy5hcnJheTtcbiAgICAgICAgcmV0dXJuIGkgPCB0aGlzLmxlbmd0aCA/IHsgdmFsdWU6IGFycmF5W2ldLCBkb25lOiBmYWxzZSB9IDogeyB2YWx1ZTogbnVsbCwgZG9uZTogdHJ1ZSB9O1xuICAgIH07XG4gICAgU3RhdGljQXJyYXlJdGVyYXRvci5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aCA+IHRoaXMuaW5kZXg7XG4gICAgfTtcbiAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5oYXNDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aCA9PT0gdGhpcy5pbmRleDtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0aWNBcnJheUl0ZXJhdG9yO1xufSgpKTtcbnZhciBaaXBCdWZmZXJJdGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhaaXBCdWZmZXJJdGVyYXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBaaXBCdWZmZXJJdGVyYXRvcihkZXN0aW5hdGlvbiwgcGFyZW50LCBvYnNlcnZhYmxlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIF90aGlzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlO1xuICAgICAgICBfdGhpcy5zdGlsbFVuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgIF90aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICBfdGhpcy5pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlW1N5bWJvbF9pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDAgJiYgdGhpcy5pc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbnVsbCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGJ1ZmZlci5zaGlmdCgpLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUuaGFzVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5sZW5ndGggPiAwO1xuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLmhhc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmlzQ29tcGxldGU7XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5SW5hY3RpdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5idWZmZXIucHVzaChpbm5lclZhbHVlKTtcbiAgICAgICAgdGhpcy5wYXJlbnQuY2hlY2tJdGVyYXRvcnMoKTtcbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCB0aGlzLm9ic2VydmFibGUsIHRoaXMsIGluZGV4KTtcbiAgICB9O1xuICAgIHJldHVybiBaaXBCdWZmZXJJdGVyYXRvcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16aXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9tZXJnZUFsbCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4vbWVyZ2VBbGwnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFsbCgpIHtcbiAgICByZXR1cm4gbWVyZ2VBbGwoMSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRBbGwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBmaWx0ZXJPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEZpbHRlck9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZykpO1xuICAgIH07XG59XG52YXIgRmlsdGVyT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmlsdGVyT3BlcmF0b3IocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIH1cbiAgICBGaWx0ZXJPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEZpbHRlclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMudGhpc0FyZykpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbHRlck9wZXJhdG9yO1xufSgpKTtcbnZhciBGaWx0ZXJTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEZpbHRlclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmlsdGVyU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRmlsdGVyU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlLmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5jb3VudCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEZpbHRlclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX1N1YnNjcmlwdGlvbixfT2JzZXJ2YWJsZSxfU3ViamVjdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBncm91cEJ5KGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IsIHN1YmplY3RTZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgR3JvdXBCeU9wZXJhdG9yKGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IsIGR1cmF0aW9uU2VsZWN0b3IsIHN1YmplY3RTZWxlY3RvcikpO1xuICAgIH07XG59XG52YXIgR3JvdXBCeU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdyb3VwQnlPcGVyYXRvcihrZXlTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yLCBkdXJhdGlvblNlbGVjdG9yLCBzdWJqZWN0U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICB0aGlzLmVsZW1lbnRTZWxlY3RvciA9IGVsZW1lbnRTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgdGhpcy5zdWJqZWN0U2VsZWN0b3IgPSBzdWJqZWN0U2VsZWN0b3I7XG4gICAgfVxuICAgIEdyb3VwQnlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEdyb3VwQnlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMua2V5U2VsZWN0b3IsIHRoaXMuZWxlbWVudFNlbGVjdG9yLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IsIHRoaXMuc3ViamVjdFNlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBCeU9wZXJhdG9yO1xufSgpKTtcbnZhciBHcm91cEJ5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhHcm91cEJ5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cEJ5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwga2V5U2VsZWN0b3IsIGVsZW1lbnRTZWxlY3RvciwgZHVyYXRpb25TZWxlY3Rvciwgc3ViamVjdFNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5lbGVtZW50U2VsZWN0b3IgPSBlbGVtZW50U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5zdWJqZWN0U2VsZWN0b3IgPSBzdWJqZWN0U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmdyb3VwcyA9IG51bGw7XG4gICAgICAgIF90aGlzLmF0dGVtcHRlZFRvVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAga2V5ID0gdGhpcy5rZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2dyb3VwKHZhbHVlLCBrZXkpO1xuICAgIH07XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLl9ncm91cCA9IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBncm91cHMgPSB0aGlzLmdyb3VwcztcbiAgICAgICAgaWYgKCFncm91cHMpIHtcbiAgICAgICAgICAgIGdyb3VwcyA9IHRoaXMuZ3JvdXBzID0gbmV3IE1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncm91cCA9IGdyb3Vwcy5nZXQoa2V5KTtcbiAgICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRTZWxlY3Rvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5lbGVtZW50U2VsZWN0b3IodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgICAgICBncm91cCA9ICh0aGlzLnN1YmplY3RTZWxlY3RvciA/IHRoaXMuc3ViamVjdFNlbGVjdG9yKCkgOiBuZXcgU3ViamVjdCgpKTtcbiAgICAgICAgICAgIGdyb3Vwcy5zZXQoa2V5LCBncm91cCk7XG4gICAgICAgICAgICB2YXIgZ3JvdXBlZE9ic2VydmFibGUgPSBuZXcgR3JvdXBlZE9ic2VydmFibGUoa2V5LCBncm91cCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoZ3JvdXBlZE9ic2VydmFibGUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb25TZWxlY3RvcihuZXcgR3JvdXBlZE9ic2VydmFibGUoa2V5LCBncm91cCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmFkZChkdXJhdGlvbi5zdWJzY3JpYmUobmV3IEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyKGtleSwgZ3JvdXAsIHRoaXMpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFncm91cC5jbG9zZWQpIHtcbiAgICAgICAgICAgIGdyb3VwLm5leHQoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBncm91cHMgPSB0aGlzLmdyb3VwcztcbiAgICAgICAgaWYgKGdyb3Vwcykge1xuICAgICAgICAgICAgZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBncm91cC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBncm91cHMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBHcm91cEJ5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG4gICAgICAgIGlmIChncm91cHMpIHtcbiAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCwga2V5KSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ3JvdXBzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgR3JvdXBCeVN1YnNjcmliZXIucHJvdG90eXBlLnJlbW92ZUdyb3VwID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLmdyb3Vwcy5kZWxldGUoa2V5KTtcbiAgICB9O1xuICAgIEdyb3VwQnlTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5hdHRlbXB0ZWRUb1Vuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBCeVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbnZhciBHcm91cER1cmF0aW9uU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhHcm91cER1cmF0aW9uU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cER1cmF0aW9uU3Vic2NyaWJlcihrZXksIGdyb3VwLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZ3JvdXApIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmtleSA9IGtleTtcbiAgICAgICAgX3RoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEdyb3VwRHVyYXRpb25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBHcm91cER1cmF0aW9uU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBwYXJlbnQgPSBfYS5wYXJlbnQsIGtleSA9IF9hLmtleTtcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVHcm91cChrZXkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBEdXJhdGlvblN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbnZhciBHcm91cGVkT2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhHcm91cGVkT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cGVkT2JzZXJ2YWJsZShrZXksIGdyb3VwU3ViamVjdCwgcmVmQ291bnRTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMua2V5ID0ga2V5O1xuICAgICAgICBfdGhpcy5ncm91cFN1YmplY3QgPSBncm91cFN1YmplY3Q7XG4gICAgICAgIF90aGlzLnJlZkNvdW50U3Vic2NyaXB0aW9uID0gcmVmQ291bnRTdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgR3JvdXBlZE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCByZWZDb3VudFN1YnNjcmlwdGlvbiA9IF9hLnJlZkNvdW50U3Vic2NyaXB0aW9uLCBncm91cFN1YmplY3QgPSBfYS5ncm91cFN1YmplY3Q7XG4gICAgICAgIGlmIChyZWZDb3VudFN1YnNjcmlwdGlvbiAmJiAhcmVmQ291bnRTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uYWRkKG5ldyBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uKHJlZkNvdW50U3Vic2NyaXB0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChncm91cFN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBHcm91cGVkT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgR3JvdXBlZE9ic2VydmFibGUgfTtcbnZhciBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKElubmVyUmVmQ291bnRTdWJzY3JpcHRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5uZXJSZWZDb3VudFN1YnNjcmlwdGlvbihwYXJlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQuY291bnQrKztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBJbm5lclJlZkNvdW50U3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuICAgICAgICBpZiAoIXBhcmVudC5jbG9zZWQgJiYgIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBwYXJlbnQuY291bnQgLT0gMTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQuY291bnQgPT09IDAgJiYgcGFyZW50LmF0dGVtcHRlZFRvVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIElubmVyUmVmQ291bnRTdWJzY3JpcHRpb247XG59KFN1YnNjcmlwdGlvbikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JvdXBCeS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBtYXBPcGVyYXRpb24oc291cmNlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvamVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgaXMgbm90IGEgZnVuY3Rpb24uIEFyZSB5b3UgbG9va2luZyBmb3IgYG1hcFRvKClgPycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgTWFwT3BlcmF0b3IocHJvamVjdCwgdGhpc0FyZykpO1xuICAgIH07XG59XG52YXIgTWFwT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFwT3BlcmF0b3IocHJvamVjdCwgdGhpc0FyZykge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIH1cbiAgICBNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1hcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0LCB0aGlzLnRoaXNBcmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBNYXBPcGVyYXRvciB9O1xudmFyIE1hcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTWFwU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICBfdGhpcy50aGlzQXJnID0gdGhpc0FyZyB8fCBfdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5jb3VudCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfbWVyZ2VNYXAsX3V0aWxfaWRlbnRpdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuL21lcmdlTWFwJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBbGwoY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlTWFwKGlkZW50aXR5LCBjb25jdXJyZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQWxsLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCxfT3V0ZXJTdWJzY3JpYmVyLF9Jbm5lclN1YnNjcmliZXIsX21hcCxfb2JzZXJ2YWJsZV9mcm9tIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IElubmVyU3Vic2NyaWJlciB9IGZyb20gJy4uL0lubmVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLnBpcGUobWVyZ2VNYXAoZnVuY3Rpb24gKGEsIGkpIHsgcmV0dXJuIGZyb20ocHJvamVjdChhLCBpKSkucGlwZShtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKTsgfSwgY29uY3VycmVudCkpOyB9O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNZXJnZU1hcE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQpKTsgfTtcbn1cbnZhciBNZXJnZU1hcE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lcmdlTWFwT3BlcmF0b3IocHJvamVjdCwgY29uY3VycmVudCkge1xuICAgICAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgfVxuICAgIE1lcmdlTWFwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgTWVyZ2VNYXBTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByb2plY3QsIHRoaXMuY29uY3VycmVudCkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlTWFwT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgTWVyZ2VNYXBPcGVyYXRvciB9O1xudmFyIE1lcmdlTWFwU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhNZXJnZU1hcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWVyZ2VNYXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0LCBjb25jdXJyZW50KSB7XG4gICAgICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICBfdGhpcy5jb25jdXJyZW50ID0gY29uY3VycmVudDtcbiAgICAgICAgX3RoaXMuaGFzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPCB0aGlzLmNvbmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyeU5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeU5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0KHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZlKys7XG4gICAgICAgIHRoaXMuX2lubmVyU3ViKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKGlzaCwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyKHRoaXMsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBpc2gsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24gIT09IGlubmVyU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgdGhpcy5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLmFjdGl2ZS0tO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQoYnVmZmVyLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNZXJnZU1hcFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgTWVyZ2VNYXBTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX05vdGlmaWNhdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vTm90aWZpY2F0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRlbGF5ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9ic2VydmVPbk9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgT2JzZXJ2ZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkpO1xuICAgIH07XG59XG52YXIgT2JzZXJ2ZU9uT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2ZU9uT3BlcmF0b3Ioc2NoZWR1bGVyLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgfVxuICAgIE9ic2VydmVPbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgT2JzZXJ2ZU9uU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNjaGVkdWxlciwgdGhpcy5kZWxheSkpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmVPbk9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmVPbk9wZXJhdG9yIH07XG52YXIgT2JzZXJ2ZU9uU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhPYnNlcnZlT25TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9ic2VydmVPblN1YnNjcmliZXIoZGVzdGluYXRpb24sIHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9ic2VydmVPblN1YnNjcmliZXIuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHZhciBub3RpZmljYXRpb24gPSBhcmcubm90aWZpY2F0aW9uLCBkZXN0aW5hdGlvbiA9IGFyZy5kZXN0aW5hdGlvbjtcbiAgICAgICAgbm90aWZpY2F0aW9uLm9ic2VydmUoZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5zY2hlZHVsZU1lc3NhZ2UgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZCh0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShPYnNlcnZlT25TdWJzY3JpYmVyLmRpc3BhdGNoLCB0aGlzLmRlbGF5LCBuZXcgT2JzZXJ2ZU9uTWVzc2FnZShub3RpZmljYXRpb24sIHRoaXMuZGVzdGluYXRpb24pKSk7XG4gICAgfTtcbiAgICBPYnNlcnZlT25TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuICAgIH07XG4gICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb24uY3JlYXRlRXJyb3IoZXJyKSk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE9ic2VydmVPblN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU1lc3NhZ2UoTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2ZU9uU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT2JzZXJ2ZU9uU3Vic2NyaWJlciB9O1xudmFyIE9ic2VydmVPbk1lc3NhZ2UgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2ZU9uTWVzc2FnZShub3RpZmljYXRpb24sIGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uID0gbm90aWZpY2F0aW9uO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgfVxuICAgIHJldHVybiBPYnNlcnZlT25NZXNzYWdlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmVPbk1lc3NhZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiByZWZDb3VudCgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVmQ291bnRPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFJlZkNvdW50T3BlcmF0b3Ioc291cmNlKSk7XG4gICAgfTtcbn1cbnZhciBSZWZDb3VudE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlZkNvdW50T3BlcmF0b3IoY29ubmVjdGFibGUpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0YWJsZSA9IGNvbm5lY3RhYmxlO1xuICAgIH1cbiAgICBSZWZDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgY29ubmVjdGFibGUgPSB0aGlzLmNvbm5lY3RhYmxlO1xuICAgICAgICBjb25uZWN0YWJsZS5fcmVmQ291bnQrKztcbiAgICAgICAgdmFyIHJlZkNvdW50ZXIgPSBuZXcgUmVmQ291bnRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGNvbm5lY3RhYmxlKTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUocmVmQ291bnRlcik7XG4gICAgICAgIGlmICghcmVmQ291bnRlci5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJlZkNvdW50ZXIuY29ubmVjdGlvbiA9IGNvbm5lY3RhYmxlLmNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIFJlZkNvdW50T3BlcmF0b3I7XG59KCkpO1xudmFyIFJlZkNvdW50U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZWZDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVmQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb25uZWN0YWJsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZWZDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gdGhpcy5jb25uZWN0YWJsZTtcbiAgICAgICAgaWYgKCFjb25uZWN0YWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gbnVsbDtcbiAgICAgICAgdmFyIHJlZkNvdW50ID0gY29ubmVjdGFibGUuX3JlZkNvdW50O1xuICAgICAgICBpZiAocmVmQ291bnQgPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0YWJsZS5fcmVmQ291bnQgPSByZWZDb3VudCAtIDE7XG4gICAgICAgIGlmIChyZWZDb3VudCA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb247XG4gICAgICAgIHZhciBzaGFyZWRDb25uZWN0aW9uID0gY29ubmVjdGFibGUuX2Nvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChzaGFyZWRDb25uZWN0aW9uICYmICghY29ubmVjdGlvbiB8fCBzaGFyZWRDb25uZWN0aW9uID09PSBjb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgc2hhcmVkQ29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVmQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZDb3VudC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX1N1YnNjcmlwdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlucHV0W2krK10pO1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1Yi5hZGQodGhpcy5zY2hlZHVsZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3NjaGVkdWxlT2JzZXJ2YWJsZSxfc2NoZWR1bGVQcm9taXNlLF9zY2hlZHVsZUFycmF5LF9zY2hlZHVsZUl0ZXJhYmxlLF91dGlsX2lzSW50ZXJvcE9ic2VydmFibGUsX3V0aWxfaXNQcm9taXNlLF91dGlsX2lzQXJyYXlMaWtlLF91dGlsX2lzSXRlcmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgc2NoZWR1bGVPYnNlcnZhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4vc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUl0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUl0ZXJhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0l0ZXJhYmxlKGlucHV0KSB8fCB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgfHwgaW5wdXQpICsgJyBpcyBub3Qgb2JzZXJ2YWJsZScpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3ltYm9sX29ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ICYmIHR5cGVvZiBpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0ludGVyb3BPYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfU3Vic2NyaXB0aW9uLF9zeW1ib2xfb2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICAgICAgc3ViLmFkZChvYnNlcnZhYmxlLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0pKTsgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pKTsgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pKTsgfSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3ltYm9sX2l0ZXJhdG9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCAmJiB0eXBlb2YgaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9TdWJzY3JpcHRpb24sX3N5bWJvbF9pdGVyYXRvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmFibGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgc3ViLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IgJiYgdHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBkb25lO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBkb25lID0gcmVzdWx0LmRvbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YjtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlSXRlcmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9BY3Rpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vQWN0aW9uJztcbnZhciBBc3luY0FjdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBc3luY0FjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY0FjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICBfdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5pZCB8fCB0aGlzLnJlcXVlc3RBc3luY0lkKHNjaGVkdWxlciwgdGhpcy5pZCwgZGVsYXkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRJbnRlcnZhbChzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHRoaXMpLCBkZWxheSk7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgJiYgdGhpcy5kZWxheSA9PT0gZGVsYXkgJiYgdGhpcy5wZW5kaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVuZGluZyA9PT0gZmFsc2UgJiYgdGhpcy5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZCh0aGlzLnNjaGVkdWxlciwgdGhpcy5pZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgdmFyIGVycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndvcmsoc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGVycm9yVmFsdWUgPSAhIWUgJiYgZSB8fCBuZXcgRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgIHZhciBpbmRleCA9IGFjdGlvbnMuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgdGhpcy53b3JrID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IG51bGw7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGFjdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNBY3Rpb247XG59KEFjdGlvbikpO1xuZXhwb3J0IHsgQXN5bmNBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jQWN0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xudmFyIEFjdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICB9XG4gICAgQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBBY3Rpb247XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gJy4uL1NjaGVkdWxlcic7XG52YXIgQXN5bmNTY2hlZHVsZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBub3cgPSBTY2hlZHVsZXIubm93O1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFNjaGVkdWxlckFjdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlICYmIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlICE9PSBfdGhpcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZS5ub3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBub3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uICh3b3JrLCBkZWxheSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgJiYgQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgIT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZS5zY2hlZHVsZSh3b3JrLCBkZWxheSwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuc2NoZWR1bGUuY2FsbCh0aGlzLCB3b3JrLCBkZWxheSwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY1NjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyO1xufShTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IEFzeW5jU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY1NjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBuZXh0SGFuZGxlID0gMTtcbnZhciBSRVNPTFZFRCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIC8qQF9fUFVSRV9fKi8gUHJvbWlzZS5yZXNvbHZlKCk7IH0pKCk7XG52YXIgYWN0aXZlSGFuZGxlcyA9IHt9O1xuZnVuY3Rpb24gZmluZEFuZENsZWFySGFuZGxlKGhhbmRsZSkge1xuICAgIGlmIChoYW5kbGUgaW4gYWN0aXZlSGFuZGxlcykge1xuICAgICAgICBkZWxldGUgYWN0aXZlSGFuZGxlc1toYW5kbGVdO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IHZhciBJbW1lZGlhdGUgPSB7XG4gICAgc2V0SW1tZWRpYXRlOiBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgdmFyIGhhbmRsZSA9IG5leHRIYW5kbGUrKztcbiAgICAgICAgYWN0aXZlSGFuZGxlc1toYW5kbGVdID0gdHJ1ZTtcbiAgICAgICAgUkVTT0xWRUQudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBmaW5kQW5kQ2xlYXJIYW5kbGUoaGFuZGxlKSAmJiBjYigpOyB9KTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZTtcbiAgICB9LFxuICAgIGNsZWFySW1tZWRpYXRlOiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIGZpbmRBbmRDbGVhckhhbmRsZShoYW5kbGUpO1xuICAgIH0sXG59O1xuZXhwb3J0IHZhciBUZXN0VG9vbHMgPSB7XG4gICAgcGVuZGluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoYWN0aXZlSGFuZGxlcykubGVuZ3RoO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbW1lZGlhdGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF91dGlsX0ltbWVkaWF0ZSxfQXN5bmNBY3Rpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEltbWVkaWF0ZSB9IGZyb20gJy4uL3V0aWwvSW1tZWRpYXRlJztcbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG52YXIgQXNhcEFjdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBc2FwQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzYXBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc2FwQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWxheSAhPT0gbnVsbCAmJiBkZWxheSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkLmNhbGwodGhpcywgc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHNjaGVkdWxlci5hY3Rpb25zLnB1c2godGhpcyk7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGVkIHx8IChzY2hlZHVsZXIuc2NoZWR1bGVkID0gSW1tZWRpYXRlLnNldEltbWVkaWF0ZShzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIG51bGwpKSk7XG4gICAgfTtcbiAgICBBc2FwQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB8fCAoZGVsYXkgPT09IG51bGwgJiYgdGhpcy5kZWxheSA+IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyLmFjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBJbW1lZGlhdGUuY2xlYXJJbW1lZGlhdGUoaWQpO1xuICAgICAgICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgcmV0dXJuIEFzYXBBY3Rpb247XG59KEFzeW5jQWN0aW9uKSk7XG5leHBvcnQgeyBBc2FwQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc2FwQWN0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfQXNhcEFjdGlvbixfQXNhcFNjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBBc2FwQWN0aW9uIH0gZnJvbSAnLi9Bc2FwQWN0aW9uJztcbmltcG9ydCB7IEFzYXBTY2hlZHVsZXIgfSBmcm9tICcuL0FzYXBTY2hlZHVsZXInO1xuZXhwb3J0IHZhciBhc2FwID0gLypAX19QVVJFX18qLyBuZXcgQXNhcFNjaGVkdWxlcihBc2FwQWN0aW9uKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzYXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9Bc3luY1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbnZhciBBc2FwU2NoZWR1bGVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFzYXBTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXNhcFNjaGVkdWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBc2FwU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBjb3VudCA9IGFjdGlvbnMubGVuZ3RoO1xuICAgICAgICBhY3Rpb24gPSBhY3Rpb24gfHwgYWN0aW9ucy5zaGlmdCgpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKytpbmRleCA8IGNvdW50ICYmIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGNvdW50ICYmIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzYXBTY2hlZHVsZXI7XG59KEFzeW5jU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBBc2FwU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc2FwU2NoZWR1bGVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfQXN5bmNBY3Rpb24sX0FzeW5jU2NoZWR1bGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xuZXhwb3J0IHZhciBhc3luYyA9IC8qQF9fUFVSRV9fKi8gbmV3IEFzeW5jU2NoZWR1bGVyKEFzeW5jQWN0aW9uKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfQXN5bmNBY3Rpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG52YXIgUXVldWVBY3Rpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUXVldWVBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUXVldWVBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBRdWV1ZUFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuc2NoZWR1bGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlci5mbHVzaCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBRdWV1ZUFjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIChkZWxheSA+IDAgfHwgdGhpcy5jbG9zZWQpID9cbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZXhlY3V0ZS5jYWxsKHRoaXMsIHN0YXRlLCBkZWxheSkgOlxuICAgICAgICAgICAgdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgUXVldWVBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChkZWxheSAhPT0gbnVsbCAmJiBkZWxheSA+IDApIHx8IChkZWxheSA9PT0gbnVsbCAmJiB0aGlzLmRlbGF5ID4gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkLmNhbGwodGhpcywgc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuZmx1c2godGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gUXVldWVBY3Rpb247XG59KEFzeW5jQWN0aW9uKSk7XG5leHBvcnQgeyBRdWV1ZUFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVldWVBY3Rpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9RdWV1ZUFjdGlvbixfUXVldWVTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgUXVldWVBY3Rpb24gfSBmcm9tICcuL1F1ZXVlQWN0aW9uJztcbmltcG9ydCB7IFF1ZXVlU2NoZWR1bGVyIH0gZnJvbSAnLi9RdWV1ZVNjaGVkdWxlcic7XG5leHBvcnQgdmFyIHF1ZXVlID0gLypAX19QVVJFX18qLyBuZXcgUXVldWVTY2hlZHVsZXIoUXVldWVBY3Rpb24pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVldWUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9Bc3luY1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbnZhciBRdWV1ZVNjaGVkdWxlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhRdWV1ZVNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBRdWV1ZVNjaGVkdWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUXVldWVTY2hlZHVsZXI7XG59KEFzeW5jU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBRdWV1ZVNjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVldWVTY2hlZHVsZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbmV4cG9ydCB2YXIgJCRpdGVyYXRvciA9IGl0ZXJhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIG9ic2VydmFibGUgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB2YXIgcnhTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gLypAX19QVVJFX18qLyBTeW1ib2woJ3J4U3Vic2NyaWJlcicpXG4gICAgICAgIDogJ0BAcnhTdWJzY3JpYmVyXycgKyAvKkBfX1BVUkVfXyovIE1hdGgucmFuZG9tKCk7XG59KSgpO1xuZXhwb3J0IHZhciAkJHJ4U3Vic2NyaWJlciA9IHJ4U3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ4U3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBBcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGwgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JJbXBsKCkge1xuICAgICAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnYXJndW1lbnQgb3V0IG9mIHJhbmdlJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yJztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICByZXR1cm4gQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JJbXBsO1xufSkoKTtcbmV4cG9ydCB2YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgPSBBcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bcmd1bWVudE91dE9mUmFuZ2VFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBFbXB0eUVycm9ySW1wbCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbXB0eUVycm9ySW1wbCgpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ25vIGVsZW1lbnRzIGluIHNlcXVlbmNlJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ0VtcHR5RXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgRW1wdHlFcnJvckltcGwucHJvdG90eXBlID0gLypAX19QVVJFX18qLyBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgcmV0dXJuIEVtcHR5RXJyb3JJbXBsO1xufSkoKTtcbmV4cG9ydCB2YXIgRW1wdHlFcnJvciA9IEVtcHR5RXJyb3JJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1wdHlFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsKCkge1xuICAgICAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdPYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwucHJvdG90eXBlID0gLypAX19QVVJFX18qLyBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgcmV0dXJuIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbDtcbn0pKCk7XG5leHBvcnQgdmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG52YXIgVGltZW91dEVycm9ySW1wbCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW1lb3V0RXJyb3JJbXBsKCkge1xuICAgICAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnVGltZW91dCBoYXMgb2NjdXJyZWQnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVGltZW91dEVycm9yJztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIFRpbWVvdXRFcnJvckltcGwucHJvdG90eXBlID0gLypAX19QVVJFX18qLyBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgcmV0dXJuIFRpbWVvdXRFcnJvckltcGw7XG59KSgpO1xuZXhwb3J0IHZhciBUaW1lb3V0RXJyb3IgPSBUaW1lb3V0RXJyb3JJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGltZW91dEVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xudmFyIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnMgP1xuICAgICAgICAgICAgZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJykgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsLnByb3RvdHlwZSA9IC8qQF9fUFVSRV9fKi8gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIHJldHVybiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbDtcbn0pKCk7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjYW5SZXBvcnRFcnJvcihvYnNlcnZlcikge1xuICAgIHdoaWxlIChvYnNlcnZlcikge1xuICAgICAgICB2YXIgX2EgPSBvYnNlcnZlciwgY2xvc2VkXzEgPSBfYS5jbG9zZWQsIGRlc3RpbmF0aW9uID0gX2EuZGVzdGluYXRpb24sIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZDtcbiAgICAgICAgaWYgKGNsb3NlZF8xIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc3RpbmF0aW9uICYmIGRlc3RpbmF0aW9uIGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhblJlcG9ydEVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhvc3RSZXBvcnRFcnJvcihlcnIpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyOyB9LCAwKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhvc3RSZXBvcnRFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB2YXIgaXNBcnJheSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFycmF5LmlzQXJyYXkgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB2YXIgaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfaXNBcnJheSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi9pc0FycmF5JztcbmV4cG9ydCBmdW5jdGlvbiBpc051bWVyaWModmFsKSB7XG4gICAgcmV0dXJuICFpc0FycmF5KHZhbCkgJiYgKHZhbCAtIHBhcnNlRmxvYXQodmFsKSArIDEpID49IDA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc051bWVyaWMuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoeCkge1xuICAgIHJldHVybiB4ICE9PSBudWxsICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0Jztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzT2JqZWN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNTY2hlZHVsZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnNjaGVkdWxlID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTY2hlZHVsZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gbm9vcCgpIHsgfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9vcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBub3QocHJlZCwgdGhpc0FyZykge1xuICAgIGZ1bmN0aW9uIG5vdFByZWQoKSB7XG4gICAgICAgIHJldHVybiAhKG5vdFByZWQucHJlZC5hcHBseShub3RQcmVkLnRoaXNBcmcsIGFyZ3VtZW50cykpO1xuICAgIH1cbiAgICBub3RQcmVkLnByZWQgPSBwcmVkO1xuICAgIG5vdFByZWQudGhpc0FyZyA9IHRoaXNBcmc7XG4gICAgcmV0dXJuIG5vdFByZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9pZGVudGl0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3Vic2NyaWJlVG9BcnJheSxfc3Vic2NyaWJlVG9Qcm9taXNlLF9zdWJzY3JpYmVUb0l0ZXJhYmxlLF9zdWJzY3JpYmVUb09ic2VydmFibGUsX2lzQXJyYXlMaWtlLF9pc1Byb21pc2UsX2lzT2JqZWN0LF9zeW1ib2xfaXRlcmF0b3IsX3N5bWJvbF9vYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IHN1YnNjcmliZVRvQXJyYXkgfSBmcm9tICcuL3N1YnNjcmliZVRvQXJyYXknO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9Qcm9taXNlIH0gZnJvbSAnLi9zdWJzY3JpYmVUb1Byb21pc2UnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9JdGVyYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJlVG9JdGVyYWJsZSc7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb09ic2VydmFibGUgfSBmcm9tICcuL3N1YnNjcmliZVRvT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4vaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuL2lzT2JqZWN0JztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUbyA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdFtTeW1ib2xfb2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvT2JzZXJ2YWJsZShyZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FycmF5TGlrZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb0FycmF5KHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb1Byb21pc2UocmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdFtTeW1ib2xfaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb0l0ZXJhYmxlKHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWUgPSBpc09iamVjdChyZXN1bHQpID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgcmVzdWx0ICsgXCInXCI7XG4gICAgICAgIHZhciBtc2cgPSBcIllvdSBwcm92aWRlZCBcIiArIHZhbHVlICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLlwiXG4gICAgICAgICAgICArICcgWW91IGNhbiBwcm92aWRlIGFuIE9ic2VydmFibGUsIFByb21pc2UsIEFycmF5LCBvciBJdGVyYWJsZS4nO1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG1zZyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3ltYm9sX29ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCB2YXIgc3Vic2NyaWJlVG9PYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAodHlwZW9mIG9icy5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9PYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGhvc3RSZXBvcnRFcnJvciB9IGZyb20gJy4vaG9zdFJlcG9ydEVycm9yJztcbmV4cG9ydCB2YXIgc3Vic2NyaWJlVG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCBob3N0UmVwb3J0RXJyb3IpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvUHJvbWlzZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3N5bWJvbF9pdGVyYXRvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUb0l0ZXJhYmxlID0gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlW1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoaXRlbS5kb25lKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGl0ZW0udmFsdWUpO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUb0l0ZXJhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUb0FycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW4gJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9BcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX0lubmVyU3Vic2NyaWJlcixfc3Vic2NyaWJlVG8sX09ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgSW5uZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vSW5uZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvIH0gZnJvbSAnLi9zdWJzY3JpYmVUbyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlVG9SZXN1bHQob3V0ZXJTdWJzY3JpYmVyLCByZXN1bHQsIG91dGVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVyU3Vic2NyaWJlcikge1xuICAgIGlmIChpbm5lclN1YnNjcmliZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyKG91dGVyU3Vic2NyaWJlciwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCk7XG4gICAgfVxuICAgIGlmIChpbm5lclN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuc3Vic2NyaWJlKGlubmVyU3Vic2NyaWJlcik7XG4gICAgfVxuICAgIHJldHVybiBzdWJzY3JpYmVUbyhyZXN1bHQpKGlubmVyU3Vic2NyaWJlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUb1Jlc3VsdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gYXVkaXQoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBhdWRpdE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgQXVkaXRPcGVyYXRvcihkdXJhdGlvblNlbGVjdG9yKSk7XG4gICAgfTtcbn1cbnZhciBBdWRpdE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF1ZGl0T3BlcmF0b3IoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgIH1cbiAgICBBdWRpdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQXVkaXRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb25TZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEF1ZGl0T3BlcmF0b3I7XG59KCkpO1xudmFyIEF1ZGl0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBdWRpdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXVkaXRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBdWRpdFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy50aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uU2VsZWN0b3IgPSB0aGlzLmR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBkdXJhdGlvblNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgZHVyYXRpb24pO1xuICAgICAgICAgICAgaWYgKCFpbm5lclN1YnNjcmlwdGlvbiB8fCBpbm5lclN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVGhyb3R0bGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMudGhyb3R0bGVkID0gaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBBdWRpdFN1YnNjcmliZXIucHJvdG90eXBlLmNsZWFyVGhyb3R0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHZhbHVlID0gX2EudmFsdWUsIGhhc1ZhbHVlID0gX2EuaGFzVmFsdWUsIHRocm90dGxlZCA9IF9hLnRocm90dGxlZDtcbiAgICAgICAgaWYgKHRocm90dGxlZCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUodGhyb3R0bGVkKTtcbiAgICAgICAgICAgIHRoaXMudGhyb3R0bGVkID0gbnVsbDtcbiAgICAgICAgICAgIHRocm90dGxlZC51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdWRpdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCkge1xuICAgICAgICB0aGlzLmNsZWFyVGhyb3R0bGUoKTtcbiAgICB9O1xuICAgIEF1ZGl0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJUaHJvdHRsZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIEF1ZGl0U3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWRpdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3NjaGVkdWxlcl9hc3luYyxfYXVkaXQsX29ic2VydmFibGVfdGltZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgYXVkaXQgfSBmcm9tICcuL2F1ZGl0JztcbmltcG9ydCB7IHRpbWVyIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS90aW1lcic7XG5leHBvcnQgZnVuY3Rpb24gYXVkaXRUaW1lKGR1cmF0aW9uLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiBhdWRpdChmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lcihkdXJhdGlvbiwgc2NoZWR1bGVyKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWRpdFRpbWUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlcihjbG9zaW5nTm90aWZpZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYnVmZmVyT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBCdWZmZXJPcGVyYXRvcihjbG9zaW5nTm90aWZpZXIpKTtcbiAgICB9O1xufVxudmFyIEJ1ZmZlck9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlck9wZXJhdG9yKGNsb3NpbmdOb3RpZmllcikge1xuICAgICAgICB0aGlzLmNsb3NpbmdOb3RpZmllciA9IGNsb3NpbmdOb3RpZmllcjtcbiAgICB9XG4gICAgQnVmZmVyT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBCdWZmZXJTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY2xvc2luZ05vdGlmaWVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyT3BlcmF0b3I7XG59KCkpO1xudmFyIEJ1ZmZlclN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQnVmZmVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCdWZmZXJTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjbG9zaW5nTm90aWZpZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICBfdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHQoX3RoaXMsIGNsb3NpbmdOb3RpZmllcikpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEJ1ZmZlclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuICAgIH07XG4gICAgQnVmZmVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlclN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlckNvdW50KGJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkpIHtcbiAgICBpZiAoc3RhcnRCdWZmZXJFdmVyeSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHN0YXJ0QnVmZmVyRXZlcnkgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gYnVmZmVyQ291bnRPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEJ1ZmZlckNvdW50T3BlcmF0b3IoYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkpO1xuICAgIH07XG59XG52YXIgQnVmZmVyQ291bnRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJDb3VudE9wZXJhdG9yKGJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkpIHtcbiAgICAgICAgdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZTtcbiAgICAgICAgdGhpcy5zdGFydEJ1ZmZlckV2ZXJ5ID0gc3RhcnRCdWZmZXJFdmVyeTtcbiAgICAgICAgaWYgKCFzdGFydEJ1ZmZlckV2ZXJ5IHx8IGJ1ZmZlclNpemUgPT09IHN0YXJ0QnVmZmVyRXZlcnkpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlckNsYXNzID0gQnVmZmVyQ291bnRTdWJzY3JpYmVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyQ2xhc3MgPSBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIEJ1ZmZlckNvdW50T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyB0aGlzLnN1YnNjcmliZXJDbGFzcyhzdWJzY3JpYmVyLCB0aGlzLmJ1ZmZlclNpemUsIHRoaXMuc3RhcnRCdWZmZXJFdmVyeSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlckNvdW50T3BlcmF0b3I7XG59KCkpO1xudmFyIEJ1ZmZlckNvdW50U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhCdWZmZXJDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBidWZmZXJTaXplKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZTtcbiAgICAgICAgX3RoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT0gdGhpcy5idWZmZXJTaXplKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlckNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbnZhciBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG4gICAgICAgIF90aGlzLnN0YXJ0QnVmZmVyRXZlcnkgPSBzdGFydEJ1ZmZlckV2ZXJ5O1xuICAgICAgICBfdGhpcy5idWZmZXJzID0gW107XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBidWZmZXJTaXplID0gX2EuYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSA9IF9hLnN0YXJ0QnVmZmVyRXZlcnksIGJ1ZmZlcnMgPSBfYS5idWZmZXJzLCBjb3VudCA9IF9hLmNvdW50O1xuICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgIGlmIChjb3VudCAlIHN0YXJ0QnVmZmVyRXZlcnkgPT09IDApIHtcbiAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IGJ1ZmZlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVyc1tpXTtcbiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09PSBidWZmZXJTaXplKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgYnVmZmVycyA9IF9hLmJ1ZmZlcnMsIGRlc3RpbmF0aW9uID0gX2EuZGVzdGluYXRpb247XG4gICAgICAgIHdoaWxlIChidWZmZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJDb3VudC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX3NjaGVkdWxlcl9hc3luYyxfU3Vic2NyaWJlcixfdXRpbF9pc1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJUaW1lKGJ1ZmZlclRpbWVTcGFuKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIGlmIChpc1NjaGVkdWxlcihhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBsZW5ndGgtLTtcbiAgICB9XG4gICAgdmFyIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPSBudWxsO1xuICAgIGlmIChsZW5ndGggPj0gMikge1xuICAgICAgICBidWZmZXJDcmVhdGlvbkludGVydmFsID0gYXJndW1lbnRzWzFdO1xuICAgIH1cbiAgICB2YXIgbWF4QnVmZmVyU2l6ZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBpZiAobGVuZ3RoID49IDMpIHtcbiAgICAgICAgbWF4QnVmZmVyU2l6ZSA9IGFyZ3VtZW50c1syXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJ1ZmZlclRpbWVPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEJ1ZmZlclRpbWVPcGVyYXRvcihidWZmZXJUaW1lU3BhbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgbWF4QnVmZmVyU2l6ZSwgc2NoZWR1bGVyKSk7XG4gICAgfTtcbn1cbnZhciBCdWZmZXJUaW1lT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyVGltZU9wZXJhdG9yKGJ1ZmZlclRpbWVTcGFuLCBidWZmZXJDcmVhdGlvbkludGVydmFsLCBtYXhCdWZmZXJTaXplLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5idWZmZXJUaW1lU3BhbiA9IGJ1ZmZlclRpbWVTcGFuO1xuICAgICAgICB0aGlzLmJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPSBidWZmZXJDcmVhdGlvbkludGVydmFsO1xuICAgICAgICB0aGlzLm1heEJ1ZmZlclNpemUgPSBtYXhCdWZmZXJTaXplO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgQnVmZmVyVGltZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQnVmZmVyVGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5idWZmZXJUaW1lU3BhbiwgdGhpcy5idWZmZXJDcmVhdGlvbkludGVydmFsLCB0aGlzLm1heEJ1ZmZlclNpemUsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyVGltZU9wZXJhdG9yO1xufSgpKTtcbnZhciBDb250ZXh0ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnRleHQoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgfVxuICAgIHJldHVybiBDb250ZXh0O1xufSgpKTtcbnZhciBCdWZmZXJUaW1lU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhCdWZmZXJUaW1lU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCdWZmZXJUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYnVmZmVyVGltZVNwYW4sIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIG1heEJ1ZmZlclNpemUsIHNjaGVkdWxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYnVmZmVyVGltZVNwYW4gPSBidWZmZXJUaW1lU3BhbjtcbiAgICAgICAgX3RoaXMuYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9IGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWw7XG4gICAgICAgIF90aGlzLm1heEJ1ZmZlclNpemUgPSBtYXhCdWZmZXJTaXplO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLmNvbnRleHRzID0gW107XG4gICAgICAgIHZhciBjb250ZXh0ID0gX3RoaXMub3BlbkNvbnRleHQoKTtcbiAgICAgICAgX3RoaXMudGltZXNwYW5Pbmx5ID0gYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9PSBudWxsIHx8IGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPCAwO1xuICAgICAgICBpZiAoX3RoaXMudGltZXNwYW5Pbmx5KSB7XG4gICAgICAgICAgICB2YXIgdGltZVNwYW5Pbmx5U3RhdGUgPSB7IHN1YnNjcmliZXI6IF90aGlzLCBjb250ZXh0OiBjb250ZXh0LCBidWZmZXJUaW1lU3BhbjogYnVmZmVyVGltZVNwYW4gfTtcbiAgICAgICAgICAgIF90aGlzLmFkZChjb250ZXh0LmNsb3NlQWN0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoQnVmZmVyVGltZVNwYW5Pbmx5LCBidWZmZXJUaW1lU3BhbiwgdGltZVNwYW5Pbmx5U3RhdGUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjbG9zZVN0YXRlID0geyBzdWJzY3JpYmVyOiBfdGhpcywgY29udGV4dDogY29udGV4dCB9O1xuICAgICAgICAgICAgdmFyIGNyZWF0aW9uU3RhdGUgPSB7IGJ1ZmZlclRpbWVTcGFuOiBidWZmZXJUaW1lU3BhbiwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbDogYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgc3Vic2NyaWJlcjogX3RoaXMsIHNjaGVkdWxlcjogc2NoZWR1bGVyIH07XG4gICAgICAgICAgICBfdGhpcy5hZGQoY29udGV4dC5jbG9zZUFjdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlckNsb3NlLCBidWZmZXJUaW1lU3BhbiwgY2xvc2VTdGF0ZSkpO1xuICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaEJ1ZmZlckNyZWF0aW9uLCBidWZmZXJDcmVhdGlvbkludGVydmFsLCBjcmVhdGlvblN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgdmFyIGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcbiAgICAgICAgdmFyIGZpbGxlZEJ1ZmZlckNvbnRleHQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzEgPSBjb250ZXh0c1tpXTtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBjb250ZXh0XzEuYnVmZmVyO1xuICAgICAgICAgICAgYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT0gdGhpcy5tYXhCdWZmZXJTaXplKSB7XG4gICAgICAgICAgICAgICAgZmlsbGVkQnVmZmVyQ29udGV4dCA9IGNvbnRleHRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlsbGVkQnVmZmVyQ29udGV4dCkge1xuICAgICAgICAgICAgdGhpcy5vbkJ1ZmZlckZ1bGwoZmlsbGVkQnVmZmVyQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuY29udGV4dHMubGVuZ3RoID0gMDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH07XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgY29udGV4dHMgPSBfYS5jb250ZXh0cywgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbjtcbiAgICAgICAgd2hpbGUgKGNvbnRleHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzIgPSBjb250ZXh0cy5zaGlmdCgpO1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChjb250ZXh0XzIuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0cyA9IG51bGw7XG4gICAgfTtcbiAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUub25CdWZmZXJGdWxsID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jbG9zZUNvbnRleHQoY29udGV4dCk7XG4gICAgICAgIHZhciBjbG9zZUFjdGlvbiA9IGNvbnRleHQuY2xvc2VBY3Rpb247XG4gICAgICAgIGNsb3NlQWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlKGNsb3NlQWN0aW9uKTtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCAmJiB0aGlzLnRpbWVzcGFuT25seSkge1xuICAgICAgICAgICAgY29udGV4dCA9IHRoaXMub3BlbkNvbnRleHQoKTtcbiAgICAgICAgICAgIHZhciBidWZmZXJUaW1lU3BhbiA9IHRoaXMuYnVmZmVyVGltZVNwYW47XG4gICAgICAgICAgICB2YXIgdGltZVNwYW5Pbmx5U3RhdGUgPSB7IHN1YnNjcmliZXI6IHRoaXMsIGNvbnRleHQ6IGNvbnRleHQsIGJ1ZmZlclRpbWVTcGFuOiBidWZmZXJUaW1lU3BhbiB9O1xuICAgICAgICAgICAgdGhpcy5hZGQoY29udGV4dC5jbG9zZUFjdGlvbiA9IHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoQnVmZmVyVGltZVNwYW5Pbmx5LCBidWZmZXJUaW1lU3BhbiwgdGltZVNwYW5Pbmx5U3RhdGUpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyVGltZVN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5Db250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KCk7XG4gICAgICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfTtcbiAgICBCdWZmZXJUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuY2xvc2VDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGNvbnRleHQuYnVmZmVyKTtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgdmFyIHNwbGljZUluZGV4ID0gY29udGV4dHMgPyBjb250ZXh0cy5pbmRleE9mKGNvbnRleHQpIDogLTE7XG4gICAgICAgIGlmIChzcGxpY2VJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBjb250ZXh0cy5zcGxpY2UoY29udGV4dHMuaW5kZXhPZihjb250ZXh0KSwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJUaW1lU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZnVuY3Rpb24gZGlzcGF0Y2hCdWZmZXJUaW1lU3Bhbk9ubHkoc3RhdGUpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG4gICAgdmFyIHByZXZDb250ZXh0ID0gc3RhdGUuY29udGV4dDtcbiAgICBpZiAocHJldkNvbnRleHQpIHtcbiAgICAgICAgc3Vic2NyaWJlci5jbG9zZUNvbnRleHQocHJldkNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHN0YXRlLmNvbnRleHQgPSBzdWJzY3JpYmVyLm9wZW5Db250ZXh0KCk7XG4gICAgICAgIHN0YXRlLmNvbnRleHQuY2xvc2VBY3Rpb24gPSB0aGlzLnNjaGVkdWxlKHN0YXRlLCBzdGF0ZS5idWZmZXJUaW1lU3Bhbik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hCdWZmZXJDcmVhdGlvbihzdGF0ZSkge1xuICAgIHZhciBidWZmZXJDcmVhdGlvbkludGVydmFsID0gc3RhdGUuYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgYnVmZmVyVGltZVNwYW4gPSBzdGF0ZS5idWZmZXJUaW1lU3Bhbiwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHNjaGVkdWxlciA9IHN0YXRlLnNjaGVkdWxlcjtcbiAgICB2YXIgY29udGV4dCA9IHN1YnNjcmliZXIub3BlbkNvbnRleHQoKTtcbiAgICB2YXIgYWN0aW9uID0gdGhpcztcbiAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKGNvbnRleHQuY2xvc2VBY3Rpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hCdWZmZXJDbG9zZSwgYnVmZmVyVGltZVNwYW4sIHsgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgY29udGV4dDogY29udGV4dCB9KSk7XG4gICAgICAgIGFjdGlvbi5zY2hlZHVsZShzdGF0ZSwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hCdWZmZXJDbG9zZShhcmcpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyLCBjb250ZXh0ID0gYXJnLmNvbnRleHQ7XG4gICAgc3Vic2NyaWJlci5jbG9zZUNvbnRleHQoY29udGV4dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJUaW1lLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaXB0aW9uLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0LF9PdXRlclN1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJUb2dnbGUob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBidWZmZXJUb2dnbGVPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEJ1ZmZlclRvZ2dsZU9wZXJhdG9yKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xufVxudmFyIEJ1ZmZlclRvZ2dsZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlclRvZ2dsZU9wZXJhdG9yKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5vcGVuaW5ncyA9IG9wZW5pbmdzO1xuICAgICAgICB0aGlzLmNsb3NpbmdTZWxlY3RvciA9IGNsb3NpbmdTZWxlY3RvcjtcbiAgICB9XG4gICAgQnVmZmVyVG9nZ2xlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMub3BlbmluZ3MsIHRoaXMuY2xvc2luZ1NlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyVG9nZ2xlT3BlcmF0b3I7XG59KCkpO1xudmFyIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQnVmZmVyVG9nZ2xlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vcGVuaW5ncyA9IG9wZW5pbmdzO1xuICAgICAgICBfdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmNvbnRleHRzID0gW107XG4gICAgICAgIF90aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgb3BlbmluZ3MpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB2YXIgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb250ZXh0c1tpXS5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgd2hpbGUgKGNvbnRleHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzEgPSBjb250ZXh0cy5zaGlmdCgpO1xuICAgICAgICAgICAgY29udGV4dF8xLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgY29udGV4dF8xLmJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICBjb250ZXh0XzEuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRleHRzID0gbnVsbDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB3aGlsZSAoY29udGV4dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMiA9IGNvbnRleHRzLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoY29udGV4dF8yLmJ1ZmZlcik7XG4gICAgICAgICAgICBjb250ZXh0XzIuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBjb250ZXh0XzIuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnRleHRfMi5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICBvdXRlclZhbHVlID8gdGhpcy5jbG9zZUJ1ZmZlcihvdXRlclZhbHVlKSA6IHRoaXMub3BlbkJ1ZmZlcihpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIEJ1ZmZlclRvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuY2xvc2VCdWZmZXIoaW5uZXJTdWIuY29udGV4dCk7XG4gICAgfTtcbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5vcGVuQnVmZmVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ1NlbGVjdG9yID0gdGhpcy5jbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ05vdGlmaWVyID0gY2xvc2luZ1NlbGVjdG9yLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKGNsb3NpbmdOb3RpZmllcikge1xuICAgICAgICAgICAgICAgIHRoaXMudHJ5U3Vic2NyaWJlKGNsb3NpbmdOb3RpZmllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyVG9nZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuY2xvc2VCdWZmZXIgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICBpZiAoY29udGV4dHMgJiYgY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGNvbnRleHQuYnVmZmVyLCBzdWJzY3JpcHRpb24gPSBjb250ZXh0LnN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgY29udGV4dHMuc3BsaWNlKGNvbnRleHRzLmluZGV4T2YoY29udGV4dCksIDEpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBidWZmZXIgPSBbXTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB7IGJ1ZmZlcjogYnVmZmVyLCBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvbiB9O1xuICAgICAgICBjb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBjbG9zaW5nTm90aWZpZXIsIGNvbnRleHQpO1xuICAgICAgICBpZiAoIWlubmVyU3Vic2NyaXB0aW9uIHx8IGlubmVyU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUJ1ZmZlcihjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlubmVyU3Vic2NyaXB0aW9uLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgICAgdGhpcy5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJUb2dnbGVTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlclRvZ2dsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmlwdGlvbixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyV2hlbihjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEJ1ZmZlcldoZW5PcGVyYXRvcihjbG9zaW5nU2VsZWN0b3IpKTtcbiAgICB9O1xufVxudmFyIEJ1ZmZlcldoZW5PcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJXaGVuT3BlcmF0b3IoY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgIH1cbiAgICBCdWZmZXJXaGVuT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBCdWZmZXJXaGVuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlcldoZW5PcGVyYXRvcjtcbn0oKSk7XG52YXIgQnVmZmVyV2hlblN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQnVmZmVyV2hlblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyV2hlblN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgICAgICBfdGhpcy5zdWJzY3JpYmluZyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5vcGVuQnVmZmVyKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuICAgIH07XG4gICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgQnVmZmVyV2hlblN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnN1YnNjcmliaW5nID0gZmFsc2U7XG4gICAgfTtcbiAgICBCdWZmZXJXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLm9wZW5CdWZmZXIoKTtcbiAgICB9O1xuICAgIEJ1ZmZlcldoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaWJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3BlbkJ1ZmZlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUub3BlbkJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNsb3NpbmdTdWJzY3JpcHRpb24gPSB0aGlzLmNsb3NpbmdTdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChjbG9zaW5nU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShjbG9zaW5nU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGNsb3NpbmdTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgdmFyIGNsb3NpbmdOb3RpZmllcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nU2VsZWN0b3IgPSB0aGlzLmNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgICAgIGNsb3NpbmdOb3RpZmllciA9IGNsb3NpbmdTZWxlY3RvcigpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgY2xvc2luZ1N1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgdGhpcy5jbG9zaW5nU3Vic2NyaXB0aW9uID0gY2xvc2luZ1N1YnNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5hZGQoY2xvc2luZ1N1YnNjcmlwdGlvbik7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJpbmcgPSB0cnVlO1xuICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLmFkZChzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBjbG9zaW5nTm90aWZpZXIpKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmluZyA9IGZhbHNlO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlcldoZW5TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlcldoZW4uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX0lubmVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IElubmVyU3Vic2NyaWJlciB9IGZyb20gJy4uL0lubmVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGNhdGNoRXJyb3Ioc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2F0Y2hFcnJvck9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHZhciBvcGVyYXRvciA9IG5ldyBDYXRjaE9wZXJhdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgdmFyIGNhdWdodCA9IHNvdXJjZS5saWZ0KG9wZXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIChvcGVyYXRvci5jYXVnaHQgPSBjYXVnaHQpO1xuICAgIH07XG59XG52YXIgQ2F0Y2hPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDYXRjaE9wZXJhdG9yKHNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICB9XG4gICAgQ2F0Y2hPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IENhdGNoU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmNhdWdodCkpO1xuICAgIH07XG4gICAgcmV0dXJuIENhdGNoT3BlcmF0b3I7XG59KCkpO1xudmFyIENhdGNoU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDYXRjaFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2F0Y2hTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBzZWxlY3RvciwgY2F1Z2h0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICBfdGhpcy5jYXVnaHQgPSBjYXVnaHQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ2F0Y2hTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5zZWxlY3RvcihlcnIsIHRoaXMuY2F1Z2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIyKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5lcnJvci5jYWxsKHRoaXMsIGVycjIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSgpO1xuICAgICAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBJbm5lclN1YnNjcmliZXIodGhpcywgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgdGhpcy5hZGQoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJlc3VsdCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24gIT09IGlubmVyU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENhdGNoU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXRjaEVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV9jb21iaW5lTGF0ZXN0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IENvbWJpbmVMYXRlc3RPcGVyYXRvciB9IGZyb20gJy4uL29ic2VydmFibGUvY29tYmluZUxhdGVzdCc7XG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUFsbChwcm9qZWN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IocHJvamVjdCkpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUFsbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfaXNBcnJheSxfb2JzZXJ2YWJsZV9jb21iaW5lTGF0ZXN0LF9vYnNlcnZhYmxlX2Zyb20gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3QnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG52YXIgbm9uZSA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3QoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHByb2plY3QgPSBudWxsO1xuICAgIGlmICh0eXBlb2Ygb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJvamVjdCA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkob2JzZXJ2YWJsZXNbMF0pKSB7XG4gICAgICAgIG9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXNbMF0uc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0LmNhbGwoZnJvbShbc291cmNlXS5jb25jYXQob2JzZXJ2YWJsZXMpKSwgbmV3IENvbWJpbmVMYXRlc3RPcGVyYXRvcihwcm9qZWN0KSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lTGF0ZXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV9jb25jYXQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgY29uY2F0IGFzIGNvbmNhdFN0YXRpYyB9IGZyb20gJy4uL29ic2VydmFibGUvY29uY2F0JztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0LmNhbGwoY29uY2F0U3RhdGljLmFwcGx5KHZvaWQgMCwgW3NvdXJjZV0uY29uY2F0KG9ic2VydmFibGVzKSkpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfbWVyZ2VNYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuL21lcmdlTWFwJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIDEpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0TWFwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfY29uY2F0TWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNvbmNhdE1hcCB9IGZyb20gJy4vY29uY2F0TWFwJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRNYXBUbyhpbm5lck9ic2VydmFibGUsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGNvbmNhdE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIHJlc3VsdFNlbGVjdG9yKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdE1hcFRvLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGNvdW50KHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgQ291bnRPcGVyYXRvcihwcmVkaWNhdGUsIHNvdXJjZSkpOyB9O1xufVxudmFyIENvdW50T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ291bnRPcGVyYXRvcihwcmVkaWNhdGUsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIENvdW50T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBDb3VudFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMuc291cmNlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ291bnRPcGVyYXRvcjtcbn0oKSk7XG52YXIgQ291bnRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKENvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb3VudFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5wcmVkaWNhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyeVByZWRpY2F0ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeVByZWRpY2F0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUodmFsdWUsIHRoaXMuaW5kZXgrKywgdGhpcy5zb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy5jb3VudCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZWJvdW5jZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IpKTsgfTtcbn1cbnZhciBEZWJvdW5jZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlYm91bmNlT3BlcmF0b3IoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgIH1cbiAgICBEZWJvdW5jZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGVib3VuY2VTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb25TZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlYm91bmNlT3BlcmF0b3I7XG59KCkpO1xudmFyIERlYm91bmNlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEZWJvdW5jZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVib3VuY2VTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuZHVyYXRpb25TdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmR1cmF0aW9uU2VsZWN0b3IuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5TmV4dCh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLl90cnlOZXh0ID0gZnVuY3Rpb24gKHZhbHVlLCBkdXJhdGlvbikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShzdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGR1cmF0aW9uKTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiAmJiAhc3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuICAgIH07XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWUoKTtcbiAgICB9O1xuICAgIERlYm91bmNlU3Vic2NyaWJlci5wcm90b3R5cGUuZW1pdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLmR1cmF0aW9uU3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuZHVyYXRpb25TdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEZWJvdW5jZVN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyLF9zY2hlZHVsZXJfYXN5bmMgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZVRpbWUoZHVlVGltZSwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IERlYm91bmNlVGltZU9wZXJhdG9yKGR1ZVRpbWUsIHNjaGVkdWxlcikpOyB9O1xufVxudmFyIERlYm91bmNlVGltZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlYm91bmNlVGltZU9wZXJhdG9yKGR1ZVRpbWUsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLmR1ZVRpbWUgPSBkdWVUaW1lO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgRGVib3VuY2VUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVlVGltZSwgdGhpcy5zY2hlZHVsZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWJvdW5jZVRpbWVPcGVyYXRvcjtcbn0oKSk7XG52YXIgRGVib3VuY2VUaW1lU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlYm91bmNlVGltZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1ZVRpbWUsIHNjaGVkdWxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZHVlVGltZSA9IGR1ZVRpbWU7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMuZGVib3VuY2VkU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgX3RoaXMubGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmNsZWFyRGVib3VuY2UoKTtcbiAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuYWRkKHRoaXMuZGVib3VuY2VkU3Vic2NyaXB0aW9uID0gdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOZXh0LCB0aGlzLmR1ZVRpbWUsIHRoaXMpKTtcbiAgICB9O1xuICAgIERlYm91bmNlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZWJvdW5jZWROZXh0KCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIERlYm91bmNlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLmRlYm91bmNlZE5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJEZWJvdW5jZSgpO1xuICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IHRoaXMubGFzdFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGxhc3RWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlYm91bmNlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLmNsZWFyRGVib3VuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZWJvdW5jZWRTdWJzY3JpcHRpb24gPSB0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbjtcbiAgICAgICAgaWYgKGRlYm91bmNlZFN1YnNjcmlwdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoZGVib3VuY2VkU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGRlYm91bmNlZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5kZWJvdW5jZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGVib3VuY2VUaW1lU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZnVuY3Rpb24gZGlzcGF0Y2hOZXh0KHN1YnNjcmliZXIpIHtcbiAgICBzdWJzY3JpYmVyLmRlYm91bmNlZE5leHQoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYm91bmNlVGltZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0SWZFbXB0eShkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAoZGVmYXVsdFZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yKGRlZmF1bHRWYWx1ZSkpOyB9O1xufVxudmFyIERlZmF1bHRJZkVtcHR5T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVmYXVsdElmRW1wdHlPcGVyYXRvcihkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIERlZmF1bHRJZkVtcHR5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kZWZhdWx0VmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWZhdWx0SWZFbXB0eU9wZXJhdG9yO1xufSgpKTtcbnZhciBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIF90aGlzLmlzRW1wdHkgPSB0cnVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERlZmF1bHRJZkVtcHR5U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBEZWZhdWx0SWZFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVmYXVsdElmRW1wdHlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0SWZFbXB0eS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTigrdmFsdWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNEYXRlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfc2NoZWR1bGVyX2FzeW5jLF91dGlsX2lzRGF0ZSxfU3Vic2NyaWJlcixfTm90aWZpY2F0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc0RhdGUgfSBmcm9tICcuLi91dGlsL2lzRGF0ZSc7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tICcuLi9Ob3RpZmljYXRpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGF5KGRlbGF5LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHZhciBhYnNvbHV0ZURlbGF5ID0gaXNEYXRlKGRlbGF5KTtcbiAgICB2YXIgZGVsYXlGb3IgPSBhYnNvbHV0ZURlbGF5ID8gKCtkZWxheSAtIHNjaGVkdWxlci5ub3coKSkgOiBNYXRoLmFicyhkZWxheSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZWxheU9wZXJhdG9yKGRlbGF5Rm9yLCBzY2hlZHVsZXIpKTsgfTtcbn1cbnZhciBEZWxheU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlbGF5T3BlcmF0b3IoZGVsYXksIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBEZWxheU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGVsYXlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZGVsYXksIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVsYXlPcGVyYXRvcjtcbn0oKSk7XG52YXIgRGVsYXlTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERlbGF5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWxheVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGRlbGF5LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMucXVldWUgPSBbXTtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmVycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWxheVN1YnNjcmliZXIuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHN0YXRlLnNvdXJjZTtcbiAgICAgICAgdmFyIHF1ZXVlID0gc291cmNlLnF1ZXVlO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gc3RhdGUuc2NoZWR1bGVyO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSBzdGF0ZS5kZXN0aW5hdGlvbjtcbiAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDAgJiYgKHF1ZXVlWzBdLnRpbWUgLSBzY2hlZHVsZXIubm93KCkpIDw9IDApIHtcbiAgICAgICAgICAgIHF1ZXVlLnNoaWZ0KCkubm90aWZpY2F0aW9uLm9ic2VydmUoZGVzdGluYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgZGVsYXlfMSA9IE1hdGgubWF4KDAsIHF1ZXVlWzBdLnRpbWUgLSBzY2hlZHVsZXIubm93KCkpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSwgZGVsYXlfMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBzb3VyY2UuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX3NjaGVkdWxlID0gZnVuY3Rpb24gKHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoRGVsYXlTdWJzY3JpYmVyLmRpc3BhdGNoLCB0aGlzLmRlbGF5LCB7XG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMsIGRlc3RpbmF0aW9uOiB0aGlzLmRlc3RpbmF0aW9uLCBzY2hlZHVsZXI6IHNjaGVkdWxlclxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBEZWxheVN1YnNjcmliZXIucHJvdG90eXBlLnNjaGVkdWxlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgICAgICBpZiAodGhpcy5lcnJvcmVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICB2YXIgbWVzc2FnZSA9IG5ldyBEZWxheU1lc3NhZ2Uoc2NoZWR1bGVyLm5vdygpICsgdGhpcy5kZWxheSwgbm90aWZpY2F0aW9uKTtcbiAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLl9zY2hlZHVsZShzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWxheVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVOb3RpZmljYXRpb24oTm90aWZpY2F0aW9uLmNyZWF0ZU5leHQodmFsdWUpKTtcbiAgICB9O1xuICAgIERlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmVycm9yZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVOb3RpZmljYXRpb24oTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVsYXlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG52YXIgRGVsYXlNZXNzYWdlID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlbGF5TWVzc2FnZSh0aW1lLCBub3RpZmljYXRpb24pIHtcbiAgICAgICAgdGhpcy50aW1lID0gdGltZTtcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb24gPSBub3RpZmljYXRpb247XG4gICAgfVxuICAgIHJldHVybiBEZWxheU1lc3NhZ2U7XG59KCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyLF9PYnNlcnZhYmxlLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGF5V2hlbihkZWxheUR1cmF0aW9uU2VsZWN0b3IsIHN1YnNjcmlwdGlvbkRlbGF5KSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkRlbGF5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZShzb3VyY2UsIHN1YnNjcmlwdGlvbkRlbGF5KVxuICAgICAgICAgICAgICAgIC5saWZ0KG5ldyBEZWxheVdoZW5PcGVyYXRvcihkZWxheUR1cmF0aW9uU2VsZWN0b3IpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZWxheVdoZW5PcGVyYXRvcihkZWxheUR1cmF0aW9uU2VsZWN0b3IpKTsgfTtcbn1cbnZhciBEZWxheVdoZW5PcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWxheVdoZW5PcGVyYXRvcihkZWxheUR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5kZWxheUR1cmF0aW9uU2VsZWN0b3IgPSBkZWxheUR1cmF0aW9uU2VsZWN0b3I7XG4gICAgfVxuICAgIERlbGF5V2hlbk9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGVsYXlXaGVuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmRlbGF5RHVyYXRpb25TZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlbGF5V2hlbk9wZXJhdG9yO1xufSgpKTtcbnZhciBEZWxheVdoZW5TdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERlbGF5V2hlblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVsYXlXaGVuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZGVsYXlEdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZWxheUR1cmF0aW9uU2VsZWN0b3IgPSBkZWxheUR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5kZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQob3V0ZXJWYWx1ZSk7XG4gICAgICAgIHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9uKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy50cnlDb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9uKGlubmVyU3ViKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJ5Q29tcGxldGUoKTtcbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBkZWxheU5vdGlmaWVyID0gdGhpcy5kZWxheUR1cmF0aW9uU2VsZWN0b3IodmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgIGlmIChkZWxheU5vdGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlEZWxheShkZWxheU5vdGlmaWVyLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50cnlDb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBEZWxheVdoZW5TdWJzY3JpYmVyLnByb3RvdHlwZS5yZW1vdmVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uSWR4ID0gdGhpcy5kZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucy5pbmRleE9mKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25JZHggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGF5Tm90aWZpZXJTdWJzY3JpcHRpb25zLnNwbGljZShzdWJzY3JpcHRpb25JZHgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb24ub3V0ZXJWYWx1ZTtcbiAgICB9O1xuICAgIERlbGF5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLnRyeURlbGF5ID0gZnVuY3Rpb24gKGRlbGF5Tm90aWZpZXIsIHZhbHVlKSB7XG4gICAgICAgIHZhciBub3RpZmllclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGRlbGF5Tm90aWZpZXIsIHZhbHVlKTtcbiAgICAgICAgaWYgKG5vdGlmaWVyU3Vic2NyaXB0aW9uICYmICFub3RpZmllclN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQobm90aWZpZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgdGhpcy5kZWxheU5vdGlmaWVyU3Vic2NyaXB0aW9ucy5wdXNoKG5vdGlmaWVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVsYXlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBsZXRlZCAmJiB0aGlzLmRlbGF5Tm90aWZpZXJTdWJzY3JpcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGVsYXlXaGVuU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG52YXIgU3Vic2NyaXB0aW9uRGVsYXlPYnNlcnZhYmxlID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb25EZWxheU9ic2VydmFibGUoc291cmNlLCBzdWJzY3JpcHRpb25EZWxheSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbkRlbGF5ID0gc3Vic2NyaXB0aW9uRGVsYXk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25EZWxheS5zdWJzY3JpYmUobmV3IFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbkRlbGF5T2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZSkpO1xudmFyIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJzY3JpcHRpb25EZWxheVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyKHBhcmVudCwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5zb3VyY2VTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh1bnVzZWQpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1NvdXJjZSgpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uRGVsYXlTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQuZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9Tb3VyY2UoKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlci5wcm90b3R5cGUuc3Vic2NyaWJlVG9Tb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5zb3VyY2VTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZVN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHRoaXMucGFyZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbkRlbGF5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXlXaGVuLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGRlbWF0ZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlbWF0ZXJpYWxpemVPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IERlTWF0ZXJpYWxpemVPcGVyYXRvcigpKTtcbiAgICB9O1xufVxudmFyIERlTWF0ZXJpYWxpemVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZU1hdGVyaWFsaXplT3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIERlTWF0ZXJpYWxpemVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERlTWF0ZXJpYWxpemVTdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBEZU1hdGVyaWFsaXplT3BlcmF0b3I7XG59KCkpO1xudmFyIERlTWF0ZXJpYWxpemVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERlTWF0ZXJpYWxpemVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlTWF0ZXJpYWxpemVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICB9XG4gICAgRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlLm9ic2VydmUodGhpcy5kZXN0aW5hdGlvbik7XG4gICAgfTtcbiAgICByZXR1cm4gRGVNYXRlcmlhbGl6ZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbWF0ZXJpYWxpemUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0KGtleVNlbGVjdG9yLCBmbHVzaGVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEaXN0aW5jdE9wZXJhdG9yKGtleVNlbGVjdG9yLCBmbHVzaGVzKSk7IH07XG59XG52YXIgRGlzdGluY3RPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEaXN0aW5jdE9wZXJhdG9yKGtleVNlbGVjdG9yLCBmbHVzaGVzKSB7XG4gICAgICAgIHRoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5mbHVzaGVzID0gZmx1c2hlcztcbiAgICB9XG4gICAgRGlzdGluY3RPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERpc3RpbmN0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmtleVNlbGVjdG9yLCB0aGlzLmZsdXNoZXMpKTtcbiAgICB9O1xuICAgIHJldHVybiBEaXN0aW5jdE9wZXJhdG9yO1xufSgpKTtcbnZhciBEaXN0aW5jdFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGlzdGluY3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERpc3RpbmN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwga2V5U2VsZWN0b3IsIGZsdXNoZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmtleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLnZhbHVlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgaWYgKGZsdXNoZXMpIHtcbiAgICAgICAgICAgIF90aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgZmx1c2hlcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGlzdGluY3RTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMudmFsdWVzLmNsZWFyKCk7XG4gICAgfTtcbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLl9lcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmtleVNlbGVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLl91c2VLZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9maW5hbGl6ZU5leHQodmFsdWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGlzdGluY3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fdXNlS2V5U2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGtleSA9IHRoaXMua2V5U2VsZWN0b3IodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZmluYWxpemVOZXh0KGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgRGlzdGluY3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fZmluYWxpemVOZXh0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuICAgICAgICBpZiAoIXZhbHVlcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdmFsdWVzLmFkZChrZXkpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0U3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBEaXN0aW5jdFN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGNvbXBhcmUsIGtleVNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEaXN0aW5jdFVudGlsQ2hhbmdlZE9wZXJhdG9yKGNvbXBhcmUsIGtleVNlbGVjdG9yKSk7IH07XG59XG52YXIgRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEaXN0aW5jdFVudGlsQ2hhbmdlZE9wZXJhdG9yKGNvbXBhcmUsIGtleVNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuY29tcGFyZSA9IGNvbXBhcmU7XG4gICAgICAgIHRoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICB9XG4gICAgRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNvbXBhcmUsIHRoaXMua2V5U2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBEaXN0aW5jdFVudGlsQ2hhbmdlZE9wZXJhdG9yO1xufSgpKTtcbnZhciBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY29tcGFyZSwga2V5U2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmtleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmhhc0tleSA9IGZhbHNlO1xuICAgICAgICBpZiAodHlwZW9mIGNvbXBhcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIF90aGlzLmNvbXBhcmUgPSBjb21wYXJlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHggPT09IHk7XG4gICAgfTtcbiAgICBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIga2V5U2VsZWN0b3IgPSB0aGlzLmtleVNlbGVjdG9yO1xuICAgICAgICAgICAga2V5ID0ga2V5U2VsZWN0b3IgPyBrZXlTZWxlY3Rvcih2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuaGFzS2V5KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wYXJlID0gdGhpcy5jb21wYXJlO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbXBhcmUodGhpcy5rZXksIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGFzS2V5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX2Rpc3RpbmN0VW50aWxDaGFuZ2VkIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAnLi9kaXN0aW5jdFVudGlsQ2hhbmdlZCc7XG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3RVbnRpbEtleUNoYW5nZWQoa2V5LCBjb21wYXJlKSB7XG4gICAgcmV0dXJuIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiBjb21wYXJlID8gY29tcGFyZSh4W2tleV0sIHlba2V5XSkgOiB4W2tleV0gPT09IHlba2V5XTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX3V0aWxfRW1wdHlFcnJvcixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgRW1wdHlFcnJvciB9IGZyb20gJy4uL3V0aWwvRW1wdHlFcnJvcic7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dJZkVtcHR5KGVycm9yRmFjdG9yeSkge1xuICAgIGlmIChlcnJvckZhY3RvcnkgPT09IHZvaWQgMCkge1xuICAgICAgICBlcnJvckZhY3RvcnkgPSBkZWZhdWx0RXJyb3JGYWN0b3J5O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFRocm93SWZFbXB0eU9wZXJhdG9yKGVycm9yRmFjdG9yeSkpO1xuICAgIH07XG59XG52YXIgVGhyb3dJZkVtcHR5T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGhyb3dJZkVtcHR5T3BlcmF0b3IoZXJyb3JGYWN0b3J5KSB7XG4gICAgICAgIHRoaXMuZXJyb3JGYWN0b3J5ID0gZXJyb3JGYWN0b3J5O1xuICAgIH1cbiAgICBUaHJvd0lmRW1wdHlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRocm93SWZFbXB0eVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5lcnJvckZhY3RvcnkpKTtcbiAgICB9O1xuICAgIHJldHVybiBUaHJvd0lmRW1wdHlPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGhyb3dJZkVtcHR5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUaHJvd0lmRW1wdHlTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRocm93SWZFbXB0eVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGVycm9yRmFjdG9yeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZXJyb3JGYWN0b3J5ID0gZXJyb3JGYWN0b3J5O1xuICAgICAgICBfdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRocm93SWZFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgVGhyb3dJZkVtcHR5U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlcnIgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVyciA9IHRoaXMuZXJyb3JGYWN0b3J5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGVyciA9IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVGhyb3dJZkVtcHR5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZnVuY3Rpb24gZGVmYXVsdEVycm9yRmFjdG9yeSgpIHtcbiAgICByZXR1cm4gbmV3IEVtcHR5RXJyb3IoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93SWZFbXB0eS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3V0aWxfQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IsX29ic2VydmFibGVfZW1wdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcic7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4uL29ic2VydmFibGUvZW1wdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2UoY291bnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUYWtlT3BlcmF0b3IoY291bnQpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG52YXIgVGFrZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRha2VPcGVyYXRvcih0b3RhbCkge1xuICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XG4gICAgICAgIGlmICh0aGlzLnRvdGFsIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIFRha2VPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRha2VTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMudG90YWwpKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlT3BlcmF0b3I7XG59KCkpO1xudmFyIFRha2VTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRha2VTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRha2VTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB0b3RhbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRha2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLnRvdGFsO1xuICAgICAgICB2YXIgY291bnQgPSArK3RoaXMuY291bnQ7XG4gICAgICAgIGlmIChjb3VudCA8PSB0b3RhbCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gdG90YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLF9maWx0ZXIsX3Rocm93SWZFbXB0eSxfZGVmYXVsdElmRW1wdHksX3Rha2UgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgfSBmcm9tICcuLi91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJy4vZmlsdGVyJztcbmltcG9ydCB7IHRocm93SWZFbXB0eSB9IGZyb20gJy4vdGhyb3dJZkVtcHR5JztcbmltcG9ydCB7IGRlZmF1bHRJZkVtcHR5IH0gZnJvbSAnLi9kZWZhdWx0SWZFbXB0eSc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAnLi90YWtlJztcbmV4cG9ydCBmdW5jdGlvbiBlbGVtZW50QXQoaW5kZXgsIGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yKCk7XG4gICAgfVxuICAgIHZhciBoYXNEZWZhdWx0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5waXBlKGZpbHRlcihmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gaSA9PT0gaW5kZXg7IH0pLCB0YWtlKDEpLCBoYXNEZWZhdWx0VmFsdWVcbiAgICAgICAgICAgID8gZGVmYXVsdElmRW1wdHkoZGVmYXVsdFZhbHVlKVxuICAgICAgICAgICAgOiB0aHJvd0lmRW1wdHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yKCk7IH0pKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxlbWVudEF0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfb2JzZXJ2YWJsZV9jb25jYXQsX29ic2VydmFibGVfb2YgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgY29uY2F0IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb25jYXQnO1xuaW1wb3J0IHsgb2YgfSBmcm9tICcuLi9vYnNlcnZhYmxlL29mJztcbmV4cG9ydCBmdW5jdGlvbiBlbmRXaXRoKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFycmF5W19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBjb25jYXQoc291cmNlLCBvZi5hcHBseSh2b2lkIDAsIGFycmF5KSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmRXaXRoLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZXJ5KHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRXZlcnlPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXNBcmcsIHNvdXJjZSkpOyB9O1xufVxudmFyIEV2ZXJ5T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlcnlPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXNBcmcsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIEV2ZXJ5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRXZlcnlTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy50aGlzQXJnLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZXJ5T3BlcmF0b3I7XG59KCkpO1xudmFyIEV2ZXJ5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhFdmVyeVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRXZlcnlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIHRoaXNBcmcsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIF90aGlzLnRoaXNBcmcgPSB0aGlzQXJnIHx8IF90aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEV2ZXJ5U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoZXZlcnlWYWx1ZU1hdGNoKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChldmVyeVZhbHVlTWF0Y2gpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBFdmVyeVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlLmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5pbmRleCsrLCB0aGlzLnNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeUNvbXBsZXRlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlcnlTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUodHJ1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gRXZlcnlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVyeS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gZXhoYXVzdCgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFN3aXRjaEZpcnN0T3BlcmF0b3IoKSk7IH07XG59XG52YXIgU3dpdGNoRmlyc3RPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTd2l0Y2hGaXJzdE9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBTd2l0Y2hGaXJzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU3dpdGNoRmlyc3RTdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBTd2l0Y2hGaXJzdE9wZXJhdG9yO1xufSgpKTtcbnZhciBTd2l0Y2hGaXJzdFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3dpdGNoRmlyc3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN3aXRjaEZpcnN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc1N1YnNjcmlwdGlvbiA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN3aXRjaEZpcnN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5oYXNTdWJzY3JpcHRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgdmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3dpdGNoRmlyc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTd2l0Y2hGaXJzdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy5oYXNTdWJzY3JpcHRpb24gPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTd2l0Y2hGaXJzdFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhoYXVzdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfSW5uZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0LF9tYXAsX29ic2VydmFibGVfZnJvbSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IElubmVyU3Vic2NyaWJlciB9IGZyb20gJy4uL0lubmVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gZXhoYXVzdE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLnBpcGUoZXhoYXVzdE1hcChmdW5jdGlvbiAoYSwgaSkgeyByZXR1cm4gZnJvbShwcm9qZWN0KGEsIGkpKS5waXBlKG1hcChmdW5jdGlvbiAoYiwgaWkpIHsgcmV0dXJuIHJlc3VsdFNlbGVjdG9yKGEsIGIsIGksIGlpKTsgfSkpOyB9KSk7IH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgRXhoYXVzdE1hcE9wZXJhdG9yKHByb2plY3QpKTtcbiAgICB9O1xufVxudmFyIEV4aGF1c3RNYXBPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFeGhhdXN0TWFwT3BlcmF0b3IocHJvamVjdCkge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgIH1cbiAgICBFeGhhdXN0TWFwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBFeGhhdXN0TWFwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByb2plY3QpKTtcbiAgICB9O1xuICAgIHJldHVybiBFeGhhdXN0TWFwT3BlcmF0b3I7XG59KCkpO1xudmFyIEV4aGF1c3RNYXBTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEV4aGF1c3RNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEV4aGF1c3RNYXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuaGFzU3Vic2NyaXB0aW9uID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRXhoYXVzdE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMudHJ5TmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV4aGF1c3RNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS50cnlOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc1N1YnNjcmlwdGlvbiA9IHRydWU7XG4gICAgICAgIHRoaXMuX2lubmVyU3ViKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcbiAgICB9O1xuICAgIEV4aGF1c3RNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5faW5uZXJTdWIgPSBmdW5jdGlvbiAocmVzdWx0LCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBJbm5lclN1YnNjcmliZXIodGhpcywgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHJlc3VsdCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIGlmIChpbm5lclN1YnNjcmlwdGlvbiAhPT0gaW5uZXJTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFeGhhdXN0TWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5oYXNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBFeGhhdXN0TWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBFeGhhdXN0TWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIEV4aGF1c3RNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLmhhc1N1YnNjcmlwdGlvbiA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEV4aGF1c3RNYXBTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4aGF1c3RNYXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZChwcm9qZWN0LCBjb25jdXJyZW50LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBzY2hlZHVsZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbmN1cnJlbnQgPSAoY29uY3VycmVudCB8fCAwKSA8IDEgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiBjb25jdXJyZW50O1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRXhwYW5kT3BlcmF0b3IocHJvamVjdCwgY29uY3VycmVudCwgc2NoZWR1bGVyKSk7IH07XG59XG52YXIgRXhwYW5kT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXhwYW5kT3BlcmF0b3IocHJvamVjdCwgY29uY3VycmVudCwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBFeHBhbmRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IEV4cGFuZFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0LCB0aGlzLmNvbmN1cnJlbnQsIHRoaXMuc2NoZWR1bGVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRXhwYW5kT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgRXhwYW5kT3BlcmF0b3IgfTtcbnZhciBFeHBhbmRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEV4cGFuZFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRXhwYW5kU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgY29uY3VycmVudCwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSAwO1xuICAgICAgICBfdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGNvbmN1cnJlbnQgPCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpIHtcbiAgICAgICAgICAgIF90aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRXhwYW5kU3Vic2NyaWJlci5kaXNwYXRjaCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlciwgcmVzdWx0ID0gYXJnLnJlc3VsdCwgdmFsdWUgPSBhcmcudmFsdWUsIGluZGV4ID0gYXJnLmluZGV4O1xuICAgICAgICBzdWJzY3JpYmVyLnN1YnNjcmliZVRvUHJvamVjdGlvbihyZXN1bHQsIHZhbHVlLCBpbmRleCk7XG4gICAgfTtcbiAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlIDwgdGhpcy5jb25jdXJyZW50KSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb2plY3QgPSB0aGlzLnByb2plY3Q7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHByb2plY3QodmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlVG9Qcm9qZWN0aW9uKHJlc3VsdCwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHsgc3Vic2NyaWJlcjogdGhpcywgcmVzdWx0OiByZXN1bHQsIHZhbHVlOiB2YWx1ZSwgaW5kZXg6IGluZGV4IH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbl8xID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMS5hZGQodGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoRXhwYW5kU3Vic2NyaWJlci5kaXNwYXRjaCwgMCwgc3RhdGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV4cGFuZFN1YnNjcmliZXIucHJvdG90eXBlLnN1YnNjcmliZVRvUHJvamVjdGlvbiA9IGZ1bmN0aW9uIChyZXN1bHQsIHZhbHVlLCBpbmRleCkge1xuICAgICAgICB0aGlzLmFjdGl2ZSsrO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5hZGQoc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgcmVzdWx0LCB2YWx1ZSwgaW5kZXgpKTtcbiAgICB9O1xuICAgIEV4cGFuZFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5oYXNDb21wbGV0ZWQgJiYgdGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX25leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBFeHBhbmRTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLnJlbW92ZShpbm5lclN1Yik7XG4gICAgICAgIHRoaXMuYWN0aXZlLS07XG4gICAgICAgIGlmIChidWZmZXIgJiYgYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQoYnVmZmVyLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc0NvbXBsZXRlZCAmJiB0aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRXhwYW5kU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBFeHBhbmRTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBhbmQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyLF9TdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gZmluYWxpemUoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IEZpbmFsbHlPcGVyYXRvcihjYWxsYmFjaykpOyB9O1xufVxudmFyIEZpbmFsbHlPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGaW5hbGx5T3BlcmF0b3IoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICBGaW5hbGx5T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBGaW5hbGx5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNhbGxiYWNrKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRmluYWxseU9wZXJhdG9yO1xufSgpKTtcbnZhciBGaW5hbGx5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhGaW5hbGx5U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGaW5hbGx5U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFkZChuZXcgU3Vic2NyaXB0aW9uKGNhbGxiYWNrKSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEZpbmFsbHlTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5hbGl6ZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IEZpbmRWYWx1ZU9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlLCBmYWxzZSwgdGhpc0FyZykpOyB9O1xufVxudmFyIEZpbmRWYWx1ZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbmRWYWx1ZU9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlLCB5aWVsZEluZGV4LCB0aGlzQXJnKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy55aWVsZEluZGV4ID0geWllbGRJbmRleDtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICB9XG4gICAgRmluZFZhbHVlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRmluZFZhbHVlU3Vic2NyaWJlcihvYnNlcnZlciwgdGhpcy5wcmVkaWNhdGUsIHRoaXMuc291cmNlLCB0aGlzLnlpZWxkSW5kZXgsIHRoaXMudGhpc0FyZykpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbmRWYWx1ZU9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IEZpbmRWYWx1ZU9wZXJhdG9yIH07XG52YXIgRmluZFZhbHVlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhGaW5kVmFsdWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbmRWYWx1ZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgc291cmNlLCB5aWVsZEluZGV4LCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMueWllbGRJbmRleCA9IHlpZWxkSW5kZXg7XG4gICAgICAgIF90aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRmluZFZhbHVlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIEZpbmRWYWx1ZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHByZWRpY2F0ZSA9IF9hLnByZWRpY2F0ZSwgdGhpc0FyZyA9IF9hLnRoaXNBcmc7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwcmVkaWNhdGUuY2FsbCh0aGlzQXJnIHx8IHRoaXMsIHZhbHVlLCBpbmRleCwgdGhpcy5zb3VyY2UpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUodGhpcy55aWVsZEluZGV4ID8gaW5kZXggOiB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGaW5kVmFsdWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUodGhpcy55aWVsZEluZGV4ID8gLTEgOiB1bmRlZmluZWQpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbmRWYWx1ZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IEZpbmRWYWx1ZVN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vcGVyYXRvcnNfZmluZCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBGaW5kVmFsdWVPcGVyYXRvciB9IGZyb20gJy4uL29wZXJhdG9ycy9maW5kJztcbmV4cG9ydCBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBGaW5kVmFsdWVPcGVyYXRvcihwcmVkaWNhdGUsIHNvdXJjZSwgdHJ1ZSwgdGhpc0FyZykpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZEluZGV4LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9FbXB0eUVycm9yLF9maWx0ZXIsX3Rha2UsX2RlZmF1bHRJZkVtcHR5LF90aHJvd0lmRW1wdHksX3V0aWxfaWRlbnRpdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgRW1wdHlFcnJvciB9IGZyb20gJy4uL3V0aWwvRW1wdHlFcnJvcic7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICcuL2ZpbHRlcic7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAnLi90YWtlJztcbmltcG9ydCB7IGRlZmF1bHRJZkVtcHR5IH0gZnJvbSAnLi9kZWZhdWx0SWZFbXB0eSc7XG5pbXBvcnQgeyB0aHJvd0lmRW1wdHkgfSBmcm9tICcuL3Rocm93SWZFbXB0eSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0KHByZWRpY2F0ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgdmFyIGhhc0RlZmF1bHRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLnBpcGUocHJlZGljYXRlID8gZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBwcmVkaWNhdGUodiwgaSwgc291cmNlKTsgfSkgOiBpZGVudGl0eSwgdGFrZSgxKSwgaGFzRGVmYXVsdFZhbHVlID8gZGVmYXVsdElmRW1wdHkoZGVmYXVsdFZhbHVlKSA6IHRocm93SWZFbXB0eShmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRW1wdHlFcnJvcigpOyB9KSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXJzdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBpZ25vcmVFbGVtZW50cygpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaWdub3JlRWxlbWVudHNPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IElnbm9yZUVsZW1lbnRzT3BlcmF0b3IoKSk7XG4gICAgfTtcbn1cbnZhciBJZ25vcmVFbGVtZW50c09wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElnbm9yZUVsZW1lbnRzT3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIElnbm9yZUVsZW1lbnRzT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIElnbm9yZUVsZW1lbnRzT3BlcmF0b3I7XG59KCkpO1xudmFyIElnbm9yZUVsZW1lbnRzU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhJZ25vcmVFbGVtZW50c1N1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIElnbm9yZUVsZW1lbnRzU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodW51c2VkKSB7XG4gICAgfTtcbiAgICByZXR1cm4gSWdub3JlRWxlbWVudHNTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZ25vcmVFbGVtZW50cy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgSXNFbXB0eU9wZXJhdG9yKCkpOyB9O1xufVxudmFyIElzRW1wdHlPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJc0VtcHR5T3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIElzRW1wdHlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBJc0VtcHR5U3Vic2NyaWJlcihvYnNlcnZlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIElzRW1wdHlPcGVyYXRvcjtcbn0oKSk7XG52YXIgSXNFbXB0eVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoSXNFbXB0eVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSXNFbXB0eVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgIH1cbiAgICBJc0VtcHR5U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaXNFbXB0eSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGlzRW1wdHkpO1xuICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgSXNFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMubm90aWZ5Q29tcGxldGUoZmFsc2UpO1xuICAgIH07XG4gICAgSXNFbXB0eVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlDb21wbGV0ZSh0cnVlKTtcbiAgICB9O1xuICAgIHJldHVybiBJc0VtcHR5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNFbXB0eS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3V0aWxfQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IsX29ic2VydmFibGVfZW1wdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcic7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4uL29ic2VydmFibGUvZW1wdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VMYXN0KGNvdW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRha2VMYXN0T3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgVGFrZUxhc3RPcGVyYXRvcihjb3VudCkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbnZhciBUYWtlTGFzdE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRha2VMYXN0T3BlcmF0b3IodG90YWwpIHtcbiAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICBpZiAodGhpcy50b3RhbCA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBUYWtlTGFzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGFrZUxhc3RTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMudG90YWwpKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlTGFzdE9wZXJhdG9yO1xufSgpKTtcbnZhciBUYWtlTGFzdFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGFrZUxhc3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRha2VMYXN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgdG90YWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnRvdGFsID0gdG90YWw7XG4gICAgICAgIF90aGlzLnJpbmcgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRha2VMYXN0U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJpbmcgPSB0aGlzLnJpbmc7XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMudG90YWw7XG4gICAgICAgIHZhciBjb3VudCA9IHRoaXMuY291bnQrKztcbiAgICAgICAgaWYgKHJpbmcubGVuZ3RoIDwgdG90YWwpIHtcbiAgICAgICAgICAgIHJpbmcucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBjb3VudCAlIHRvdGFsO1xuICAgICAgICAgICAgcmluZ1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGFrZUxhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIHZhciBjb3VudCA9IHRoaXMuY291bnQ7XG4gICAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgICAgIHZhciB0b3RhbCA9IHRoaXMuY291bnQgPj0gdGhpcy50b3RhbCA/IHRoaXMudG90YWwgOiB0aGlzLmNvdW50O1xuICAgICAgICAgICAgdmFyIHJpbmcgPSB0aGlzLnJpbmc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaWR4ID0gKGNvdW50KyspICUgdG90YWw7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChyaW5nW2lkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZUxhc3RTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlTGFzdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfRW1wdHlFcnJvcixfZmlsdGVyLF90YWtlTGFzdCxfdGhyb3dJZkVtcHR5LF9kZWZhdWx0SWZFbXB0eSxfdXRpbF9pZGVudGl0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBFbXB0eUVycm9yIH0gZnJvbSAnLi4vdXRpbC9FbXB0eUVycm9yJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJy4vZmlsdGVyJztcbmltcG9ydCB7IHRha2VMYXN0IH0gZnJvbSAnLi90YWtlTGFzdCc7XG5pbXBvcnQgeyB0aHJvd0lmRW1wdHkgfSBmcm9tICcuL3Rocm93SWZFbXB0eSc7XG5pbXBvcnQgeyBkZWZhdWx0SWZFbXB0eSB9IGZyb20gJy4vZGVmYXVsdElmRW1wdHknO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBsYXN0KHByZWRpY2F0ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgdmFyIGhhc0RlZmF1bHRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLnBpcGUocHJlZGljYXRlID8gZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBwcmVkaWNhdGUodiwgaSwgc291cmNlKTsgfSkgOiBpZGVudGl0eSwgdGFrZUxhc3QoMSksIGhhc0RlZmF1bHRWYWx1ZSA/IGRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSkgOiB0aHJvd0lmRW1wdHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEVtcHR5RXJyb3IoKTsgfSkpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFzdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXBUbyh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgTWFwVG9PcGVyYXRvcih2YWx1ZSkpOyB9O1xufVxudmFyIE1hcFRvT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFwVG9PcGVyYXRvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIE1hcFRvT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBNYXBUb1N1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy52YWx1ZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hcFRvT3BlcmF0b3I7XG59KCkpO1xudmFyIE1hcFRvU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhNYXBUb1N1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWFwVG9TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNYXBUb1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMudmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hcFRvU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwVG8uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyLF9Ob3RpZmljYXRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL05vdGlmaWNhdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gbWF0ZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1hdGVyaWFsaXplT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNYXRlcmlhbGl6ZU9wZXJhdG9yKCkpO1xuICAgIH07XG59XG52YXIgTWF0ZXJpYWxpemVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXRlcmlhbGl6ZU9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBNYXRlcmlhbGl6ZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgTWF0ZXJpYWxpemVTdWJzY3JpYmVyKHN1YnNjcmliZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXRlcmlhbGl6ZU9wZXJhdG9yO1xufSgpKTtcbnZhciBNYXRlcmlhbGl6ZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTWF0ZXJpYWxpemVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1hdGVyaWFsaXplU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgfVxuICAgIE1hdGVyaWFsaXplU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KE5vdGlmaWNhdGlvbi5jcmVhdGVOZXh0KHZhbHVlKSk7XG4gICAgfTtcbiAgICBNYXRlcmlhbGl6ZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChOb3RpZmljYXRpb24uY3JlYXRlRXJyb3IoZXJyKSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBNYXRlcmlhbGl6ZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChOb3RpZmljYXRpb24uY3JlYXRlQ29tcGxldGUoKSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWF0ZXJpYWxpemVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXRlcmlhbGl6ZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBzY2FuKGFjY3VtdWxhdG9yLCBzZWVkKSB7XG4gICAgdmFyIGhhc1NlZWQgPSBmYWxzZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIGhhc1NlZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gc2Nhbk9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgU2Nhbk9wZXJhdG9yKGFjY3VtdWxhdG9yLCBzZWVkLCBoYXNTZWVkKSk7XG4gICAgfTtcbn1cbnZhciBTY2FuT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2Nhbk9wZXJhdG9yKGFjY3VtdWxhdG9yLCBzZWVkLCBoYXNTZWVkKSB7XG4gICAgICAgIGlmIChoYXNTZWVkID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGhhc1NlZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjY3VtdWxhdG9yID0gYWNjdW11bGF0b3I7XG4gICAgICAgIHRoaXMuc2VlZCA9IHNlZWQ7XG4gICAgICAgIHRoaXMuaGFzU2VlZCA9IGhhc1NlZWQ7XG4gICAgfVxuICAgIFNjYW5PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFNjYW5TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuYWNjdW11bGF0b3IsIHRoaXMuc2VlZCwgdGhpcy5oYXNTZWVkKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2Nhbk9wZXJhdG9yO1xufSgpKTtcbnZhciBTY2FuU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTY2FuU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTY2FuU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYWNjdW11bGF0b3IsIF9zZWVkLCBoYXNTZWVkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yO1xuICAgICAgICBfdGhpcy5fc2VlZCA9IF9zZWVkO1xuICAgICAgICBfdGhpcy5oYXNTZWVkID0gaGFzU2VlZDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUsIFwic2VlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmhhc1NlZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fc2VlZCA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTY2FuU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1NlZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VlZCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90cnlOZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2NhblN1YnNjcmliZXIucHJvdG90eXBlLl90cnlOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuYWNjdW11bGF0b3IodGhpcy5zZWVkLCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlZWQgPSByZXN1bHQ7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChyZXN1bHQpO1xuICAgIH07XG4gICAgcmV0dXJuIFNjYW5TdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FuLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc2NhbixfdGFrZUxhc3QsX2RlZmF1bHRJZkVtcHR5LF91dGlsX3BpcGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgc2NhbiB9IGZyb20gJy4vc2Nhbic7XG5pbXBvcnQgeyB0YWtlTGFzdCB9IGZyb20gJy4vdGFrZUxhc3QnO1xuaW1wb3J0IHsgZGVmYXVsdElmRW1wdHkgfSBmcm9tICcuL2RlZmF1bHRJZkVtcHR5JztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICcuLi91dGlsL3BpcGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZShhY2N1bXVsYXRvciwgc2VlZCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlZHVjZU9wZXJhdG9yRnVuY3Rpb25XaXRoU2VlZChzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBwaXBlKHNjYW4oYWNjdW11bGF0b3IsIHNlZWQpLCB0YWtlTGFzdCgxKSwgZGVmYXVsdElmRW1wdHkoc2VlZCkpKHNvdXJjZSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiByZWR1Y2VPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gcGlwZShzY2FuKGZ1bmN0aW9uIChhY2MsIHZhbHVlLCBpbmRleCkgeyByZXR1cm4gYWNjdW11bGF0b3IoYWNjLCB2YWx1ZSwgaW5kZXggKyAxKTsgfSksIHRha2VMYXN0KDEpKShzb3VyY2UpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWR1Y2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9yZWR1Y2UgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgcmVkdWNlIH0gZnJvbSAnLi9yZWR1Y2UnO1xuZXhwb3J0IGZ1bmN0aW9uIG1heChjb21wYXJlcikge1xuICAgIHZhciBtYXggPSAodHlwZW9mIGNvbXBhcmVyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICA/IGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiBjb21wYXJlcih4LCB5KSA+IDAgPyB4IDogeTsgfVxuICAgICAgICA6IGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiB4ID4geSA/IHggOiB5OyB9O1xuICAgIHJldHVybiByZWR1Y2UobWF4KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1heC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX29ic2VydmFibGVfbWVyZ2UgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgbWVyZ2UgYXMgbWVyZ2VTdGF0aWMgfSBmcm9tICcuLi9vYnNlcnZhYmxlL21lcmdlJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZSgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQuY2FsbChtZXJnZVN0YXRpYy5hcHBseSh2b2lkIDAsIFtzb3VyY2VdLmNvbmNhdChvYnNlcnZhYmxlcykpKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfbWVyZ2VNYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuL21lcmdlTWFwJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcFRvKGlubmVyT2JzZXJ2YWJsZSwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlubmVyT2JzZXJ2YWJsZTsgfSwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIGNvbmN1cnJlbnQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXBUby5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQsX091dGVyU3Vic2NyaWJlcixfSW5uZXJTdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IElubmVyU3Vic2NyaWJlciB9IGZyb20gJy4uL0lubmVyU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VTY2FuKGFjY3VtdWxhdG9yLCBzZWVkLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgICBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IE1lcmdlU2Nhbk9wZXJhdG9yKGFjY3VtdWxhdG9yLCBzZWVkLCBjb25jdXJyZW50KSk7IH07XG59XG52YXIgTWVyZ2VTY2FuT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWVyZ2VTY2FuT3BlcmF0b3IoYWNjdW11bGF0b3IsIHNlZWQsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgdGhpcy5hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yO1xuICAgICAgICB0aGlzLnNlZWQgPSBzZWVkO1xuICAgICAgICB0aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgIH1cbiAgICBNZXJnZVNjYW5PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1lcmdlU2NhblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5hY2N1bXVsYXRvciwgdGhpcy5zZWVkLCB0aGlzLmNvbmN1cnJlbnQpKTtcbiAgICB9O1xuICAgIHJldHVybiBNZXJnZVNjYW5PcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBNZXJnZVNjYW5PcGVyYXRvciB9O1xudmFyIE1lcmdlU2NhblN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTWVyZ2VTY2FuU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNZXJnZVNjYW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBhY2N1bXVsYXRvciwgYWNjLCBjb25jdXJyZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yO1xuICAgICAgICBfdGhpcy5hY2MgPSBhY2M7XG4gICAgICAgIF90aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgICAgICBfdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuYnVmZmVyID0gW107XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNZXJnZVNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPCB0aGlzLmNvbmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgICAgICB2YXIgaXNoID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgYWNjdW11bGF0b3IgPSB0aGlzLmFjY3VtdWxhdG9yO1xuICAgICAgICAgICAgICAgIGlzaCA9IGFjY3VtdWxhdG9yKHRoaXMuYWNjLCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzdGluYXRpb24uZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSsrO1xuICAgICAgICAgICAgdGhpcy5faW5uZXJTdWIoaXNoLCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lcmdlU2NhblN1YnNjcmliZXIucHJvdG90eXBlLl9pbm5lclN1YiA9IGZ1bmN0aW9uIChpc2gsIHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbmV3IElubmVyU3Vic2NyaWJlcih0aGlzLCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgaXNoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uICE9PSBpbm5lclN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lcmdlU2NhblN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oYXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IDAgJiYgdGhpcy5idWZmZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy5hY2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE1lcmdlU2NhblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdGhpcy5hY2MgPSBpbm5lclZhbHVlO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIE1lcmdlU2NhblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ucmVtb3ZlKGlubmVyU3ViKTtcbiAgICAgICAgdGhpcy5hY3RpdmUtLTtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KGJ1ZmZlci5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCAmJiB0aGlzLmhhc0NvbXBsZXRlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuYWNjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlU2NhblN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgTWVyZ2VTY2FuU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VTY2FuLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfcmVkdWNlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IHJlZHVjZSB9IGZyb20gJy4vcmVkdWNlJztcbmV4cG9ydCBmdW5jdGlvbiBtaW4oY29tcGFyZXIpIHtcbiAgICB2YXIgbWluID0gKHR5cGVvZiBjb21wYXJlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgPyBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4gY29tcGFyZXIoeCwgeSkgPCAwID8geCA6IHk7IH1cbiAgICAgICAgOiBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4geCA8IHkgPyB4IDogeTsgfTtcbiAgICByZXR1cm4gcmVkdWNlKG1pbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taW4uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vYnNlcnZhYmxlX0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjb25uZWN0YWJsZU9ic2VydmFibGVEZXNjcmlwdG9yIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpY2FzdChzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbXVsdGljYXN0T3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgdmFyIHN1YmplY3RGYWN0b3J5O1xuICAgICAgICBpZiAodHlwZW9mIHN1YmplY3RPclN1YmplY3RGYWN0b3J5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdWJqZWN0RmFjdG9yeSA9IHN1YmplY3RPclN1YmplY3RGYWN0b3J5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3ViamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBzdWJqZWN0RmFjdG9yeSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViamVjdE9yU3ViamVjdEZhY3Rvcnk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgTXVsdGljYXN0T3BlcmF0b3Ioc3ViamVjdEZhY3RvcnksIHNlbGVjdG9yKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gT2JqZWN0LmNyZWF0ZShzb3VyY2UsIGNvbm5lY3RhYmxlT2JzZXJ2YWJsZURlc2NyaXB0b3IpO1xuICAgICAgICBjb25uZWN0YWJsZS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIGNvbm5lY3RhYmxlLnN1YmplY3RGYWN0b3J5ID0gc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIHJldHVybiBjb25uZWN0YWJsZTtcbiAgICB9O1xufVxudmFyIE11bHRpY2FzdE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE11bHRpY2FzdE9wZXJhdG9yKHN1YmplY3RGYWN0b3J5LCBzZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnN1YmplY3RGYWN0b3J5ID0gc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICB9XG4gICAgTXVsdGljYXN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gdGhpcy5zdWJqZWN0RmFjdG9yeSgpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc2VsZWN0b3Ioc3ViamVjdCkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICBzdWJzY3JpcHRpb24uYWRkKHNvdXJjZS5zdWJzY3JpYmUoc3ViamVjdCkpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIE11bHRpY2FzdE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IE11bHRpY2FzdE9wZXJhdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdWx0aWNhc3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9vYnNlcnZhYmxlX2Zyb20sX3V0aWxfaXNBcnJheSxfT3V0ZXJTdWJzY3JpYmVyLF9Jbm5lclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2Zyb20nO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgSW5uZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vSW5uZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gb25FcnJvclJlc3VtZU5leHQoKSB7XG4gICAgdmFyIG5leHRTb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgbmV4dFNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKG5leHRTb3VyY2VzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG5leHRTb3VyY2VzWzBdKSkge1xuICAgICAgICBuZXh0U291cmNlcyA9IG5leHRTb3VyY2VzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IE9uRXJyb3JSZXN1bWVOZXh0T3BlcmF0b3IobmV4dFNvdXJjZXMpKTsgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvbkVycm9yUmVzdW1lTmV4dFN0YXRpYygpIHtcbiAgICB2YXIgbmV4dFNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBuZXh0U291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc291cmNlID0gbnVsbDtcbiAgICBpZiAobmV4dFNvdXJjZXMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobmV4dFNvdXJjZXNbMF0pKSB7XG4gICAgICAgIG5leHRTb3VyY2VzID0gbmV4dFNvdXJjZXNbMF07XG4gICAgfVxuICAgIHNvdXJjZSA9IG5leHRTb3VyY2VzLnNoaWZ0KCk7XG4gICAgcmV0dXJuIGZyb20oc291cmNlLCBudWxsKS5saWZ0KG5ldyBPbkVycm9yUmVzdW1lTmV4dE9wZXJhdG9yKG5leHRTb3VyY2VzKSk7XG59XG52YXIgT25FcnJvclJlc3VtZU5leHRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPbkVycm9yUmVzdW1lTmV4dE9wZXJhdG9yKG5leHRTb3VyY2VzKSB7XG4gICAgICAgIHRoaXMubmV4dFNvdXJjZXMgPSBuZXh0U291cmNlcztcbiAgICB9XG4gICAgT25FcnJvclJlc3VtZU5leHRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm5leHRTb3VyY2VzKSk7XG4gICAgfTtcbiAgICByZXR1cm4gT25FcnJvclJlc3VtZU5leHRPcGVyYXRvcjtcbn0oKSk7XG52YXIgT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIoZGVzdGluYXRpb24sIG5leHRTb3VyY2VzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5uZXh0U291cmNlcyA9IG5leHRTb3VyY2VzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9OZXh0U291cmNlKCk7XG4gICAgfTtcbiAgICBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9OZXh0U291cmNlKCk7XG4gICAgfTtcbiAgICBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb05leHRTb3VyY2UoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgT25FcnJvclJlc3VtZU5leHRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9OZXh0U291cmNlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE9uRXJyb3JSZXN1bWVOZXh0U3Vic2NyaWJlci5wcm90b3R5cGUuc3Vic2NyaWJlVG9OZXh0U291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV4dCA9IHRoaXMubmV4dFNvdXJjZXMuc2hpZnQoKTtcbiAgICAgICAgaWYgKCEhbmV4dCkge1xuICAgICAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBJbm5lclN1YnNjcmliZXIodGhpcywgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgbmV4dCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24gIT09IGlubmVyU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBPbkVycm9yUmVzdW1lTmV4dFN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25FcnJvclJlc3VtZU5leHQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gcGFpcndpc2UoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBQYWlyd2lzZU9wZXJhdG9yKCkpOyB9O1xufVxudmFyIFBhaXJ3aXNlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGFpcndpc2VPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgUGFpcndpc2VPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFBhaXJ3aXNlU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUGFpcndpc2VPcGVyYXRvcjtcbn0oKSk7XG52YXIgUGFpcndpc2VTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFBhaXJ3aXNlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQYWlyd2lzZVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmhhc1ByZXYgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQYWlyd2lzZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYWlyO1xuICAgICAgICBpZiAodGhpcy5oYXNQcmV2KSB7XG4gICAgICAgICAgICBwYWlyID0gW3RoaXMucHJldiwgdmFsdWVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oYXNQcmV2ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXYgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHBhaXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChwYWlyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFBhaXJ3aXNlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFpcndpc2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX25vdCxfZmlsdGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG5vdCB9IGZyb20gJy4uL3V0aWwvbm90JztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJy4vZmlsdGVyJztcbmV4cG9ydCBmdW5jdGlvbiBwYXJ0aXRpb24ocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpKHNvdXJjZSksXG4gICAgICAgICAgICBmaWx0ZXIobm90KHByZWRpY2F0ZSwgdGhpc0FyZykpKHNvdXJjZSlcbiAgICAgICAgXTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydGl0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfbWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmV4cG9ydCBmdW5jdGlvbiBwbHVjaygpIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHByb3BlcnRpZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IHByb3BlcnRpZXMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsaXN0IG9mIHByb3BlcnRpZXMgY2Fubm90IGJlIGVtcHR5LicpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gbWFwKHBsdWNrZXIocHJvcGVydGllcywgbGVuZ3RoKSkoc291cmNlKTsgfTtcbn1cbmZ1bmN0aW9uIHBsdWNrZXIocHJvcHMsIGxlbmd0aCkge1xuICAgIHZhciBtYXBwZXIgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgY3VycmVudFByb3AgPSB4O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcCA9IGN1cnJlbnRQcm9wW3Byb3BzW2ldXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJvcCA9IHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyZW50UHJvcDtcbiAgICB9O1xuICAgIHJldHVybiBtYXBwZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVjay5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1N1YmplY3QsX211bHRpY2FzdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi4vU3ViamVjdCc7XG5pbXBvcnQgeyBtdWx0aWNhc3QgfSBmcm9tICcuL211bHRpY2FzdCc7XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaChzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3RvciA/XG4gICAgICAgIG11bHRpY2FzdChmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgU3ViamVjdCgpOyB9LCBzZWxlY3RvcikgOlxuICAgICAgICBtdWx0aWNhc3QobmV3IFN1YmplY3QoKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfQmVoYXZpb3JTdWJqZWN0LF9tdWx0aWNhc3QgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAnLi4vQmVoYXZpb3JTdWJqZWN0JztcbmltcG9ydCB7IG11bHRpY2FzdCB9IGZyb20gJy4vbXVsdGljYXN0JztcbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoQmVoYXZpb3IodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gbXVsdGljYXN0KG5ldyBCZWhhdmlvclN1YmplY3QodmFsdWUpKShzb3VyY2UpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaEJlaGF2aW9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfQXN5bmNTdWJqZWN0LF9tdWx0aWNhc3QgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgQXN5bmNTdWJqZWN0IH0gZnJvbSAnLi4vQXN5bmNTdWJqZWN0JztcbmltcG9ydCB7IG11bHRpY2FzdCB9IGZyb20gJy4vbXVsdGljYXN0JztcbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoTGFzdCgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gbXVsdGljYXN0KG5ldyBBc3luY1N1YmplY3QoKSkoc291cmNlKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hMYXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfUmVwbGF5U3ViamVjdCxfbXVsdGljYXN0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICcuLi9SZXBsYXlTdWJqZWN0JztcbmltcG9ydCB7IG11bHRpY2FzdCB9IGZyb20gJy4vbXVsdGljYXN0JztcbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoUmVwbGF5KGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNlbGVjdG9yT3JTY2hlZHVsZXIsIHNjaGVkdWxlcikge1xuICAgIGlmIChzZWxlY3Rvck9yU2NoZWR1bGVyICYmIHR5cGVvZiBzZWxlY3Rvck9yU2NoZWR1bGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IHNlbGVjdG9yT3JTY2hlZHVsZXI7XG4gICAgfVxuICAgIHZhciBzZWxlY3RvciA9IHR5cGVvZiBzZWxlY3Rvck9yU2NoZWR1bGVyID09PSAnZnVuY3Rpb24nID8gc2VsZWN0b3JPclNjaGVkdWxlciA6IHVuZGVmaW5lZDtcbiAgICB2YXIgc3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0KGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNjaGVkdWxlcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIG11bHRpY2FzdChmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJqZWN0OyB9LCBzZWxlY3Rvcikoc291cmNlKTsgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hSZXBsYXkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX2lzQXJyYXksX29ic2VydmFibGVfcmFjZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IHJhY2UgYXMgcmFjZVN0YXRpYyB9IGZyb20gJy4uL29ic2VydmFibGUvcmFjZSc7XG5leHBvcnQgZnVuY3Rpb24gcmFjZSgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcmFjZU9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShvYnNlcnZhYmxlc1swXSkpIHtcbiAgICAgICAgICAgIG9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXNbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0LmNhbGwocmFjZVN0YXRpYy5hcHBseSh2b2lkIDAsIFtzb3VyY2VdLmNvbmNhdChvYnNlcnZhYmxlcykpKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFjZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX29ic2VydmFibGVfZW1wdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9lbXB0eSc7XG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgY291bnQgPSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb3VudCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgUmVwZWF0T3BlcmF0b3IoLTEsIHNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBSZXBlYXRPcGVyYXRvcihjb3VudCAtIDEsIHNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbnZhciBSZXBlYXRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXBlYXRPcGVyYXRvcihjb3VudCwgc291cmNlKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIFJlcGVhdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgUmVwZWF0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNvdW50LCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlcGVhdE9wZXJhdG9yO1xufSgpKTtcbnZhciBSZXBlYXRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJlcGVhdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVwZWF0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY291bnQsIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY291bnQgPSBjb3VudDtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlcGVhdFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBzb3VyY2UgPSBfYS5zb3VyY2UsIGNvdW50ID0gX2EuY291bnQ7XG4gICAgICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY291bnQgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgPSBjb3VudCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKHRoaXMuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSgpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJlcGVhdFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0V2hlbihub3RpZmllcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgUmVwZWF0V2hlbk9wZXJhdG9yKG5vdGlmaWVyKSk7IH07XG59XG52YXIgUmVwZWF0V2hlbk9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlcGVhdFdoZW5PcGVyYXRvcihub3RpZmllcikge1xuICAgICAgICB0aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgfVxuICAgIFJlcGVhdFdoZW5PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFJlcGVhdFdoZW5TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMubm90aWZpZXIsIHNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlcGVhdFdoZW5PcGVyYXRvcjtcbn0oKSk7XG52YXIgUmVwZWF0V2hlblN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUmVwZWF0V2hlblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVwZWF0V2hlblN1YnNjcmliZXIoZGVzdGluYXRpb24sIG5vdGlmaWVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMuc291cmNlSXNCZWluZ1N1YnNjcmliZWRUbyA9IHRydWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVwZWF0V2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VJc0JlaW5nU3Vic2NyaWJlZFRvID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHRoaXMpO1xuICAgIH07XG4gICAgUmVwZWF0V2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIGlmICh0aGlzLnNvdXJjZUlzQmVpbmdTdWJzY3JpYmVkVG8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXBlYXRXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc291cmNlSXNCZWluZ1N1YnNjcmliZWRUbyA9IGZhbHNlO1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmV0cmllcykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlVG9SZXRyaWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiB8fCB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSgpO1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLm5leHQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVwZWF0V2hlblN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgbm90aWZpY2F0aW9ucyA9IF9hLm5vdGlmaWNhdGlvbnMsIHJldHJpZXNTdWJzY3JpcHRpb24gPSBfYS5yZXRyaWVzU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAobm90aWZpY2F0aW9ucykge1xuICAgICAgICAgICAgbm90aWZpY2F0aW9ucy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0cmllc1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0cmllc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJldHJpZXMgPSBudWxsO1xuICAgIH07XG4gICAgUmVwZWF0V2hlblN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZUFuZFJlY3ljbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdW5zdWJzY3JpYmUgPSB0aGlzLl91bnN1YnNjcmliZTtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl91bnN1YnNjcmliZUFuZFJlY3ljbGUuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSBfdW5zdWJzY3JpYmU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgUmVwZWF0V2hlblN1YnNjcmliZXIucHJvdG90eXBlLnN1YnNjcmliZVRvUmV0cmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgdmFyIHJldHJpZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbm90aWZpZXIgPSB0aGlzLm5vdGlmaWVyO1xuICAgICAgICAgICAgcmV0cmllcyA9IG5vdGlmaWVyKHRoaXMubm90aWZpY2F0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXRyaWVzID0gcmV0cmllcztcbiAgICAgICAgdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgcmV0cmllcyk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVwZWF0V2hlblN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwZWF0V2hlbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiByZXRyeShjb3VudCkge1xuICAgIGlmIChjb3VudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvdW50ID0gLTE7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgUmV0cnlPcGVyYXRvcihjb3VudCwgc291cmNlKSk7IH07XG59XG52YXIgUmV0cnlPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXRyeU9wZXJhdG9yKGNvdW50LCBzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgUmV0cnlPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFJldHJ5U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNvdW50LCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJldHJ5T3BlcmF0b3I7XG59KCkpO1xudmFyIFJldHJ5U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZXRyeVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmV0cnlTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb3VudCwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmV0cnlTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgc291cmNlID0gX2Euc291cmNlLCBjb3VudCA9IF9hLmNvdW50O1xuICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY291bnQgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgPSBjb3VudCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKHRoaXMuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSgpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJldHJ5U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0cnkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJqZWN0LF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHJldHJ5V2hlbihub3RpZmllcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgUmV0cnlXaGVuT3BlcmF0b3Iobm90aWZpZXIsIHNvdXJjZSkpOyB9O1xufVxudmFyIFJldHJ5V2hlbk9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJldHJ5V2hlbk9wZXJhdG9yKG5vdGlmaWVyLCBzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgUmV0cnlXaGVuT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBSZXRyeVdoZW5TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMubm90aWZpZXIsIHRoaXMuc291cmNlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmV0cnlXaGVuT3BlcmF0b3I7XG59KCkpO1xudmFyIFJldHJ5V2hlblN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUmV0cnlXaGVuU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXRyeVdoZW5TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBub3RpZmllciwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmV0cnlXaGVuU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBlcnJvcnMgPSB0aGlzLmVycm9ycztcbiAgICAgICAgICAgIHZhciByZXRyaWVzID0gdGhpcy5yZXRyaWVzO1xuICAgICAgICAgICAgdmFyIHJldHJpZXNTdWJzY3JpcHRpb24gPSB0aGlzLnJldHJpZXNTdWJzY3JpcHRpb247XG4gICAgICAgICAgICBpZiAoIXJldHJpZXMpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSBuZXcgU3ViamVjdCgpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub3RpZmllciA9IHRoaXMubm90aWZpZXI7XG4gICAgICAgICAgICAgICAgICAgIHJldHJpZXMgPSBub3RpZmllcihlcnJvcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5lcnJvci5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXRyaWVzU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgcmV0cmllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSgpO1xuICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgICAgICB0aGlzLnJldHJpZXMgPSByZXRyaWVzO1xuICAgICAgICAgICAgdGhpcy5yZXRyaWVzU3Vic2NyaXB0aW9uID0gcmV0cmllc1N1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIGVycm9ycy5uZXh0KGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJldHJ5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgZXJyb3JzID0gX2EuZXJyb3JzLCByZXRyaWVzU3Vic2NyaXB0aW9uID0gX2EucmV0cmllc1N1YnNjcmlwdGlvbjtcbiAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgZXJyb3JzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldHJpZXNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHJpZXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMucmV0cmllc1N1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXRyaWVzID0gbnVsbDtcbiAgICB9O1xuICAgIFJldHJ5V2hlblN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIF91bnN1YnNjcmliZSA9IHRoaXMuX3Vuc3Vic2NyaWJlO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSgpO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSA9IF91bnN1YnNjcmliZTtcbiAgICAgICAgdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIFJldHJ5V2hlblN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0cnlXaGVuLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBzYW1wbGUobm90aWZpZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNhbXBsZU9wZXJhdG9yKG5vdGlmaWVyKSk7IH07XG59XG52YXIgU2FtcGxlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2FtcGxlT3BlcmF0b3Iobm90aWZpZXIpIHtcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgIH1cbiAgICBTYW1wbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIHNhbXBsZVN1YnNjcmliZXIgPSBuZXcgU2FtcGxlU3Vic2NyaWJlcihzdWJzY3JpYmVyKTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUoc2FtcGxlU3Vic2NyaWJlcik7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5hZGQoc3Vic2NyaWJlVG9SZXN1bHQoc2FtcGxlU3Vic2NyaWJlciwgdGhpcy5ub3RpZmllcikpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIFNhbXBsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBTYW1wbGVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNhbXBsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FtcGxlU3Vic2NyaWJlcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2FtcGxlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNhbXBsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWUoKTtcbiAgICB9O1xuICAgIFNhbXBsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuICAgIH07XG4gICAgU2FtcGxlU3Vic2NyaWJlci5wcm90b3R5cGUuZW1pdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2FtcGxlU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW1wbGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyLF9zY2hlZHVsZXJfYXN5bmMgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmV4cG9ydCBmdW5jdGlvbiBzYW1wbGVUaW1lKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNhbXBsZVRpbWVPcGVyYXRvcihwZXJpb2QsIHNjaGVkdWxlcikpOyB9O1xufVxudmFyIFNhbXBsZVRpbWVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTYW1wbGVUaW1lT3BlcmF0b3IocGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy5wZXJpb2QgPSBwZXJpb2Q7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBTYW1wbGVUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTYW1wbGVUaW1lU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnBlcmlvZCwgdGhpcy5zY2hlZHVsZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBTYW1wbGVUaW1lT3BlcmF0b3I7XG59KCkpO1xudmFyIFNhbXBsZVRpbWVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNhbXBsZVRpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhbXBsZVRpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGVyaW9kID0gcGVyaW9kO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2hOb3RpZmljYXRpb24sIHBlcmlvZCwgeyBzdWJzY3JpYmVyOiBfdGhpcywgcGVyaW9kOiBwZXJpb2QgfSkpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNhbXBsZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNhbXBsZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMubGFzdFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNhbXBsZVRpbWVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5mdW5jdGlvbiBkaXNwYXRjaE5vdGlmaWNhdGlvbihzdGF0ZSkge1xuICAgIHZhciBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgcGVyaW9kID0gc3RhdGUucGVyaW9kO1xuICAgIHN1YnNjcmliZXIubm90aWZ5TmV4dCgpO1xuICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUsIHBlcmlvZCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW1wbGVUaW1lLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbmNlRXF1YWwoY29tcGFyZVRvLCBjb21wYXJhdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTZXF1ZW5jZUVxdWFsT3BlcmF0b3IoY29tcGFyZVRvLCBjb21wYXJhdG9yKSk7IH07XG59XG52YXIgU2VxdWVuY2VFcXVhbE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcXVlbmNlRXF1YWxPcGVyYXRvcihjb21wYXJlVG8sIGNvbXBhcmF0b3IpIHtcbiAgICAgICAgdGhpcy5jb21wYXJlVG8gPSBjb21wYXJlVG87XG4gICAgICAgIHRoaXMuY29tcGFyYXRvciA9IGNvbXBhcmF0b3I7XG4gICAgfVxuICAgIFNlcXVlbmNlRXF1YWxPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY29tcGFyZVRvLCB0aGlzLmNvbXBhcmF0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBTZXF1ZW5jZUVxdWFsT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgU2VxdWVuY2VFcXVhbE9wZXJhdG9yIH07XG52YXIgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbXBhcmVUbywgY29tcGFyYXRvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29tcGFyZVRvID0gY29tcGFyZVRvO1xuICAgICAgICBfdGhpcy5jb21wYXJhdG9yID0gY29tcGFyYXRvcjtcbiAgICAgICAgX3RoaXMuX2EgPSBbXTtcbiAgICAgICAgX3RoaXMuX2IgPSBbXTtcbiAgICAgICAgX3RoaXMuX29uZUNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uLmFkZChjb21wYXJlVG8uc3Vic2NyaWJlKG5ldyBTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgX3RoaXMpKSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9vbmVDb21wbGV0ZSAmJiB0aGlzLl9iLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2EucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrVmFsdWVzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9vbmVDb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KHRoaXMuX2EubGVuZ3RoID09PSAwICYmIHRoaXMuX2IubGVuZ3RoID09PSAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX29uZUNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlci5wcm90b3R5cGUuY2hlY2tWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYyA9IHRoaXMsIF9hID0gX2MuX2EsIF9iID0gX2MuX2IsIGNvbXBhcmF0b3IgPSBfYy5jb21wYXJhdG9yO1xuICAgICAgICB3aGlsZSAoX2EubGVuZ3RoID4gMCAmJiBfYi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgYSA9IF9hLnNoaWZ0KCk7XG4gICAgICAgICAgICB2YXIgYiA9IF9iLnNoaWZ0KCk7XG4gICAgICAgICAgICB2YXIgYXJlRXF1YWwgPSBmYWxzZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXJlRXF1YWwgPSBjb21wYXJhdG9yID8gY29tcGFyYXRvcihhLCBiKSA6IGEgPT09IGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFyZUVxdWFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBTZXF1ZW5jZUVxdWFsU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dEIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX29uZUNvbXBsZXRlICYmIHRoaXMuX2EubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYi5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tWYWx1ZXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VxdWVuY2VFcXVhbFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlQiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX29uZUNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQodGhpcy5fYS5sZW5ndGggPT09IDAgJiYgdGhpcy5fYi5sZW5ndGggPT09IDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fb25lQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2VxdWVuY2VFcXVhbFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyIH07XG52YXIgU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2VxdWVuY2VFcXVhbENvbXBhcmVUb1N1YnNjcmliZXIoZGVzdGluYXRpb24sIHBhcmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnBhcmVudC5uZXh0Qih2YWx1ZSk7XG4gICAgfTtcbiAgICBTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLnBhcmVudC5lcnJvcihlcnIpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTZXF1ZW5jZUVxdWFsQ29tcGFyZVRvU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBhcmVudC5jb21wbGV0ZUIoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFNlcXVlbmNlRXF1YWxDb21wYXJlVG9TdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXF1ZW5jZUVxdWFsLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfbXVsdGljYXN0LF9yZWZDb3VudCxfU3ViamVjdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBtdWx0aWNhc3QgfSBmcm9tICcuL211bHRpY2FzdCc7XG5pbXBvcnQgeyByZWZDb3VudCB9IGZyb20gJy4vcmVmQ291bnQnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuZnVuY3Rpb24gc2hhcmVTdWJqZWN0RmFjdG9yeSgpIHtcbiAgICByZXR1cm4gbmV3IFN1YmplY3QoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzaGFyZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gcmVmQ291bnQoKShtdWx0aWNhc3Qoc2hhcmVTdWJqZWN0RmFjdG9yeSkoc291cmNlKSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1JlcGxheVN1YmplY3QgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCB9IGZyb20gJy4uL1JlcGxheVN1YmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHNoYXJlUmVwbGF5KGNvbmZpZ09yQnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2NoZWR1bGVyKSB7XG4gICAgdmFyIGNvbmZpZztcbiAgICBpZiAoY29uZmlnT3JCdWZmZXJTaXplICYmIHR5cGVvZiBjb25maWdPckJ1ZmZlclNpemUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbmZpZyA9IGNvbmZpZ09yQnVmZmVyU2l6ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgICAgIGJ1ZmZlclNpemU6IGNvbmZpZ09yQnVmZmVyU2l6ZSxcbiAgICAgICAgICAgIHdpbmRvd1RpbWU6IHdpbmRvd1RpbWUsXG4gICAgICAgICAgICByZWZDb3VudDogZmFsc2UsXG4gICAgICAgICAgICBzY2hlZHVsZXI6IHNjaGVkdWxlclxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQoc2hhcmVSZXBsYXlPcGVyYXRvcihjb25maWcpKTsgfTtcbn1cbmZ1bmN0aW9uIHNoYXJlUmVwbGF5T3BlcmF0b3IoX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5idWZmZXJTaXplLCBidWZmZXJTaXplID0gX2IgPT09IHZvaWQgMCA/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA6IF9iLCBfYyA9IF9hLndpbmRvd1RpbWUsIHdpbmRvd1RpbWUgPSBfYyA9PT0gdm9pZCAwID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogX2MsIHVzZVJlZkNvdW50ID0gX2EucmVmQ291bnQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICB2YXIgc3ViamVjdDtcbiAgICB2YXIgcmVmQ291bnQgPSAwO1xuICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgdmFyIGhhc0Vycm9yID0gZmFsc2U7XG4gICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gc2hhcmVSZXBsYXlPcGVyYXRpb24oc291cmNlKSB7XG4gICAgICAgIHJlZkNvdW50Kys7XG4gICAgICAgIGlmICghc3ViamVjdCB8fCBoYXNFcnJvcikge1xuICAgICAgICAgICAgaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIHN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdChidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IHN1YmplY3QubmV4dCh2YWx1ZSk7IH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbm5lclN1YiA9IHN1YmplY3Quc3Vic2NyaWJlKHRoaXMpO1xuICAgICAgICB0aGlzLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZWZDb3VudC0tO1xuICAgICAgICAgICAgaW5uZXJTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24gJiYgIWlzQ29tcGxldGUgJiYgdXNlUmVmQ291bnQgJiYgcmVmQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgc3ViamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlUmVwbGF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfdXRpbF9FbXB0eUVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBFbXB0eUVycm9yIH0gZnJvbSAnLi4vdXRpbC9FbXB0eUVycm9yJztcbmV4cG9ydCBmdW5jdGlvbiBzaW5nbGUocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTaW5nbGVPcGVyYXRvcihwcmVkaWNhdGUsIHNvdXJjZSkpOyB9O1xufVxudmFyIFNpbmdsZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNpbmdsZU9wZXJhdG9yKHByZWRpY2F0ZSwgc291cmNlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgU2luZ2xlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTaW5nbGVTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnNvdXJjZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFNpbmdsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBTaW5nbGVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNpbmdsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2luZ2xlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJlZGljYXRlLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5zZWVuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNpbmdsZVN1YnNjcmliZXIucHJvdG90eXBlLmFwcGx5U2luZ2xlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VlblZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKCdTZXF1ZW5jZSBjb250YWlucyBtb3JlIHRoYW4gb25lIGVsZW1lbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VlblZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc2luZ2xlVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2luZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICBpZiAodGhpcy5wcmVkaWNhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudHJ5TmV4dCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hcHBseVNpbmdsZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2luZ2xlU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIHRoaXMuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaW5nbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmICh0aGlzLmluZGV4ID4gMCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh0aGlzLnNlZW5WYWx1ZSA/IHRoaXMuc2luZ2xlVmFsdWUgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKG5ldyBFbXB0eUVycm9yKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNpbmdsZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbmdsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBza2lwKGNvdW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTa2lwT3BlcmF0b3IoY291bnQpKTsgfTtcbn1cbnZhciBTa2lwT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpcE9wZXJhdG9yKHRvdGFsKSB7XG4gICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcbiAgICB9XG4gICAgU2tpcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU2tpcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy50b3RhbCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFNraXBPcGVyYXRvcjtcbn0oKSk7XG52YXIgU2tpcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2tpcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2tpcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHRvdGFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2tpcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKCsrdGhpcy5jb3VudCA+IHRoaXMudG90YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfdXRpbF9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgfSBmcm9tICcuLi91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yJztcbmV4cG9ydCBmdW5jdGlvbiBza2lwTGFzdChjb3VudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU2tpcExhc3RPcGVyYXRvcihjb3VudCkpOyB9O1xufVxudmFyIFNraXBMYXN0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpcExhc3RPcGVyYXRvcihfc2tpcENvdW50KSB7XG4gICAgICAgIHRoaXMuX3NraXBDb3VudCA9IF9za2lwQ291bnQ7XG4gICAgICAgIGlmICh0aGlzLl9za2lwQ291bnQgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgU2tpcExhc3RPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NraXBDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFNraXBMYXN0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLl9za2lwQ291bnQpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBMYXN0T3BlcmF0b3I7XG59KCkpO1xudmFyIFNraXBMYXN0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTa2lwTGFzdFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2tpcExhc3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBfc2tpcENvdW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fc2tpcENvdW50ID0gX3NraXBDb3VudDtcbiAgICAgICAgX3RoaXMuX2NvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuX3JpbmcgPSBuZXcgQXJyYXkoX3NraXBDb3VudCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2tpcExhc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgc2tpcENvdW50ID0gdGhpcy5fc2tpcENvdW50O1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzLl9jb3VudCsrO1xuICAgICAgICBpZiAoY291bnQgPCBza2lwQ291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JpbmdbY291bnRdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gY291bnQgJSBza2lwQ291bnQ7XG4gICAgICAgICAgICB2YXIgcmluZyA9IHRoaXMuX3Jpbmc7XG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSByaW5nW2N1cnJlbnRJbmRleF07XG4gICAgICAgICAgICByaW5nW2N1cnJlbnRJbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTa2lwTGFzdFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXBMYXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF9Jbm5lclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBJbm5lclN1YnNjcmliZXIgfSBmcm9tICcuLi9Jbm5lclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiBza2lwVW50aWwobm90aWZpZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFNraXBVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSk7IH07XG59XG52YXIgU2tpcFVudGlsT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpcFVudGlsT3BlcmF0b3Iobm90aWZpZXIpIHtcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IG5vdGlmaWVyO1xuICAgIH1cbiAgICBTa2lwVW50aWxPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTa2lwVW50aWxTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB0aGlzLm5vdGlmaWVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2tpcFVudGlsT3BlcmF0b3I7XG59KCkpO1xudmFyIFNraXBVbnRpbFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2tpcFVudGlsU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTa2lwVW50aWxTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBub3RpZmllcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBJbm5lclN1YnNjcmliZXIoX3RoaXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgX3RoaXMuYWRkKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgIF90aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gaW5uZXJTdWJzY3JpYmVyO1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgbm90aWZpZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24gIT09IGlubmVyU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgX3RoaXMuYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIF90aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gaW5uZXJTdWJzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTa2lwVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZSkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fbmV4dC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2tpcFVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaW5uZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuaW5uZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2tpcFVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gU2tpcFVudGlsU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwVW50aWwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gc2tpcFdoaWxlKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgU2tpcFdoaWxlT3BlcmF0b3IocHJlZGljYXRlKSk7IH07XG59XG52YXIgU2tpcFdoaWxlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpcFdoaWxlT3BlcmF0b3IocHJlZGljYXRlKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgIH1cbiAgICBTa2lwV2hpbGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFNraXBXaGlsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcmVkaWNhdGUpKTtcbiAgICB9O1xuICAgIHJldHVybiBTa2lwV2hpbGVPcGVyYXRvcjtcbn0oKSk7XG52YXIgU2tpcFdoaWxlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTa2lwV2hpbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNraXBXaGlsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy5za2lwcGluZyA9IHRydWU7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTa2lwV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAodGhpcy5za2lwcGluZykge1xuICAgICAgICAgICAgdGhpcy50cnlDYWxsUHJlZGljYXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuc2tpcHBpbmcpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTa2lwV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS50cnlDYWxsUHJlZGljYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUodmFsdWUsIHRoaXMuaW5kZXgrKyk7XG4gICAgICAgICAgICB0aGlzLnNraXBwaW5nID0gQm9vbGVhbihyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNraXBXaGlsZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXBXaGlsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX29ic2VydmFibGVfY29uY2F0LF91dGlsX2lzU2NoZWR1bGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNvbmNhdCB9IGZyb20gJy4uL29ic2VydmFibGUvY29uY2F0JztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5leHBvcnQgZnVuY3Rpb24gc3RhcnRXaXRoKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFycmF5W19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICBpZiAoaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuICAgICAgICBhcnJheS5wb3AoKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIGNvbmNhdChhcnJheSwgc291cmNlLCBzY2hlZHVsZXIpOyB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIGNvbmNhdChhcnJheSwgc291cmNlKTsgfTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGFydFdpdGguanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PYnNlcnZhYmxlLF9zY2hlZHVsZXJfYXNhcCxfdXRpbF9pc051bWVyaWMgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGFzYXAgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXNhcCc7XG5pbXBvcnQgeyBpc051bWVyaWMgfSBmcm9tICcuLi91dGlsL2lzTnVtZXJpYyc7XG52YXIgU3Vic2NyaWJlT25PYnNlcnZhYmxlID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YnNjcmliZU9uT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVPbk9ic2VydmFibGUoc291cmNlLCBkZWxheVRpbWUsIHNjaGVkdWxlcikge1xuICAgICAgICBpZiAoZGVsYXlUaW1lID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5VGltZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSBhc2FwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMuZGVsYXlUaW1lID0gZGVsYXlUaW1lO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGRlbGF5VGltZSkgfHwgZGVsYXlUaW1lIDwgMCkge1xuICAgICAgICAgICAgX3RoaXMuZGVsYXlUaW1lID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNjaGVkdWxlciB8fCB0eXBlb2Ygc2NoZWR1bGVyLnNjaGVkdWxlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBhc2FwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlT25PYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzb3VyY2UsIGRlbGF5LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IGFzYXA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVPbk9ic2VydmFibGUoc291cmNlLCBkZWxheSwgc2NoZWR1bGVyKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZU9uT2JzZXJ2YWJsZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZy5zb3VyY2UsIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlT25PYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGRlbGF5ID0gdGhpcy5kZWxheVRpbWU7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKFN1YnNjcmliZU9uT2JzZXJ2YWJsZS5kaXNwYXRjaCwgZGVsYXksIHtcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlLCBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZU9uT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgU3Vic2NyaWJlT25PYnNlcnZhYmxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVPbk9ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vYnNlcnZhYmxlX1N1YnNjcmliZU9uT2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBTdWJzY3JpYmVPbk9ic2VydmFibGUgfSBmcm9tICcuLi9vYnNlcnZhYmxlL1N1YnNjcmliZU9uT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRlbGF5ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHN1YnNjcmliZU9uT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTdWJzY3JpYmVPbk9wZXJhdG9yKHNjaGVkdWxlciwgZGVsYXkpKTtcbiAgICB9O1xufVxudmFyIFN1YnNjcmliZU9uT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlT25PcGVyYXRvcihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgfVxuICAgIFN1YnNjcmliZU9uT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlT25PYnNlcnZhYmxlKHNvdXJjZSwgdGhpcy5kZWxheSwgdGhpcy5zY2hlZHVsZXIpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVPbk9wZXJhdG9yO1xufSgpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF9Jbm5lclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQsX21hcCxfb2JzZXJ2YWJsZV9mcm9tIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgSW5uZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vSW5uZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBzd2l0Y2hNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UucGlwZShzd2l0Y2hNYXAoZnVuY3Rpb24gKGEsIGkpIHsgcmV0dXJuIGZyb20ocHJvamVjdChhLCBpKSkucGlwZShtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKTsgfSkpOyB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFN3aXRjaE1hcE9wZXJhdG9yKHByb2plY3QpKTsgfTtcbn1cbnZhciBTd2l0Y2hNYXBPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTd2l0Y2hNYXBPcGVyYXRvcihwcm9qZWN0KSB7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgfVxuICAgIFN3aXRjaE1hcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgU3dpdGNoTWFwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByb2plY3QpKTtcbiAgICB9O1xuICAgIHJldHVybiBTd2l0Y2hNYXBPcGVyYXRvcjtcbn0oKSk7XG52YXIgU3dpdGNoTWFwU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTd2l0Y2hNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN3aXRjaE1hcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByb2plY3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0KHZhbHVlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbm5lclN1YihyZXN1bHQsIHZhbHVlLCBpbmRleCk7XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5faW5uZXJTdWIgPSBmdW5jdGlvbiAocmVzdWx0LCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gdGhpcy5pbm5lclN1YnNjcmlwdGlvbjtcbiAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpbm5lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgSW5uZXJTdWJzY3JpYmVyKHRoaXMsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICB0aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgcmVzdWx0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHRoaXMuaW5uZXJTdWJzY3JpcHRpb24gIT09IGlubmVyU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKHRoaXMuaW5uZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHRoaXMuaW5uZXJTdWJzY3JpcHRpb247XG4gICAgICAgIGlmICghaW5uZXJTdWJzY3JpcHRpb24gfHwgaW5uZXJTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBTd2l0Y2hNYXBTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaE1hcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3N3aXRjaE1hcCxfdXRpbF9pZGVudGl0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICcuL3N3aXRjaE1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaEFsbCgpIHtcbiAgICByZXR1cm4gc3dpdGNoTWFwKGlkZW50aXR5KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaEFsbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3N3aXRjaE1hcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICcuL3N3aXRjaE1hcCc7XG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoTWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiByZXN1bHRTZWxlY3RvciA/IHN3aXRjaE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIHJlc3VsdFNlbGVjdG9yKSA6IHN3aXRjaE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwVG8uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VVbnRpbChub3RpZmllcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgVGFrZVVudGlsT3BlcmF0b3Iobm90aWZpZXIpKTsgfTtcbn1cbnZhciBUYWtlVW50aWxPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWtlVW50aWxPcGVyYXRvcihub3RpZmllcikge1xuICAgICAgICB0aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgfVxuICAgIFRha2VVbnRpbE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgdGFrZVVudGlsU3Vic2NyaWJlciA9IG5ldyBUYWtlVW50aWxTdWJzY3JpYmVyKHN1YnNjcmliZXIpO1xuICAgICAgICB2YXIgbm90aWZpZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0YWtlVW50aWxTdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyKTtcbiAgICAgICAgaWYgKG5vdGlmaWVyU3Vic2NyaXB0aW9uICYmICF0YWtlVW50aWxTdWJzY3JpYmVyLnNlZW5WYWx1ZSkge1xuICAgICAgICAgICAgdGFrZVVudGlsU3Vic2NyaWJlci5hZGQobm90aWZpZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUodGFrZVVudGlsU3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRha2VVbnRpbFN1YnNjcmliZXI7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVVudGlsT3BlcmF0b3I7XG59KCkpO1xudmFyIFRha2VVbnRpbFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGFrZVVudGlsU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWtlVW50aWxTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zZWVuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYWtlVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuc2VlblZhbHVlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgVGFrZVVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVVudGlsU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlVW50aWwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gdGFrZVdoaWxlKHByZWRpY2F0ZSwgaW5jbHVzaXZlKSB7XG4gICAgaWYgKGluY2x1c2l2ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGluY2x1c2l2ZSA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFRha2VXaGlsZU9wZXJhdG9yKHByZWRpY2F0ZSwgaW5jbHVzaXZlKSk7XG4gICAgfTtcbn1cbnZhciBUYWtlV2hpbGVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWtlV2hpbGVPcGVyYXRvcihwcmVkaWNhdGUsIGluY2x1c2l2ZSkge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy5pbmNsdXNpdmUgPSBpbmNsdXNpdmU7XG4gICAgfVxuICAgIFRha2VXaGlsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgVGFrZVdoaWxlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy5pbmNsdXNpdmUpKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlV2hpbGVPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGFrZVdoaWxlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUYWtlV2hpbGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRha2VXaGlsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgaW5jbHVzaXZlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIF90aGlzLmluY2x1c2l2ZSA9IGluY2x1c2l2ZTtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRha2VXaGlsZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZSh2YWx1ZSwgdGhpcy5pbmRleCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmV4dE9yQ29tcGxldGUodmFsdWUsIHJlc3VsdCk7XG4gICAgfTtcbiAgICBUYWtlV2hpbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0T3JDb21wbGV0ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgcHJlZGljYXRlUmVzdWx0KSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChCb29sZWFuKHByZWRpY2F0ZVJlc3VsdCkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVdoaWxlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZVdoaWxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfdXRpbF9ub29wLF91dGlsX2lzRnVuY3Rpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gdGFwKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gdGFwT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEb09wZXJhdG9yKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpKTtcbiAgICB9O1xufVxudmFyIERvT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRG9PcGVyYXRvcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHRoaXMubmV4dE9yT2JzZXJ2ZXIgPSBuZXh0T3JPYnNlcnZlcjtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLmNvbXBsZXRlID0gY29tcGxldGU7XG4gICAgfVxuICAgIERvT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBUYXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMubmV4dE9yT2JzZXJ2ZXIsIHRoaXMuZXJyb3IsIHRoaXMuY29tcGxldGUpKTtcbiAgICB9O1xuICAgIHJldHVybiBEb09wZXJhdG9yO1xufSgpKTtcbnZhciBUYXBTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRhcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3RhcE5leHQgPSBub29wO1xuICAgICAgICBfdGhpcy5fdGFwRXJyb3IgPSBub29wO1xuICAgICAgICBfdGhpcy5fdGFwQ29tcGxldGUgPSBub29wO1xuICAgICAgICBfdGhpcy5fdGFwRXJyb3IgPSBlcnJvciB8fCBub29wO1xuICAgICAgICBfdGhpcy5fdGFwQ29tcGxldGUgPSBjb21wbGV0ZSB8fCBub29wO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkpIHtcbiAgICAgICAgICAgIF90aGlzLl9jb250ZXh0ID0gX3RoaXM7XG4gICAgICAgICAgICBfdGhpcy5fdGFwTmV4dCA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9ic2VydmVyT3JOZXh0KSB7XG4gICAgICAgICAgICBfdGhpcy5fY29udGV4dCA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgX3RoaXMuX3RhcE5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0IHx8IG5vb3A7XG4gICAgICAgICAgICBfdGhpcy5fdGFwRXJyb3IgPSBvYnNlcnZlck9yTmV4dC5lcnJvciB8fCBub29wO1xuICAgICAgICAgICAgX3RoaXMuX3RhcENvbXBsZXRlID0gb2JzZXJ2ZXJPck5leHQuY29tcGxldGUgfHwgbm9vcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRhcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl90YXBOZXh0LmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgVGFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fdGFwRXJyb3IuY2FsbCh0aGlzLl9jb250ZXh0LCBlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBUYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl90YXBDb21wbGV0ZS5jYWxsKHRoaXMuX2NvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFRhcFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgdmFyIGRlZmF1bHRUaHJvdHRsZUNvbmZpZyA9IHtcbiAgICBsZWFkaW5nOiB0cnVlLFxuICAgIHRyYWlsaW5nOiBmYWxzZVxufTtcbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZShkdXJhdGlvblNlbGVjdG9yLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgICAgY29uZmlnID0gZGVmYXVsdFRocm90dGxlQ29uZmlnO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFRocm90dGxlT3BlcmF0b3IoZHVyYXRpb25TZWxlY3RvciwgY29uZmlnLmxlYWRpbmcsIGNvbmZpZy50cmFpbGluZykpOyB9O1xufVxudmFyIFRocm90dGxlT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGhyb3R0bGVPcGVyYXRvcihkdXJhdGlvblNlbGVjdG9yLCBsZWFkaW5nLCB0cmFpbGluZykge1xuICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgICAgICB0aGlzLmxlYWRpbmcgPSBsZWFkaW5nO1xuICAgICAgICB0aGlzLnRyYWlsaW5nID0gdHJhaWxpbmc7XG4gICAgfVxuICAgIFRocm90dGxlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBUaHJvdHRsZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdXJhdGlvblNlbGVjdG9yLCB0aGlzLmxlYWRpbmcsIHRoaXMudHJhaWxpbmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBUaHJvdHRsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBUaHJvdHRsZVN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGhyb3R0bGVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRocm90dGxlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb25TZWxlY3RvciwgX2xlYWRpbmcsIF90cmFpbGluZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLl9sZWFkaW5nID0gX2xlYWRpbmc7XG4gICAgICAgIF90aGlzLl90cmFpbGluZyA9IF90cmFpbGluZztcbiAgICAgICAgX3RoaXMuX2hhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NlbmRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoIXRoaXMuX3Rocm90dGxlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xlYWRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudGhyb3R0bGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9oYXNWYWx1ZSA9IF9hLl9oYXNWYWx1ZSwgX3NlbmRWYWx1ZSA9IF9hLl9zZW5kVmFsdWU7XG4gICAgICAgIGlmIChfaGFzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChfc2VuZFZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMudGhyb3R0bGUoX3NlbmRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2VuZFZhbHVlID0gbnVsbDtcbiAgICB9O1xuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUudGhyb3R0bGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy50cnlEdXJhdGlvblNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgaWYgKCEhZHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMuX3Rocm90dGxlZCA9IHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIGR1cmF0aW9uKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5RHVyYXRpb25TZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHVyYXRpb25TZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUudGhyb3R0bGluZ0RvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF90aHJvdHRsZWQgPSBfYS5fdGhyb3R0bGVkLCBfdHJhaWxpbmcgPSBfYS5fdHJhaWxpbmc7XG4gICAgICAgIGlmIChfdGhyb3R0bGVkKSB7XG4gICAgICAgICAgICBfdGhyb3R0bGVkLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGhyb3R0bGVkID0gbnVsbDtcbiAgICAgICAgaWYgKF90cmFpbGluZykge1xuICAgICAgICAgICAgdGhpcy5zZW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLnRocm90dGxpbmdEb25lKCk7XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRocm90dGxpbmdEb25lKCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGhyb3R0bGVTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlcixfc2NoZWR1bGVyX2FzeW5jLF90aHJvdHRsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgZGVmYXVsdFRocm90dGxlQ29uZmlnIH0gZnJvbSAnLi90aHJvdHRsZSc7XG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGVUaW1lKGR1cmF0aW9uLCBzY2hlZHVsZXIsIGNvbmZpZykge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmZpZyA9IGRlZmF1bHRUaHJvdHRsZUNvbmZpZztcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUaHJvdHRsZVRpbWVPcGVyYXRvcihkdXJhdGlvbiwgc2NoZWR1bGVyLCBjb25maWcubGVhZGluZywgY29uZmlnLnRyYWlsaW5nKSk7IH07XG59XG52YXIgVGhyb3R0bGVUaW1lT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGhyb3R0bGVUaW1lT3BlcmF0b3IoZHVyYXRpb24sIHNjaGVkdWxlciwgbGVhZGluZywgdHJhaWxpbmcpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5sZWFkaW5nID0gbGVhZGluZztcbiAgICAgICAgdGhpcy50cmFpbGluZyA9IHRyYWlsaW5nO1xuICAgIH1cbiAgICBUaHJvdHRsZVRpbWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRocm90dGxlVGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdXJhdGlvbiwgdGhpcy5zY2hlZHVsZXIsIHRoaXMubGVhZGluZywgdGhpcy50cmFpbGluZykpO1xuICAgIH07XG4gICAgcmV0dXJuIFRocm90dGxlVGltZU9wZXJhdG9yO1xufSgpKTtcbnZhciBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRocm90dGxlVGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGhyb3R0bGVUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb24sIHNjaGVkdWxlciwgbGVhZGluZywgdHJhaWxpbmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMubGVhZGluZyA9IGxlYWRpbmc7XG4gICAgICAgIF90aGlzLnRyYWlsaW5nID0gdHJhaWxpbmc7XG4gICAgICAgIF90aGlzLl9oYXNUcmFpbGluZ1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl90cmFpbGluZ1ZhbHVlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy50aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWlsaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhaWxpbmdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy50aHJvdHRsZWQgPSB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIHRoaXMuZHVyYXRpb24sIHsgc3Vic2NyaWJlcjogdGhpcyB9KSk7XG4gICAgICAgICAgICBpZiAodGhpcy5sZWFkaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudHJhaWxpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFpbGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFzVHJhaWxpbmdWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh0aGlzLl90cmFpbGluZ1ZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGhyb3R0bGVUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuY2xlYXJUaHJvdHRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRocm90dGxlZCA9IHRoaXMudGhyb3R0bGVkO1xuICAgICAgICBpZiAodGhyb3R0bGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFpbGluZyAmJiB0aGlzLl9oYXNUcmFpbGluZ1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHRoaXMuX3RyYWlsaW5nVmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyYWlsaW5nVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm90dGxlZC51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUodGhyb3R0bGVkKTtcbiAgICAgICAgICAgIHRoaXMudGhyb3R0bGVkID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRocm90dGxlVGltZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoTmV4dChhcmcpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyO1xuICAgIHN1YnNjcmliZXIuY2xlYXJUaHJvdHRsZSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGVUaW1lLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc2NoZWR1bGVyX2FzeW5jLF9zY2FuLF9vYnNlcnZhYmxlX2RlZmVyLF9tYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgc2NhbiB9IGZyb20gJy4vc2Nhbic7XG5pbXBvcnQgeyBkZWZlciB9IGZyb20gJy4uL29ic2VydmFibGUvZGVmZXInO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVJbnRlcnZhbChzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBkZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLnBpcGUoc2NhbihmdW5jdGlvbiAoX2EsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBfYS5jdXJyZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiAoeyB2YWx1ZTogdmFsdWUsIGN1cnJlbnQ6IHNjaGVkdWxlci5ub3coKSwgbGFzdDogY3VycmVudCB9KTtcbiAgICAgICAgICAgIH0sIHsgY3VycmVudDogc2NoZWR1bGVyLm5vdygpLCB2YWx1ZTogdW5kZWZpbmVkLCBsYXN0OiB1bmRlZmluZWQgfSksIG1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IF9hLmN1cnJlbnQsIGxhc3QgPSBfYS5sYXN0LCB2YWx1ZSA9IF9hLnZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVGltZUludGVydmFsKHZhbHVlLCBjdXJyZW50IC0gbGFzdCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG52YXIgVGltZUludGVydmFsID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVJbnRlcnZhbCh2YWx1ZSwgaW50ZXJ2YWwpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmludGVydmFsID0gaW50ZXJ2YWw7XG4gICAgfVxuICAgIHJldHVybiBUaW1lSW50ZXJ2YWw7XG59KCkpO1xuZXhwb3J0IHsgVGltZUludGVydmFsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lSW50ZXJ2YWwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9zY2hlZHVsZXJfYXN5bmMsX3V0aWxfaXNEYXRlLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGlzRGF0ZSB9IGZyb20gJy4uL3V0aWwvaXNEYXRlJztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXRXaXRoKGR1ZSwgd2l0aE9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgdmFyIGFic29sdXRlVGltZW91dCA9IGlzRGF0ZShkdWUpO1xuICAgICAgICB2YXIgd2FpdEZvciA9IGFic29sdXRlVGltZW91dCA/ICgrZHVlIC0gc2NoZWR1bGVyLm5vdygpKSA6IE1hdGguYWJzKGR1ZSk7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgVGltZW91dFdpdGhPcGVyYXRvcih3YWl0Rm9yLCBhYnNvbHV0ZVRpbWVvdXQsIHdpdGhPYnNlcnZhYmxlLCBzY2hlZHVsZXIpKTtcbiAgICB9O1xufVxudmFyIFRpbWVvdXRXaXRoT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZW91dFdpdGhPcGVyYXRvcih3YWl0Rm9yLCBhYnNvbHV0ZVRpbWVvdXQsIHdpdGhPYnNlcnZhYmxlLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgdGhpcy53YWl0Rm9yID0gd2FpdEZvcjtcbiAgICAgICAgdGhpcy5hYnNvbHV0ZVRpbWVvdXQgPSBhYnNvbHV0ZVRpbWVvdXQ7XG4gICAgICAgIHRoaXMud2l0aE9ic2VydmFibGUgPSB3aXRoT2JzZXJ2YWJsZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIFRpbWVvdXRXaXRoT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBUaW1lb3V0V2l0aFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5hYnNvbHV0ZVRpbWVvdXQsIHRoaXMud2FpdEZvciwgdGhpcy53aXRoT2JzZXJ2YWJsZSwgdGhpcy5zY2hlZHVsZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBUaW1lb3V0V2l0aE9wZXJhdG9yO1xufSgpKTtcbnZhciBUaW1lb3V0V2l0aFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGltZW91dFdpdGhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRpbWVvdXRXaXRoU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYWJzb2x1dGVUaW1lb3V0LCB3YWl0Rm9yLCB3aXRoT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hYnNvbHV0ZVRpbWVvdXQgPSBhYnNvbHV0ZVRpbWVvdXQ7XG4gICAgICAgIF90aGlzLndhaXRGb3IgPSB3YWl0Rm9yO1xuICAgICAgICBfdGhpcy53aXRoT2JzZXJ2YWJsZSA9IHdpdGhPYnNlcnZhYmxlO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLmFjdGlvbiA9IG51bGw7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlVGltZW91dCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRpbWVvdXRXaXRoU3Vic2NyaWJlci5kaXNwYXRjaFRpbWVvdXQgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgd2l0aE9ic2VydmFibGUgPSBzdWJzY3JpYmVyLndpdGhPYnNlcnZhYmxlO1xuICAgICAgICBzdWJzY3JpYmVyLl91bnN1YnNjcmliZUFuZFJlY3ljbGUoKTtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc3Vic2NyaWJlVG9SZXN1bHQoc3Vic2NyaWJlciwgd2l0aE9ic2VydmFibGUpKTtcbiAgICB9O1xuICAgIFRpbWVvdXRXaXRoU3Vic2NyaWJlci5wcm90b3R5cGUuc2NoZWR1bGVUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gdGhpcy5hY3Rpb247XG4gICAgICAgIGlmIChhY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uLnNjaGVkdWxlKHRoaXMsIHRoaXMud2FpdEZvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZCh0aGlzLmFjdGlvbiA9IHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKFRpbWVvdXRXaXRoU3Vic2NyaWJlci5kaXNwYXRjaFRpbWVvdXQsIHRoaXMud2FpdEZvciwgdGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaW1lb3V0V2l0aFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5hYnNvbHV0ZVRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVUaW1lb3V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fbmV4dC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICB9O1xuICAgIFRpbWVvdXRXaXRoU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy53aXRoT2JzZXJ2YWJsZSA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZW91dFdpdGhTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXRXaXRoLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc2NoZWR1bGVyX2FzeW5jLF91dGlsX1RpbWVvdXRFcnJvcixfdGltZW91dFdpdGgsX29ic2VydmFibGVfdGhyb3dFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBUaW1lb3V0RXJyb3IgfSBmcm9tICcuLi91dGlsL1RpbWVvdXRFcnJvcic7XG5pbXBvcnQgeyB0aW1lb3V0V2l0aCB9IGZyb20gJy4vdGltZW91dFdpdGgnO1xuaW1wb3J0IHsgdGhyb3dFcnJvciB9IGZyb20gJy4uL29ic2VydmFibGUvdGhyb3dFcnJvcic7XG5leHBvcnQgZnVuY3Rpb24gdGltZW91dChkdWUsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgcmV0dXJuIHRpbWVvdXRXaXRoKGR1ZSwgdGhyb3dFcnJvcihuZXcgVGltZW91dEVycm9yKCkpLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3NjaGVkdWxlcl9hc3luYyxfbWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmV4cG9ydCBmdW5jdGlvbiB0aW1lc3RhbXAoc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gbWFwKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gbmV3IFRpbWVzdGFtcCh2YWx1ZSwgc2NoZWR1bGVyLm5vdygpKTsgfSk7XG59XG52YXIgVGltZXN0YW1wID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVzdGFtcCh2YWx1ZSwgdGltZXN0YW1wKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgfVxuICAgIHJldHVybiBUaW1lc3RhbXA7XG59KCkpO1xuZXhwb3J0IHsgVGltZXN0YW1wIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lc3RhbXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9yZWR1Y2UgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgcmVkdWNlIH0gZnJvbSAnLi9yZWR1Y2UnO1xuZnVuY3Rpb24gdG9BcnJheVJlZHVjZXIoYXJyLCBpdGVtLCBpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gW2l0ZW1dO1xuICAgIH1cbiAgICBhcnIucHVzaChpdGVtKTtcbiAgICByZXR1cm4gYXJyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIHJlZHVjZSh0b0FycmF5UmVkdWNlciwgW10pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9BcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gd2luZG93KHdpbmRvd0JvdW5kYXJpZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gd2luZG93T3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBXaW5kb3dPcGVyYXRvcih3aW5kb3dCb3VuZGFyaWVzKSk7XG4gICAgfTtcbn1cbnZhciBXaW5kb3dPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXaW5kb3dPcGVyYXRvcih3aW5kb3dCb3VuZGFyaWVzKSB7XG4gICAgICAgIHRoaXMud2luZG93Qm91bmRhcmllcyA9IHdpbmRvd0JvdW5kYXJpZXM7XG4gICAgfVxuICAgIFdpbmRvd09wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgd2luZG93U3Vic2NyaWJlciA9IG5ldyBXaW5kb3dTdWJzY3JpYmVyKHN1YnNjcmliZXIpO1xuICAgICAgICB2YXIgc291cmNlU3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZSh3aW5kb3dTdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKCFzb3VyY2VTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICB3aW5kb3dTdWJzY3JpYmVyLmFkZChzdWJzY3JpYmVUb1Jlc3VsdCh3aW5kb3dTdWJzY3JpYmVyLCB0aGlzLndpbmRvd0JvdW5kYXJpZXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlU3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd09wZXJhdG9yO1xufSgpKTtcbnZhciBXaW5kb3dTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFdpbmRvd1N1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93U3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMud2luZG93ID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dChfdGhpcy53aW5kb3cpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5vcGVuV2luZG93KCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5fZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMud2luZG93Lm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLndpbmRvdy5lcnJvcihlcnIpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMud2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy53aW5kb3cgPSBudWxsO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUub3BlbldpbmRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZXZXaW5kb3cgPSB0aGlzLndpbmRvdztcbiAgICAgICAgaWYgKHByZXZXaW5kb3cpIHtcbiAgICAgICAgICAgIHByZXZXaW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICB2YXIgbmV3V2luZG93ID0gdGhpcy53aW5kb3cgPSBuZXcgU3ViamVjdCgpO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KG5ld1dpbmRvdyk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93U3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3cuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyLF9TdWJqZWN0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi4vU3ViamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gd2luZG93Q291bnQod2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkge1xuICAgIGlmIChzdGFydFdpbmRvd0V2ZXJ5ID09PSB2b2lkIDApIHtcbiAgICAgICAgc3RhcnRXaW5kb3dFdmVyeSA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB3aW5kb3dDb3VudE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgV2luZG93Q291bnRPcGVyYXRvcih3aW5kb3dTaXplLCBzdGFydFdpbmRvd0V2ZXJ5KSk7XG4gICAgfTtcbn1cbnZhciBXaW5kb3dDb3VudE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpbmRvd0NvdW50T3BlcmF0b3Iod2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkge1xuICAgICAgICB0aGlzLndpbmRvd1NpemUgPSB3aW5kb3dTaXplO1xuICAgICAgICB0aGlzLnN0YXJ0V2luZG93RXZlcnkgPSBzdGFydFdpbmRvd0V2ZXJ5O1xuICAgIH1cbiAgICBXaW5kb3dDb3VudE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2luZG93Q291bnRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMud2luZG93U2l6ZSwgdGhpcy5zdGFydFdpbmRvd0V2ZXJ5KSk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93Q291bnRPcGVyYXRvcjtcbn0oKSk7XG52YXIgV2luZG93Q291bnRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFdpbmRvd0NvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBXaW5kb3dDb3VudFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHdpbmRvd1NpemUsIHN0YXJ0V2luZG93RXZlcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLndpbmRvd1NpemUgPSB3aW5kb3dTaXplO1xuICAgICAgICBfdGhpcy5zdGFydFdpbmRvd0V2ZXJ5ID0gc3RhcnRXaW5kb3dFdmVyeTtcbiAgICAgICAgX3RoaXMud2luZG93cyA9IFtuZXcgU3ViamVjdCgpXTtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KF90aGlzLndpbmRvd3NbMF0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFdpbmRvd0NvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHN0YXJ0V2luZG93RXZlcnkgPSAodGhpcy5zdGFydFdpbmRvd0V2ZXJ5ID4gMCkgPyB0aGlzLnN0YXJ0V2luZG93RXZlcnkgOiB0aGlzLndpbmRvd1NpemU7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIHZhciB3aW5kb3dTaXplID0gdGhpcy53aW5kb3dTaXplO1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgdmFyIGxlbiA9IHdpbmRvd3MubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbiAmJiAhdGhpcy5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgd2luZG93c1tpXS5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYyA9IHRoaXMuY291bnQgLSB3aW5kb3dTaXplICsgMTtcbiAgICAgICAgaWYgKGMgPj0gMCAmJiBjICUgc3RhcnRXaW5kb3dFdmVyeSA9PT0gMCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgrK3RoaXMuY291bnQgJSBzdGFydFdpbmRvd0V2ZXJ5ID09PSAwICYmICF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdmFyIHdpbmRvd18xID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgICAgIHdpbmRvd3MucHVzaCh3aW5kb3dfMSk7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHdpbmRvd18xKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93Q291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICBpZiAod2luZG93cykge1xuICAgICAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBXaW5kb3dDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLndpbmRvd3M7XG4gICAgICAgIGlmICh3aW5kb3dzKSB7XG4gICAgICAgICAgICB3aGlsZSAod2luZG93cy5sZW5ndGggPiAwICYmICF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFdpbmRvd0NvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgdGhpcy53aW5kb3dzID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd0NvdW50LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfc2NoZWR1bGVyX2FzeW5jLF9TdWJzY3JpYmVyLF91dGlsX2lzTnVtZXJpYyxfdXRpbF9pc1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNOdW1lcmljIH0gZnJvbSAnLi4vdXRpbC9pc051bWVyaWMnO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmV4cG9ydCBmdW5jdGlvbiB3aW5kb3dUaW1lKHdpbmRvd1RpbWVTcGFuKSB7XG4gICAgdmFyIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIHZhciB3aW5kb3dDcmVhdGlvbkludGVydmFsID0gbnVsbDtcbiAgICB2YXIgbWF4V2luZG93U2l6ZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBpZiAoaXNTY2hlZHVsZXIoYXJndW1lbnRzWzNdKSkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhcmd1bWVudHNbM107XG4gICAgfVxuICAgIGlmIChpc1NjaGVkdWxlcihhcmd1bWVudHNbMl0pKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFyZ3VtZW50c1syXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNOdW1lcmljKGFyZ3VtZW50c1syXSkpIHtcbiAgICAgICAgbWF4V2luZG93U2l6ZSA9IGFyZ3VtZW50c1syXTtcbiAgICB9XG4gICAgaWYgKGlzU2NoZWR1bGVyKGFyZ3VtZW50c1sxXSkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXJndW1lbnRzWzFdO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc051bWVyaWMoYXJndW1lbnRzWzFdKSkge1xuICAgICAgICB3aW5kb3dDcmVhdGlvbkludGVydmFsID0gYXJndW1lbnRzWzFdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gd2luZG93VGltZU9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgV2luZG93VGltZU9wZXJhdG9yKHdpbmRvd1RpbWVTcGFuLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBtYXhXaW5kb3dTaXplLCBzY2hlZHVsZXIpKTtcbiAgICB9O1xufVxudmFyIFdpbmRvd1RpbWVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXaW5kb3dUaW1lT3BlcmF0b3Iod2luZG93VGltZVNwYW4sIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIG1heFdpbmRvd1NpemUsIHNjaGVkdWxlcikge1xuICAgICAgICB0aGlzLndpbmRvd1RpbWVTcGFuID0gd2luZG93VGltZVNwYW47XG4gICAgICAgIHRoaXMud2luZG93Q3JlYXRpb25JbnRlcnZhbCA9IHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMubWF4V2luZG93U2l6ZSA9IG1heFdpbmRvd1NpemU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBXaW5kb3dUaW1lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBXaW5kb3dUaW1lU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLndpbmRvd1RpbWVTcGFuLCB0aGlzLndpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIHRoaXMubWF4V2luZG93U2l6ZSwgdGhpcy5zY2hlZHVsZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dUaW1lT3BlcmF0b3I7XG59KCkpO1xudmFyIENvdW50ZWRTdWJqZWN0ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKENvdW50ZWRTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvdW50ZWRTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX251bWJlck9mTmV4dGVkVmFsdWVzID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb3VudGVkU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9udW1iZXJPZk5leHRlZFZhbHVlcysrO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ291bnRlZFN1YmplY3QucHJvdG90eXBlLCBcIm51bWJlck9mTmV4dGVkVmFsdWVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbnVtYmVyT2ZOZXh0ZWRWYWx1ZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBDb3VudGVkU3ViamVjdDtcbn0oU3ViamVjdCkpO1xudmFyIFdpbmRvd1RpbWVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFdpbmRvd1RpbWVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdpbmRvd1RpbWVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB3aW5kb3dUaW1lU3Bhbiwgd2luZG93Q3JlYXRpb25JbnRlcnZhbCwgbWF4V2luZG93U2l6ZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy53aW5kb3dUaW1lU3BhbiA9IHdpbmRvd1RpbWVTcGFuO1xuICAgICAgICBfdGhpcy53aW5kb3dDcmVhdGlvbkludGVydmFsID0gd2luZG93Q3JlYXRpb25JbnRlcnZhbDtcbiAgICAgICAgX3RoaXMubWF4V2luZG93U2l6ZSA9IG1heFdpbmRvd1NpemU7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud2luZG93cyA9IFtdO1xuICAgICAgICB2YXIgd2luZG93ID0gX3RoaXMub3BlbldpbmRvdygpO1xuICAgICAgICBpZiAod2luZG93Q3JlYXRpb25JbnRlcnZhbCAhPT0gbnVsbCAmJiB3aW5kb3dDcmVhdGlvbkludGVydmFsID49IDApIHtcbiAgICAgICAgICAgIHZhciBjbG9zZVN0YXRlID0geyBzdWJzY3JpYmVyOiBfdGhpcywgd2luZG93OiB3aW5kb3csIGNvbnRleHQ6IG51bGwgfTtcbiAgICAgICAgICAgIHZhciBjcmVhdGlvblN0YXRlID0geyB3aW5kb3dUaW1lU3Bhbjogd2luZG93VGltZVNwYW4sIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWw6IHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIHN1YnNjcmliZXI6IF90aGlzLCBzY2hlZHVsZXI6IHNjaGVkdWxlciB9O1xuICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaFdpbmRvd0Nsb3NlLCB3aW5kb3dUaW1lU3BhbiwgY2xvc2VTdGF0ZSkpO1xuICAgICAgICAgICAgX3RoaXMuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaFdpbmRvd0NyZWF0aW9uLCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCBjcmVhdGlvblN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGltZVNwYW5Pbmx5U3RhdGUgPSB7IHN1YnNjcmliZXI6IF90aGlzLCB3aW5kb3c6IHdpbmRvdywgd2luZG93VGltZVNwYW46IHdpbmRvd1RpbWVTcGFuIH07XG4gICAgICAgICAgICBfdGhpcy5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoV2luZG93VGltZVNwYW5Pbmx5LCB3aW5kb3dUaW1lU3BhbiwgdGltZVNwYW5Pbmx5U3RhdGUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgd2luZG93cyA9IHRoaXMud2luZG93cztcbiAgICAgICAgdmFyIGxlbiA9IHdpbmRvd3MubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgd2luZG93XzEgPSB3aW5kb3dzW2ldO1xuICAgICAgICAgICAgaWYgKCF3aW5kb3dfMS5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dfMS5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93XzEubnVtYmVyT2ZOZXh0ZWRWYWx1ZXMgPj0gdGhpcy5tYXhXaW5kb3dTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VXaW5kb3cod2luZG93XzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgV2luZG93VGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLndpbmRvd3M7XG4gICAgICAgIHdoaWxlICh3aW5kb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICB9O1xuICAgIFdpbmRvd1RpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3aW5kb3dzID0gdGhpcy53aW5kb3dzO1xuICAgICAgICB3aGlsZSAod2luZG93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgd2luZG93XzIgPSB3aW5kb3dzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoIXdpbmRvd18yLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd18yLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgV2luZG93VGltZVN1YnNjcmliZXIucHJvdG90eXBlLm9wZW5XaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3aW5kb3cgPSBuZXcgQ291bnRlZFN1YmplY3QoKTtcbiAgICAgICAgdGhpcy53aW5kb3dzLnB1c2god2luZG93KTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZGVzdGluYXRpb24ubmV4dCh3aW5kb3cpO1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH07XG4gICAgV2luZG93VGltZVN1YnNjcmliZXIucHJvdG90eXBlLmNsb3NlV2luZG93ID0gZnVuY3Rpb24gKHdpbmRvdykge1xuICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLndpbmRvd3M7XG4gICAgICAgIHdpbmRvd3Muc3BsaWNlKHdpbmRvd3MuaW5kZXhPZih3aW5kb3cpLCAxKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dUaW1lU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZnVuY3Rpb24gZGlzcGF0Y2hXaW5kb3dUaW1lU3Bhbk9ubHkoc3RhdGUpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHdpbmRvd1RpbWVTcGFuID0gc3RhdGUud2luZG93VGltZVNwYW4sIHdpbmRvdyA9IHN0YXRlLndpbmRvdztcbiAgICBpZiAod2luZG93KSB7XG4gICAgICAgIHN1YnNjcmliZXIuY2xvc2VXaW5kb3cod2luZG93KTtcbiAgICB9XG4gICAgc3RhdGUud2luZG93ID0gc3Vic2NyaWJlci5vcGVuV2luZG93KCk7XG4gICAgdGhpcy5zY2hlZHVsZShzdGF0ZSwgd2luZG93VGltZVNwYW4pO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hXaW5kb3dDcmVhdGlvbihzdGF0ZSkge1xuICAgIHZhciB3aW5kb3dUaW1lU3BhbiA9IHN0YXRlLndpbmRvd1RpbWVTcGFuLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgc2NoZWR1bGVyID0gc3RhdGUuc2NoZWR1bGVyLCB3aW5kb3dDcmVhdGlvbkludGVydmFsID0gc3RhdGUud2luZG93Q3JlYXRpb25JbnRlcnZhbDtcbiAgICB2YXIgd2luZG93ID0gc3Vic2NyaWJlci5vcGVuV2luZG93KCk7XG4gICAgdmFyIGFjdGlvbiA9IHRoaXM7XG4gICAgdmFyIGNvbnRleHQgPSB7IGFjdGlvbjogYWN0aW9uLCBzdWJzY3JpcHRpb246IG51bGwgfTtcbiAgICB2YXIgdGltZVNwYW5TdGF0ZSA9IHsgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgd2luZG93OiB3aW5kb3csIGNvbnRleHQ6IGNvbnRleHQgfTtcbiAgICBjb250ZXh0LnN1YnNjcmlwdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaFdpbmRvd0Nsb3NlLCB3aW5kb3dUaW1lU3BhbiwgdGltZVNwYW5TdGF0ZSk7XG4gICAgYWN0aW9uLmFkZChjb250ZXh0LnN1YnNjcmlwdGlvbik7XG4gICAgYWN0aW9uLnNjaGVkdWxlKHN0YXRlLCB3aW5kb3dDcmVhdGlvbkludGVydmFsKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoV2luZG93Q2xvc2Uoc3RhdGUpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIHdpbmRvdyA9IHN0YXRlLndpbmRvdywgY29udGV4dCA9IHN0YXRlLmNvbnRleHQ7XG4gICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5hY3Rpb24gJiYgY29udGV4dC5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgY29udGV4dC5hY3Rpb24ucmVtb3ZlKGNvbnRleHQuc3Vic2NyaXB0aW9uKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlci5jbG9zZVdpbmRvdyh3aW5kb3cpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93VGltZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX1N1YnNjcmlwdGlvbixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi4vU3ViamVjdCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gd2luZG93VG9nZ2xlKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpbmRvd1RvZ2dsZU9wZXJhdG9yKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpKTsgfTtcbn1cbnZhciBXaW5kb3dUb2dnbGVPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXaW5kb3dUb2dnbGVPcGVyYXRvcihvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMub3BlbmluZ3MgPSBvcGVuaW5ncztcbiAgICAgICAgdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgfVxuICAgIFdpbmRvd1RvZ2dsZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2luZG93VG9nZ2xlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLm9wZW5pbmdzLCB0aGlzLmNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1RvZ2dsZU9wZXJhdG9yO1xufSgpKTtcbnZhciBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93VG9nZ2xlU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub3BlbmluZ3MgPSBvcGVuaW5ncztcbiAgICAgICAgX3RoaXMuY2xvc2luZ1NlbGVjdG9yID0gY2xvc2luZ1NlbGVjdG9yO1xuICAgICAgICBfdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgICAgICBfdGhpcy5hZGQoX3RoaXMub3BlblN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KF90aGlzLCBvcGVuaW5ncywgb3BlbmluZ3MpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dHNbaV0ud2luZG93Lm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSBudWxsO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHRfMSA9IGNvbnRleHRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEud2luZG93LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX2Vycm9yLmNhbGwodGhpcywgZXJyKTtcbiAgICB9O1xuICAgIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgdGhpcy5jb250ZXh0cyA9IG51bGw7XG4gICAgICAgIGlmIChjb250ZXh0cykge1xuICAgICAgICAgICAgdmFyIGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dF8yID0gY29udGV4dHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMi53aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzIuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgdGhpcy5jb250ZXh0cyA9IG51bGw7XG4gICAgICAgIGlmIChjb250ZXh0cykge1xuICAgICAgICAgICAgdmFyIGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dF8zID0gY29udGV4dHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMy53aW5kb3cudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgaWYgKG91dGVyVmFsdWUgPT09IHRoaXMub3BlbmluZ3MpIHtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXIgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBjbG9zaW5nU2VsZWN0b3IgPSB0aGlzLmNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgICAgICAgICBjbG9zaW5nTm90aWZpZXIgPSBjbG9zaW5nU2VsZWN0b3IoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHdpbmRvd18xID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICB2YXIgY29udGV4dF80ID0geyB3aW5kb3c6IHdpbmRvd18xLCBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvbiB9O1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHRfNCk7XG4gICAgICAgICAgICB2YXIgaW5uZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBjbG9zaW5nTm90aWZpZXIsIGNvbnRleHRfNCk7XG4gICAgICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZVdpbmRvdyh0aGlzLmNvbnRleHRzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpcHRpb24uY29udGV4dCA9IGNvbnRleHRfNDtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh3aW5kb3dfMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlV2luZG93KHRoaXMuY29udGV4dHMuaW5kZXhPZihvdXRlclZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd1RvZ2dsZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lcikge1xuICAgICAgICBpZiAoaW5uZXIgIT09IHRoaXMub3BlblN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jbG9zZVdpbmRvdyh0aGlzLmNvbnRleHRzLmluZGV4T2YoaW5uZXIuY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbG9zZVdpbmRvdyA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0c1tpbmRleF07XG4gICAgICAgIHZhciB3aW5kb3cgPSBjb250ZXh0LndpbmRvdywgc3Vic2NyaXB0aW9uID0gY29udGV4dC5zdWJzY3JpcHRpb247XG4gICAgICAgIGNvbnRleHRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHdpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dUb2dnbGVTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RvZ2dsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YmplY3QsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gd2luZG93V2hlbihjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gd2luZG93V2hlbk9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgV2luZG93T3BlcmF0b3IoY2xvc2luZ1NlbGVjdG9yKSk7XG4gICAgfTtcbn1cbnZhciBXaW5kb3dPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXaW5kb3dPcGVyYXRvcihjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgfVxuICAgIFdpbmRvd09wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2luZG93U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmNsb3NpbmdTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd09wZXJhdG9yO1xufSgpKTtcbnZhciBXaW5kb3dTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFdpbmRvd1N1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5jbG9zaW5nU2VsZWN0b3IgPSBjbG9zaW5nU2VsZWN0b3I7XG4gICAgICAgIF90aGlzLm9wZW5XaW5kb3coKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMub3BlbldpbmRvdyhpbm5lclN1Yik7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5fZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5vcGVuV2luZG93KGlubmVyU3ViKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMud2luZG93Lm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgV2luZG93U3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLndpbmRvdy5lcnJvcihlcnIpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVDbG9zaW5nTm90aWZpY2F0aW9uKCk7XG4gICAgfTtcbiAgICBXaW5kb3dTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMud2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZUNsb3NpbmdOb3RpZmljYXRpb24oKTtcbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlQ2xvc2luZ05vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2luZ05vdGlmaWNhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jbG9zaW5nTm90aWZpY2F0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpbmRvd1N1YnNjcmliZXIucHJvdG90eXBlLm9wZW5XaW5kb3cgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgaWYgKGlubmVyU3ViID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5uZXJTdWIpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGlubmVyU3ViKTtcbiAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZXaW5kb3cgPSB0aGlzLndpbmRvdztcbiAgICAgICAgaWYgKHByZXZXaW5kb3cpIHtcbiAgICAgICAgICAgIHByZXZXaW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2luZG93ID0gdGhpcy53aW5kb3cgPSBuZXcgU3ViamVjdCgpO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQod2luZG93KTtcbiAgICAgICAgdmFyIGNsb3NpbmdOb3RpZmllcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nU2VsZWN0b3IgPSB0aGlzLmNsb3NpbmdTZWxlY3RvcjtcbiAgICAgICAgICAgIGNsb3NpbmdOb3RpZmllciA9IGNsb3NpbmdTZWxlY3RvcigpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGUpO1xuICAgICAgICAgICAgdGhpcy53aW5kb3cuZXJyb3IoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGQodGhpcy5jbG9zaW5nTm90aWZpY2F0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgY2xvc2luZ05vdGlmaWVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93U3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dXaGVuLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfT3V0ZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9SZXN1bHQgfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvUmVzdWx0JztcbmV4cG9ydCBmdW5jdGlvbiB3aXRoTGF0ZXN0RnJvbSgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgdmFyIHByb2plY3Q7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBwcm9qZWN0ID0gYXJncy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2JzZXJ2YWJsZXMgPSBhcmdzO1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFdpdGhMYXRlc3RGcm9tT3BlcmF0b3Iob2JzZXJ2YWJsZXMsIHByb2plY3QpKTtcbiAgICB9O1xufVxudmFyIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2l0aExhdGVzdEZyb21PcGVyYXRvcihvYnNlcnZhYmxlcywgcHJvamVjdCkge1xuICAgICAgICB0aGlzLm9ic2VydmFibGVzID0gb2JzZXJ2YWJsZXM7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgfVxuICAgIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5vYnNlcnZhYmxlcywgdGhpcy5wcm9qZWN0KSk7XG4gICAgfTtcbiAgICByZXR1cm4gV2l0aExhdGVzdEZyb21PcGVyYXRvcjtcbn0oKSk7XG52YXIgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9ic2VydmFibGVzLCBwcm9qZWN0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMudG9SZXNwb25kID0gW107XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZhYmxlcy5sZW5ndGg7XG4gICAgICAgIF90aGlzLnZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBfdGhpcy50b1Jlc3BvbmQucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGVzW2ldO1xuICAgICAgICAgICAgX3RoaXMuYWRkKHN1YnNjcmliZVRvUmVzdWx0KF90aGlzLCBvYnNlcnZhYmxlLCBvYnNlcnZhYmxlLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy52YWx1ZXNbb3V0ZXJJbmRleF0gPSBpbm5lclZhbHVlO1xuICAgICAgICB2YXIgdG9SZXNwb25kID0gdGhpcy50b1Jlc3BvbmQ7XG4gICAgICAgIGlmICh0b1Jlc3BvbmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGZvdW5kID0gdG9SZXNwb25kLmluZGV4T2Yob3V0ZXJJbmRleCk7XG4gICAgICAgICAgICBpZiAoZm91bmQgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdG9SZXNwb25kLnNwbGljZShmb3VuZCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnRvUmVzcG9uZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW3ZhbHVlXS5jb25jYXQodGhpcy52YWx1ZXMpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvamVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyeVByb2plY3QoYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlci5wcm90b3R5cGUuX3RyeVByb2plY3QgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXI7XG59KE91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2l0aExhdGVzdEZyb20uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vYnNlcnZhYmxlX3ppcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyB6aXAgYXMgemlwU3RhdGljIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS96aXAnO1xuZXhwb3J0IGZ1bmN0aW9uIHppcCgpIHtcbiAgICB2YXIgb2JzZXJ2YWJsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYnNlcnZhYmxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gemlwT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0LmNhbGwoemlwU3RhdGljLmFwcGx5KHZvaWQgMCwgW3NvdXJjZV0uY29uY2F0KG9ic2VydmFibGVzKSkpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD16aXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9vYnNlcnZhYmxlX3ppcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBaaXBPcGVyYXRvciB9IGZyb20gJy4uL29ic2VydmFibGUvemlwJztcbmV4cG9ydCBmdW5jdGlvbiB6aXBBbGwocHJvamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgWmlwT3BlcmF0b3IocHJvamVjdCkpOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwQWxsLmpzLm1hcFxuIiwiLy8gVGlueUNvbG9yIHYxLjQuMVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jncmlucy9UaW55Q29sb3Jcbi8vIEJyaWFuIEdyaW5zdGVhZCwgTUlUIExpY2Vuc2VcblxuKGZ1bmN0aW9uKE1hdGgpIHtcblxudmFyIHRyaW1MZWZ0ID0gL15cXHMrLyxcbiAgICB0cmltUmlnaHQgPSAvXFxzKyQvLFxuICAgIHRpbnlDb3VudGVyID0gMCxcbiAgICBtYXRoUm91bmQgPSBNYXRoLnJvdW5kLFxuICAgIG1hdGhNaW4gPSBNYXRoLm1pbixcbiAgICBtYXRoTWF4ID0gTWF0aC5tYXgsXG4gICAgbWF0aFJhbmRvbSA9IE1hdGgucmFuZG9tO1xuXG5mdW5jdGlvbiB0aW55Y29sb3IgKGNvbG9yLCBvcHRzKSB7XG5cbiAgICBjb2xvciA9IChjb2xvcikgPyBjb2xvciA6ICcnO1xuICAgIG9wdHMgPSBvcHRzIHx8IHsgfTtcblxuICAgIC8vIElmIGlucHV0IGlzIGFscmVhZHkgYSB0aW55Y29sb3IsIHJldHVybiBpdHNlbGZcbiAgICBpZiAoY29sb3IgaW5zdGFuY2VvZiB0aW55Y29sb3IpIHtcbiAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICAgIC8vIElmIHdlIGFyZSBjYWxsZWQgYXMgYSBmdW5jdGlvbiwgY2FsbCB1c2luZyBuZXcgaW5zdGVhZFxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiB0aW55Y29sb3IpKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGlueWNvbG9yKGNvbG9yLCBvcHRzKTtcbiAgICB9XG5cbiAgICB2YXIgcmdiID0gaW5wdXRUb1JHQihjb2xvcik7XG4gICAgdGhpcy5fb3JpZ2luYWxJbnB1dCA9IGNvbG9yLFxuICAgIHRoaXMuX3IgPSByZ2IucixcbiAgICB0aGlzLl9nID0gcmdiLmcsXG4gICAgdGhpcy5fYiA9IHJnYi5iLFxuICAgIHRoaXMuX2EgPSByZ2IuYSxcbiAgICB0aGlzLl9yb3VuZEEgPSBtYXRoUm91bmQoMTAwKnRoaXMuX2EpIC8gMTAwLFxuICAgIHRoaXMuX2Zvcm1hdCA9IG9wdHMuZm9ybWF0IHx8IHJnYi5mb3JtYXQ7XG4gICAgdGhpcy5fZ3JhZGllbnRUeXBlID0gb3B0cy5ncmFkaWVudFR5cGU7XG5cbiAgICAvLyBEb24ndCBsZXQgdGhlIHJhbmdlIG9mIFswLDI1NV0gY29tZSBiYWNrIGluIFswLDFdLlxuICAgIC8vIFBvdGVudGlhbGx5IGxvc2UgYSBsaXR0bGUgYml0IG9mIHByZWNpc2lvbiBoZXJlLCBidXQgd2lsbCBmaXggaXNzdWVzIHdoZXJlXG4gICAgLy8gLjUgZ2V0cyBpbnRlcnByZXRlZCBhcyBoYWxmIG9mIHRoZSB0b3RhbCwgaW5zdGVhZCBvZiBoYWxmIG9mIDFcbiAgICAvLyBJZiBpdCB3YXMgc3VwcG9zZWQgdG8gYmUgMTI4LCB0aGlzIHdhcyBhbHJlYWR5IHRha2VuIGNhcmUgb2YgYnkgYGlucHV0VG9SZ2JgXG4gICAgaWYgKHRoaXMuX3IgPCAxKSB7IHRoaXMuX3IgPSBtYXRoUm91bmQodGhpcy5fcik7IH1cbiAgICBpZiAodGhpcy5fZyA8IDEpIHsgdGhpcy5fZyA9IG1hdGhSb3VuZCh0aGlzLl9nKTsgfVxuICAgIGlmICh0aGlzLl9iIDwgMSkgeyB0aGlzLl9iID0gbWF0aFJvdW5kKHRoaXMuX2IpOyB9XG5cbiAgICB0aGlzLl9vayA9IHJnYi5vaztcbiAgICB0aGlzLl90Y19pZCA9IHRpbnlDb3VudGVyKys7XG59XG5cbnRpbnljb2xvci5wcm90b3R5cGUgPSB7XG4gICAgaXNEYXJrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnJpZ2h0bmVzcygpIDwgMTI4O1xuICAgIH0sXG4gICAgaXNMaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc0RhcmsoKTtcbiAgICB9LFxuICAgIGlzVmFsaWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2s7XG4gICAgfSxcbiAgICBnZXRPcmlnaW5hbElucHV0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vcmlnaW5hbElucHV0O1xuICAgIH0sXG4gICAgZ2V0Rm9ybWF0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdDtcbiAgICB9LFxuICAgIGdldEFscGhhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2E7XG4gICAgfSxcbiAgICBnZXRCcmlnaHRuZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9odHRwOi8vd3d3LnczLm9yZy9UUi9BRVJUI2NvbG9yLWNvbnRyYXN0XG4gICAgICAgIHZhciByZ2IgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHJldHVybiAocmdiLnIgKiAyOTkgKyByZ2IuZyAqIDU4NyArIHJnYi5iICogMTE0KSAvIDEwMDA7XG4gICAgfSxcbiAgICBnZXRMdW1pbmFuY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL2h0dHA6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jcmVsYXRpdmVsdW1pbmFuY2VkZWZcbiAgICAgICAgdmFyIHJnYiA9IHRoaXMudG9SZ2IoKTtcbiAgICAgICAgdmFyIFJzUkdCLCBHc1JHQiwgQnNSR0IsIFIsIEcsIEI7XG4gICAgICAgIFJzUkdCID0gcmdiLnIvMjU1O1xuICAgICAgICBHc1JHQiA9IHJnYi5nLzI1NTtcbiAgICAgICAgQnNSR0IgPSByZ2IuYi8yNTU7XG5cbiAgICAgICAgaWYgKFJzUkdCIDw9IDAuMDM5MjgpIHtSID0gUnNSR0IgLyAxMi45Mjt9IGVsc2Uge1IgPSBNYXRoLnBvdygoKFJzUkdCICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO31cbiAgICAgICAgaWYgKEdzUkdCIDw9IDAuMDM5MjgpIHtHID0gR3NSR0IgLyAxMi45Mjt9IGVsc2Uge0cgPSBNYXRoLnBvdygoKEdzUkdCICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO31cbiAgICAgICAgaWYgKEJzUkdCIDw9IDAuMDM5MjgpIHtCID0gQnNSR0IgLyAxMi45Mjt9IGVsc2Uge0IgPSBNYXRoLnBvdygoKEJzUkdCICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO31cbiAgICAgICAgcmV0dXJuICgwLjIxMjYgKiBSKSArICgwLjcxNTIgKiBHKSArICgwLjA3MjIgKiBCKTtcbiAgICB9LFxuICAgIHNldEFscGhhOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9hID0gYm91bmRBbHBoYSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuX3JvdW5kQSA9IG1hdGhSb3VuZCgxMDAqdGhpcy5fYSkgLyAxMDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgdG9Ic3Y6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHN2ID0gcmdiVG9Ic3YodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYik7XG4gICAgICAgIHJldHVybiB7IGg6IGhzdi5oICogMzYwLCBzOiBoc3YucywgdjogaHN2LnYsIGE6IHRoaXMuX2EgfTtcbiAgICB9LFxuICAgIHRvSHN2U3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhzdiA9IHJnYlRvSHN2KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IpO1xuICAgICAgICB2YXIgaCA9IG1hdGhSb3VuZChoc3YuaCAqIDM2MCksIHMgPSBtYXRoUm91bmQoaHN2LnMgKiAxMDApLCB2ID0gbWF0aFJvdW5kKGhzdi52ICogMTAwKTtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9hID09IDEpID9cbiAgICAgICAgICBcImhzdihcIiAgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyB2ICsgXCIlKVwiIDpcbiAgICAgICAgICBcImhzdmEoXCIgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyB2ICsgXCIlLCBcIisgdGhpcy5fcm91bmRBICsgXCIpXCI7XG4gICAgfSxcbiAgICB0b0hzbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoc2wgPSByZ2JUb0hzbCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iKTtcbiAgICAgICAgcmV0dXJuIHsgaDogaHNsLmggKiAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCwgYTogdGhpcy5fYSB9O1xuICAgIH0sXG4gICAgdG9Ic2xTdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHNsID0gcmdiVG9Ic2wodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYik7XG4gICAgICAgIHZhciBoID0gbWF0aFJvdW5kKGhzbC5oICogMzYwKSwgcyA9IG1hdGhSb3VuZChoc2wucyAqIDEwMCksIGwgPSBtYXRoUm91bmQoaHNsLmwgKiAxMDApO1xuICAgICAgICByZXR1cm4gKHRoaXMuX2EgPT0gMSkgP1xuICAgICAgICAgIFwiaHNsKFwiICArIGggKyBcIiwgXCIgKyBzICsgXCIlLCBcIiArIGwgKyBcIiUpXCIgOlxuICAgICAgICAgIFwiaHNsYShcIiArIGggKyBcIiwgXCIgKyBzICsgXCIlLCBcIiArIGwgKyBcIiUsIFwiKyB0aGlzLl9yb3VuZEEgKyBcIilcIjtcbiAgICB9LFxuICAgIHRvSGV4OiBmdW5jdGlvbihhbGxvdzNDaGFyKSB7XG4gICAgICAgIHJldHVybiByZ2JUb0hleCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iLCBhbGxvdzNDaGFyKTtcbiAgICB9LFxuICAgIHRvSGV4U3RyaW5nOiBmdW5jdGlvbihhbGxvdzNDaGFyKSB7XG4gICAgICAgIHJldHVybiAnIycgKyB0aGlzLnRvSGV4KGFsbG93M0NoYXIpO1xuICAgIH0sXG4gICAgdG9IZXg4OiBmdW5jdGlvbihhbGxvdzRDaGFyKSB7XG4gICAgICAgIHJldHVybiByZ2JhVG9IZXgodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYiwgdGhpcy5fYSwgYWxsb3c0Q2hhcik7XG4gICAgfSxcbiAgICB0b0hleDhTdHJpbmc6IGZ1bmN0aW9uKGFsbG93NENoYXIpIHtcbiAgICAgICAgcmV0dXJuICcjJyArIHRoaXMudG9IZXg4KGFsbG93NENoYXIpO1xuICAgIH0sXG4gICAgdG9SZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geyByOiBtYXRoUm91bmQodGhpcy5fciksIGc6IG1hdGhSb3VuZCh0aGlzLl9nKSwgYjogbWF0aFJvdW5kKHRoaXMuX2IpLCBhOiB0aGlzLl9hIH07XG4gICAgfSxcbiAgICB0b1JnYlN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fYSA9PSAxKSA/XG4gICAgICAgICAgXCJyZ2IoXCIgICsgbWF0aFJvdW5kKHRoaXMuX3IpICsgXCIsIFwiICsgbWF0aFJvdW5kKHRoaXMuX2cpICsgXCIsIFwiICsgbWF0aFJvdW5kKHRoaXMuX2IpICsgXCIpXCIgOlxuICAgICAgICAgIFwicmdiYShcIiArIG1hdGhSb3VuZCh0aGlzLl9yKSArIFwiLCBcIiArIG1hdGhSb3VuZCh0aGlzLl9nKSArIFwiLCBcIiArIG1hdGhSb3VuZCh0aGlzLl9iKSArIFwiLCBcIiArIHRoaXMuX3JvdW5kQSArIFwiKVwiO1xuICAgIH0sXG4gICAgdG9QZXJjZW50YWdlUmdiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fciwgMjU1KSAqIDEwMCkgKyBcIiVcIiwgZzogbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fZywgMjU1KSAqIDEwMCkgKyBcIiVcIiwgYjogbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fYiwgMjU1KSAqIDEwMCkgKyBcIiVcIiwgYTogdGhpcy5fYSB9O1xuICAgIH0sXG4gICAgdG9QZXJjZW50YWdlUmdiU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9hID09IDEpID9cbiAgICAgICAgICBcInJnYihcIiAgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9yLCAyNTUpICogMTAwKSArIFwiJSwgXCIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9nLCAyNTUpICogMTAwKSArIFwiJSwgXCIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9iLCAyNTUpICogMTAwKSArIFwiJSlcIiA6XG4gICAgICAgICAgXCJyZ2JhKFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fciwgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fZywgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fYiwgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgdGhpcy5fcm91bmRBICsgXCIpXCI7XG4gICAgfSxcbiAgICB0b05hbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fYSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNwYXJlbnRcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9hIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhleE5hbWVzW3JnYlRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRydWUpXSB8fCBmYWxzZTtcbiAgICB9LFxuICAgIHRvRmlsdGVyOiBmdW5jdGlvbihzZWNvbmRDb2xvcikge1xuICAgICAgICB2YXIgaGV4OFN0cmluZyA9ICcjJyArIHJnYmFUb0FyZ2JIZXgodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYiwgdGhpcy5fYSk7XG4gICAgICAgIHZhciBzZWNvbmRIZXg4U3RyaW5nID0gaGV4OFN0cmluZztcbiAgICAgICAgdmFyIGdyYWRpZW50VHlwZSA9IHRoaXMuX2dyYWRpZW50VHlwZSA/IFwiR3JhZGllbnRUeXBlID0gMSwgXCIgOiBcIlwiO1xuXG4gICAgICAgIGlmIChzZWNvbmRDb2xvcikge1xuICAgICAgICAgICAgdmFyIHMgPSB0aW55Y29sb3Ioc2Vjb25kQ29sb3IpO1xuICAgICAgICAgICAgc2Vjb25kSGV4OFN0cmluZyA9ICcjJyArIHJnYmFUb0FyZ2JIZXgocy5fciwgcy5fZywgcy5fYiwgcy5fYSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoXCIrZ3JhZGllbnRUeXBlK1wic3RhcnRDb2xvcnN0cj1cIitoZXg4U3RyaW5nK1wiLGVuZENvbG9yc3RyPVwiK3NlY29uZEhleDhTdHJpbmcrXCIpXCI7XG4gICAgfSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBmb3JtYXRTZXQgPSAhIWZvcm1hdDtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8IHRoaXMuX2Zvcm1hdDtcblxuICAgICAgICB2YXIgZm9ybWF0dGVkU3RyaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBoYXNBbHBoYSA9IHRoaXMuX2EgPCAxICYmIHRoaXMuX2EgPj0gMDtcbiAgICAgICAgdmFyIG5lZWRzQWxwaGFGb3JtYXQgPSAhZm9ybWF0U2V0ICYmIGhhc0FscGhhICYmIChmb3JtYXQgPT09IFwiaGV4XCIgfHwgZm9ybWF0ID09PSBcImhleDZcIiB8fCBmb3JtYXQgPT09IFwiaGV4M1wiIHx8IGZvcm1hdCA9PT0gXCJoZXg0XCIgfHwgZm9ybWF0ID09PSBcImhleDhcIiB8fCBmb3JtYXQgPT09IFwibmFtZVwiKTtcblxuICAgICAgICBpZiAobmVlZHNBbHBoYUZvcm1hdCkge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBcInRyYW5zcGFyZW50XCIsIGFsbCBvdGhlciBub24tYWxwaGEgZm9ybWF0c1xuICAgICAgICAgICAgLy8gd2lsbCByZXR1cm4gcmdiYSB3aGVuIHRoZXJlIGlzIHRyYW5zcGFyZW5jeS5cbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IFwibmFtZVwiICYmIHRoaXMuX2EgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b05hbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvUmdiU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJyZ2JcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b1JnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwicHJnYlwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvUGVyY2VudGFnZVJnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaGV4XCIgfHwgZm9ybWF0ID09PSBcImhleDZcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaGV4M1wiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4U3RyaW5nKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaGV4NFwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4OFN0cmluZyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleDhcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleDhTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcIm5hbWVcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b05hbWUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhzbFwiKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSHNsU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoc3ZcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hzdlN0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFN0cmluZyB8fCB0aGlzLnRvSGV4U3RyaW5nKCk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aW55Y29sb3IodGhpcy50b1N0cmluZygpKTtcbiAgICB9LFxuXG4gICAgX2FwcGx5TW9kaWZpY2F0aW9uOiBmdW5jdGlvbihmbiwgYXJncykge1xuICAgICAgICB2YXIgY29sb3IgPSBmbi5hcHBseShudWxsLCBbdGhpc10uY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJncykpKTtcbiAgICAgICAgdGhpcy5fciA9IGNvbG9yLl9yO1xuICAgICAgICB0aGlzLl9nID0gY29sb3IuX2c7XG4gICAgICAgIHRoaXMuX2IgPSBjb2xvci5fYjtcbiAgICAgICAgdGhpcy5zZXRBbHBoYShjb2xvci5fYSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgbGlnaHRlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihsaWdodGVuLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgYnJpZ2h0ZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oYnJpZ2h0ZW4sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBkYXJrZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZGFya2VuLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZGVzYXR1cmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihkZXNhdHVyYXRlLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2F0dXJhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oc2F0dXJhdGUsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBncmV5c2NhbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZ3JleXNjYWxlLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc3BpbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihzcGluLCBhcmd1bWVudHMpO1xuICAgIH0sXG5cbiAgICBfYXBwbHlDb21iaW5hdGlvbjogZnVuY3Rpb24oZm4sIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIFt0aGlzXS5jb25jYXQoW10uc2xpY2UuY2FsbChhcmdzKSkpO1xuICAgIH0sXG4gICAgYW5hbG9nb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24oYW5hbG9nb3VzLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgY29tcGxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKGNvbXBsZW1lbnQsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtb25vY2hyb21hdGljOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24obW9ub2Nocm9tYXRpYywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNwbGl0Y29tcGxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKHNwbGl0Y29tcGxlbWVudCwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHRyaWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24odHJpYWQsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICB0ZXRyYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbih0ZXRyYWQsIGFyZ3VtZW50cyk7XG4gICAgfVxufTtcblxuLy8gSWYgaW5wdXQgaXMgYW4gb2JqZWN0LCBmb3JjZSAxIGludG8gXCIxLjBcIiB0byBoYW5kbGUgcmF0aW9zIHByb3Blcmx5XG4vLyBTdHJpbmcgaW5wdXQgcmVxdWlyZXMgXCIxLjBcIiBhcyBpbnB1dCwgc28gMSB3aWxsIGJlIHRyZWF0ZWQgYXMgMVxudGlueWNvbG9yLmZyb21SYXRpbyA9IGZ1bmN0aW9uKGNvbG9yLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHZhciBuZXdDb2xvciA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpIGluIGNvbG9yKSB7XG4gICAgICAgICAgICBpZiAoY29sb3IuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gXCJhXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sb3JbaV0gPSBjb2xvcltpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbG9yW2ldID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvcltpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbG9yID0gbmV3Q29sb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvciwgb3B0cyk7XG59O1xuXG4vLyBHaXZlbiBhIHN0cmluZyBvciBvYmplY3QsIGNvbnZlcnQgdGhhdCBpbnB1dCB0byBSR0Jcbi8vIFBvc3NpYmxlIHN0cmluZyBpbnB1dHM6XG4vL1xuLy8gICAgIFwicmVkXCJcbi8vICAgICBcIiNmMDBcIiBvciBcImYwMFwiXG4vLyAgICAgXCIjZmYwMDAwXCIgb3IgXCJmZjAwMDBcIlxuLy8gICAgIFwiI2ZmMDAwMDAwXCIgb3IgXCJmZjAwMDAwMFwiXG4vLyAgICAgXCJyZ2IgMjU1IDAgMFwiIG9yIFwicmdiICgyNTUsIDAsIDApXCJcbi8vICAgICBcInJnYiAxLjAgMCAwXCIgb3IgXCJyZ2IgKDEsIDAsIDApXCJcbi8vICAgICBcInJnYmEgKDI1NSwgMCwgMCwgMSlcIiBvciBcInJnYmEgMjU1LCAwLCAwLCAxXCJcbi8vICAgICBcInJnYmEgKDEuMCwgMCwgMCwgMSlcIiBvciBcInJnYmEgMS4wLCAwLCAwLCAxXCJcbi8vICAgICBcImhzbCgwLCAxMDAlLCA1MCUpXCIgb3IgXCJoc2wgMCAxMDAlIDUwJVwiXG4vLyAgICAgXCJoc2xhKDAsIDEwMCUsIDUwJSwgMSlcIiBvciBcImhzbGEgMCAxMDAlIDUwJSwgMVwiXG4vLyAgICAgXCJoc3YoMCwgMTAwJSwgMTAwJSlcIiBvciBcImhzdiAwIDEwMCUgMTAwJVwiXG4vL1xuZnVuY3Rpb24gaW5wdXRUb1JHQihjb2xvcikge1xuXG4gICAgdmFyIHJnYiA9IHsgcjogMCwgZzogMCwgYjogMCB9O1xuICAgIHZhciBhID0gMTtcbiAgICB2YXIgcyA9IG51bGw7XG4gICAgdmFyIHYgPSBudWxsO1xuICAgIHZhciBsID0gbnVsbDtcbiAgICB2YXIgb2sgPSBmYWxzZTtcbiAgICB2YXIgZm9ybWF0ID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29sb3IgPSBzdHJpbmdJbnB1dFRvT2JqZWN0KGNvbG9yKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKGlzVmFsaWRDU1NVbml0KGNvbG9yLnIpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmcpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmIpKSB7XG4gICAgICAgICAgICByZ2IgPSByZ2JUb1JnYihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFN0cmluZyhjb2xvci5yKS5zdWJzdHIoLTEpID09PSBcIiVcIiA/IFwicHJnYlwiIDogXCJyZ2JcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5oKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5zKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci52KSkge1xuICAgICAgICAgICAgcyA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iucyk7XG4gICAgICAgICAgICB2ID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci52KTtcbiAgICAgICAgICAgIHJnYiA9IGhzdlRvUmdiKGNvbG9yLmgsIHMsIHYpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gXCJoc3ZcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5oKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5zKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5sKSkge1xuICAgICAgICAgICAgcyA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iucyk7XG4gICAgICAgICAgICBsID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci5sKTtcbiAgICAgICAgICAgIHJnYiA9IGhzbFRvUmdiKGNvbG9yLmgsIHMsIGwpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gXCJoc2xcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2xvci5oYXNPd25Qcm9wZXJ0eShcImFcIikpIHtcbiAgICAgICAgICAgIGEgPSBjb2xvci5hO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYSA9IGJvdW5kQWxwaGEoYSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBvazogb2ssXG4gICAgICAgIGZvcm1hdDogY29sb3IuZm9ybWF0IHx8IGZvcm1hdCxcbiAgICAgICAgcjogbWF0aE1pbigyNTUsIG1hdGhNYXgocmdiLnIsIDApKSxcbiAgICAgICAgZzogbWF0aE1pbigyNTUsIG1hdGhNYXgocmdiLmcsIDApKSxcbiAgICAgICAgYjogbWF0aE1pbigyNTUsIG1hdGhNYXgocmdiLmIsIDApKSxcbiAgICAgICAgYTogYVxuICAgIH07XG59XG5cblxuLy8gQ29udmVyc2lvbiBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIGByZ2JUb0hzbGAsIGByZ2JUb0hzdmAsIGBoc2xUb1JnYmAsIGBoc3ZUb1JnYmAgbW9kaWZpZWQgZnJvbTpcbi8vIDxodHRwOi8vbWppamFja3Nvbi5jb20vMjAwOC8wMi9yZ2ItdG8taHNsLWFuZC1yZ2ItdG8taHN2LWNvbG9yLW1vZGVsLWNvbnZlcnNpb24tYWxnb3JpdGhtcy1pbi1qYXZhc2NyaXB0PlxuXG4vLyBgcmdiVG9SZ2JgXG4vLyBIYW5kbGUgYm91bmRzIC8gcGVyY2VudGFnZSBjaGVja2luZyB0byBjb25mb3JtIHRvIENTUyBjb2xvciBzcGVjXG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8+XG4vLyAqQXNzdW1lczoqIHIsIGcsIGIgaW4gWzAsIDI1NV0gb3IgWzAsIDFdXG4vLyAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIFswLCAyNTVdXG5mdW5jdGlvbiByZ2JUb1JnYihyLCBnLCBiKXtcbiAgICByZXR1cm4ge1xuICAgICAgICByOiBib3VuZDAxKHIsIDI1NSkgKiAyNTUsXG4gICAgICAgIGc6IGJvdW5kMDEoZywgMjU1KSAqIDI1NSxcbiAgICAgICAgYjogYm91bmQwMShiLCAyNTUpICogMjU1XG4gICAgfTtcbn1cblxuLy8gYHJnYlRvSHNsYFxuLy8gQ29udmVydHMgYW4gUkdCIGNvbG9yIHZhbHVlIHRvIEhTTC5cbi8vICpBc3N1bWVzOiogciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiBbMCwgMjU1XSBvciBbMCwgMV1cbi8vICpSZXR1cm5zOiogeyBoLCBzLCBsIH0gaW4gWzAsMV1cbmZ1bmN0aW9uIHJnYlRvSHNsKHIsIGcsIGIpIHtcblxuICAgIHIgPSBib3VuZDAxKHIsIDI1NSk7XG4gICAgZyA9IGJvdW5kMDEoZywgMjU1KTtcbiAgICBiID0gYm91bmQwMShiLCAyNTUpO1xuXG4gICAgdmFyIG1heCA9IG1hdGhNYXgociwgZywgYiksIG1pbiA9IG1hdGhNaW4ociwgZywgYik7XG4gICAgdmFyIGgsIHMsIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICBpZihtYXggPT0gbWluKSB7XG4gICAgICAgIGggPSBzID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgICAgc3dpdGNoKG1heCkge1xuICAgICAgICAgICAgY2FzZSByOiBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBnOiBoID0gKGIgLSByKSAvIGQgKyAyOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjogaCA9IChyIC0gZykgLyBkICsgNDsgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBoIC89IDY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgaDogaCwgczogcywgbDogbCB9O1xufVxuXG4vLyBgaHNsVG9SZ2JgXG4vLyBDb252ZXJ0cyBhbiBIU0wgY29sb3IgdmFsdWUgdG8gUkdCLlxuLy8gKkFzc3VtZXM6KiBoIGlzIGNvbnRhaW5lZCBpbiBbMCwgMV0gb3IgWzAsIDM2MF0gYW5kIHMgYW5kIGwgYXJlIGNvbnRhaW5lZCBbMCwgMV0gb3IgWzAsIDEwMF1cbi8vICpSZXR1cm5zOiogeyByLCBnLCBiIH0gaW4gdGhlIHNldCBbMCwgMjU1XVxuZnVuY3Rpb24gaHNsVG9SZ2IoaCwgcywgbCkge1xuICAgIHZhciByLCBnLCBiO1xuXG4gICAgaCA9IGJvdW5kMDEoaCwgMzYwKTtcbiAgICBzID0gYm91bmQwMShzLCAxMDApO1xuICAgIGwgPSBib3VuZDAxKGwsIDEwMCk7XG5cbiAgICBmdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcbiAgICAgICAgaWYodCA8IDApIHQgKz0gMTtcbiAgICAgICAgaWYodCA+IDEpIHQgLT0gMTtcbiAgICAgICAgaWYodCA8IDEvNikgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgICAgIGlmKHQgPCAxLzIpIHJldHVybiBxO1xuICAgICAgICBpZih0IDwgMi8zKSByZXR1cm4gcCArIChxIC0gcCkgKiAoMi8zIC0gdCkgKiA2O1xuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG5cbiAgICBpZihzID09PSAwKSB7XG4gICAgICAgIHIgPSBnID0gYiA9IGw7IC8vIGFjaHJvbWF0aWNcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgdmFyIHAgPSAyICogbCAtIHE7XG4gICAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxLzMpO1xuICAgICAgICBnID0gaHVlMnJnYihwLCBxLCBoKTtcbiAgICAgICAgYiA9IGh1ZTJyZ2IocCwgcSwgaCAtIDEvMyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcjogciAqIDI1NSwgZzogZyAqIDI1NSwgYjogYiAqIDI1NSB9O1xufVxuXG4vLyBgcmdiVG9Ic3ZgXG4vLyBDb252ZXJ0cyBhbiBSR0IgY29sb3IgdmFsdWUgdG8gSFNWXG4vLyAqQXNzdW1lczoqIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBvciBbMCwgMV1cbi8vICpSZXR1cm5zOiogeyBoLCBzLCB2IH0gaW4gWzAsMV1cbmZ1bmN0aW9uIHJnYlRvSHN2KHIsIGcsIGIpIHtcblxuICAgIHIgPSBib3VuZDAxKHIsIDI1NSk7XG4gICAgZyA9IGJvdW5kMDEoZywgMjU1KTtcbiAgICBiID0gYm91bmQwMShiLCAyNTUpO1xuXG4gICAgdmFyIG1heCA9IG1hdGhNYXgociwgZywgYiksIG1pbiA9IG1hdGhNaW4ociwgZywgYik7XG4gICAgdmFyIGgsIHMsIHYgPSBtYXg7XG5cbiAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICBzID0gbWF4ID09PSAwID8gMCA6IGQgLyBtYXg7XG5cbiAgICBpZihtYXggPT0gbWluKSB7XG4gICAgICAgIGggPSAwOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzd2l0Y2gobWF4KSB7XG4gICAgICAgICAgICBjYXNlIHI6IGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGc6IGggPSAoYiAtIHIpIC8gZCArIDI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBiOiBoID0gKHIgLSBnKSAvIGQgKyA0OyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBoIC89IDY7XG4gICAgfVxuICAgIHJldHVybiB7IGg6IGgsIHM6IHMsIHY6IHYgfTtcbn1cblxuLy8gYGhzdlRvUmdiYFxuLy8gQ29udmVydHMgYW4gSFNWIGNvbG9yIHZhbHVlIHRvIFJHQi5cbi8vICpBc3N1bWVzOiogaCBpcyBjb250YWluZWQgaW4gWzAsIDFdIG9yIFswLCAzNjBdIGFuZCBzIGFuZCB2IGFyZSBjb250YWluZWQgaW4gWzAsIDFdIG9yIFswLCAxMDBdXG4vLyAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIHRoZSBzZXQgWzAsIDI1NV1cbiBmdW5jdGlvbiBoc3ZUb1JnYihoLCBzLCB2KSB7XG5cbiAgICBoID0gYm91bmQwMShoLCAzNjApICogNjtcbiAgICBzID0gYm91bmQwMShzLCAxMDApO1xuICAgIHYgPSBib3VuZDAxKHYsIDEwMCk7XG5cbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoaCksXG4gICAgICAgIGYgPSBoIC0gaSxcbiAgICAgICAgcCA9IHYgKiAoMSAtIHMpLFxuICAgICAgICBxID0gdiAqICgxIC0gZiAqIHMpLFxuICAgICAgICB0ID0gdiAqICgxIC0gKDEgLSBmKSAqIHMpLFxuICAgICAgICBtb2QgPSBpICUgNixcbiAgICAgICAgciA9IFt2LCBxLCBwLCBwLCB0LCB2XVttb2RdLFxuICAgICAgICBnID0gW3QsIHYsIHYsIHEsIHAsIHBdW21vZF0sXG4gICAgICAgIGIgPSBbcCwgcCwgdCwgdiwgdiwgcV1bbW9kXTtcblxuICAgIHJldHVybiB7IHI6IHIgKiAyNTUsIGc6IGcgKiAyNTUsIGI6IGIgKiAyNTUgfTtcbn1cblxuLy8gYHJnYlRvSGV4YFxuLy8gQ29udmVydHMgYW4gUkdCIGNvbG9yIHRvIGhleFxuLy8gQXNzdW1lcyByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDI1NV1cbi8vIFJldHVybnMgYSAzIG9yIDYgY2hhcmFjdGVyIGhleFxuZnVuY3Rpb24gcmdiVG9IZXgociwgZywgYiwgYWxsb3czQ2hhcikge1xuXG4gICAgdmFyIGhleCA9IFtcbiAgICAgICAgcGFkMihtYXRoUm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoZykudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoYikudG9TdHJpbmcoMTYpKVxuICAgIF07XG5cbiAgICAvLyBSZXR1cm4gYSAzIGNoYXJhY3RlciBoZXggaWYgcG9zc2libGVcbiAgICBpZiAoYWxsb3czQ2hhciAmJiBoZXhbMF0uY2hhckF0KDApID09IGhleFswXS5jaGFyQXQoMSkgJiYgaGV4WzFdLmNoYXJBdCgwKSA9PSBoZXhbMV0uY2hhckF0KDEpICYmIGhleFsyXS5jaGFyQXQoMCkgPT0gaGV4WzJdLmNoYXJBdCgxKSkge1xuICAgICAgICByZXR1cm4gaGV4WzBdLmNoYXJBdCgwKSArIGhleFsxXS5jaGFyQXQoMCkgKyBoZXhbMl0uY2hhckF0KDApO1xuICAgIH1cblxuICAgIHJldHVybiBoZXguam9pbihcIlwiKTtcbn1cblxuLy8gYHJnYmFUb0hleGBcbi8vIENvbnZlcnRzIGFuIFJHQkEgY29sb3IgcGx1cyBhbHBoYSB0cmFuc3BhcmVuY3kgdG8gaGV4XG4vLyBBc3N1bWVzIHIsIGcsIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdIGFuZFxuLy8gYSBpbiBbMCwgMV0uIFJldHVybnMgYSA0IG9yIDggY2hhcmFjdGVyIHJnYmEgaGV4XG5mdW5jdGlvbiByZ2JhVG9IZXgociwgZywgYiwgYSwgYWxsb3c0Q2hhcikge1xuXG4gICAgdmFyIGhleCA9IFtcbiAgICAgICAgcGFkMihtYXRoUm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoZykudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoYikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihjb252ZXJ0RGVjaW1hbFRvSGV4KGEpKVxuICAgIF07XG5cbiAgICAvLyBSZXR1cm4gYSA0IGNoYXJhY3RlciBoZXggaWYgcG9zc2libGVcbiAgICBpZiAoYWxsb3c0Q2hhciAmJiBoZXhbMF0uY2hhckF0KDApID09IGhleFswXS5jaGFyQXQoMSkgJiYgaGV4WzFdLmNoYXJBdCgwKSA9PSBoZXhbMV0uY2hhckF0KDEpICYmIGhleFsyXS5jaGFyQXQoMCkgPT0gaGV4WzJdLmNoYXJBdCgxKSAmJiBoZXhbM10uY2hhckF0KDApID09IGhleFszXS5jaGFyQXQoMSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKSArIGhleFszXS5jaGFyQXQoMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhleC5qb2luKFwiXCIpO1xufVxuXG4vLyBgcmdiYVRvQXJnYkhleGBcbi8vIENvbnZlcnRzIGFuIFJHQkEgY29sb3IgdG8gYW4gQVJHQiBIZXg4IHN0cmluZ1xuLy8gUmFyZWx5IHVzZWQsIGJ1dCByZXF1aXJlZCBmb3IgXCJ0b0ZpbHRlcigpXCJcbmZ1bmN0aW9uIHJnYmFUb0FyZ2JIZXgociwgZywgYiwgYSkge1xuXG4gICAgdmFyIGhleCA9IFtcbiAgICAgICAgcGFkMihjb252ZXJ0RGVjaW1hbFRvSGV4KGEpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoZykudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihtYXRoUm91bmQoYikudG9TdHJpbmcoMTYpKVxuICAgIF07XG5cbiAgICByZXR1cm4gaGV4LmpvaW4oXCJcIik7XG59XG5cbi8vIGBlcXVhbHNgXG4vLyBDYW4gYmUgY2FsbGVkIHdpdGggYW55IHRpbnljb2xvciBpbnB1dFxudGlueWNvbG9yLmVxdWFscyA9IGZ1bmN0aW9uIChjb2xvcjEsIGNvbG9yMikge1xuICAgIGlmICghY29sb3IxIHx8ICFjb2xvcjIpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcjEpLnRvUmdiU3RyaW5nKCkgPT0gdGlueWNvbG9yKGNvbG9yMikudG9SZ2JTdHJpbmcoKTtcbn07XG5cbnRpbnljb2xvci5yYW5kb20gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlueWNvbG9yLmZyb21SYXRpbyh7XG4gICAgICAgIHI6IG1hdGhSYW5kb20oKSxcbiAgICAgICAgZzogbWF0aFJhbmRvbSgpLFxuICAgICAgICBiOiBtYXRoUmFuZG9tKClcbiAgICB9KTtcbn07XG5cblxuLy8gTW9kaWZpY2F0aW9uIEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVGhhbmtzIHRvIGxlc3MuanMgZm9yIHNvbWUgb2YgdGhlIGJhc2ljcyBoZXJlXG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkaGVhZC9sZXNzLmpzL2Jsb2IvbWFzdGVyL2xpYi9sZXNzL2Z1bmN0aW9ucy5qcz5cblxuZnVuY3Rpb24gZGVzYXR1cmF0ZShjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wucyAtPSBhbW91bnQgLyAxMDA7XG4gICAgaHNsLnMgPSBjbGFtcDAxKGhzbC5zKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIHNhdHVyYXRlKGNvbG9yLCBhbW91bnQpIHtcbiAgICBhbW91bnQgPSAoYW1vdW50ID09PSAwKSA/IDAgOiAoYW1vdW50IHx8IDEwKTtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIGhzbC5zICs9IGFtb3VudCAvIDEwMDtcbiAgICBoc2wucyA9IGNsYW1wMDEoaHNsLnMpO1xuICAgIHJldHVybiB0aW55Y29sb3IoaHNsKTtcbn1cblxuZnVuY3Rpb24gZ3JleXNjYWxlKGNvbG9yKSB7XG4gICAgcmV0dXJuIHRpbnljb2xvcihjb2xvcikuZGVzYXR1cmF0ZSgxMDApO1xufVxuXG5mdW5jdGlvbiBsaWdodGVuIChjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wubCArPSBhbW91bnQgLyAxMDA7XG4gICAgaHNsLmwgPSBjbGFtcDAxKGhzbC5sKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIGJyaWdodGVuKGNvbG9yLCBhbW91bnQpIHtcbiAgICBhbW91bnQgPSAoYW1vdW50ID09PSAwKSA/IDAgOiAoYW1vdW50IHx8IDEwKTtcbiAgICB2YXIgcmdiID0gdGlueWNvbG9yKGNvbG9yKS50b1JnYigpO1xuICAgIHJnYi5yID0gbWF0aE1heCgwLCBtYXRoTWluKDI1NSwgcmdiLnIgLSBtYXRoUm91bmQoMjU1ICogLSAoYW1vdW50IC8gMTAwKSkpKTtcbiAgICByZ2IuZyA9IG1hdGhNYXgoMCwgbWF0aE1pbigyNTUsIHJnYi5nIC0gbWF0aFJvdW5kKDI1NSAqIC0gKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgcmdiLmIgPSBtYXRoTWF4KDAsIG1hdGhNaW4oMjU1LCByZ2IuYiAtIG1hdGhSb3VuZCgyNTUgKiAtIChhbW91bnQgLyAxMDApKSkpO1xuICAgIHJldHVybiB0aW55Y29sb3IocmdiKTtcbn1cblxuZnVuY3Rpb24gZGFya2VuIChjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wubCAtPSBhbW91bnQgLyAxMDA7XG4gICAgaHNsLmwgPSBjbGFtcDAxKGhzbC5sKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbi8vIFNwaW4gdGFrZXMgYSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSBhbW91bnQgd2l0aGluIFstMzYwLCAzNjBdIGluZGljYXRpbmcgdGhlIGNoYW5nZSBvZiBodWUuXG4vLyBWYWx1ZXMgb3V0c2lkZSBvZiB0aGlzIHJhbmdlIHdpbGwgYmUgd3JhcHBlZCBpbnRvIHRoaXMgcmFuZ2UuXG5mdW5jdGlvbiBzcGluKGNvbG9yLCBhbW91bnQpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIHZhciBodWUgPSAoaHNsLmggKyBhbW91bnQpICUgMzYwO1xuICAgIGhzbC5oID0gaHVlIDwgMCA/IDM2MCArIGh1ZSA6IGh1ZTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbi8vIENvbWJpbmF0aW9uIEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGFua3MgdG8galF1ZXJ5IHhDb2xvciBmb3Igc29tZSBvZiB0aGUgaWRlYXMgYmVoaW5kIHRoZXNlXG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2luZnVzaW9uL2pRdWVyeS14Y29sb3IvYmxvYi9tYXN0ZXIvanF1ZXJ5Lnhjb2xvci5qcz5cblxuZnVuY3Rpb24gY29tcGxlbWVudChjb2xvcikge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmggPSAoaHNsLmggKyAxODApICUgMzYwO1xuICAgIHJldHVybiB0aW55Y29sb3IoaHNsKTtcbn1cblxuZnVuY3Rpb24gdHJpYWQoY29sb3IpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIHZhciBoID0gaHNsLmg7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdGlueWNvbG9yKGNvbG9yKSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyAxMjApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMjQwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pXG4gICAgXTtcbn1cblxuZnVuY3Rpb24gdGV0cmFkKGNvbG9yKSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaCA9IGhzbC5oO1xuICAgIHJldHVybiBbXG4gICAgICAgIHRpbnljb2xvcihjb2xvciksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgOTApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMTgwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDI3MCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KVxuICAgIF07XG59XG5cbmZ1bmN0aW9uIHNwbGl0Y29tcGxlbWVudChjb2xvcikge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIGggPSBoc2wuaDtcbiAgICByZXR1cm4gW1xuICAgICAgICB0aW55Y29sb3IoY29sb3IpLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDcyKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sfSksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMjE2KSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sfSlcbiAgICBdO1xufVxuXG5mdW5jdGlvbiBhbmFsb2dvdXMoY29sb3IsIHJlc3VsdHMsIHNsaWNlcykge1xuICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IDY7XG4gICAgc2xpY2VzID0gc2xpY2VzIHx8IDMwO1xuXG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgcGFydCA9IDM2MCAvIHNsaWNlcztcbiAgICB2YXIgcmV0ID0gW3Rpbnljb2xvcihjb2xvcildO1xuXG4gICAgZm9yIChoc2wuaCA9ICgoaHNsLmggLSAocGFydCAqIHJlc3VsdHMgPj4gMSkpICsgNzIwKSAlIDM2MDsgLS1yZXN1bHRzOyApIHtcbiAgICAgICAgaHNsLmggPSAoaHNsLmggKyBwYXJ0KSAlIDM2MDtcbiAgICAgICAgcmV0LnB1c2godGlueWNvbG9yKGhzbCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBtb25vY2hyb21hdGljKGNvbG9yLCByZXN1bHRzKSB7XG4gICAgcmVzdWx0cyA9IHJlc3VsdHMgfHwgNjtcbiAgICB2YXIgaHN2ID0gdGlueWNvbG9yKGNvbG9yKS50b0hzdigpO1xuICAgIHZhciBoID0gaHN2LmgsIHMgPSBoc3YucywgdiA9IGhzdi52O1xuICAgIHZhciByZXQgPSBbXTtcbiAgICB2YXIgbW9kaWZpY2F0aW9uID0gMSAvIHJlc3VsdHM7XG5cbiAgICB3aGlsZSAocmVzdWx0cy0tKSB7XG4gICAgICAgIHJldC5wdXNoKHRpbnljb2xvcih7IGg6IGgsIHM6IHMsIHY6IHZ9KSk7XG4gICAgICAgIHYgPSAodiArIG1vZGlmaWNhdGlvbikgJSAxO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59XG5cbi8vIFV0aWxpdHkgRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudGlueWNvbG9yLm1peCA9IGZ1bmN0aW9uKGNvbG9yMSwgY29sb3IyLCBhbW91bnQpIHtcbiAgICBhbW91bnQgPSAoYW1vdW50ID09PSAwKSA/IDAgOiAoYW1vdW50IHx8IDUwKTtcblxuICAgIHZhciByZ2IxID0gdGlueWNvbG9yKGNvbG9yMSkudG9SZ2IoKTtcbiAgICB2YXIgcmdiMiA9IHRpbnljb2xvcihjb2xvcjIpLnRvUmdiKCk7XG5cbiAgICB2YXIgcCA9IGFtb3VudCAvIDEwMDtcblxuICAgIHZhciByZ2JhID0ge1xuICAgICAgICByOiAoKHJnYjIuciAtIHJnYjEucikgKiBwKSArIHJnYjEucixcbiAgICAgICAgZzogKChyZ2IyLmcgLSByZ2IxLmcpICogcCkgKyByZ2IxLmcsXG4gICAgICAgIGI6ICgocmdiMi5iIC0gcmdiMS5iKSAqIHApICsgcmdiMS5iLFxuICAgICAgICBhOiAoKHJnYjIuYSAtIHJnYjEuYSkgKiBwKSArIHJnYjEuYVxuICAgIH07XG5cbiAgICByZXR1cm4gdGlueWNvbG9yKHJnYmEpO1xufTtcblxuXG4vLyBSZWFkYWJpbGl0eSBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jY29udHJhc3QtcmF0aW9kZWYgKFdDQUcgVmVyc2lvbiAyKVxuXG4vLyBgY29udHJhc3RgXG4vLyBBbmFseXplIHRoZSAyIGNvbG9ycyBhbmQgcmV0dXJucyB0aGUgY29sb3IgY29udHJhc3QgZGVmaW5lZCBieSAoV0NBRyBWZXJzaW9uIDIpXG50aW55Y29sb3IucmVhZGFiaWxpdHkgPSBmdW5jdGlvbihjb2xvcjEsIGNvbG9yMikge1xuICAgIHZhciBjMSA9IHRpbnljb2xvcihjb2xvcjEpO1xuICAgIHZhciBjMiA9IHRpbnljb2xvcihjb2xvcjIpO1xuICAgIHJldHVybiAoTWF0aC5tYXgoYzEuZ2V0THVtaW5hbmNlKCksYzIuZ2V0THVtaW5hbmNlKCkpKzAuMDUpIC8gKE1hdGgubWluKGMxLmdldEx1bWluYW5jZSgpLGMyLmdldEx1bWluYW5jZSgpKSswLjA1KTtcbn07XG5cbi8vIGBpc1JlYWRhYmxlYFxuLy8gRW5zdXJlIHRoYXQgZm9yZWdyb3VuZCBhbmQgYmFja2dyb3VuZCBjb2xvciBjb21iaW5hdGlvbnMgbWVldCBXQ0FHMiBndWlkZWxpbmVzLlxuLy8gVGhlIHRoaXJkIGFyZ3VtZW50IGlzIGFuIG9wdGlvbmFsIE9iamVjdC5cbi8vICAgICAgdGhlICdsZXZlbCcgcHJvcGVydHkgc3RhdGVzICdBQScgb3IgJ0FBQScgLSBpZiBtaXNzaW5nIG9yIGludmFsaWQsIGl0IGRlZmF1bHRzIHRvICdBQSc7XG4vLyAgICAgIHRoZSAnc2l6ZScgcHJvcGVydHkgc3RhdGVzICdsYXJnZScgb3IgJ3NtYWxsJyAtIGlmIG1pc3Npbmcgb3IgaW52YWxpZCwgaXQgZGVmYXVsdHMgdG8gJ3NtYWxsJy5cbi8vIElmIHRoZSBlbnRpcmUgb2JqZWN0IGlzIGFic2VudCwgaXNSZWFkYWJsZSBkZWZhdWx0cyB0byB7bGV2ZWw6XCJBQVwiLHNpemU6XCJzbWFsbFwifS5cblxuLy8gKkV4YW1wbGUqXG4vLyAgICB0aW55Y29sb3IuaXNSZWFkYWJsZShcIiMwMDBcIiwgXCIjMTExXCIpID0+IGZhbHNlXG4vLyAgICB0aW55Y29sb3IuaXNSZWFkYWJsZShcIiMwMDBcIiwgXCIjMTExXCIse2xldmVsOlwiQUFcIixzaXplOlwibGFyZ2VcIn0pID0+IGZhbHNlXG50aW55Y29sb3IuaXNSZWFkYWJsZSA9IGZ1bmN0aW9uKGNvbG9yMSwgY29sb3IyLCB3Y2FnMikge1xuICAgIHZhciByZWFkYWJpbGl0eSA9IHRpbnljb2xvci5yZWFkYWJpbGl0eShjb2xvcjEsIGNvbG9yMik7XG4gICAgdmFyIHdjYWcyUGFybXMsIG91dDtcblxuICAgIG91dCA9IGZhbHNlO1xuXG4gICAgd2NhZzJQYXJtcyA9IHZhbGlkYXRlV0NBRzJQYXJtcyh3Y2FnMik7XG4gICAgc3dpdGNoICh3Y2FnMlBhcm1zLmxldmVsICsgd2NhZzJQYXJtcy5zaXplKSB7XG4gICAgICAgIGNhc2UgXCJBQXNtYWxsXCI6XG4gICAgICAgIGNhc2UgXCJBQUFsYXJnZVwiOlxuICAgICAgICAgICAgb3V0ID0gcmVhZGFiaWxpdHkgPj0gNC41O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBQWxhcmdlXCI6XG4gICAgICAgICAgICBvdXQgPSByZWFkYWJpbGl0eSA+PSAzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBQUFzbWFsbFwiOlxuICAgICAgICAgICAgb3V0ID0gcmVhZGFiaWxpdHkgPj0gNztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuXG59O1xuXG4vLyBgbW9zdFJlYWRhYmxlYFxuLy8gR2l2ZW4gYSBiYXNlIGNvbG9yIGFuZCBhIGxpc3Qgb2YgcG9zc2libGUgZm9yZWdyb3VuZCBvciBiYWNrZ3JvdW5kXG4vLyBjb2xvcnMgZm9yIHRoYXQgYmFzZSwgcmV0dXJucyB0aGUgbW9zdCByZWFkYWJsZSBjb2xvci5cbi8vIE9wdGlvbmFsbHkgcmV0dXJucyBCbGFjayBvciBXaGl0ZSBpZiB0aGUgbW9zdCByZWFkYWJsZSBjb2xvciBpcyB1bnJlYWRhYmxlLlxuLy8gKkV4YW1wbGUqXG4vLyAgICB0aW55Y29sb3IubW9zdFJlYWRhYmxlKHRpbnljb2xvci5tb3N0UmVhZGFibGUoXCIjMTIzXCIsIFtcIiMxMjRcIiwgXCIjMTI1XCJdLHtpbmNsdWRlRmFsbGJhY2tDb2xvcnM6ZmFsc2V9KS50b0hleFN0cmluZygpOyAvLyBcIiMxMTIyNTVcIlxuLy8gICAgdGlueWNvbG9yLm1vc3RSZWFkYWJsZSh0aW55Y29sb3IubW9zdFJlYWRhYmxlKFwiIzEyM1wiLCBbXCIjMTI0XCIsIFwiIzEyNVwiXSx7aW5jbHVkZUZhbGxiYWNrQ29sb3JzOnRydWV9KS50b0hleFN0cmluZygpOyAgLy8gXCIjZmZmZmZmXCJcbi8vICAgIHRpbnljb2xvci5tb3N0UmVhZGFibGUoXCIjYTgwMTVhXCIsIFtcIiNmYWYzZjNcIl0se2luY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlLGxldmVsOlwiQUFBXCIsc2l6ZTpcImxhcmdlXCJ9KS50b0hleFN0cmluZygpOyAvLyBcIiNmYWYzZjNcIlxuLy8gICAgdGlueWNvbG9yLm1vc3RSZWFkYWJsZShcIiNhODAxNWFcIiwgW1wiI2ZhZjNmM1wiXSx7aW5jbHVkZUZhbGxiYWNrQ29sb3JzOnRydWUsbGV2ZWw6XCJBQUFcIixzaXplOlwic21hbGxcIn0pLnRvSGV4U3RyaW5nKCk7IC8vIFwiI2ZmZmZmZlwiXG50aW55Y29sb3IubW9zdFJlYWRhYmxlID0gZnVuY3Rpb24oYmFzZUNvbG9yLCBjb2xvckxpc3QsIGFyZ3MpIHtcbiAgICB2YXIgYmVzdENvbG9yID0gbnVsbDtcbiAgICB2YXIgYmVzdFNjb3JlID0gMDtcbiAgICB2YXIgcmVhZGFiaWxpdHk7XG4gICAgdmFyIGluY2x1ZGVGYWxsYmFja0NvbG9ycywgbGV2ZWwsIHNpemUgO1xuICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuICAgIGluY2x1ZGVGYWxsYmFja0NvbG9ycyA9IGFyZ3MuaW5jbHVkZUZhbGxiYWNrQ29sb3JzIDtcbiAgICBsZXZlbCA9IGFyZ3MubGV2ZWw7XG4gICAgc2l6ZSA9IGFyZ3Muc2l6ZTtcblxuICAgIGZvciAodmFyIGk9IDA7IGkgPCBjb2xvckxpc3QubGVuZ3RoIDsgaSsrKSB7XG4gICAgICAgIHJlYWRhYmlsaXR5ID0gdGlueWNvbG9yLnJlYWRhYmlsaXR5KGJhc2VDb2xvciwgY29sb3JMaXN0W2ldKTtcbiAgICAgICAgaWYgKHJlYWRhYmlsaXR5ID4gYmVzdFNjb3JlKSB7XG4gICAgICAgICAgICBiZXN0U2NvcmUgPSByZWFkYWJpbGl0eTtcbiAgICAgICAgICAgIGJlc3RDb2xvciA9IHRpbnljb2xvcihjb2xvckxpc3RbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbnljb2xvci5pc1JlYWRhYmxlKGJhc2VDb2xvciwgYmVzdENvbG9yLCB7XCJsZXZlbFwiOmxldmVsLFwic2l6ZVwiOnNpemV9KSB8fCAhaW5jbHVkZUZhbGxiYWNrQ29sb3JzKSB7XG4gICAgICAgIHJldHVybiBiZXN0Q29sb3I7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhcmdzLmluY2x1ZGVGYWxsYmFja0NvbG9ycz1mYWxzZTtcbiAgICAgICAgcmV0dXJuIHRpbnljb2xvci5tb3N0UmVhZGFibGUoYmFzZUNvbG9yLFtcIiNmZmZcIiwgXCIjMDAwXCJdLGFyZ3MpO1xuICAgIH1cbn07XG5cblxuLy8gQmlnIExpc3Qgb2YgQ29sb3JzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS1cbi8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yLyNzdmctY29sb3I+XG52YXIgbmFtZXMgPSB0aW55Y29sb3IubmFtZXMgPSB7XG4gICAgYWxpY2VibHVlOiBcImYwZjhmZlwiLFxuICAgIGFudGlxdWV3aGl0ZTogXCJmYWViZDdcIixcbiAgICBhcXVhOiBcIjBmZlwiLFxuICAgIGFxdWFtYXJpbmU6IFwiN2ZmZmQ0XCIsXG4gICAgYXp1cmU6IFwiZjBmZmZmXCIsXG4gICAgYmVpZ2U6IFwiZjVmNWRjXCIsXG4gICAgYmlzcXVlOiBcImZmZTRjNFwiLFxuICAgIGJsYWNrOiBcIjAwMFwiLFxuICAgIGJsYW5jaGVkYWxtb25kOiBcImZmZWJjZFwiLFxuICAgIGJsdWU6IFwiMDBmXCIsXG4gICAgYmx1ZXZpb2xldDogXCI4YTJiZTJcIixcbiAgICBicm93bjogXCJhNTJhMmFcIixcbiAgICBidXJseXdvb2Q6IFwiZGViODg3XCIsXG4gICAgYnVybnRzaWVubmE6IFwiZWE3ZTVkXCIsXG4gICAgY2FkZXRibHVlOiBcIjVmOWVhMFwiLFxuICAgIGNoYXJ0cmV1c2U6IFwiN2ZmZjAwXCIsXG4gICAgY2hvY29sYXRlOiBcImQyNjkxZVwiLFxuICAgIGNvcmFsOiBcImZmN2Y1MFwiLFxuICAgIGNvcm5mbG93ZXJibHVlOiBcIjY0OTVlZFwiLFxuICAgIGNvcm5zaWxrOiBcImZmZjhkY1wiLFxuICAgIGNyaW1zb246IFwiZGMxNDNjXCIsXG4gICAgY3lhbjogXCIwZmZcIixcbiAgICBkYXJrYmx1ZTogXCIwMDAwOGJcIixcbiAgICBkYXJrY3lhbjogXCIwMDhiOGJcIixcbiAgICBkYXJrZ29sZGVucm9kOiBcImI4ODYwYlwiLFxuICAgIGRhcmtncmF5OiBcImE5YTlhOVwiLFxuICAgIGRhcmtncmVlbjogXCIwMDY0MDBcIixcbiAgICBkYXJrZ3JleTogXCJhOWE5YTlcIixcbiAgICBkYXJra2hha2k6IFwiYmRiNzZiXCIsXG4gICAgZGFya21hZ2VudGE6IFwiOGIwMDhiXCIsXG4gICAgZGFya29saXZlZ3JlZW46IFwiNTU2YjJmXCIsXG4gICAgZGFya29yYW5nZTogXCJmZjhjMDBcIixcbiAgICBkYXJrb3JjaGlkOiBcIjk5MzJjY1wiLFxuICAgIGRhcmtyZWQ6IFwiOGIwMDAwXCIsXG4gICAgZGFya3NhbG1vbjogXCJlOTk2N2FcIixcbiAgICBkYXJrc2VhZ3JlZW46IFwiOGZiYzhmXCIsXG4gICAgZGFya3NsYXRlYmx1ZTogXCI0ODNkOGJcIixcbiAgICBkYXJrc2xhdGVncmF5OiBcIjJmNGY0ZlwiLFxuICAgIGRhcmtzbGF0ZWdyZXk6IFwiMmY0ZjRmXCIsXG4gICAgZGFya3R1cnF1b2lzZTogXCIwMGNlZDFcIixcbiAgICBkYXJrdmlvbGV0OiBcIjk0MDBkM1wiLFxuICAgIGRlZXBwaW5rOiBcImZmMTQ5M1wiLFxuICAgIGRlZXBza3libHVlOiBcIjAwYmZmZlwiLFxuICAgIGRpbWdyYXk6IFwiNjk2OTY5XCIsXG4gICAgZGltZ3JleTogXCI2OTY5NjlcIixcbiAgICBkb2RnZXJibHVlOiBcIjFlOTBmZlwiLFxuICAgIGZpcmVicmljazogXCJiMjIyMjJcIixcbiAgICBmbG9yYWx3aGl0ZTogXCJmZmZhZjBcIixcbiAgICBmb3Jlc3RncmVlbjogXCIyMjhiMjJcIixcbiAgICBmdWNoc2lhOiBcImYwZlwiLFxuICAgIGdhaW5zYm9ybzogXCJkY2RjZGNcIixcbiAgICBnaG9zdHdoaXRlOiBcImY4ZjhmZlwiLFxuICAgIGdvbGQ6IFwiZmZkNzAwXCIsXG4gICAgZ29sZGVucm9kOiBcImRhYTUyMFwiLFxuICAgIGdyYXk6IFwiODA4MDgwXCIsXG4gICAgZ3JlZW46IFwiMDA4MDAwXCIsXG4gICAgZ3JlZW55ZWxsb3c6IFwiYWRmZjJmXCIsXG4gICAgZ3JleTogXCI4MDgwODBcIixcbiAgICBob25leWRldzogXCJmMGZmZjBcIixcbiAgICBob3RwaW5rOiBcImZmNjliNFwiLFxuICAgIGluZGlhbnJlZDogXCJjZDVjNWNcIixcbiAgICBpbmRpZ286IFwiNGIwMDgyXCIsXG4gICAgaXZvcnk6IFwiZmZmZmYwXCIsXG4gICAga2hha2k6IFwiZjBlNjhjXCIsXG4gICAgbGF2ZW5kZXI6IFwiZTZlNmZhXCIsXG4gICAgbGF2ZW5kZXJibHVzaDogXCJmZmYwZjVcIixcbiAgICBsYXduZ3JlZW46IFwiN2NmYzAwXCIsXG4gICAgbGVtb25jaGlmZm9uOiBcImZmZmFjZFwiLFxuICAgIGxpZ2h0Ymx1ZTogXCJhZGQ4ZTZcIixcbiAgICBsaWdodGNvcmFsOiBcImYwODA4MFwiLFxuICAgIGxpZ2h0Y3lhbjogXCJlMGZmZmZcIixcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogXCJmYWZhZDJcIixcbiAgICBsaWdodGdyYXk6IFwiZDNkM2QzXCIsXG4gICAgbGlnaHRncmVlbjogXCI5MGVlOTBcIixcbiAgICBsaWdodGdyZXk6IFwiZDNkM2QzXCIsXG4gICAgbGlnaHRwaW5rOiBcImZmYjZjMVwiLFxuICAgIGxpZ2h0c2FsbW9uOiBcImZmYTA3YVwiLFxuICAgIGxpZ2h0c2VhZ3JlZW46IFwiMjBiMmFhXCIsXG4gICAgbGlnaHRza3libHVlOiBcIjg3Y2VmYVwiLFxuICAgIGxpZ2h0c2xhdGVncmF5OiBcIjc4OVwiLFxuICAgIGxpZ2h0c2xhdGVncmV5OiBcIjc4OVwiLFxuICAgIGxpZ2h0c3RlZWxibHVlOiBcImIwYzRkZVwiLFxuICAgIGxpZ2h0eWVsbG93OiBcImZmZmZlMFwiLFxuICAgIGxpbWU6IFwiMGYwXCIsXG4gICAgbGltZWdyZWVuOiBcIjMyY2QzMlwiLFxuICAgIGxpbmVuOiBcImZhZjBlNlwiLFxuICAgIG1hZ2VudGE6IFwiZjBmXCIsXG4gICAgbWFyb29uOiBcIjgwMDAwMFwiLFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IFwiNjZjZGFhXCIsXG4gICAgbWVkaXVtYmx1ZTogXCIwMDAwY2RcIixcbiAgICBtZWRpdW1vcmNoaWQ6IFwiYmE1NWQzXCIsXG4gICAgbWVkaXVtcHVycGxlOiBcIjkzNzBkYlwiLFxuICAgIG1lZGl1bXNlYWdyZWVuOiBcIjNjYjM3MVwiLFxuICAgIG1lZGl1bXNsYXRlYmx1ZTogXCI3YjY4ZWVcIixcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogXCIwMGZhOWFcIixcbiAgICBtZWRpdW10dXJxdW9pc2U6IFwiNDhkMWNjXCIsXG4gICAgbWVkaXVtdmlvbGV0cmVkOiBcImM3MTU4NVwiLFxuICAgIG1pZG5pZ2h0Ymx1ZTogXCIxOTE5NzBcIixcbiAgICBtaW50Y3JlYW06IFwiZjVmZmZhXCIsXG4gICAgbWlzdHlyb3NlOiBcImZmZTRlMVwiLFxuICAgIG1vY2Nhc2luOiBcImZmZTRiNVwiLFxuICAgIG5hdmFqb3doaXRlOiBcImZmZGVhZFwiLFxuICAgIG5hdnk6IFwiMDAwMDgwXCIsXG4gICAgb2xkbGFjZTogXCJmZGY1ZTZcIixcbiAgICBvbGl2ZTogXCI4MDgwMDBcIixcbiAgICBvbGl2ZWRyYWI6IFwiNmI4ZTIzXCIsXG4gICAgb3JhbmdlOiBcImZmYTUwMFwiLFxuICAgIG9yYW5nZXJlZDogXCJmZjQ1MDBcIixcbiAgICBvcmNoaWQ6IFwiZGE3MGQ2XCIsXG4gICAgcGFsZWdvbGRlbnJvZDogXCJlZWU4YWFcIixcbiAgICBwYWxlZ3JlZW46IFwiOThmYjk4XCIsXG4gICAgcGFsZXR1cnF1b2lzZTogXCJhZmVlZWVcIixcbiAgICBwYWxldmlvbGV0cmVkOiBcImRiNzA5M1wiLFxuICAgIHBhcGF5YXdoaXA6IFwiZmZlZmQ1XCIsXG4gICAgcGVhY2hwdWZmOiBcImZmZGFiOVwiLFxuICAgIHBlcnU6IFwiY2Q4NTNmXCIsXG4gICAgcGluazogXCJmZmMwY2JcIixcbiAgICBwbHVtOiBcImRkYTBkZFwiLFxuICAgIHBvd2RlcmJsdWU6IFwiYjBlMGU2XCIsXG4gICAgcHVycGxlOiBcIjgwMDA4MFwiLFxuICAgIHJlYmVjY2FwdXJwbGU6IFwiNjYzMzk5XCIsXG4gICAgcmVkOiBcImYwMFwiLFxuICAgIHJvc3licm93bjogXCJiYzhmOGZcIixcbiAgICByb3lhbGJsdWU6IFwiNDE2OWUxXCIsXG4gICAgc2FkZGxlYnJvd246IFwiOGI0NTEzXCIsXG4gICAgc2FsbW9uOiBcImZhODA3MlwiLFxuICAgIHNhbmR5YnJvd246IFwiZjRhNDYwXCIsXG4gICAgc2VhZ3JlZW46IFwiMmU4YjU3XCIsXG4gICAgc2Vhc2hlbGw6IFwiZmZmNWVlXCIsXG4gICAgc2llbm5hOiBcImEwNTIyZFwiLFxuICAgIHNpbHZlcjogXCJjMGMwYzBcIixcbiAgICBza3libHVlOiBcIjg3Y2VlYlwiLFxuICAgIHNsYXRlYmx1ZTogXCI2YTVhY2RcIixcbiAgICBzbGF0ZWdyYXk6IFwiNzA4MDkwXCIsXG4gICAgc2xhdGVncmV5OiBcIjcwODA5MFwiLFxuICAgIHNub3c6IFwiZmZmYWZhXCIsXG4gICAgc3ByaW5nZ3JlZW46IFwiMDBmZjdmXCIsXG4gICAgc3RlZWxibHVlOiBcIjQ2ODJiNFwiLFxuICAgIHRhbjogXCJkMmI0OGNcIixcbiAgICB0ZWFsOiBcIjAwODA4MFwiLFxuICAgIHRoaXN0bGU6IFwiZDhiZmQ4XCIsXG4gICAgdG9tYXRvOiBcImZmNjM0N1wiLFxuICAgIHR1cnF1b2lzZTogXCI0MGUwZDBcIixcbiAgICB2aW9sZXQ6IFwiZWU4MmVlXCIsXG4gICAgd2hlYXQ6IFwiZjVkZWIzXCIsXG4gICAgd2hpdGU6IFwiZmZmXCIsXG4gICAgd2hpdGVzbW9rZTogXCJmNWY1ZjVcIixcbiAgICB5ZWxsb3c6IFwiZmYwXCIsXG4gICAgeWVsbG93Z3JlZW46IFwiOWFjZDMyXCJcbn07XG5cbi8vIE1ha2UgaXQgZWFzeSB0byBhY2Nlc3MgY29sb3JzIHZpYSBgaGV4TmFtZXNbaGV4XWBcbnZhciBoZXhOYW1lcyA9IHRpbnljb2xvci5oZXhOYW1lcyA9IGZsaXAobmFtZXMpO1xuXG5cbi8vIFV0aWxpdGllc1xuLy8gLS0tLS0tLS0tXG5cbi8vIGB7ICduYW1lMSc6ICd2YWwxJyB9YCBiZWNvbWVzIGB7ICd2YWwxJzogJ25hbWUxJyB9YFxuZnVuY3Rpb24gZmxpcChvKSB7XG4gICAgdmFyIGZsaXBwZWQgPSB7IH07XG4gICAgZm9yICh2YXIgaSBpbiBvKSB7XG4gICAgICAgIGlmIChvLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICBmbGlwcGVkW29baV1dID0gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmxpcHBlZDtcbn1cblxuLy8gUmV0dXJuIGEgdmFsaWQgYWxwaGEgdmFsdWUgWzAsMV0gd2l0aCBhbGwgaW52YWxpZCB2YWx1ZXMgYmVpbmcgc2V0IHRvIDFcbmZ1bmN0aW9uIGJvdW5kQWxwaGEoYSkge1xuICAgIGEgPSBwYXJzZUZsb2F0KGEpO1xuXG4gICAgaWYgKGlzTmFOKGEpIHx8IGEgPCAwIHx8IGEgPiAxKSB7XG4gICAgICAgIGEgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xufVxuXG4vLyBUYWtlIGlucHV0IGZyb20gWzAsIG5dIGFuZCByZXR1cm4gaXQgYXMgWzAsIDFdXG5mdW5jdGlvbiBib3VuZDAxKG4sIG1heCkge1xuICAgIGlmIChpc09uZVBvaW50WmVybyhuKSkgeyBuID0gXCIxMDAlXCI7IH1cblxuICAgIHZhciBwcm9jZXNzUGVyY2VudCA9IGlzUGVyY2VudGFnZShuKTtcbiAgICBuID0gbWF0aE1pbihtYXgsIG1hdGhNYXgoMCwgcGFyc2VGbG9hdChuKSkpO1xuXG4gICAgLy8gQXV0b21hdGljYWxseSBjb252ZXJ0IHBlcmNlbnRhZ2UgaW50byBudW1iZXJcbiAgICBpZiAocHJvY2Vzc1BlcmNlbnQpIHtcbiAgICAgICAgbiA9IHBhcnNlSW50KG4gKiBtYXgsIDEwKSAvIDEwMDtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzXG4gICAgaWYgKChNYXRoLmFicyhuIC0gbWF4KSA8IDAuMDAwMDAxKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IGludG8gWzAsIDFdIHJhbmdlIGlmIGl0IGlzbid0IGFscmVhZHlcbiAgICByZXR1cm4gKG4gJSBtYXgpIC8gcGFyc2VGbG9hdChtYXgpO1xufVxuXG4vLyBGb3JjZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbmZ1bmN0aW9uIGNsYW1wMDEodmFsKSB7XG4gICAgcmV0dXJuIG1hdGhNaW4oMSwgbWF0aE1heCgwLCB2YWwpKTtcbn1cblxuLy8gUGFyc2UgYSBiYXNlLTE2IGhleCB2YWx1ZSBpbnRvIGEgYmFzZS0xMCBpbnRlZ2VyXG5mdW5jdGlvbiBwYXJzZUludEZyb21IZXgodmFsKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTYpO1xufVxuXG4vLyBOZWVkIHRvIGhhbmRsZSAxLjAgYXMgMTAwJSwgc2luY2Ugb25jZSBpdCBpcyBhIG51bWJlciwgdGhlcmUgaXMgbm8gZGlmZmVyZW5jZSBiZXR3ZWVuIGl0IGFuZCAxXG4vLyA8aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83NDIyMDcyL2phdmFzY3JpcHQtaG93LXRvLWRldGVjdC1udW1iZXItYXMtYS1kZWNpbWFsLWluY2x1ZGluZy0xLTA+XG5mdW5jdGlvbiBpc09uZVBvaW50WmVybyhuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09IFwic3RyaW5nXCIgJiYgbi5pbmRleE9mKCcuJykgIT0gLTEgJiYgcGFyc2VGbG9hdChuKSA9PT0gMTtcbn1cblxuLy8gQ2hlY2sgdG8gc2VlIGlmIHN0cmluZyBwYXNzZWQgaW4gaXMgYSBwZXJjZW50YWdlXG5mdW5jdGlvbiBpc1BlcmNlbnRhZ2Uobikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gXCJzdHJpbmdcIiAmJiBuLmluZGV4T2YoJyUnKSAhPSAtMTtcbn1cblxuLy8gRm9yY2UgYSBoZXggdmFsdWUgdG8gaGF2ZSAyIGNoYXJhY3RlcnNcbmZ1bmN0aW9uIHBhZDIoYykge1xuICAgIHJldHVybiBjLmxlbmd0aCA9PSAxID8gJzAnICsgYyA6ICcnICsgYztcbn1cblxuLy8gUmVwbGFjZSBhIGRlY2ltYWwgd2l0aCBpdCdzIHBlcmNlbnRhZ2UgdmFsdWVcbmZ1bmN0aW9uIGNvbnZlcnRUb1BlcmNlbnRhZ2Uobikge1xuICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgbiA9IChuICogMTAwKSArIFwiJVwiO1xuICAgIH1cblxuICAgIHJldHVybiBuO1xufVxuXG4vLyBDb252ZXJ0cyBhIGRlY2ltYWwgdG8gYSBoZXggdmFsdWVcbmZ1bmN0aW9uIGNvbnZlcnREZWNpbWFsVG9IZXgoZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZCkgKiAyNTUpLnRvU3RyaW5nKDE2KTtcbn1cbi8vIENvbnZlcnRzIGEgaGV4IHZhbHVlIHRvIGEgZGVjaW1hbFxuZnVuY3Rpb24gY29udmVydEhleFRvRGVjaW1hbChoKSB7XG4gICAgcmV0dXJuIChwYXJzZUludEZyb21IZXgoaCkgLyAyNTUpO1xufVxuXG52YXIgbWF0Y2hlcnMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI2ludGVnZXJzPlxuICAgIHZhciBDU1NfSU5URUdFUiA9IFwiWy1cXFxcK10/XFxcXGQrJT9cIjtcblxuICAgIC8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXZhbHVlcy8jbnVtYmVyLXZhbHVlPlxuICAgIHZhciBDU1NfTlVNQkVSID0gXCJbLVxcXFwrXT9cXFxcZCpcXFxcLlxcXFxkKyU/XCI7XG5cbiAgICAvLyBBbGxvdyBwb3NpdGl2ZS9uZWdhdGl2ZSBpbnRlZ2VyL251bWJlci4gIERvbid0IGNhcHR1cmUgdGhlIGVpdGhlci9vciwganVzdCB0aGUgZW50aXJlIG91dGNvbWUuXG4gICAgdmFyIENTU19VTklUID0gXCIoPzpcIiArIENTU19OVU1CRVIgKyBcIil8KD86XCIgKyBDU1NfSU5URUdFUiArIFwiKVwiO1xuXG4gICAgLy8gQWN0dWFsIG1hdGNoaW5nLlxuICAgIC8vIFBhcmVudGhlc2VzIGFuZCBjb21tYXMgYXJlIG9wdGlvbmFsLCBidXQgbm90IHJlcXVpcmVkLlxuICAgIC8vIFdoaXRlc3BhY2UgY2FuIHRha2UgdGhlIHBsYWNlIG9mIGNvbW1hcyBvciBvcGVuaW5nIHBhcmVuXG4gICAgdmFyIFBFUk1JU1NJVkVfTUFUQ0gzID0gXCJbXFxcXHN8XFxcXChdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpXFxcXHMqXFxcXCk/XCI7XG4gICAgdmFyIFBFUk1JU1NJVkVfTUFUQ0g0ID0gXCJbXFxcXHN8XFxcXChdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpXFxcXHMqXFxcXCk/XCI7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBDU1NfVU5JVDogbmV3IFJlZ0V4cChDU1NfVU5JVCksXG4gICAgICAgIHJnYjogbmV3IFJlZ0V4cChcInJnYlwiICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgICAgICByZ2JhOiBuZXcgUmVnRXhwKFwicmdiYVwiICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgICAgICBoc2w6IG5ldyBSZWdFeHAoXCJoc2xcIiArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICAgICAgaHNsYTogbmV3IFJlZ0V4cChcImhzbGFcIiArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICAgICAgaHN2OiBuZXcgUmVnRXhwKFwiaHN2XCIgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgICAgIGhzdmE6IG5ldyBSZWdFeHAoXCJoc3ZhXCIgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgICAgIGhleDM6IC9eIz8oWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLyxcbiAgICAgICAgaGV4NjogL14jPyhbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KSQvLFxuICAgICAgICBoZXg0OiAvXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLFxuICAgICAgICBoZXg4OiAvXiM/KFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KSQvXG4gICAgfTtcbn0pKCk7XG5cbi8vIGBpc1ZhbGlkQ1NTVW5pdGBcbi8vIFRha2UgaW4gYSBzaW5nbGUgc3RyaW5nIC8gbnVtYmVyIGFuZCBjaGVjayB0byBzZWUgaWYgaXQgbG9va3MgbGlrZSBhIENTUyB1bml0XG4vLyAoc2VlIGBtYXRjaGVyc2AgYWJvdmUgZm9yIGRlZmluaXRpb24pLlxuZnVuY3Rpb24gaXNWYWxpZENTU1VuaXQoY29sb3IpIHtcbiAgICByZXR1cm4gISFtYXRjaGVycy5DU1NfVU5JVC5leGVjKGNvbG9yKTtcbn1cblxuLy8gYHN0cmluZ0lucHV0VG9PYmplY3RgXG4vLyBQZXJtaXNzaXZlIHN0cmluZyBwYXJzaW5nLiAgVGFrZSBpbiBhIG51bWJlciBvZiBmb3JtYXRzLCBhbmQgb3V0cHV0IGFuIG9iamVjdFxuLy8gYmFzZWQgb24gZGV0ZWN0ZWQgZm9ybWF0LiAgUmV0dXJucyBgeyByLCBnLCBiIH1gIG9yIGB7IGgsIHMsIGwgfWAgb3IgYHsgaCwgcywgdn1gXG5mdW5jdGlvbiBzdHJpbmdJbnB1dFRvT2JqZWN0KGNvbG9yKSB7XG5cbiAgICBjb2xvciA9IGNvbG9yLnJlcGxhY2UodHJpbUxlZnQsJycpLnJlcGxhY2UodHJpbVJpZ2h0LCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgbmFtZWQgPSBmYWxzZTtcbiAgICBpZiAobmFtZXNbY29sb3JdKSB7XG4gICAgICAgIGNvbG9yID0gbmFtZXNbY29sb3JdO1xuICAgICAgICBuYW1lZCA9IHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbG9yID09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogMCwgZzogMCwgYjogMCwgYTogMCwgZm9ybWF0OiBcIm5hbWVcIiB9O1xuICAgIH1cblxuICAgIC8vIFRyeSB0byBtYXRjaCBzdHJpbmcgaW5wdXQgdXNpbmcgcmVndWxhciBleHByZXNzaW9ucy5cbiAgICAvLyBLZWVwIG1vc3Qgb2YgdGhlIG51bWJlciBib3VuZGluZyBvdXQgb2YgdGhpcyBmdW5jdGlvbiAtIGRvbid0IHdvcnJ5IGFib3V0IFswLDFdIG9yIFswLDEwMF0gb3IgWzAsMzYwXVxuICAgIC8vIEp1c3QgcmV0dXJuIGFuIG9iamVjdCBhbmQgbGV0IHRoZSBjb252ZXJzaW9uIGZ1bmN0aW9ucyBoYW5kbGUgdGhhdC5cbiAgICAvLyBUaGlzIHdheSB0aGUgcmVzdWx0IHdpbGwgYmUgdGhlIHNhbWUgd2hldGhlciB0aGUgdGlueWNvbG9yIGlzIGluaXRpYWxpemVkIHdpdGggc3RyaW5nIG9yIG9iamVjdC5cbiAgICB2YXIgbWF0Y2g7XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLnJnYi5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0Y2hbMV0sIGc6IG1hdGNoWzJdLCBiOiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMucmdiYS5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0Y2hbMV0sIGc6IG1hdGNoWzJdLCBiOiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzbC5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCBsOiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaHNsYS5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCBsOiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzdi5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCB2OiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaHN2YS5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCB2OiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhleDguZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSksXG4gICAgICAgICAgICBhOiBjb252ZXJ0SGV4VG9EZWNpbWFsKG1hdGNoWzRdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4OFwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXg2LmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/IFwibmFtZVwiIDogXCJoZXhcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaGV4NC5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSArICcnICsgbWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdICsgJycgKyBtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10gKyAnJyArIG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGE6IGNvbnZlcnRIZXhUb0RlY2ltYWwobWF0Y2hbNF0gKyAnJyArIG1hdGNoWzRdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4OFwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXgzLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdICsgJycgKyBtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0gKyAnJyArIG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSArICcnICsgbWF0Y2hbM10pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/IFwibmFtZVwiIDogXCJoZXhcIlxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVXQ0FHMlBhcm1zKHBhcm1zKSB7XG4gICAgLy8gcmV0dXJuIHZhbGlkIFdDQUcyIHBhcm1zIGZvciBpc1JlYWRhYmxlLlxuICAgIC8vIElmIGlucHV0IHBhcm1zIGFyZSBpbnZhbGlkLCByZXR1cm4ge1wibGV2ZWxcIjpcIkFBXCIsIFwic2l6ZVwiOlwic21hbGxcIn1cbiAgICB2YXIgbGV2ZWwsIHNpemU7XG4gICAgcGFybXMgPSBwYXJtcyB8fCB7XCJsZXZlbFwiOlwiQUFcIiwgXCJzaXplXCI6XCJzbWFsbFwifTtcbiAgICBsZXZlbCA9IChwYXJtcy5sZXZlbCB8fCBcIkFBXCIpLnRvVXBwZXJDYXNlKCk7XG4gICAgc2l6ZSA9IChwYXJtcy5zaXplIHx8IFwic21hbGxcIikudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobGV2ZWwgIT09IFwiQUFcIiAmJiBsZXZlbCAhPT0gXCJBQUFcIikge1xuICAgICAgICBsZXZlbCA9IFwiQUFcIjtcbiAgICB9XG4gICAgaWYgKHNpemUgIT09IFwic21hbGxcIiAmJiBzaXplICE9PSBcImxhcmdlXCIpIHtcbiAgICAgICAgc2l6ZSA9IFwic21hbGxcIjtcbiAgICB9XG4gICAgcmV0dXJuIHtcImxldmVsXCI6bGV2ZWwsIFwic2l6ZVwiOnNpemV9O1xufVxuXG4vLyBOb2RlOiBFeHBvcnQgZnVuY3Rpb25cbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB0aW55Y29sb3I7XG59XG4vLyBBTUQvcmVxdWlyZWpzOiBEZWZpbmUgdGhlIG1vZHVsZVxuZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtyZXR1cm4gdGlueWNvbG9yO30pO1xufVxuLy8gQnJvd3NlcjogRXhwb3NlIHRvIHdpbmRvd1xuZWxzZSB7XG4gICAgd2luZG93LnRpbnljb2xvciA9IHRpbnljb2xvcjtcbn1cblxufSkoTWF0aCk7XG4iLCJleHBvcnQgKiBmcm9tICcuL3NyYy9kcmF3LXRyZWUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvZHJhdy10cmVlLW51bWJlcic7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9mYWNldC1mb3JjZS1sYXlvdXQnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvZmFjZXQtcGllLWNoYXJ0JztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2ZhY2V0LXRyZWUtbmcnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvZmFjZXQtZm9yY2UtbGF5b3V0JztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2ZhY2V0LXBpZS1jaGFydCc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9kcmF3LXRyZWUtZGVsJztcbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuaW1wb3J0IHsgbWFwLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZGVib3VuY2UsIGZpbHRlciwgc2tpcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgaW50ZXJ2YWwgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgaXNFcXVhbCwgcmFuZ2UgfSBmcm9tICdsb2Rhc2gnO1xyXG5cclxuaW1wb3J0IHsgYnVpbGRUcmVlIH0gZnJvbSAnLi9mYWNldC10cmVlLW5nJztcclxuaW1wb3J0IHsgZHJhd0ZhY2V0UGllQ2hhcnQgfSBmcm9tICcuL2ZhY2V0LXBpZS1jaGFydCc7XHJcbmltcG9ydCB7IGRyYXdGYWNldEZvcmNlTGF5b3V0IH0gZnJvbSAnLi9mYWNldC1mb3JjZS1sYXlvdXQnO1xyXG5pbXBvcnQgeyBnbG9iYWxTdGF0ZSwgZ2xvYmFsRGF0YSB9IGZyb20gJy4vc3RhdGUnO1xyXG5pbXBvcnQgeyBlbXB0eUNoaWxkcmVuIH0gZnJvbSAnLi90b29scy91dGlscyc7XHJcbmltcG9ydCB7anVkZ2VtZW50U3RyaW5nTGVuZ3RoV2l0aENoaW5lc2V9IGZyb20gJy4vZHJhdy10cmVlJ1xyXG4vLyBmdW5jdGlvbiBhcHBlbmREYXRhKHRvdGFsRGF0YSxkYXRhLGkpe1xyXG4vLyAgICAgdG90YWxEYXRhW1widG9waWNJZFwiXSA9IGRhdGFbXCJ0b3BpY0lkXCJdO1xyXG4vLyAgICAgdG90YWxEYXRhW1widG9waWNOYW1lXCJdID0gZGF0YVtcInRvcGljTmFtZVwiXTtcclxuLy8gICAgIHRvdGFsRGF0YVtcInRvcGljVXJsXCJdID0gZGF0YVtcInRvcGljVXJsXCJdO1xyXG4vLyAgICAgdG90YWxEYXRhW1widG9waWNMYXllclwiXSA9IGRhdGFbXCJ0b3BpY0xheWVyXCJdO1xyXG4vLyAgICAgdG90YWxEYXRhW1wiZG9tYWluSWRcIl0gPSBkYXRhW1wiZG9tYWluSWRcIl07XHJcbi8vICAgICBsZXQgY2hpbGRyZW4gPSBkYXRhW1wiY2hpbGRyZW5cIl1baV07XHJcbi8vICAgICB0b3RhbERhdGFbXCJjaGlsZHJlblwiXS5wdXNoKGNoaWxkcmVuKTtcclxuLy8gICAgIHRvdGFsRGF0YVtcImNoaWxkcmVuTnVtYmVyXCJdID0gaSsxO1xyXG4gICAgXHJcbi8vICAgICByZXR1cm4gdG90YWxEYXRhO1xyXG4vLyB9XHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3VHJlZURlbChzdmcsIGRhdGEsIGNsaWNrQnJhbmNoKTogdm9pZCB7XHJcbiAgICAgICAgICAgICAgICBlbXB0eUNoaWxkcmVuKHN2Zyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYW52YXMgPSBkMy5zZWxlY3Qoc3ZnKTtcclxuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJlZURhdGEgPSBidWlsZFRyZWUoZGF0YSwgc3ZnKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5Lyg5YWl5pWw5o2uXCIsdHJlZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmFjZXQtdHJlZS10b29sdGlwJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoJ2JvZHknKS5hcHBlbmQoJ2RpdicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsICdmYWNldC10cmVlLXRvb2x0aXAnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCd0ZXh0LWFsaWduJywgJ2NlbnRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzZweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsICcjZmZmZmI4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdwYWRkaW5nJywgJzFweCAzcHgnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBmaXggY2xvc3VyZVxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsRGF0YS50cmVlRGF0YSA9IHRyZWVEYXRhO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLmluaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5uZXh0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmFuY2hGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRGYWNldElkOiAnLTIsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0OiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLm5leHQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RmFjZXRJZDogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyYW5jaEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEZhY2V0SWQ6ICctMiwtMicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXQ6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUucGlwZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVib3VuY2UoKCkgPT4gaW50ZXJ2YWwoMjAwKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcihzdGF0ZSA9PiAhaXNFcXVhbChzdGF0ZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRGYWNldElkOiAnLTIsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAoc3RhdGUgPT4gc3RhdGUuY3VycmVudEZhY2V0SWQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgKS5zdWJzY3JpYmUoY3VycmVudEZhY2V0SWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0JyYW5jaChjdXJyZW50RmFjZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYm91bmNlKCgpID0+IGludGVydmFsKDIwMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoc3RhdGUgPT4gIWlzRXF1YWwoc3RhdGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogJy0yLC0yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwKHN0YXRlID0+IHN0YXRlLmV4cGFuZGVkRmFjZXRJZCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcihleHBhbmRlZEZhY2V0SWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3ByZXYsIGN1cnJdID0gZXhwYW5kZWRGYWNldElkLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2ICE9PSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlzdGluY3RVbnRpbENoYW5nZWQoKVxyXG4gICAgICAgICAgICAgICAgICAgICkuc3Vic2NyaWJlKGV4cGFuZGVkRmFjZXRJZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtwcmV2LCBjdXJyXSA9IGV4cGFuZGVkRmFjZXRJZC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gJy0yJyAmJiBnbG9iYWxEYXRhLnRyZWVEYXRhLmZhY2V0Q2hhcnQuZmlsdGVyKHggPT4geC5mYWNldElkLnRvU3RyaW5nKCkgPT09IHByZXYpWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgZm9yY2UgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBhbmRlZE5vZGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShwcmV2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChleHBhbmRlZE5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkTm9kZXNbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChleHBhbmRlZE5vZGVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkcmF3IHBpZSBjaGFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhd0ZhY2V0UGllQ2hhcnQoZ2xvYmFsRGF0YS50cmVlRGF0YS5mYWNldENoYXJ0LmZpbHRlcih4ID0+IHguZmFjZXRJZC50b1N0cmluZygpID09PSBwcmV2KVswXSwgc3ZnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBpZiAoY3VyciAhPT0gJy0yJyAmJiBnbG9iYWxEYXRhLnRyZWVEYXRhLmZhY2V0Q2hhcnQuZmlsdGVyKHggPT4geC5mYWNldElkLnRvU3RyaW5nKCkgPT09IGN1cnIpWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgcGllIGNoYXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnIxID0gJ2FyYycrY3VyclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cGFuZGVkTm9kZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGN1cnIxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChleHBhbmRlZE5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkTm9kZXNbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChleHBhbmRlZE5vZGVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cGFuZGVkTm9kZXMxID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChleHBhbmRlZE5vZGVzMS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZE5vZGVzMVswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGV4cGFuZGVkTm9kZXMxWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRyYXcgZm9yY2UgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmF3RmFjZXRGb3JjZUxheW91dChnbG9iYWxEYXRhLnRyZWVEYXRhLmZhY2V0Q2hhcnQuZmlsdGVyKHggPT4geC5mYWNldElkLnRvU3RyaW5nKCkgPT09IGN1cnIpWzBdLCBzdmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyICE9PSAnLTInICYmIGdsb2JhbERhdGEudHJlZURhdGEuZmFjZXRDaGFydC5maWx0ZXIoeCA9PiB4LmZhY2V0SWQudG9TdHJpbmcoKSA9PT0gY3VycilbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIGZvcmNlIGxheW91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBhbmRlZE5vZGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShwcmV2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGV4cGFuZGVkTm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZE5vZGVzWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXhwYW5kZWROb2Rlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJhdyBwaWUgY2hhcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhd0ZhY2V0UGllQ2hhcnQoZ2xvYmFsRGF0YS50cmVlRGF0YS5mYWNldENoYXJ0LmZpbHRlcih4ID0+IHguZmFjZXRJZC50b1N0cmluZygpID09PSBwcmV2KVswXSwgc3ZnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIGRyYXcgYnJhbmNoZXNcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ3JlY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHRyZWVEYXRhLmJyYW5jaGVzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC55IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC54IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmhlaWdodCB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLndpZHRoIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb2xvciB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGl2VG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWNldC10cmVlLXRvb2x0aXAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KGRpdlRvb2x0aXApLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDIwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgLjkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZGl2VG9vbHRpcCkuaHRtbChcIuWPjOWHu+WIoOmZpOivpeWIhumdolwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVgpICsgXCJweFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDI4KSArIFwicHhcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgKGQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3ByZXYsIGN1cnJdID0gZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5leHBhbmRlZEZhY2V0SWQuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUubmV4dChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGYWNldElkOiB0cmVlRGF0YS5icmFuY2hlc1tpXS5mYWNldElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEZhY2V0SWQ6IGN1cnIgKyAnLC0yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjdXJyZW50RmFjZXRJZFwiLGdsb2JhbFN0YXRlLmdldFZhbHVlKCkuY3VycmVudEZhY2V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImV4cGFuZGVkRmFjZXRJZFwiLGdsb2JhbFN0YXRlLmdldFZhbHVlKCkuZXhwYW5kZWRGYWNldElkKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gZHJhdyBmb2xkQnJhbmNoZXNcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ3JlY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHRyZWVEYXRhLmZvbGRCcmFuY2hlcylcclxuICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueSB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueCB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5oZWlnaHQgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC53aWR0aCB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29sb3IgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQudHJhbnNmb3JtIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBkID0+IHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXZUb29sdGlwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY2V0LXRyZWUtdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZGl2VG9vbHRpcCkudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oMjAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAuOSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkaXZUb29sdGlwKS5odG1sKFwi5Y+M5Ye75Yig6Zmk6K+l5YiG6Z2iXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChkMy5ldmVudC5wYWdlWCkgKyBcInB4XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMjgpICsgXCJweFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCAoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbcHJldiwgY3Vycl0gPSBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLmV4cGFuZGVkRmFjZXRJZC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5uZXh0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0SWQ6IHRyZWVEYXRhLmJyYW5jaGVzW2ldLmZhY2V0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogY3VyciArICcsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImN1cnJlbnRGYWNldElkXCIsZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5jdXJyZW50RmFjZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXhwYW5kZWRGYWNldElkXCIsZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5leHBhbmRlZEZhY2V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gZHJhdyBmaXJzdCBsYXllciBmYWNldCAgICBcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ2NpcmNsZScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEodHJlZURhdGEubGVhdmVzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnY2lyY2xlJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3gnLCAoZCkgPT4gZC5jeClcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3knLCBkID0+IGQuY3kpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3InLCAoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJlZURhdGEudHJlZURhdGFbaV0uY29udGFpbkNoaWxkcmVuRmFjZXQgPyAwIDogZC5yICogMS41O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IGQuY29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpO1xyXG4gICAgICAgICAgICAgICAgLy8gZHJhdyBhc3NlbWJsZSBudW1iZXJcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAuZGF0YSh0cmVlRGF0YS50ZXh0c19sZWFmKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8uYXR0cignZm9udC1zaXplJyxkID0+IGQuZm9udFNpemUgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsMjAgKyAncHgnKS8v5YaZ5q275a2X5Y+3XHJcbiAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneCcsIGQgPT4gZC54KVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBkID0+IGQueSlcclxuICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KGQgPT4gZC50ZXh0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCcjZmZmJykuc3R5bGUoJ2N1cnNvcicsICdwb2ludGVyJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIGRyYXcgc2Vjb25kICBsYXllciBmYWNldFxyXG4gICAgICAgICAgICAgICAgdHJlZURhdGEuZmFjZXRDaGFydC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOmlvOWbvlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd0ZhY2V0UGllQ2hhcnQoZWxlbWVudCwgc3ZnKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyDlipvlr7zlkJHlm75cclxuICAgICAgICAgICAgICAgICAgICAvLyBkcmF3RmFjZXRGb3JjZUxheW91dChlbGVtZW50LCBzdmcpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBkcmF3IGZpcnN0IGxheWVyIGZhY2V0IG5hbWVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRzID0gY2FudmFzLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEodHJlZURhdGEudGV4dHMpXHJcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZm9udC1mYW1pbHknLCdUaW1lcyBOZXcgUm9tYW4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdmb250LXNpemUnLCBkID0+IGQuZm9udFNpemUgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgZCA9PiBkLngpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBkID0+IGQueSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICcjZmZmJyk7XHJcbiAgICAgICAgICAgICAgICB0cmVlRGF0YS50ZXh0cy5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCgodGV4dHMgYXMgYW55KS5fZ3JvdXBzWzBdW2luZGV4XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgndHNwYW4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShlbGVtZW50LnRleHQuc3BsaXQoJycpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCd0c3BhbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgZWxlbWVudC54KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZHknLCAnMS4yZW0nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dChkID0+IGQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBkcmF3IHRvcGljIG5hbWVcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4Jywgc3ZnLmNsaWVudFdpZHRoIC8gMiAtIDI0ICoganVkZ2VtZW50U3RyaW5nTGVuZ3RoV2l0aENoaW5lc2UoZGF0YS50b3BpY05hbWUpIC8gMilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneScsIHN2Zy5jbGllbnRIZWlnaHQgLSAxMClcclxuICAgICAgICAgICAgICAgICAgICAudGV4dChkYXRhLnRvcGljTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICcjMDAwJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZm9udC1zaXplJywgJzI0cHgnKTtcclxuICAgICAgICAgICAgICAgIC8vIGRyYXdUcmVlKHN2Zyx0b3RhbERhdGEsIGNsaWNrRmFjZXQpO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc3QgdHJlZURhdGEgPSBidWlsZFRyZWUoZGF0YSwgc3ZnKTtcclxuXHJcblxyXG5cclxuXHJcbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuaW1wb3J0IHsgbWFwLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZGVib3VuY2UsIGZpbHRlciwgc2tpcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgaW50ZXJ2YWwgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgaXNFcXVhbCwgcmFuZ2UgfSBmcm9tICdsb2Rhc2gnO1xyXG5cclxuaW1wb3J0IHsgYnVpbGRUcmVlIH0gZnJvbSAnLi9mYWNldC10cmVlLW5nJztcclxuaW1wb3J0IHsgZHJhd0ZhY2V0UGllQ2hhcnQgfSBmcm9tICcuL2ZhY2V0LXBpZS1jaGFydCc7XHJcbmltcG9ydCB7IGRyYXdGYWNldEZvcmNlTGF5b3V0IH0gZnJvbSAnLi9mYWNldC1mb3JjZS1sYXlvdXQnO1xyXG5pbXBvcnQgeyBnbG9iYWxTdGF0ZSwgZ2xvYmFsRGF0YSB9IGZyb20gJy4vc3RhdGUnO1xyXG5pbXBvcnQgeyBlbXB0eUNoaWxkcmVuIH0gZnJvbSAnLi90b29scy91dGlscyc7XHJcbmltcG9ydCB7anVkZ2VtZW50U3RyaW5nTGVuZ3RoV2l0aENoaW5lc2V9IGZyb20gJy4vZHJhdy10cmVlJ1xyXG4vLyBmdW5jdGlvbiBhcHBlbmREYXRhKHRvdGFsRGF0YSxkYXRhLGkpe1xyXG4vLyAgICAgdG90YWxEYXRhW1widG9waWNJZFwiXSA9IGRhdGFbXCJ0b3BpY0lkXCJdO1xyXG4vLyAgICAgdG90YWxEYXRhW1widG9waWNOYW1lXCJdID0gZGF0YVtcInRvcGljTmFtZVwiXTtcclxuLy8gICAgIHRvdGFsRGF0YVtcInRvcGljVXJsXCJdID0gZGF0YVtcInRvcGljVXJsXCJdO1xyXG4vLyAgICAgdG90YWxEYXRhW1widG9waWNMYXllclwiXSA9IGRhdGFbXCJ0b3BpY0xheWVyXCJdO1xyXG4vLyAgICAgdG90YWxEYXRhW1wiZG9tYWluSWRcIl0gPSBkYXRhW1wiZG9tYWluSWRcIl07XHJcbi8vICAgICBsZXQgY2hpbGRyZW4gPSBkYXRhW1wiY2hpbGRyZW5cIl1baV07XHJcbi8vICAgICB0b3RhbERhdGFbXCJjaGlsZHJlblwiXS5wdXNoKGNoaWxkcmVuKTtcclxuLy8gICAgIHRvdGFsRGF0YVtcImNoaWxkcmVuTnVtYmVyXCJdID0gaSsxO1xyXG4gICAgXHJcbi8vICAgICByZXR1cm4gdG90YWxEYXRhO1xyXG4vLyB9XHJcblxyXG52YXIgc2VsZWN0RmFjZXQgPSAnJztcclxudmFyIG9wdGlvbkZhY2V0ID0gJyc7XHJcbnZhciBUYXJnZXQgPSAwO1xyXG5jb25zdCBvcHRpb25Db2xvciA9ICd3aGl0ZSc7IC8vJyM3QjdCN0InXHJcbmNvbnN0IG9wdGlvblNlbGVjdGVkQ29sb3IgPSAnI0FEQURBRCc7XHJcbmNvbnN0IG9wdGlvblNoYW93ID0gJzBweCAwcHggMHB4ICM4ODg4ODgnO1xyXG5jb25zdCBvcHRpb25TZWxlY3RlZFNoYWRvdyA9ICcycHggM3B4IDJweCAjODg4ODg4JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3VHJlZU51bWJlcihzdmcsIGRhdGEsIGNsaWNrRmFjZXQsY2xpY2tCcmFuY2gsY2xpY2tCcmFuY2hBZGQsIEZhY2V0RWRpdCk6IHZvaWQge1xyXG4gICAgICAgICAgICAgICAgZW1wdHlDaGlsZHJlbihzdmcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2FudmFzID0gZDMuc2VsZWN0KHN2Zyk7XHJcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyZWVEYXRhID0gYnVpbGRUcmVlKGRhdGEsIHN2Zyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuS8oOWFpeaVsOaNrlwiLHRyZWVEYXRhKTtcclxuICAgICAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY2V0LXRyZWUtdG9vbHRpcCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KCdib2R5JykuYXBwZW5kKCdkaXYnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnZmFjZXQtdHJlZS10b29sdGlwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgndGV4dC1hbGlnbicsICdjZW50ZXInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICc2cHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQtY29sb3InLCAnI2ZmZmZiOCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgncGFkZGluZycsICcxcHggM3B4Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIERlbGV0ZUZhY2V0KGkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGhpcyBpcyByZWFsbHkgY29udmVuaWVudCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtwcmV2LCBjdXJyXSA9IGdsb2JhbFN0YXRlLmdldFZhbHVlKCkuZXhwYW5kZWRGYWNldElkLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLm5leHQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLmdldFZhbHVlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmFuY2hGYWNldElkOiB0cmVlRGF0YS5icmFuY2hlc1tpXS5mYWNldElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEZhY2V0SWQ6IGN1cnIgKyAnLC0yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJicmFuY2hGYWNldElkXCIsZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5icmFuY2hGYWNldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJleHBhbmRlZEZhY2V0SWRcIixnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLmV4cGFuZGVkRmFjZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVXNlIHlvdXIgRmFjZXREZWxldGUgZnVuY3Rpb24gaGVyZSFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQnJhbmNoKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrQ2xvc2VNZW51KG9jY2FzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9jY2FzaW9uID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RUZW1wID0gc2VsZWN0RmFjZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbkZhY2V0ICYmIHNlbGVjdFRlbXAgPT09IHNlbGVjdEZhY2V0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJMaXN0TWVudUZhY2V0XCIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oNTAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEZhY2V0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uU2VsZWN0T3B0aW9uKG9wdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KG9wdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oMzAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAuc3R5bGUoXCJiYWNrZ3JvdW5kXCIsIG9wdGlvblNlbGVjdGVkQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxNHB4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uRmFjZXQgPSAneWVzJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gb2ZmU2VsZWN0T3B0aW9uKG9wdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KG9wdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oMzAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtd2VpZ2h0JywgJ25vcm1hbCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzEycHgnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gb25DbGlja1JpZ2h0KGkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChGYWNldEVkaXQgPT09ICd5ZXMnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZDMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RmFjZXQgPSBpICsgJ3NlbGVjdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IExpc3RNZW51RmFjZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTGlzdE1lbnVGYWNldCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoTGlzdE1lbnVGYWNldClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC5kdXJhdGlvbigzMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChkMy5ldmVudC5wYWdlWCArIDIwKSArICdweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZICsgMjApKyAncHgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tDbG9zZU1lbnUoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5LiN6LW35L2c55So77yBXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdMaXN0TWVudUZhY2V0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoJ2JvZHknKS5hcHBlbmQoJ2RpdicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsICdMaXN0TWVudUZhY2V0JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIC4wKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3RleHQtYWxpZ24nLCAnY2VudGVyJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnMTJweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnY29sb3InLCAnYmxhY2snKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3BhZGRpbmcnLCAnNXB4IDNweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnd2lkdGgnLCAnMTAwcHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2hlaWdodCcsICc5MHB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kJywgb3B0aW9uQ29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnYm9yZGVyLXJhZGl1cycsICcxMHB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdib3JkZXInLCAnMnB4IHNvbGlkIGJsYWNrJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkZhY2V0ID0gJ3llcyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkZhY2V0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja0Nsb3NlTWVudSgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTGlzdE1lbnVGYWNldCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCdkaXYnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnb3B0aW9uRGVsZXRlRmFjZXQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2hlaWdodCcsICcyNXB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdtYXJnaW4tdG9wJywgJzEwcHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2JvcmRlci1yYWRpdXMnLCAnMTBweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNlbGVjdE9wdGlvbih0aGlzKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmU2VsZWN0T3B0aW9uKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlbGV0ZUZhY2V0KFRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3BhZGRpbmctdG9wJywgJzVweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KFwi5Yig6Zmk6K+l5YiG6Z2iXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTGlzdE1lbnVGYWNldCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCdkaXYnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnb3B0aW9uQWRkRmFjZXQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2hlaWdodCcsICcyNXB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdtYXJnaW4tdG9wJywgJzVweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnYm9yZGVyLXJhZGl1cycsICcxNXB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0T3B0aW9uKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZlNlbGVjdE9wdGlvbih0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdwYWRkaW5nLXRvcCcsICc1cHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dChcIua3u+WKoOaWsOWIhumdolwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQnJhbmNoQWRkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gZml4IGNsb3N1cmVcclxuICAgICAgICAgICAgICAgIC8vIGdsb2JhbERhdGEudHJlZURhdGEgPSB0cmVlRGF0YTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBpZiAoZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5pbml0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgZ2xvYmFsU3RhdGUubmV4dCh7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGN1cnJlbnRGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgYnJhbmNoRmFjZXRJZDogLTEsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogJy0yLC0yJyxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgaW5pdDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgLy8gICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICBnbG9iYWxTdGF0ZS5uZXh0KHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgY3VycmVudEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBicmFuY2hGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgZXhwYW5kZWRGYWNldElkOiAnLTIsLTInLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBpbml0OiB0cnVlXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gICAgIGdsb2JhbFN0YXRlLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGRlYm91bmNlKCgpID0+IGludGVydmFsKDIwMCkpLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBmaWx0ZXIoc3RhdGUgPT4gIWlzRXF1YWwoc3RhdGUsIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGN1cnJlbnRGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogJy0yLC0yJyxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGluaXQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgbWFwKHN0YXRlID0+IHN0YXRlLmN1cnJlbnRGYWNldElkKSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgLy8gZGlzdGluY3RVbnRpbENoYW5nZWQoKVxyXG4gICAgICAgICAgICAgICAgLy8gICAgICkuc3Vic2NyaWJlKGN1cnJlbnRGYWNldElkID0+IHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgY2xpY2tGYWNldChjdXJyZW50RmFjZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gICAgIGdsb2JhbFN0YXRlLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGRlYm91bmNlKCgpID0+IGludGVydmFsKDIwMCkpLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBmaWx0ZXIoc3RhdGUgPT4gIWlzRXF1YWwoc3RhdGUsIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGN1cnJlbnRGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogJy0yLC0yJyxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGluaXQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgbWFwKHN0YXRlID0+IHN0YXRlLmV4cGFuZGVkRmFjZXRJZCksXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGZpbHRlcihleHBhbmRlZEZhY2V0SWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY29uc3QgW3ByZXYsIGN1cnJdID0gZXhwYW5kZWRGYWNldElkLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHJldHVybiBwcmV2ICE9PSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgLy8gZGlzdGluY3RVbnRpbENoYW5nZWQoKVxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsRGF0YS50cmVlRGF0YSA9IHRyZWVEYXRhO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLmluaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5uZXh0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmFuY2hGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRGYWNldElkOiAnLTIsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0OiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLm5leHQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RmFjZXRJZDogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyYW5jaEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEZhY2V0SWQ6ICctMiwtMicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXQ6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBTdGF0ZSA9ICh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJhbmNoRmFjZXRJZDogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogJy0yLC0yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vcGlwZTFcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJvdW5jZSgoKSA9PiBpbnRlcnZhbCgyMDApKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyKHN0YXRlID0+ICFpc0VxdWFsKHN0YXRlLmN1cnJlbnRGYWNldElkLFN0YXRlLmN1cnJlbnRGYWNldElkKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBjdXJyZW50RmFjZXRJZDogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBicmFuY2hGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGV4cGFuZGVkRmFjZXRJZDogJy0yLC0yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGluaXQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwKHN0YXRlID0+IHN0YXRlLmN1cnJlbnRGYWNldElkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlzdGluY3RVbnRpbENoYW5nZWQoKVxyXG4gICAgICAgICAgICAgICAgICAgICkuc3Vic2NyaWJlKGN1cnJlbnRGYWNldElkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tGYWNldChjdXJyZW50RmFjZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRlLmN1cnJlbnRGYWNldElkID0gY3VycmVudEZhY2V0SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vcGlwZTJcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJvdW5jZSgoKSA9PiBpbnRlcnZhbCgyMDApKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyKHN0YXRlID0+ICFpc0VxdWFsKHN0YXRlLmJyYW5jaEZhY2V0SWQsIFN0YXRlLmJyYW5jaEZhY2V0SWQpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy9jdXJyZW50RmFjZXRJZDogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBicmFuY2hGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vZXhwYW5kZWRGYWNldElkOiAnLTIsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy9pbml0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9KSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcChzdGF0ZSA9PiBzdGF0ZS5icmFuY2hGYWNldElkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlzdGluY3RVbnRpbENoYW5nZWQoKVxyXG4gICAgICAgICAgICAgICAgICAgICkuc3Vic2NyaWJlKGJyYW5jaEZhY2V0SWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0JyYW5jaChicmFuY2hGYWNldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3RhdGUuYnJhbmNoRmFjZXRJZCA9IGJyYW5jaEZhY2V0SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYm91bmNlKCgpID0+IGludGVydmFsKDIwMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoc3RhdGUgPT4gIWlzRXF1YWwoc3RhdGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogJy0yLC0yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwKHN0YXRlID0+IHN0YXRlLmV4cGFuZGVkRmFjZXRJZCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcihleHBhbmRlZEZhY2V0SWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3ByZXYsIGN1cnJdID0gZXhwYW5kZWRGYWNldElkLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2ICE9PSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICApLnN1YnNjcmliZShleHBhbmRlZEZhY2V0SWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbcHJldiwgY3Vycl0gPSBleHBhbmRlZEZhY2V0SWQuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgIT09ICctMicgJiYgZ2xvYmFsRGF0YS50cmVlRGF0YS5mYWNldENoYXJ0LmZpbHRlcih4ID0+IHguZmFjZXRJZC50b1N0cmluZygpID09PSBwcmV2KVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIGZvcmNlIGxheW91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwYW5kZWROb2RlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUocHJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZXhwYW5kZWROb2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZE5vZGVzWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXhwYW5kZWROb2Rlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJhdyBwaWUgY2hhcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdGYWNldFBpZUNoYXJ0KGdsb2JhbERhdGEudHJlZURhdGEuZmFjZXRDaGFydC5maWx0ZXIoeCA9PiB4LmZhY2V0SWQudG9TdHJpbmcoKSA9PT0gcHJldilbMF0sIHN2Zyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLyogaWYgKGN1cnIgIT09ICctMicgJiYgZ2xvYmFsRGF0YS50cmVlRGF0YS5mYWNldENoYXJ0LmZpbHRlcih4ID0+IHguZmFjZXRJZC50b1N0cmluZygpID09PSBjdXJyKVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIHBpZSBjaGFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyMSA9ICdhcmMnK2N1cnJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBhbmRlZE5vZGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjdXJyMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZXhwYW5kZWROb2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZE5vZGVzWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXhwYW5kZWROb2Rlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBhbmRlZE5vZGVzMSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY3Vycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZXhwYW5kZWROb2RlczEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWROb2RlczFbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChleHBhbmRlZE5vZGVzMVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkcmF3IGZvcmNlIGxheW91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhd0ZhY2V0Rm9yY2VMYXlvdXQoZ2xvYmFsRGF0YS50cmVlRGF0YS5mYWNldENoYXJ0LmZpbHRlcih4ID0+IHguZmFjZXRJZC50b1N0cmluZygpID09PSBjdXJyKVswXSwgc3ZnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyciAhPT0gJy0yJyAmJiBnbG9iYWxEYXRhLnRyZWVEYXRhLmZhY2V0Q2hhcnQuZmlsdGVyKHggPT4geC5mYWNldElkLnRvU3RyaW5nKCkgPT09IGN1cnIpWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBmb3JjZSBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwYW5kZWROb2RlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUocHJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChleHBhbmRlZE5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWROb2Rlc1swXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGV4cGFuZGVkTm9kZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRyYXcgcGllIGNoYXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdGYWNldFBpZUNoYXJ0KGdsb2JhbERhdGEudHJlZURhdGEuZmFjZXRDaGFydC5maWx0ZXIoeCA9PiB4LmZhY2V0SWQudG9TdHJpbmcoKSA9PT0gcHJldilbMF0sIHN2Zyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBkcmF3IGJyYW5jaGVzXHJcbiAgICAgICAgICAgICAgICBjYW52YXMuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKCdyZWN0JylcclxuICAgICAgICAgICAgICAgICAgICAuZGF0YSh0cmVlRGF0YS5icmFuY2hlcylcclxuICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueSB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueCB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5oZWlnaHQgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC53aWR0aCB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29sb3IgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3Vyc29yJywgJ3BvaW50ZXInKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgZGl2VG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWNldC10cmVlLXRvb2x0aXAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZDMuc2VsZWN0KGRpdlRvb2x0aXApLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmR1cmF0aW9uKDIwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgLjkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3QoZGl2VG9vbHRpcCkuaHRtbChcIuWPjOWHu+WIoOmZpOivpeWIhumdolwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVgpICsgXCJweFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDI4KSArIFwicHhcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RGYWNldCA9PT0gJycpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdMaXN0TWVudUZhY2V0JykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChkMy5ldmVudC5wYWdlWCArIDIwKSArICdweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZICsgMjApKyAncHgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpdlRvb2x0aXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmFjZXQtdHJlZS10b29sdGlwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkaXZUb29sdGlwKS50cmFuc2l0aW9uKCkudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oNTAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC5vbignZGJsY2xpY2snLCAoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIum8oOagh+S6pOS6klwiKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29uc3QgW3ByZXYsIGN1cnJdID0gZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5leHBhbmRlZEZhY2V0SWQuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgZ2xvYmFsU3RhdGUubmV4dChcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIE9iamVjdC5hc3NpZ24oXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKSxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIGJyYW5jaEZhY2V0SWQ6IHRyZWVEYXRhLmJyYW5jaGVzW2ldLmZhY2V0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogY3VyciArICcsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdjb250ZXh0bWVudScsIChkLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2tSaWdodChpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3Qgb3B0aW9uRGVsZXRlRmFjZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3B0aW9uRGVsZXRlRmFjZXQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3Qgb3B0aW9uQWRkRmFjZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3B0aW9uQWRkRmFjZXQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVGFyZ2V0ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3B0aW9uQWRkRmFjZXQub25jbGljayA9IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgY2xpY2tCcmFuY2hBZGQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKFwiVXNlIHlvdXIgRmFjZXRBZGQgZnVuY3Rpb24gaGVyZSFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBkcmF3IGZvbGRCcmFuY2hlc1xyXG4gICAgICAgICAgICAgICAgY2FudmFzLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEodHJlZURhdGEuZm9sZEJyYW5jaGVzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC55IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC54IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmhlaWdodCB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLndpZHRoIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb2xvciB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjdXJzb3InLCAncG9pbnRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnRyYW5zZm9ybSB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgZGl2VG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWNldC10cmVlLXRvb2x0aXAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZDMuc2VsZWN0KGRpdlRvb2x0aXApLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmR1cmF0aW9uKDIwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgLjkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3QoZGl2VG9vbHRpcCkuaHRtbChcIuWPjOWHu+WIoOmZpOivpeWIhumdolwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVgpICsgXCJweFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDI4KSArIFwicHhcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RGYWNldCA9PT0gJycpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdMaXN0TWVudUZhY2V0JykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChkMy5ldmVudC5wYWdlWCArIDIwKSArICdweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZICsgMjApKyAncHgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpdlRvb2x0aXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmFjZXQtdHJlZS10b29sdGlwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkaXZUb29sdGlwKS50cmFuc2l0aW9uKCkudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oNTAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignY29udGV4dG1lbnUnLCAoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrUmlnaHQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IG9wdGlvbkRlbGV0ZUZhY2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wdGlvbkRlbGV0ZUZhY2V0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IG9wdGlvbkFkZEZhY2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wdGlvbkFkZEZhY2V0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRhcmdldCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9wdGlvbkFkZEZhY2V0Lm9uY2xpY2sgPSBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNsaWNrQnJhbmNoQWRkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIlVzZSB5b3VyIEZhY2V0QWRkIGZ1bmN0aW9uIGhlcmUhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gZHJhdyBmaXJzdCBsYXllciBmYWNldCAgICBcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ2NpcmNsZScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEodHJlZURhdGEubGVhdmVzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnY2lyY2xlJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3gnLCBkID0+IGQuY3gpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2N5JywgZCA9PiBkLmN5KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdyJywgKGQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyZWVEYXRhLnRyZWVEYXRhW2ldLmNvbnRhaW5DaGlsZHJlbkZhY2V0ID8gMCA6IGQuciAqIDEuNTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBkLmNvbG9yKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCAoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbcHJldiwgY3Vycl0gPSBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLmV4cGFuZGVkRmFjZXRJZC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5uZXh0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0SWQ6IHRyZWVEYXRhLmJyYW5jaGVzW2ldLmZhY2V0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogY3VyciArICcsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImN1cnJlbnRGYWNldElkXCIsZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5jdXJyZW50RmFjZXRJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXhwYW5kZWRGYWNldElkXCIsZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5leHBhbmRlZEZhY2V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gZHJhdyBhc3NlbWJsZSBudW1iZXJcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAuZGF0YSh0cmVlRGF0YS50ZXh0c19sZWFmKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8uYXR0cignZm9udC1zaXplJyxkID0+IGQuZm9udFNpemUgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsMjAgKyAncHgnKS8v5YaZ5q275a2X5Y+3XHJcbiAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneCcsIGQgPT4gZC54KVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBkID0+IGQueSlcclxuICAgICAgICAgICAgICAgICAgICAgIC8vLmF0dHIoJ3ZlcnRpY2FsLWFsaWduJywnbWlkZGxlJylcclxuICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KGQgPT4gZC50ZXh0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCcjZmZmJykuc3R5bGUoJ2N1cnNvcicsICdwb2ludGVyJylcclxuICAgICAgICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCAoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtwcmV2LCBjdXJyXSA9IGdsb2JhbFN0YXRlLmdldFZhbHVlKCkuZXhwYW5kZWRGYWNldElkLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUubmV4dChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RmFjZXRJZDogdHJlZURhdGEuYnJhbmNoZXNbaV0uZmFjZXRJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEZhY2V0SWQ6IGN1cnIgKyAnLC0yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIGRyYXcgc2Vjb25kICBsYXllciBmYWNldFxyXG4gICAgICAgICAgICAgICAgdHJlZURhdGEuZmFjZXRDaGFydC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOmlvOWbvlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd0ZhY2V0UGllQ2hhcnQoZWxlbWVudCwgc3ZnKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyDlipvlr7zlkJHlm75cclxuICAgICAgICAgICAgICAgICAgICAvLyBkcmF3RmFjZXRGb3JjZUxheW91dChlbGVtZW50LCBzdmcpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBkcmF3IGZpcnN0IGxheWVyIGZhY2V0IG5hbWVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRzID0gY2FudmFzLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEodHJlZURhdGEudGV4dHMpXHJcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZm9udC1mYW1pbHknLCdUaW1lcyBOZXcgUm9tYW4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdmb250LXNpemUnLCBkID0+IGQuZm9udFNpemUgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgZCA9PiBkLngpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBkID0+IGQueSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICcjZmZmJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3Vyc29yJywgJ3BvaW50ZXInKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignY29udGV4dG1lbnUnLCAoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrUmlnaHQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRhcmdldCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IE9wdGlvbkRlbGV0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdPcHRpb25EZWxldGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgT3B0aW9uQWRkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ09wdGlvbkFkZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0NvbXBsZXRlTmFtZScpKS5odG1sKHRvcGljc1tkLmlkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wdGlvbkRlbGV0ZS5vbmNsaWNrID0gZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIlVzZSB5b3VyIEZhY2V0RGVsZXRlIGZ1bmN0aW9uIGhlcmUhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPcHRpb25BZGQub25jbGljayA9IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCJVc2UgeW91ciBGYWNldEFkZCBmdW5jdGlvbiBoZXJlIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRyZWVEYXRhLnRleHRzLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KCh0ZXh0cyBhcyBhbnkpLl9ncm91cHNbMF1baW5kZXhdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKCd0c3BhbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKGVsZW1lbnQudGV4dC5zcGxpdCgnJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RzcGFuJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCBlbGVtZW50LngpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkeScsICcxLjJlbScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KGQgPT4gZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vIGRyYXcgdG9waWMgbmFtZVxyXG4gICAgICAgICAgICAgICAgY2FudmFzLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCBzdmcuY2xpZW50V2lkdGggLyAyIC0gMjQgKiBqdWRnZW1lbnRTdHJpbmdMZW5ndGhXaXRoQ2hpbmVzZShkYXRhLnRvcGljTmFtZSkgLyAyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5Jywgc3ZnLmNsaWVudEhlaWdodCAtIDEwKVxyXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KGRhdGEudG9waWNOYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJyMwMDAnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdmb250LXNpemUnLCAnMjRweCcpO1xyXG4gICAgICAgICAgICAgICAgLy8gZHJhd1RyZWUoc3ZnLHRvdGFsRGF0YSwgY2xpY2tGYWNldCk7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zdCB0cmVlRGF0YSA9IGJ1aWxkVHJlZShkYXRhLCBzdmcpO1xyXG5cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xyXG5pbXBvcnQgeyBtYXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBkZWJvdW5jZSwgZmlsdGVyLCBza2lwLCBlbGVtZW50QXQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGludGVydmFsIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGlzRXF1YWwsIHJhbmdlLCB0YXAgfSBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgeyBidWlsZFRyZWUgfSBmcm9tICcuL2ZhY2V0LXRyZWUtbmcnO1xyXG5pbXBvcnQgeyBkcmF3RmFjZXRQaWVDaGFydCB9IGZyb20gJy4vZmFjZXQtcGllLWNoYXJ0JztcclxuaW1wb3J0IHsgZHJhd0ZhY2V0Rm9yY2VMYXlvdXQgfSBmcm9tICcuL2ZhY2V0LWZvcmNlLWxheW91dCc7XHJcbmltcG9ydCB7IGdsb2JhbFN0YXRlLCBnbG9iYWxEYXRhIH0gZnJvbSAnLi9zdGF0ZSc7XHJcbmltcG9ydCB7IGVtcHR5Q2hpbGRyZW4gfSBmcm9tICcuL3Rvb2xzL3V0aWxzJztcclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgIGxvY2s6IGJvb2xlYW5cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBzZWxlY3RGYWNldCA9ICcnO1xyXG4gIHZhciBvcHRpb25GYWNldCA9ICcnO1xyXG4gIHZhciBUYXJnZXQgPSAwO1xyXG4gIGNvbnN0IG9wdGlvbkNvbG9yID0gJ3doaXRlJzsgLy8nIzdCN0I3QidcclxuICBjb25zdCBvcHRpb25TZWxlY3RlZENvbG9yID0gJyNBREFEQUQnO1xyXG4gIGNvbnN0IG9wdGlvblNoYW93ID0gJzBweCAwcHggMHB4ICM4ODg4ODgnO1xyXG4gIGNvbnN0IG9wdGlvblNlbGVjdGVkU2hhZG93ID0gJzJweCAzcHggMnB4ICM4ODg4ODgnO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGFwcGVuZERhdGEodG90YWxEYXRhLGRhdGEsaSl7XHJcbiAgICB0b3RhbERhdGFbXCJ0b3BpY0lkXCJdID0gZGF0YVtcInRvcGljSWRcIl07XHJcbiAgICB0b3RhbERhdGFbXCJ0b3BpY05hbWVcIl0gPSBkYXRhW1widG9waWNOYW1lXCJdO1xyXG4gICAgdG90YWxEYXRhW1widG9waWNVcmxcIl0gPSBkYXRhW1widG9waWNVcmxcIl07XHJcbiAgICB0b3RhbERhdGFbXCJ0b3BpY0xheWVyXCJdID0gZGF0YVtcInRvcGljTGF5ZXJcIl07XHJcbiAgICB0b3RhbERhdGFbXCJkb21haW5JZFwiXSA9IGRhdGFbXCJkb21haW5JZFwiXTtcclxuICAgIGxldCBjaGlsZHJlbiA9IGRhdGFbXCJjaGlsZHJlblwiXVtpXTtcclxuICAgIHRvdGFsRGF0YVtcImNoaWxkcmVuXCJdLnB1c2goY2hpbGRyZW4pO1xyXG4gICAgdG90YWxEYXRhW1wiY2hpbGRyZW5OdW1iZXJcIl0gPSBpKzE7XHJcbiAgICBcclxuICAgIHJldHVybiB0b3RhbERhdGE7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd1RyZWUoc3ZnLCBkYXRhLCBjbGlja0ZhY2V0LGNsaWNrQnJhbmNoLGNsaWNrQnJhbmNoQWRkLCBGYWNldEVkaXQsIHRpbWUpOiB2b2lkIHtcclxuICAgIFxyXG4gICAgbGV0IHRvdGFsRGF0YT17fTtcclxuICAgXHJcbiAgICB0b3RhbERhdGFbXCJjaGlsZHJlblwiXSA9IFtdO1xyXG4gICAgZW1wdHlDaGlsZHJlbihzdmcpO1xyXG4gICAgY29uc3QgY2FudmFzID0gZDMuc2VsZWN0KHN2Zyk7XHJcbiAgICAvL0B0cy1pZ25vcmVcclxuICAgIGNvbnN0IHRyZWVEYXRhID0gYnVpbGRUcmVlKGRhdGEsIHN2Zyk7XHJcbiAgICBjb25zb2xlLmxvZyhcIuS8oOWFpeaVsOaNrlwiLHRyZWVEYXRhKTtcclxuXHJcbiAgICBmdW5jdGlvbiBEZWxldGVGYWNldChpKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlRoaXMgaXMgcmVhbGx5IGNvbnZlbmllbnQhXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBbcHJldiwgY3Vycl0gPSBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLmV4cGFuZGVkRmFjZXRJZC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS5uZXh0KFxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcclxuICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJhbmNoRmFjZXRJZDogdHJlZURhdGEuYnJhbmNoZXNbaV0uZmFjZXRJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRGYWNldElkOiBjdXJyICsgJywtMicsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYnJhbmNoRmFjZXRJZFwiLGdsb2JhbFN0YXRlLmdldFZhbHVlKCkuYnJhbmNoRmFjZXRJZCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXhwYW5kZWRGYWNldElkXCIsZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5leHBhbmRlZEZhY2V0SWQpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVzZSB5b3VyIEZhY2V0RGVsZXRlIGZ1bmN0aW9uIGhlcmUhXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBjaGVja0Nsb3NlTWVudShvY2Nhc2lvbikge1xyXG4gICAgICAgIGlmIChvY2Nhc2lvbiA9PT0gMSkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0VGVtcCA9IHNlbGVjdEZhY2V0O1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25GYWNldCAmJiBzZWxlY3RUZW1wID09PSBzZWxlY3RGYWNldCl7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiTGlzdE1lbnVGYWNldFwiKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKS50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RGYWNldCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBvblNlbGVjdE9wdGlvbihvcHRpb24pe1xyXG4gICAgICAgIGQzLnNlbGVjdChvcHRpb24pXHJcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgLmR1cmF0aW9uKDMwMClcclxuICAgICAgICAgICAgLy8gLnN0eWxlKFwiYmFja2dyb3VuZFwiLCBvcHRpb25TZWxlY3RlZENvbG9yKTtcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXdlaWdodCcsICdib2xkJylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnMTRweCcpO1xyXG4gICAgICAgIG9wdGlvbkZhY2V0ID0gJ3llcyc7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIG9mZlNlbGVjdE9wdGlvbihvcHRpb24pe1xyXG4gICAgICAgIGQzLnNlbGVjdChvcHRpb24pXHJcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgLmR1cmF0aW9uKDMwMClcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXdlaWdodCcsICdub3JtYWwnKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxMnB4Jyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIG9uQ2xpY2tSaWdodChpKXtcclxuICAgICAgICBpZiAoRmFjZXRFZGl0ID09PSAneWVzJyl7XHJcbiAgICAgICAgICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHNlbGVjdEZhY2V0ID0gaSArICdzZWxlY3QnO1xyXG4gICAgICAgICAgICBjb25zdCBMaXN0TWVudUZhY2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0xpc3RNZW51RmFjZXQnKTtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KExpc3RNZW51RmFjZXQpXHJcbiAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAvLyAuZHVyYXRpb24oMzAwKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVggKyAyMCkgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSArIDIwKSsgJ3B4Jyk7XHJcbiAgICAgICAgICAgIGNoZWNrQ2xvc2VNZW51KDEpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuS4jei1t+S9nOeUqO+8gVwiKTtcclxuICAgICAgICAgICAgZDMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdMaXN0TWVudUZhY2V0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoJ2JvZHknKS5hcHBlbmQoJ2RpdicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsICdMaXN0TWVudUZhY2V0JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIC4wKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3RleHQtYWxpZ24nLCAnY2VudGVyJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnMTJweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnY29sb3InLCAnYmxhY2snKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3BhZGRpbmcnLCAnNXB4IDNweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnd2lkdGgnLCAnMTAwcHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2hlaWdodCcsICc5MHB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kJywgb3B0aW9uQ29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnYm9yZGVyLXJhZGl1cycsICcxMHB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdib3JkZXInLCAnMnB4IHNvbGlkIGJsYWNrJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkZhY2V0ID0gJ3llcyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkZhY2V0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja0Nsb3NlTWVudSgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTGlzdE1lbnVGYWNldCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCdkaXYnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnb3B0aW9uRGVsZXRlRmFjZXQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2hlaWdodCcsICcyNXB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdtYXJnaW4tdG9wJywgJzEwcHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2JvcmRlci1yYWRpdXMnLCAnMTBweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNlbGVjdE9wdGlvbih0aGlzKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmU2VsZWN0T3B0aW9uKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlbGV0ZUZhY2V0KFRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3BhZGRpbmctdG9wJywgJzVweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KFwi5Yig6Zmk6K+l5YiG6Z2iXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTGlzdE1lbnVGYWNldCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCdkaXYnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnb3B0aW9uQWRkRmFjZXQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2hlaWdodCcsICcyNXB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdtYXJnaW4tdG9wJywgJzVweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnYm9yZGVyLXJhZGl1cycsICcxNXB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0T3B0aW9uKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZlNlbGVjdE9wdGlvbih0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdwYWRkaW5nLXRvcCcsICc1cHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dChcIua3u+WKoOaWsOWIhumdolwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQnJhbmNoQWRkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgIGZvcihsZXQgaT0wO2k8ZGF0YVtcImNoaWxkcmVuXCJdLmxlbmd0aDtpKyspe1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PntcclxuICAgICAgICAgICAgICAgIGVtcHR5Q2hpbGRyZW4oc3ZnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IGQzLnNlbGVjdChzdmcpO1xyXG4gICAgICAgICAgICAgICAgdG90YWxEYXRhID0gYXBwZW5kRGF0YSh0b3RhbERhdGEsZGF0YSxpKVxyXG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmVlRGF0YSA9IGJ1aWxkVHJlZSh0b3RhbERhdGEsIHN2Zyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWNldC10cmVlLXRvb2x0aXAnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCgnYm9keScpLmFwcGVuZCgnZGl2JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ2ZhY2V0LXRyZWUtdG9vbHRpcCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgncG9zaXRpb24nLCAnYWJzb2x1dGUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3RleHQtYWxpZ24nLCAnY2VudGVyJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnNnB4JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgJyNmZmZmYjgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3BhZGRpbmcnLCAnMXB4IDNweCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIGZpeCBjbG9zdXJlXHJcbiAgICAgICAgICAgICAgICBnbG9iYWxEYXRhLnRyZWVEYXRhID0gdHJlZURhdGE7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmdldFZhbHVlKCkuaW5pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLm5leHQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RmFjZXRJZDogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyYW5jaEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEZhY2V0SWQ6ICctMiwtMicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXQ6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUubmV4dCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJhbmNoRmFjZXRJZDogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogJy0yLC0yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFN0YXRlID0gKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmFuY2hGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRGYWNldElkOiAnLTIsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy9waXBlMVxyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYm91bmNlKCgpID0+IGludGVydmFsKDIwMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoc3RhdGUgPT4gIWlzRXF1YWwoc3RhdGUuY3VycmVudEZhY2V0SWQsU3RhdGUuY3VycmVudEZhY2V0SWQpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGN1cnJlbnRGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGJyYW5jaEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgZXhwYW5kZWRGYWNldElkOiAnLTIsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgaW5pdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAoc3RhdGUgPT4gc3RhdGUuY3VycmVudEZhY2V0SWQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgKS5zdWJzY3JpYmUoY3VycmVudEZhY2V0SWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0ZhY2V0KGN1cnJlbnRGYWNldElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3RhdGUuY3VycmVudEZhY2V0SWQgPSBjdXJyZW50RmFjZXRJZDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9waXBlMlxyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYm91bmNlKCgpID0+IGludGVydmFsKDIwMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoc3RhdGUgPT4gIWlzRXF1YWwoc3RhdGUuYnJhbmNoRmFjZXRJZCwgU3RhdGUuYnJhbmNoRmFjZXRJZCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAvL2N1cnJlbnRGYWNldElkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGJyYW5jaEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy9leHBhbmRlZEZhY2V0SWQ6ICctMiwtMicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAvL2luaXQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwKHN0YXRlID0+IHN0YXRlLmJyYW5jaEZhY2V0SWQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgKS5zdWJzY3JpYmUoYnJhbmNoRmFjZXRJZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQnJhbmNoKGJyYW5jaEZhY2V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGF0ZS5icmFuY2hGYWNldElkID0gYnJhbmNoRmFjZXRJZDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUucGlwZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVib3VuY2UoKCkgPT4gaW50ZXJ2YWwoMjAwKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcihzdGF0ZSA9PiAhaXNFcXVhbChzdGF0ZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRGYWNldElkOiAnLTIsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAoc3RhdGUgPT4gc3RhdGUuZXhwYW5kZWRGYWNldElkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyKGV4cGFuZGVkRmFjZXRJZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbcHJldiwgY3Vycl0gPSBleHBhbmRlZEZhY2V0SWQuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXYgIT09IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgKS5zdWJzY3JpYmUoZXhwYW5kZWRGYWNldElkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3ByZXYsIGN1cnJdID0gZXhwYW5kZWRGYWNldElkLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2ICE9PSAnLTInICYmIGdsb2JhbERhdGEudHJlZURhdGEuZmFjZXRDaGFydC5maWx0ZXIoeCA9PiB4LmZhY2V0SWQudG9TdHJpbmcoKSA9PT0gcHJldilbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBmb3JjZSBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cGFuZGVkTm9kZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHByZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGV4cGFuZGVkTm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWROb2Rlc1swXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGV4cGFuZGVkTm9kZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRyYXcgcGllIGNoYXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmF3RmFjZXRQaWVDaGFydChnbG9iYWxEYXRhLnRyZWVEYXRhLmZhY2V0Q2hhcnQuZmlsdGVyKHggPT4geC5mYWNldElkLnRvU3RyaW5nKCkgPT09IHByZXYpWzBdLCBzdmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChjdXJyICE9PSAnLTInICYmIGdsb2JhbERhdGEudHJlZURhdGEuZmFjZXRDaGFydC5maWx0ZXIoeCA9PiB4LmZhY2V0SWQudG9TdHJpbmcoKSA9PT0gY3VycilbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vIGRlbGV0ZSBwaWUgY2hhcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB2YXIgY3VycjEgPSAnYXJjJytjdXJyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29uc3QgZXhwYW5kZWROb2RlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY3VycjEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgd2hpbGUgKGV4cGFuZGVkTm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgZXhwYW5kZWROb2Rlc1swXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGV4cGFuZGVkTm9kZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29uc3QgZXhwYW5kZWROb2RlczEgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGN1cnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgd2hpbGUgKGV4cGFuZGVkTm9kZXMxLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGV4cGFuZGVkTm9kZXMxWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXhwYW5kZWROb2RlczFbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gZHJhdyBmb3JjZSBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGRyYXdGYWNldEZvcmNlTGF5b3V0KGdsb2JhbERhdGEudHJlZURhdGEuZmFjZXRDaGFydC5maWx0ZXIoeCA9PiB4LmZhY2V0SWQudG9TdHJpbmcoKSA9PT0gY3VycilbMF0sIHN2Zyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyICE9PSAnLTInICYmIGdsb2JhbERhdGEudHJlZURhdGEuZmFjZXRDaGFydC5maWx0ZXIoeCA9PiB4LmZhY2V0SWQudG9TdHJpbmcoKSA9PT0gY3VycilbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBmb3JjZSBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cGFuZGVkTm9kZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHByZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGV4cGFuZGVkTm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWROb2Rlc1swXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGV4cGFuZGVkTm9kZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJhdyBwaWUgY2hhcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhd0ZhY2V0UGllQ2hhcnQoZ2xvYmFsRGF0YS50cmVlRGF0YS5mYWNldENoYXJ0LmZpbHRlcih4ID0+IHguZmFjZXRJZC50b1N0cmluZygpID09PSBwcmV2KVswXSwgc3ZnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInRyZWVkYXRhXCIsdHJlZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgLy8gZHJhdyBicmFuY2hlc1xyXG4gICAgICAgICAgICAgICAgY2FudmFzLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEodHJlZURhdGEuYnJhbmNoZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCdyZWN0JylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneScsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnkgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneCcsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnggfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3Vyc29yJywgJ3BvaW50ZXInKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5oZWlnaHQgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC53aWR0aCB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29sb3IgfSlcclxuICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGRpdlRvb2x0aXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmFjZXQtdHJlZS10b29sdGlwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGQzLnNlbGVjdChkaXZUb29sdGlwKS50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5kdXJhdGlvbigyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIC45KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZDMuc2VsZWN0KGRpdlRvb2x0aXApLmh0bWwoXCLlj4zlh7vliKDpmaTor6XliIbpnaJcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYKSArIFwicHhcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5zdHlsZShcInRvcFwiLCAoZDMuZXZlbnQucGFnZVkgLSAyOCkgKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0RmFjZXQgPT09ICcnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTGlzdE1lbnVGYWNldCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVggKyAyMCkgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSArIDIwKSsgJ3B4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXZUb29sdGlwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY2V0LXRyZWUtdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZGl2VG9vbHRpcCkudHJhbnNpdGlvbigpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAvLyAub24oJ2RibGNsaWNrJywgKGQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCLpvKDmoIfkuqTkupJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnN0IFtwcmV2LCBjdXJyXSA9IGdsb2JhbFN0YXRlLmdldFZhbHVlKCkuZXhwYW5kZWRGYWNldElkLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGdsb2JhbFN0YXRlLm5leHQoXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBPYmplY3QuYXNzaWduKFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGdsb2JhbFN0YXRlLmdldFZhbHVlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBicmFuY2hGYWNldElkOiB0cmVlRGF0YS5icmFuY2hlc1tpXS5mYWNldElkLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBleHBhbmRlZEZhY2V0SWQ6IGN1cnIgKyAnLC0yJyxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIClcclxuICAgICAgICAgICAgICAgICAgICAvLyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignY29udGV4dG1lbnUnLCAoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrUmlnaHQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IG9wdGlvbkRlbGV0ZUZhY2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wdGlvbkRlbGV0ZUZhY2V0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IG9wdGlvbkFkZEZhY2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wdGlvbkFkZEZhY2V0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRhcmdldCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9wdGlvbkFkZEZhY2V0Lm9uY2xpY2sgPSBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNsaWNrQnJhbmNoQWRkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIlVzZSB5b3VyIEZhY2V0QWRkIGZ1bmN0aW9uIGhlcmUhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gZHJhdyBmb2xkQnJhbmNoZXNcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ3JlY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHRyZWVEYXRhLmZvbGRCcmFuY2hlcylcclxuICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueSB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueCB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjdXJzb3InLCAncG9pbnRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmhlaWdodCB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLndpZHRoIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb2xvciB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC50cmFuc2Zvcm0gfSlcclxuICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGRpdlRvb2x0aXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmFjZXQtdHJlZS10b29sdGlwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGQzLnNlbGVjdChkaXZUb29sdGlwKS50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5kdXJhdGlvbigyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIC45KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZDMuc2VsZWN0KGRpdlRvb2x0aXApLmh0bWwoXCLlj4zlh7vliKDpmaTor6XliIbpnaJcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYKSArIFwicHhcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5zdHlsZShcInRvcFwiLCAoZDMuZXZlbnQucGFnZVkgLSAyOCkgKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0RmFjZXQgPT09ICcnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTGlzdE1lbnVGYWNldCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVggKyAyMCkgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSArIDIwKSsgJ3B4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXZUb29sdGlwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY2V0LXRyZWUtdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZGl2VG9vbHRpcCkudHJhbnNpdGlvbigpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAub24oJ2NvbnRleHRtZW51JywgKGQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGlja1JpZ2h0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBvcHRpb25EZWxldGVGYWNldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcHRpb25EZWxldGVGYWNldCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBvcHRpb25BZGRGYWNldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcHRpb25BZGRGYWNldCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUYXJnZXQgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvcHRpb25BZGRGYWNldC5vbmNsaWNrID0gZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBjbGlja0JyYW5jaEFkZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCJVc2UgeW91ciBGYWNldEFkZCBmdW5jdGlvbiBoZXJlIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vIGRyYXcgZmlyc3QgbGF5ZXIgZmFjZXQgICAgXHJcbiAgICAgICAgICAgICAgICBjYW52YXMuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKCdjaXJjbGUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHRyZWVEYXRhLmxlYXZlcylcclxuICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2N4JywgKGQpID0+IGQuY3gpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2N5JywgZCA9PiBkLmN5KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdyJywgKGQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyZWVEYXRhLnRyZWVEYXRhW2ldLmNvbnRhaW5DaGlsZHJlbkZhY2V0ID8gMCA6IGQuciAqIDEuNTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBkLmNvbG9yKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCAoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbcHJldiwgY3Vycl0gPSBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLmV4cGFuZGVkRmFjZXRJZC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5uZXh0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0SWQ6IHRyZWVEYXRhLmJyYW5jaGVzW2ldLmZhY2V0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogY3VyciArICcsLTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gZHJhdyBhc3NlbWJsZSBudW1iZXJcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAuZGF0YSh0cmVlRGF0YS50ZXh0c19sZWFmKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsIGQgPT5kLmZvbnRTaXplKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCBkID0+IGQueClcclxuICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgZCA9PiBkLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAudGV4dChkID0+ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCcjZmZmJykuc3R5bGUoJ2N1cnNvcicsICdwb2ludGVyJylcclxuICAgICAgICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCAoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtwcmV2LCBjdXJyXSA9IGdsb2JhbFN0YXRlLmdldFZhbHVlKCkuZXhwYW5kZWRGYWNldElkLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUubmV4dChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RmFjZXRJZDogdHJlZURhdGEuYnJhbmNoZXNbaV0uZmFjZXRJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEZhY2V0SWQ6IGN1cnIgKyAnLC0yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBkcmF3IHNlY29uZCAgbGF5ZXIgZmFjZXRcclxuICAgICAgICAgICAgICAgIHRyZWVEYXRhLmZhY2V0Q2hhcnQuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDppbzlm75cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGRyYXdGYWNldFBpZUNoYXJ0KGVsZW1lbnQsIHN2Zyk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5Yqb5a+85ZCR5Zu+XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJhd0ZhY2V0Rm9yY2VMYXlvdXQoZWxlbWVudCwgc3ZnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gZHJhdyBmaXJzdCBsYXllciBmYWNldCBuYW1lXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0cyA9IGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHRyZWVEYXRhLnRleHRzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2ZvbnQtZmFtaWx5JywnVGltZXMgTmV3IFJvbWFuJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZm9udC1zaXplJywgZCA9PiBkLmZvbnRTaXplICsgJ3B4JylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneCcsIGQgPT4gZC54KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgZCA9PiBkLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2N1cnNvcicsICdwb2ludGVyJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICcjZmZmJylcclxuICAgICAgICAgICAgICAgICAgICAub24oJ2NvbnRleHRtZW51JywgKGQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGlja1JpZ2h0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUYXJnZXQgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBPcHRpb25EZWxldGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnT3B0aW9uRGVsZXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IE9wdGlvbkFkZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdPcHRpb25BZGQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZDMuc2VsZWN0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdDb21wbGV0ZU5hbWUnKSkuaHRtbCh0b3BpY3NbZC5pZF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPcHRpb25EZWxldGUub25jbGljayA9IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCJVc2UgeW91ciBGYWNldERlbGV0ZSBmdW5jdGlvbiBoZXJlIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW9uQWRkLm9uY2xpY2sgPSBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKFwiVXNlIHlvdXIgRmFjZXRBZGQgZnVuY3Rpb24gaGVyZSFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdHJlZURhdGEudGV4dHMuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCgodGV4dHMgYXMgYW55KS5fZ3JvdXBzWzBdW2luZGV4XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgndHNwYW4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShlbGVtZW50LnRleHQuc3BsaXQoJycpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCd0c3BhbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgZWxlbWVudC54KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZHknLCAnMS4yZW0nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dChkID0+IGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwieFwiLGVsZW1lbnQueCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBkcmF3IHRvcGljIG5hbWVcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4Jywgc3ZnLmNsaWVudFdpZHRoIC8gMiAtIDI0ICoganVkZ2VtZW50U3RyaW5nTGVuZ3RoV2l0aENoaW5lc2UoZGF0YS50b3BpY05hbWUpIC8gMilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneScsIHN2Zy5jbGllbnRIZWlnaHQgLSAxMClcclxuICAgICAgICAgICAgICAgICAgICAudGV4dChkYXRhLnRvcGljTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICcjMDAwJylcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZm9udC1zaXplJywgJzI0cHgnKTtcclxuICAgICAgICAgICAgICAgIC8vIGRyYXdUcmVlKHN2Zyx0b3RhbERhdGEsIGNsaWNrRmFjZXQpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpKzE9PT1kYXRhW1wiY2hpbGRyZW5cIl0ubGVuZ3RoKXtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCflvZPliY3pobXpnaLmnoTlu7rlrozmiJDvvIEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9LDEwMClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgICAgICAgICAgfSxpKnRpbWUpXHJcbiAgICBcclxuICAgIFxyXG59XHJcbiAgICBcclxuICAgIC8vIGNvbnN0IHRyZWVEYXRhID0gYnVpbGRUcmVlKGRhdGEsIHN2Zyk7XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGp1ZGdlbWVudFN0cmluZ0xlbmd0aFdpdGhDaGluZXNlKHN0cjogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGxldCByZXN1bHQgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoL1thLXowLTlcXCpcXFxcXFx8XFwoXFwpXFwmXFxeXFwlXFwkXFwjXFxAXFwhXFwsXFwuXFw/XFw8XFw+XFwvXS8udGVzdChzdHJbaV0pKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCArPSAwLjU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0ICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDt9XHJcbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcblxuaW1wb3J0IHsgRmFjZXRDaGFydERhdGEgfSBmcm9tICcuL2ZhY2V0LXRyZWUtbmcnO1xuaW1wb3J0IHsgZ2xvYmFsU3RhdGUgfSBmcm9tICcuL3N0YXRlJztcblxuZnVuY3Rpb24gY2FsY0ZhY2V0Rm9yY2VMYXlvdXQoZGF0YTogRmFjZXRDaGFydERhdGEpOiB7bm9kZXM6IGFueVtdOyBsaW5rczogYW55W119IHtcbiAgICBjb25zdCBub2RlcyA9IFtdO1xuICAgIGNvbnN0IGxpbmtzID0gW107XG4gICAgY29uc3QgeyBjaGlsZHJlbk51bWJlciB9ID0gZGF0YTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuTnVtYmVyOyBpKyspIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIGRhdGEuY2hpbGRyZW5baV0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6IGRhdGEuY2hpbGRyZW5baV0uZmFjZXRJZCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbk51bWJlciAtIDE7IGkrKykge1xuICAgICAgICBjb25zdCBsaW5rID0ge1xuICAgICAgICAgICAgc291cmNlOiBub2Rlc1tpXS5pZCxcbiAgICAgICAgICAgIHRhcmdldDogbm9kZXNbaSsxXS5pZCxcbiAgICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICB9XG4gICAgICAgIGxpbmtzLnB1c2gobGluayk7XG4gICAgfVxuICAgIGxpbmtzLnB1c2goe1xuICAgICAgICBzb3VyY2U6IG5vZGVzW2NoaWxkcmVuTnVtYmVyIC0gMV0uaWQsXG4gICAgICAgIHRhcmdldDogbm9kZXNbMF0uaWQsXG4gICAgICAgIHZhbHVlOiAxLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vZGVzLFxuICAgICAgICBsaW5rcyxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBmaXhuYSh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmIChpc0Zpbml0ZSh4KSkgcmV0dXJuIHg7XG4gICAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3RmFjZXRGb3JjZUxheW91dChkYXRhOiBGYWNldENoYXJ0RGF0YSwgZG9tOiBIVE1MRWxlbWVudCwgZm9udFNpemUgPSAxMik6IHZvaWQge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGQzLnNlbGVjdChkb20pLmFwcGVuZCgnZycpO1xuICAgIGNvbnN0IHsgbm9kZXMsIGxpbmtzIH0gPSBjYWxjRmFjZXRGb3JjZUxheW91dChkYXRhKTtcblxuICAgIC8vIOWKoOi9vei/nue6v1xuICAgIGNvbnN0IGxpbmsgPSBjb250YWluZXIuYXR0cignY2xhc3MnLCBkYXRhLmZhY2V0SWQpLmFwcGVuZCgnZycpXG4gICAgICAgIC5zZWxlY3RBbGwoJ2xpbmUnKVxuICAgICAgICAuZGF0YShsaW5rcylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnbGluZScpXG4gICAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2FhYScpXG4gICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAnMXB4Jyk7XG4gICAgLy8g5Yqg6L295ZyG5ZyIXG4gICAgY29uc3Qgbm9kZSA9IGNvbnRhaW5lci5hcHBlbmQoJ2cnKVxuICAgICAgICAuc2VsZWN0QWxsKCdjaXJjbGUnKVxuICAgICAgICAuZGF0YShub2RlcylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgICAgLmF0dHIoJ3InLCBkYXRhLnIgLyAzKVxuICAgICAgICAuYXR0cignZmlsbCcsIGRhdGEuY29sb3IpXG4gICAgICAgIC5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxuICAgICAgICAub24oJ2NsaWNrJywgZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBbcHJldiwgbmV4dF0gPSBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLmV4cGFuZGVkRmFjZXRJZC5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgZ2xvYmFsU3RhdGUubmV4dChcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0SWQ6IGQuZmFjZXRJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogbmV4dCArICcsJyArIGRhdGEuZmFjZXRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICB9KTtcbiAgICAvLyDliqDovb3moIfnrb5cbiAgICBjb25zdCBsYWJlbCA9IGNvbnRhaW5lci5hcHBlbmQoJ2cnKVxuICAgICAgICAuc2VsZWN0QWxsKCd0ZXh0JylcbiAgICAgICAgLmRhdGEobm9kZXMpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAuYXR0cigncicsIGRhdGEuciAvIDMpXG4gICAgICAgIC5hdHRyKCdmaWxsJywgJyMwMDAnKVxuICAgICAgICAuYXR0cignZm9udC1zaXplJywgMTUgKyAncHgnKVxuICAgICAgICAudGV4dChkID0+IGQuZmFjZXROYW1lKVxuICAgICAgICAuc3R5bGUoJ2N1cnNvcicsICdwb2ludGVyJylcbiAgICAgICAgLm9uKCdjbGljaycsIGQgPT4ge1xuICAgICAgICAgICAgY29uc3QgW3ByZXYsIG5leHRdID0gZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5leHBhbmRlZEZhY2V0SWQuc3BsaXQoJywnKTtcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlLm5leHQoXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLmdldFZhbHVlKCksXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGYWNldElkOiBkLmZhY2V0SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZEZhY2V0SWQ6IG5leHQgKyAnLCcgKyBkYXRhLmZhY2V0SWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgfSk7XG4gICAgY29uc3QgbGFiZWwxID0gY29udGFpbmVyLmFwcGVuZCgnZycpXG4gICAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgICAuZGF0YShub2RlcylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAgIC5hdHRyKCdyJywgZGF0YS5yIC8gMylcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnIzk5RkY2NicpXG4gICAgICAgIC5hdHRyKCdmb250LXNpemUnLCAxNSArICdweCcpXG4gICAgICAgIC50ZXh0KGQgPT4gZC5jaGlsZHJlbk51bWJlcilcbiAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXG4gICAgICAgIC5vbignY2xpY2snLCBkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtwcmV2LCBuZXh0XSA9IGdsb2JhbFN0YXRlLmdldFZhbHVlKCkuZXhwYW5kZWRGYWNldElkLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS5uZXh0KFxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RmFjZXRJZDogZC5mYWNldElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRGYWNldElkOiBuZXh0ICsgJywnICsgZGF0YS5mYWNldElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgIH0pO1xuICAgIGZ1bmN0aW9uIHVwZGF0ZUxpbmsobGluayk6IHZvaWQge1xuICAgICAgICBsaW5rLmF0dHIoXCJ4MVwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZml4bmEoZC5zb3VyY2UueCk7IH0pXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBmaXhuYShkLnNvdXJjZS55KTsgfSlcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGZpeG5hKGQudGFyZ2V0LngpOyB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZml4bmEoZC50YXJnZXQueSk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZU5vZGUobm9kZSk6IHZvaWQge1xuICAgICAgICBub2RlLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIGZpeG5hKGQueCkgKyBcIixcIiArIGZpeG5hKGQueSkgKyBcIilcIjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTGFiZWwobGFiZWwpOnZvaWR7XG4gICAgICAgIGxhYmVsLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIGZpeG5hKGQueC1mb250U2l6ZSpkLmZhY2V0TmFtZS5sZW5ndGgvMikgKyBcIixcIiArIGZpeG5hKGQueSkgKyBcIilcIjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxhYmVsMShsYWJlbCk6dm9pZHtcbiAgICAgICAgbGFiZWwuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZml4bmEoZC54KSArIFwiLFwiICsgZml4bmEoZC55KSArIFwiKVwiO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGlja2VkKCk6IHZvaWQge1xuICAgICAgICBub2RlLmNhbGwodXBkYXRlTm9kZSk7XG4gICAgICAgIGxpbmsuY2FsbCh1cGRhdGVMaW5rKTtcbiAgICAgICAgbGFiZWwuY2FsbCh1cGRhdGVMYWJlbCk7XG4gICAgICAgIC8vIGxhYmVsMS5jYWxsKHVwZGF0ZUxhYmVsMSk7XG4gICAgICAgIC8vIGxhYmVsXG4gICAgICAgIC8vICAgICAuYXR0cigneCcsIGQgPT4ge1xuICAgICAgICAvLyAgICAgICAgIGlmIChkLnggPT09IGRhdGEuY3ggJiYgZC54ID4gZG9tLmNsaWVudFdpZHRoIC8gMikge1xuICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm4gZC54ICsgZGF0YS5yIC8gMjtcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgaWYgKGQueCA8PSBkYXRhLmN4KSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIHJldHVybiBkLnggLSBkLmZhY2V0TmFtZS5sZW5ndGggKiBmb250U2l6ZSAtIGZvbnRTaXplO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gZC54ICsgZGF0YS5yIC8gMjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgLy8gICAgIH0pXG4gICAgICAgIC8vICAgICAuYXR0cigneScsIGQgPT4ge1xuICAgICAgICAvLyAgICAgICAgIGlmIChkLnkgPj0gZGF0YS5jeSkge1xuICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm4gZC55IC0gZGF0YS5yIC8gMjtcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIGQueSArIGRhdGEuciAvIDI7XG4gICAgICAgIC8vICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyDliJvlu7rkuIDkuKrlipvmqKHmi59cbiAgICAvLyDlupTnlKjlipvmqKHmi59cbiAgICBjb25zdCBncmFwaExheW91dCA9IGQzLmZvcmNlU2ltdWxhdGlvbihub2RlcylcbiAgICAgICAgLmZvcmNlKFwiY2hhcmdlXCIsIGQzLmZvcmNlTWFueUJvZHkoKS5zdHJlbmd0aCgtNTAwKSlcbiAgICAgICAgLmZvcmNlKFwiY2VudGVyXCIsIGQzLmZvcmNlQ2VudGVyKGRhdGEuY3gsIGRhdGEuY3kpKVxuICAgICAgICAuZm9yY2UoXCJ4XCIsIGQzLmZvcmNlWChkYXRhLmN4KS5zdHJlbmd0aCgxKSlcbiAgICAgICAgLmZvcmNlKFwieVwiLCBkMy5mb3JjZVkoZGF0YS5jeSkuc3RyZW5ndGgoMSkpXG4gICAgICAgIC5mb3JjZShcImxpbmtcIiwgKGQzLmZvcmNlTGluayhsaW5rcykgYXMgYW55KS5pZChkID0+IGQuaWQpLmRpc3RhbmNlKDIgKiBkYXRhLnIpKVxuICAgICAgICAub24oXCJ0aWNrXCIsIHRpY2tlZCk7XG5cbiAgICBmdW5jdGlvbiBkcmFnc3RhcnRlZChkKTogdm9pZCB7XG4gICAgICAgIGQzLmV2ZW50LnNvdXJjZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAoIWQzLmV2ZW50LmFjdGl2ZSkgZ3JhcGhMYXlvdXQuYWxwaGFUYXJnZXQoMC4zKS5yZXN0YXJ0KCk7XG4gICAgICAgIGQuZnggPSBkLng7XG4gICAgICAgIGQuZnkgPSBkLnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhZ2dlZChkKTogdm9pZCB7XG4gICAgICAgIGQuZnggPSBkMy5ldmVudC54O1xuICAgICAgICBkLmZ5ID0gZDMuZXZlbnQueTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmFnZW5kZWQoZCk6IHZvaWQge1xuICAgICAgICBpZiAoIWQzLmV2ZW50LmFjdGl2ZSkgZ3JhcGhMYXlvdXQuYWxwaGFUYXJnZXQoMCk7XG4gICAgICAgIGQuZnggPSBudWxsO1xuICAgICAgICBkLmZ5ID0gbnVsbDtcbiAgICB9XG5cbiAgICBub2RlLmNhbGwoXG4gICAgICAgIGQzLmRyYWcoKVxuICAgICAgICAgICAgLm9uKFwic3RhcnRcIiwgZHJhZ3N0YXJ0ZWQpXG4gICAgICAgICAgICAub24oXCJkcmFnXCIsIGRyYWdnZWQpXG4gICAgICAgICAgICAub24oXCJlbmRcIiwgZHJhZ2VuZGVkKVxuICAgICk7XG59IiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xyXG5cclxuaW1wb3J0IHsgRmFjZXRDaGFydERhdGEsIEZhY2V0RGF0YSwgVHJlZSB9IGZyb20gJy4vZmFjZXQtdHJlZS1uZyc7XHJcbmltcG9ydCB7IGdsb2JhbFN0YXRlIH0gZnJvbSAnLi9zdGF0ZSc7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdGYWNldFBpZUNoYXJ0KGRhdGE6IEZhY2V0Q2hhcnREYXRhLCBkb206IEhUTUxFbGVtZW50LCBmb250U2l6ZSA9IDEyKTogdm9pZCB7XHJcbiAgICBjb25zdCBjYW52YXMgPSBkMy5zZWxlY3QoZG9tKTtcclxuICAgIFxyXG4gICAgdmFyIHBpZWRhdGEgPSBkMy5waWUoKS52YWx1ZSgxKShkYXRhLmNoaWxkcmVuIGFzIGFueSlcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKFwiZGF0YVwiLGRhdGEpXHJcbiAgICBjb25zb2xlLmxvZyhcInBpZWRhdGFcIixwaWVkYXRhKVxyXG4gICAgdmFyIGFyYyA9IGQzLmFyYygpXHJcbiAgICAgICAgICAgICAgICAuaW5uZXJSYWRpdXMoMClcclxuICAgICAgICAgICAgICAgIC5vdXRlclJhZGl1cyhkYXRhLnIpIGFzIHVua25vd24gYXMgc3RyaW5nXHJcblxyXG4gICAgdmFyIGFyYzEgPSBkMy5hcmMoKVxyXG4gICAgICAgICAgICAgICAgLmlubmVyUmFkaXVzKDApXHJcbiAgICAgICAgICAgICAgICAub3V0ZXJSYWRpdXMoZGF0YS5yKzcwKSBhcyB1bmtub3duIGFzIHN0cmluZ1xyXG4gICAgLy8gdmFyIGFyY3MxID0gY2FudmFzLnNlbGVjdEFsbCgnZy5hcmMxJytkYXRhLmZhY2V0SWQpXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgIC5kYXRhKHBpZWRhdGEpXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCdhcmMxJytkYXRhLmZhY2V0SWQpXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsZGF0YS50cmFuc2Zvcm0pXHJcbiAgICAvLyAvLyDppbzlm77kuI7mloflrZfnm7jov57nmoTmm7Lnur/otbfngrlcclxuICAgIC8vIHZhciBwb2ludFN0YXJ0ID0gZDMuYXJjKClcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAuaW5uZXJSYWRpdXMoZGF0YS5yKVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIC5vdXRlclJhZGl1cyhkYXRhLnIpIGFzIHVua25vd24gYXMgc3RyaW5nXHJcbiAgICAvLyAvLyDppbzlm77kuI7mloflrZfnm7jov57nmoTmm7Lnur/nu4jngrlcclxuICAgIC8vIHZhciBwb2ludEVuZCA9IGQzLmFyYygpXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgIC5pbm5lclJhZGl1cyhkYXRhLnIgKyA1KVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAub3V0ZXJSYWRpdXMoZGF0YS5yICsgNSkgYXMgdW5rbm93biBhcyBzdHJpbmdcclxuICAgXHJcbiAgICBcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicG9pbnRTdGFydFwiLHBvaW50U3RhcnQpXHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInBvaW50RW5kXCIscG9pbnRFbmQpXHJcblxyXG4gICAgXHJcbiAgIFxyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgICB2YXIgYXJjcyA9IGNhbnZhcy5zZWxlY3RBbGwoJ2cuYXJjJytkYXRhLmZhY2V0SWQpXHJcbiAgICAgICAgICAgICAgICAgICAgIC5kYXRhKHBpZWRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCdhcmMnK2RhdGEuZmFjZXRJZClcclxuICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixkYXRhLnRyYW5zZm9ybSlcclxuICAgIFxyXG4gICAgYXJjcy5hcHBlbmQoXCJwYXRoXCIpXHJcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsZGF0YS5jb2xvcilcclxuICAgICAgICAuYXR0cignZCcsYXJjKVxyXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwid2hpdGVcIilcclxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBkYXRhLnIgLyAxMClcclxuICAgICAgICAuc3R5bGUoJ2N1cnNvcicsICdwb2ludGVyJylcclxuICAgICAgICAub24oJ2NsaWNrJywgZCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IFtwcmV2LCBjdXJyXSA9IGdsb2JhbFN0YXRlLmdldFZhbHVlKCkuZXhwYW5kZWRGYWNldElkLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlLm5leHQoXHJcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKFxyXG4gICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLmdldFZhbHVlKCksXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RmFjZXRJZDogKGQuZGF0YSBhcyBhbnkpLmZhY2V0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogY3VyciArICcsJyArIGRhdGEuZmFjZXRJZC50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICBjb25zdCBkaXZUb29sdGlwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY2V0LXRyZWUtdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICBkMy5zZWxlY3QoZGl2VG9vbHRpcCkudHJhbnNpdGlvbigpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oJ21vdXNlb3ZlcicsIGQgPT4geyAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGRpdlRvb2x0aXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmFjZXQtdHJlZS10b29sdGlwJyk7XHJcbiAgICAgICAgICAgIGQzLnNlbGVjdChkaXZUb29sdGlwKS50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgIC5kdXJhdGlvbigyMDApXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIC45KTtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KGRpdlRvb2x0aXApLmh0bWwoKGQgYXMgYW55KS5kYXRhLmZhY2V0TmFtZSlcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYKSArIFwicHhcIilcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCAoZDMuZXZlbnQucGFnZVkgLSAyOCkgKyBcInB4XCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgY29uc3QgZGl2VG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWNldC10cmVlLXRvb2x0aXAnKTtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KGRpdlRvb2x0aXApLnRyYW5zaXRpb24oKS50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgIC5kdXJhdGlvbig1MDApXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgaWYgKHBpZWRhdGEubGVuZ3RoPjEpe1xyXG4gICAgYXJjcy5hcHBlbmQoJ3RleHQnKS8v5bim5LqM57qn5YiG6Z2i55qE5LiA57qn5YiG6Z2iXHJcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oZCl7XHJcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIGFyYy5jZW50cm9pZChkKSArIFwiKVwiO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsXCJtaWRkbGVcIilcclxuICAgICAgICAgICAgLnRleHQoKGQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpZWRhdGFbaV0uZGF0YVtcImNoaWxkcmVuTnVtYmVyXCJdO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cignZmlsbCcsICcjZmZmJylcclxuICAgICAgICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsIDEwICsgJ3B4JylcclxuICAgICAgICAgICAgLm9uKCdjbGljaycsIGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW3ByZXYsIGN1cnJdID0gZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5leHBhbmRlZEZhY2V0SWQuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLm5leHQoXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcclxuICAgICAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLmdldFZhbHVlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGYWNldElkOiAoZC5kYXRhIGFzIGFueSkuZmFjZXRJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogY3VyciArICcsJyArIGRhdGEuZmFjZXRJZC50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGl2VG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWNldC10cmVlLXRvb2x0aXAnKTtcclxuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkaXZUb29sdGlwKS50cmFuc2l0aW9uKCkudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXZUb29sdGlwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY2V0LXRyZWUtdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KGRpdlRvb2x0aXApLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbigyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAuOSk7XHJcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZGl2VG9vbHRpcCkuaHRtbCgoZCBhcyBhbnkpLmRhdGEuZmFjZXROYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYKSArIFwicHhcIilcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMjgpICsgXCJweFwiKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpdlRvb2x0aXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmFjZXQtdHJlZS10b29sdGlwJyk7XHJcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZGl2VG9vbHRpcCkudHJhbnNpdGlvbigpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbig1MDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhcmNzLmFwcGVuZCgndGV4dCcpLy/kuI3luKbkuoznuqfliIbpnaLnmoTkuIDnuqfliIbpnaJcclxuICAgICAgICAgICAgLy8uYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQpe1xyXG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIC8vICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIGFyYy5jZW50cm9pZChkKSArIFwiKVwiO1xyXG4gICAgICAgICAgICAvL30pXHJcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIixcIm1pZGRsZVwiKVxyXG4gICAgICAgICAgICAudGV4dCgoZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGllZGF0YVtpXS5kYXRhW1wiY2hpbGRyZW5OdW1iZXJcIl07XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJyNmZmYnKVxyXG4gICAgICAgICAgICAuYXR0cignZm9udC1zaXplJywgMjAgKyAncHgnKVxyXG4gICAgICAgICAgICAuYXR0cigndmVydGljYWwtYWxpZ24nLCdtaWRkbGUnKVxyXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBbcHJldiwgY3Vycl0gPSBnbG9iYWxTdGF0ZS5nZXRWYWx1ZSgpLmV4cGFuZGVkRmFjZXRJZC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUubmV4dChcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0SWQ6IChkLmRhdGEgYXMgYW55KS5mYWNldElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRGYWNldElkOiBjdXJyICsgJywnICsgZGF0YS5mYWNldElkLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXZUb29sdGlwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY2V0LXRyZWUtdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KGRpdlRvb2x0aXApLnRyYW5zaXRpb24oKS50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oNTAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpdlRvb2x0aXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmFjZXQtdHJlZS10b29sdGlwJyk7XHJcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZGl2VG9vbHRpcCkudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDIwMClcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIC45KTtcclxuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkaXZUb29sdGlwKS5odG1sKChkIGFzIGFueSkuZGF0YS5mYWNldE5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVgpICsgXCJweFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCAoZDMuZXZlbnQucGFnZVkgLSAyOCkgKyBcInB4XCIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGl2VG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWNldC10cmVlLXRvb2x0aXAnKTtcclxuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkaXZUb29sdGlwKS50cmFuc2l0aW9uKCkudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYXJjcy5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgIC8vICAgICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQpe1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIGFyYzEuY2VudHJvaWQoZCkgKyBcIilcIjtcclxuICAgICAgICAvLyAgICAgfSlcclxuICAgICAgICAvLyAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLFwibWlkZGxlXCIpXHJcbiAgICAgICAgLy8gICAgIC50ZXh0KChkLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiBwaWVkYXRhW2ldLmRhdGFbXCJmYWNldE5hbWVcIl07XHJcbiAgICAgICAgLy8gICAgIH0pXHJcbiAgICAgICAgLy8gICAgIC5hdHRyKCdmaWxsJywgJyMwMDAnKVxyXG4gICAgICAgIC8vICAgICAuYXR0cignZm9udC1zaXplJywgMTAgKyAncHgnKVxyXG4gICAgICAgIC8vICAgICAvLyAuYXR0cigneCcsMTApXHJcbiAgICAgICAgLy8gICAgIC8vIC5hdHRyKCd5JywxMClcclxuICAgICAgICAvLyAgICAgLm9uKCdjbGljaycsIGQgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc3QgW3ByZXYsIGN1cnJdID0gZ2xvYmFsU3RhdGUuZ2V0VmFsdWUoKS5leHBhbmRlZEZhY2V0SWQuc3BsaXQoJywnKTtcclxuICAgICAgICAvLyAgICAgICAgIGdsb2JhbFN0YXRlLm5leHQoXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGdsb2JhbFN0YXRlLmdldFZhbHVlKCksXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGYWNldElkOiAoZC5kYXRhIGFzIGFueSkuZmFjZXRJZCxcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkRmFjZXRJZDogY3VyciArICcsJyArIGRhdGEuZmFjZXRJZC50b1N0cmluZygpLFxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgKVxyXG4gICAgICAgIC8vICAgICAgICAgKVxyXG4gICAgICAgIC8vICAgICAgICAgY29uc3QgZGl2VG9vbHRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYWNldC10cmVlLXRvb2x0aXAnKTtcclxuICAgICAgICAvLyAgICAgICAgIGQzLnNlbGVjdChkaXZUb29sdGlwKS50cmFuc2l0aW9uKCkudHJhbnNpdGlvbigpXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcclxuICAgICAgICAvLyAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgICAgIC8vICAgICB9KVxyXG4gICAgICAgIC8vICAgICAub24oJ21vdXNlb3ZlcicsIGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBkaXZUb29sdGlwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhY2V0LXRyZWUtdG9vbHRpcCcpO1xyXG4gICAgICAgIC8vICAgICAgICAgZDMuc2VsZWN0KGRpdlRvb2x0aXApLnRyYW5zaXRpb24oKVxyXG4gICAgICAgIC8vICAgICAgICAgICAgIC5kdXJhdGlvbigyMDApXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAuOSk7XHJcbiAgICAgICAgLy8gICAgICAgICBkMy5zZWxlY3QoZGl2VG9vbHRpcCkuaHRtbCgoZCBhcyBhbnkpLmRhdGEuZmFjZXROYW1lKVxyXG4gICAgICAgIC8vICAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYKSArIFwicHhcIilcclxuICAgICAgICAvLyAgICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMjgpICsgXCJweFwiKTtcclxuICAgICAgICAvLyAgICAgfSlcclxuICAgICAgICAvLyAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAvLyAgICAgICAgIGNvbnN0IGRpdlRvb2x0aXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmFjZXQtdHJlZS10b29sdGlwJyk7XHJcbiAgICAgICAgLy8gICAgICAgICBkMy5zZWxlY3QoZGl2VG9vbHRpcCkudHJhbnNpdGlvbigpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgIC8vICAgICAgICAgICAgIC5kdXJhdGlvbig1MDApXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcclxuICAgICAgICAvLyAgICAgfSk7IFxyXG4gICAgLy8gLy8g5re75Yqg6aW85Zu+5aSW6Z2i55qE5paH5a2XXHJcbiAgICAvLyBhcmNzMS5hcHBlbmQoXCJnXCIpXHJcbiAgICAvLyAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihkKXtcclxuICAgIC8vICAgICAvL0B0cy1pZ25vcmVcclxuICAgIC8vICAgICByZXR1cm4gJ3RyYW5zbGF0ZSggJyArIGRhdGEuciArICcsICcgKyBkYXRhLnIgKyAnICknfSlcclxuICAgIC8vICAgICAuc2VsZWN0QWxsKCdwYXRoJylcclxuICAgIC8vICAgICAuZGF0YShwaWVkYXRhKVxyXG4gICAgLy8gICAgIC5lbnRlcigpXHJcbiAgICAvLyAgICAgLmFwcGVuZCgndGV4dCcpXHJcbiAgICAvLyAgICAgLnRleHQoKGQsIGkpID0+IHsgIFxyXG4gICAgLy8gICAgICAgICByZXR1cm4gcGllZGF0YVtpXS5kYXRhW1wiZmFjZXROYW1lXCJdO1xyXG4gICAgLy8gICAgIH0pXHJcbiAgICAvLyAgICAgLmF0dHIoJ3gnLGZ1bmN0aW9uKGQpIHtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHBvaW50U3RhcnQuY2VudHJvaWQoZClbMF1cclxuICAgIC8vICAgICB9KVxyXG4gICAgLy8gICAgIC5hdHRyKCd5JywgZnVuY3Rpb24oZCkge1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gcG9pbnRTdGFydC5jZW50cm9pZChkKVsxXVxyXG4gICAgLy8gICAgIH0pXHJcbiAgICAvLyAgICAgLnN0eWxlKCdmb250LXNpemUnLCAxMClcclxuXHJcbiAgICBcclxuXHJcblxyXG4gICAgY29uc3QgbnVtID0gZGF0YS5jaGlsZHJlbk51bWJlcjtcclxuICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5QSSAvIG51bTtcclxuXHJcblxyXG4gICAgLy8gY2FudmFzLmFwcGVuZCgnZycpXHJcbiAgICAvLyAgICAgLmF0dHIoJ2NsYXNzJywgZGF0YS5mYWNldElkKVxyXG4gICAgLy8gICAgIC5zZWxlY3RBbGwoJ2ZvcmVpZ25PYmplY3QnKVxyXG4gICAgLy8gICAgIC5kYXRhKGRhdGEuY2hpbGRyZW4pXHJcbiAgICAvLyAgICAgLmVudGVyKClcclxuICAgIC8vICAgICAuYXBwZW5kKCdmb3JlaWduT2JqZWN0JylcclxuICAgIC8vICAgICAuYXR0cignd2lkdGgnLDUwKVxyXG4gICAgLy8gICAgIC5hdHRyKCdoZWlnaHQnLDEwMClcclxuICAgIC8vICAgICAuYXR0cigneCcsIChkLCBpKSA9PiB7XHJcbiAgICAvLyAgICAgICAgIGlmIChhbmdsZSA9PT0gTWF0aC5QSSkge1xyXG4gICAgLy8gICAgICAgICAgICAgaWYgKGRhdGEuY3ggPj0gZG9tLmNsaWVudFdpZHRoIC8gMikge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmN4ICsgZGF0YS5yLzI7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm4gZGF0YS5jeCAtIGRhdGEuciAtIGZvbnRTaXplICogKGQgYXMgRmFjZXREYXRhKS5mYWNldE5hbWUubGVuZ3RoO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGlmIChNYXRoLnNpbihhbmdsZSAqICgyICogaSArIDEpKSA8IDApIHtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybiBkYXRhLmN4ICsgZGF0YS5yICogTWF0aC5zaW4oYW5nbGUgKiAoMiAqIGkgKyAxKSkgLSBmb250U2l6ZSAqIChkIGFzIEZhY2V0RGF0YSkuZmFjZXROYW1lLmxlbmd0aCAtIGZvbnRTaXplO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBkYXRhLmN4ICsgZGF0YS5yICogTWF0aC5zaW4oYW5nbGUgKiAoMiAqIGkgKyAxKSkgKyBmb250U2l6ZTtcclxuICAgIC8vICAgICB9KVxyXG4gICAgLy8gICAgIC5hdHRyKCd5JywgKGQsIGkpID0+IHtcclxuICAgIC8vICAgICAgICAgaWYgKGFuZ2xlID09PSBNYXRoLlBJKSB7XHJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm4gZGF0YS5jeSAtIGRhdGEucjtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICByZXR1cm4gZGF0YS5jeSAtIGRhdGEuciAqIE1hdGguY29zKGFuZ2xlICogKDIgKiBpICsgMSkpO1xyXG4gICAgLy8gICAgIH0pXHJcbiAgICAvLyAgICAgLmFwcGVuZCgneGh0bWw6cCcpXHJcbiAgICAvLyAgICAgLnN0eWxlKCd3aWR0aCcsNTApXHJcbiAgICAvLyAgICAgLnN0eWxlKCdoZWlodCcsMTAwKVxyXG4gICAgLy8gICAgIC5zdHlsZSgnY29sb3InLCcjMDAwJylcclxuICAgIC8vICAgICAuc3R5bGUoJ21hcmdpbi1ibG9jay1zdGFydCcsMClcclxuICAgIC8vICAgICAuc3R5bGUoJ21hcmdpbi1ibG9jay1lbmQnLDApXHJcbiAgICAvLyAgICAgLnRleHQoZCA9PiAoZCBhcyBGYWNldERhdGEpLmZhY2V0TmFtZSlcclxuICAgICAgICBcclxuICAgIC8vICAgICAuYXR0cignY3Vyc29yJywgJ3BvaW50ZXInKVxyXG4gICAgLy8gICAgIC5hdHRyKCdmaWxsJywgJyMwMDAnKVxyXG4gICAgLy8gICAgIC5zdHlsZSgnZm9udC1zaXplJywgOCArICdweCcpO1xyXG5cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCB7IHByZXNldFBhbGV0dGVzIH0gZnJvbSAnQGFudC1kZXNpZ24vY29sb3JzJztcclxuXHJcbi8vIOiwg+iJsuadv1xyXG5jb25zdCBwYWxldHRlcyA9IFtdO1xyXG5mb3IgKGNvbnN0IGtleSBpbiBwcmVzZXRQYWxldHRlcykge1xyXG4gICAgcGFsZXR0ZXMucHVzaChwcmVzZXRQYWxldHRlc1trZXldKTtcclxufVxyXG4vLyB2YXJpYWJsZXNcclxuLy8g6LCD6Imy5p2/6Imy5Y+3XHJcbmNvbnN0IENvbG9yTm8gPSA3O1xyXG4vLyDliIbpnaLlrZfkvZPlpKflsI/ojIPlm7RcclxuY29uc3QgbWluRmFjZXRGb250U2l6ZSA9IDg7XHJcbmNvbnN0IG1heEZhY2V0Rm9udFNpemUgPSAyMDtcclxuLy8g5YaF5a655Liw5a+M5bqm5p2D6YeNXHJcbmNvbnN0IHdlaWdodFNlY29uZEZhY2V0ID0gMjAwMDtcclxuY29uc3Qgd2VpZ2h0Rmlyc3RMYXllclZpZGVvID0gMTAwO1xyXG5jb25zdCB3ZWlnaHRGaXJzdExheWVyUmljaFRleHQgPSAxO1xyXG5jb25zdCB3ZWlnaHRTZWNvbmRMYXllclZpZGVvID0gMTAwO1xyXG5jb25zdCB3ZWlnaHRTZWNvbmRMYXllclJpY2hUZXh0ID0gMTtcclxuLy8g5pyA55+u5qCR5bmy5Y2g57uY5Yi25Yy65Z+f5q+U5L6LXHJcbmNvbnN0IGJyYW5jaFJhdGUgPSAwLjQ7XHJcbi8vIOS4gOe6p+WIhumdoumXtOi3neWNoOWIhumdouWuveW6puavlOS+i1xyXG5jb25zdCBicmFuY2hJbnRlcnZhbFJhdGUgPSAwLjI7XHJcbi8vIOagkeW5suaAu+WuveW6puWNoOe7mOWItuWMuuWfn+avlOS+i1xyXG5jb25zdCBicmFuY2hXaWR0aFJhdGUgPSAwLjU7XHJcblxyXG5jb25zdCBmaXJzdExheWVyVGhyZXNob2xkID0gNztcclxuY29uc3Qgc2Vjb25kTGF5ZXJUaHJlc2hvbGQgPSA1O1xyXG4vKipcclxuICogaW5wdXQ6IFthLCBiLCBjLCBkLCBlXVxyXG4gKiBvdXRwdXQ6IFtjLCBiLCBkLCBlLCBhXVxyXG4gKiBAcGFyYW0gYXJyIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsU29ydChhcnI6IEFycmF5PGFueT4pOiBBcnJheTxhbnk+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgd2hpbGUgKGFyci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goLi4uYXJyLnNwbGljZShNYXRoLmZsb29yKChhcnIubGVuZ3RoKSAvIDIpLCAxKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQXNzZW1ibGVEYXRhIHtcclxuICAgIGFzc2VtYmxlSWQ6IG51bWJlcjtcclxuICAgIGFzc2VtYmxlQ29udGVudDogc3RyaW5nO1xyXG4gICAgYXNzZW1ibGVTY3JhdGNoVGltZTogc3RyaW5nO1xyXG4gICAgZmFjZXRJZDogbnVtYmVyO1xyXG4gICAgc291cmNlSWQ6IG51bWJlcjtcclxuICAgIHR5cGU6IHN0cmluZztcclxuICAgIGZsYWc6IHN0cmluZztcclxuICAgIHVybDogc3RyaW5nO1xyXG4gICAgYXNzZW1ibGVUeXBlOiAndGV4dCcgfCAndmlkZW8nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZhY2V0RGF0YSB7XHJcbiAgICBmYWNldElkOiBudW1iZXI7XHJcbiAgICBmYWNldE5hbWU6IHN0cmluZztcclxuICAgIC8vIDE6IOS4gOe6p+WIhumdoiAyOiDkuoznuqfliIbpnaJcclxuICAgIGZhY2V0TGF5ZXI6IG51bWJlcjtcclxuICAgIHBhcmVudEZhY2V0SWQ6IG51bWJlcjtcclxuICAgIHRvcGljSWQ6IG51bWJlcjtcclxuICAgIGNoaWxkcmVuTnVtYmVyOiBudW1iZXI7XHJcbiAgICB0eXBlOiBzdHJpbmc7XHJcbiAgICAvLyB0cnVlOiDlrZDoioLngrnmmK/liIbpnaIgZmFsc2U6IOWtkOiKgueCueaYr+eijueJh1xyXG4gICAgY29udGFpbkNoaWxkcmVuRmFjZXQ6IGJvb2xlYW47XHJcbiAgICBjaGlsZHJlbjogKEFzc2VtYmxlRGF0YSB8IEZhY2V0RGF0YSlbXTtcclxufVxyXG5cclxuaW50ZXJmYWNlIFRyZWVEYXRhIHtcclxuICAgIHRvcGljSWQ6IG51bWJlcjtcclxuICAgIHRvcGljTmFtZTogc3RyaW5nO1xyXG4gICAgdG9waWNVcmw6IHN0cmluZztcclxuICAgIHRvcGljTGF5ZXI6IG51bWJlcjtcclxuICAgIGRvbWFpbklkOiBudW1iZXI7XHJcbiAgICBjaGlsZHJlbk51bWJlcjogbnVtYmVyO1xyXG4gICAgY2hpbGRyZW46IEZhY2V0RGF0YVtdO1xyXG59XHJcblxyXG4vKipcclxuICog6K6h566X5YiG6Z2i5p2D6YeNXHJcbiAqIEBwYXJhbSBmYWNldERhdGEg5YiG6Z2i5pWw5o2uIFxyXG4gKi9cclxuZnVuY3Rpb24gY2FsY1dlaWdodChmYWNldERhdGE6IEZhY2V0RGF0YSk6IG51bWJlciB7XHJcbiAgICAvLyDmipjlj6DliIbpnaLvvIzmnYPph43kuLowXHJcbiAgICBpZiAoZmFjZXREYXRhLmZhY2V0SWQgPT09IC0xKSByZXR1cm4gMDtcclxuICAgIC8vIOS4gOe6p+WIhumdolxyXG4gICAgaWYgKGZhY2V0RGF0YS5mYWNldExheWVyID09PSAxKSB7XHJcbiAgICAgICAgLy8g5pyJ5LqM57qn5YiG6Z2iXHJcbiAgICAgICAgaWYgKGZhY2V0RGF0YS5jb250YWluQ2hpbGRyZW5GYWNldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gd2VpZ2h0U2Vjb25kRmFjZXQgKiBmYWNldERhdGEuY2hpbGRyZW5OdW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOayoeacieS6jOe6p+WIhumdolxyXG4gICAgICAgIHJldHVybiBmYWNldERhdGEuY2hpbGRyZW4ucmVkdWNlKChhY2M6IG51bWJlciwgY3VycjogQXNzZW1ibGVEYXRhKTogbnVtYmVyID0+IHtcclxuICAgICAgICAgICAgaWYgKGN1cnIuYXNzZW1ibGVUeXBlID09PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyB3ZWlnaHRGaXJzdExheWVyUmljaFRleHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjICsgd2VpZ2h0Rmlyc3RMYXllclZpZGVvO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChmYWNldERhdGEuY29udGFpbkNoaWxkcmVuRmFjZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHdlaWdodFNlY29uZEZhY2V0ICogZmFjZXREYXRhLmNoaWxkcmVuTnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFjZXREYXRhLmNoaWxkcmVuLnJlZHVjZSgoYWNjOiBudW1iZXIsIGN1cnI6IEFzc2VtYmxlRGF0YSk6IG51bWJlciA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjdXJyLmZsYWcgPT09ICdmcmFnbWVudCcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyB3ZWlnaHRTZWNvbmRMYXllclJpY2hUZXh0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIHdlaWdodFNlY29uZExheWVyVmlkZW87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmludGVyZmFjZSBCcmFuY2gge1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgY29sb3I6IHN0cmluZztcclxuICAgIGZhY2V0SWQ6IG51bWJlcjtcclxuICAgIGZhY2V0TmFtZTogc3RyaW5nO1xyXG4gICAgY2hpbHJlbk51bWJlcjpudW1iZXI7XHJcbn1cclxuXHJcbmludGVyZmFjZSBMZWFmIHtcclxuICAgIGN4OiBudW1iZXI7XHJcbiAgICBjeTogbnVtYmVyO1xyXG4gICAgcjogbnVtYmVyO1xyXG4gICAgY29sb3I6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIEZvbGRCcmFuY2gge1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgdHJhbnNmb3JtOiBzdHJpbmc7XHJcbiAgICBjb2xvcjogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgVGV4dERhdGEge1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgZm9udFNpemU6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUcmVlIHtcclxuICAgIGJyYW5jaGVzOiBCcmFuY2hbXTtcclxuICAgIGxlYXZlczogTGVhZltdO1xyXG4gICAgZm9sZEJyYW5jaGVzOiBGb2xkQnJhbmNoW107XHJcbiAgICBmYWNldENoYXJ0OiBGYWNldENoYXJ0RGF0YVtdO1xyXG4gICAgdHJlZURhdGE6IEZhY2V0RGF0YVtdO1xyXG4gICAgdGV4dHM6IFRleHREYXRhW107XHJcbiAgICB0ZXh0c19sZWFmIDogVGV4dERhdGFbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGYWNldENoYXJ0RGF0YSBleHRlbmRzIEZhY2V0RGF0YSB7XHJcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcclxuICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICByOiBudW1iZXI7XHJcbiAgICBjeDogbnVtYmVyO1xyXG4gICAgY3k6IG51bWJlcjtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY0ZhY2V0Q2hhcnQoZGF0YTogRmFjZXREYXRhLCBjeDogbnVtYmVyLCBjeTogbnVtYmVyLCBjb2xvcjogc3RyaW5nLCByOiBudW1iZXIpOiBGYWNldENoYXJ0RGF0YSB7XHJcbiAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbihcclxuICAgICAgICB7fSxcclxuICAgICAgICBkYXRhLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7Y3h9LCR7Y3l9KWAsXHJcbiAgICAgICAgICAgIGN4LFxyXG4gICAgICAgICAgICBjeSxcclxuICAgICAgICAgICAgcixcclxuICAgICAgICAgICAgY29sb3IsXHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBidWlsZFRyZWUoZGF0YTogVHJlZURhdGEsIGRvbTogSFRNTEVsZW1lbnQpOiBUcmVlIHtcclxuXHJcbiAgICBjb25zdCByZXN1bHQ6IFRyZWUgPSB7XHJcbiAgICAgICAgYnJhbmNoZXM6IFtdLFxyXG4gICAgICAgIGxlYXZlczogW10sXHJcbiAgICAgICAgZm9sZEJyYW5jaGVzOiBbXSxcclxuICAgICAgICB0cmVlRGF0YTogW10sXHJcbiAgICAgICAgZmFjZXRDaGFydDogW10sXHJcbiAgICAgICAgdGV4dHM6IFtdLFxyXG4gICAgICAgIHRleHRzX2xlYWY6W10sXHJcbiAgICB9XHJcblxyXG4gICAgLy8g5aaC5p6c5Lyg5YWl5pWw5o2u5Li656m6XHJcbiAgICBpZiAoaXNFbXB0eShkYXRhKSB8fCAhZG9tKSByZXR1cm4gcmVzdWx0O1xyXG5cclxuICAgIC8vIHZpZXdwb3J05a696auYXHJcbiAgICBsZXQgd2lkdGg6IG51bWJlciA9IGRvbS5jbGllbnRXaWR0aDtcclxuICAgIGNvbnN0IGhlaWdodDogbnVtYmVyID0gZG9tLmNsaWVudEhlaWdodDtcclxuXHJcbiAgICAvLyDkuIDnuqfliIbpnaLmlbDph49cclxuICAgIGNvbnN0IGZpcnN0TGF5ZXJOdW1iZXI6IG51bWJlciA9IGRhdGEuY2hpbGRyZW5OdW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlpoLmnpzlj6rmnInkuIDkuKrkuIDnuqfliIbpnaLvvIwg5Y2V54us5aSE55CGXHJcbiAgICAgKi9cclxuICAgIGlmIChmaXJzdExheWVyTnVtYmVyID09PSAxKSB7XHJcbiAgICAgICAgcmVzdWx0LmJyYW5jaGVzLnB1c2goe1xyXG4gICAgICAgICAgICB4OiB3aWR0aCAvIDIgLSAxNixcclxuICAgICAgICAgICAgeTogaGVpZ2h0ICogYnJhbmNoUmF0ZSxcclxuICAgICAgICAgICAgd2lkdGg6IDMyLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAqIGJyYW5jaFJhdGUgLSA0MCxcclxuICAgICAgICAgICAgY29sb3I6IHBhbGV0dGVzWzBdW0NvbG9yTm9dLFxyXG4gICAgICAgICAgICBmYWNldElkOiBkYXRhLmNoaWxkcmVuWzBdLmZhY2V0SWQsXHJcbiAgICAgICAgICAgIGZhY2V0TmFtZTogZGF0YS5jaGlsZHJlblswXS5mYWNldE5hbWUsXHJcbiAgICAgICAgICAgIGNoaWxyZW5OdW1iZXI6ZGF0YS5jaGlsZHJlblswXS5jaGlsZHJlbk51bWJlcixcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXN1bHQubGVhdmVzLnB1c2goe1xyXG4gICAgICAgICAgICBjeDogd2lkdGggLyAyLFxyXG4gICAgICAgICAgICBjeTogaGVpZ2h0ICogMC4zODIsXHJcbiAgICAgICAgICAgIHI6IDIwLFxyXG4gICAgICAgICAgICBjb2xvcjogcGFsZXR0ZXNbMF1bQ29sb3JOb10sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmVzdWx0LmZvbGRCcmFuY2hlcy5wdXNoKHtcclxuICAgICAgICAgICAgeDogd2lkdGggLyAyIC0gOCxcclxuICAgICAgICAgICAgeTogaGVpZ2h0ICogMC42MTgsXHJcbiAgICAgICAgICAgIHdpZHRoOiAxNixcclxuICAgICAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICcnLFxyXG4gICAgICAgICAgICBjb2xvcjogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmVzdWx0LnRyZWVEYXRhID0gZGF0YS5jaGlsZHJlbjtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEuY2hpbGRyZW5bMF0uY29udGFpbkNoaWxkcmVuRmFjZXQpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmZhY2V0Q2hhcnQucHVzaChcclxuICAgICAgICAgICAgICAgIGNhbGNGYWNldENoYXJ0KGRhdGEuY2hpbGRyZW5bMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmxlYXZlc1swXS5jeCxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQubGVhdmVzWzBdLmN5LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5sZWF2ZXNbMF0uY29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmxlYXZlc1swXS5yKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmb250U2l6ZXcgPSAxNiAtIDEwID4gbWF4RmFjZXRGb250U2l6ZSA/IG1heEZhY2V0Rm9udFNpemUgOiAxNiAtIDQ7XHJcbiAgICAgICAgbGV0wqBmb250U2l6ZcKgPcKgZm9udFNpemV3O1xyXG4gICAgICAgIGNvbnN0IGZvbnRTaXplaCA9IHJlc3VsdC5icmFuY2hlc1swXS5oZWlnaHQvKHJlc3VsdC5icmFuY2hlc1swXS5mYWNldE5hbWUubGVuZ3RoKzgpO1xyXG4gICAgICAgXHJcbiAgICAgICAgaWbCoChmb250U2l6ZXfCoD7CoGZvbnRTaXplaMKgKXtcclxuICAgICAgICAgICAgwqDCoGZvbnRTaXplwqA9wqBmb250U2l6ZWg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIMKgwqDCoGZvbnRTaXplwqA9wqBmb250U2l6ZXc7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmVzdWx0LnRleHRzLnB1c2goe1xyXG4gICAgICAgICAgICB4OiByZXN1bHQuYnJhbmNoZXNbMF0ueCArIDksXHJcbiAgICAgICAgICAgIHk6IHJlc3VsdC5icmFuY2hlc1swXS55ICsgOCxcclxuICAgICAgICAgICAgdGV4dDogcmVzdWx0LmJyYW5jaGVzWzBdLmZhY2V0TmFtZSxcclxuICAgICAgICAgICAgZm9udFNpemU6IGZvbnRTaXplKzUsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlc3VsdC50ZXh0c19sZWFmLnB1c2goe1xyXG4gICAgICAgICAgICB4OiByZXN1bHQubGVhdmVzWzBdLmN4LFxyXG4gICAgICAgICAgICB5OiByZXN1bHQubGVhdmVzWzBdLmN5LFxyXG4gICAgICAgICAgICAvLyB0ZXh0OiBkYXRhLmNoaWxkcmVuWzBdLmNoaWxkcmVuTnVtYmVyLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIHRleHQ6IHJlc3VsdC5icmFuY2hlc1swXS5jaGlscmVuTnVtYmVyLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAyMFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDliKTmlq3mmK/lkKbop4bnqpfov4flsI/vvIzpnIDopoHmipjlj6DliIbpnaLvvIjlvIPnlKjvvIlcclxuICAgIC8vIGNvbnN0IGZvbGRGbGFnID0gYnJhbmNoV2lkdGhSYXRlICogd2lkdGggPCAoMTQgKiBmaXJzdExheWVyTnVtYmVyIC0gNCkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAvLyBcclxuICAgIGNvbnN0IGZvbGRGbGFnID0gZmlyc3RMYXllck51bWJlciA+IGZpcnN0TGF5ZXJUaHJlc2hvbGQgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgLy8g6K6h566X5YiG6Z2i5p2D6YeNXHJcbiAgICBjb25zdCBmaXJzdExheWVyTWFwID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGZhY2V0IG9mIGRhdGEuY2hpbGRyZW4pIHtcclxuICAgICAgICBmaXJzdExheWVyTWFwLnB1c2goe1xyXG4gICAgICAgICAgICBmYWNldElkOiBmYWNldC5mYWNldElkLFxyXG4gICAgICAgICAgICB2YWx1ZTogY2FsY1dlaWdodChmYWNldCksXHJcbiAgICAgICAgICAgIGNvbnRhaW5DaGlsZHJlbkZhY2V0OiBmYWNldC5jb250YWluQ2hpbGRyZW5GYWNldCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmoLnmja7mnYPph43mjpLluo9cclxuICAgIGZpcnN0TGF5ZXJNYXAuc29ydCgoYSwgYikgPT4gYS52YWx1ZSAtIGIudmFsdWUpO1xyXG5cclxuICAgIGxldCBmaXJzdExheWVyVG1wID0gZGF0YS5jaGlsZHJlbjtcclxuXHJcbiAgICAvLyDlpoLmnpzpnIDopoHmipjlj6BcclxuICAgIGlmIChmb2xkRmxhZykge1xyXG4gICAgICAgIC8vIOWPr+Wuuee6s+acgOWkmuS4gOe6p+WIhumdouaVsFxyXG4gICAgICAgIC8vIGNvbnN0IG1heEZpcnN0TGF5ZXJOdW1iZXIgPSBNYXRoLmZsb29yKCh3aWR0aCAqIGJyYW5jaFdpZHRoUmF0ZSArIDQpIC8gMTQpO1xyXG4gICAgICAgIGNvbnN0IG1heEZpcnN0TGF5ZXJOdW1iZXIgPSBmaXJzdExheWVyVGhyZXNob2xkO1xyXG4gICAgICAgIC8vIOadg+mHjeWkp+S6jndlaWdodFNlY29uZEZhY2V055qE5YiG6Z2i77yI57qm5Li65pyJ5LqM57qn5YiG6Z2i55qE5LiA57qn5YiG6Z2i77yJXHJcbiAgICAgICAgY29uc3QgZmlyc3RMYXllck51bWJlcldpdGhTZWNvbmRMYXllciA9IGZpcnN0TGF5ZXJNYXAuZmlsdGVyKHggPT4geC52YWx1ZSA+IHdlaWdodFNlY29uZEZhY2V0IC0gMSkubGVuZ3RoO1xyXG4gICAgICAgIC8vIOWJqeS9meWPr+aKmOWPoOWIhumdolxyXG4gICAgICAgIGNvbnN0IGZpcnN0TGF5ZXJOdW1iZXJXaXRob3V0U2Vjb25kTGF5ZXIgPSBmaXJzdExheWVyTnVtYmVyIC0gZmlyc3RMYXllck51bWJlcldpdGhTZWNvbmRMYXllcjtcclxuXHJcbiAgICAgICAgLy8g55So5p2l5a2Y5pS+6KaB5oqY5Y+g55qE5LiA57qn5YiG6Z2iZmFjZXRJZFxyXG4gICAgICAgIGxldCBmb2xkRmFjZXRJZHMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKG1heEZpcnN0TGF5ZXJOdW1iZXIgPCBmaXJzdExheWVyTnVtYmVyV2l0aFNlY29uZExheWVyICsgMSkge1xyXG4gICAgICAgICAgICAvLyDmnIDlpJrlj6/lrrnnurPkuIDnuqfliIbpnaIgPCDmnInkuoznuqfliIbpnaLnmoTkuIDnuqfliIbpnaLmlbDvvIzlj6rlsIblj6/mipjlj6DnmoTkuIDnuqfliIbpnaLlhajpg6jmipjlj6BcclxuICAgICAgICAgICAgZm9sZEZhY2V0SWRzLmNvbmNhdChmaXJzdExheWVyTWFwLmZpbHRlcih4ID0+IHgudmFsdWUgPCB3ZWlnaHRTZWNvbmRGYWNldCkubWFwKHggPT4geC5mYWNldElkKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5ZCm5YiZ5oqY5Y+g6YOo5YiGXHJcbiAgICAgICAgICAgIGZvbGRGYWNldElkcyA9IGZvbGRGYWNldElkcy5jb25jYXQoXHJcbiAgICAgICAgICAgICAgICBmaXJzdExheWVyTWFwLnNsaWNlKG1heEZpcnN0TGF5ZXJOdW1iZXIgLSAxID4gMCA/IG1heEZpcnN0TGF5ZXJOdW1iZXIgLSAxIDogMClcclxuICAgICAgICAgICAgICAgICAgICAubWFwKHggPT4geC5mYWNldElkKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZm9sZEZhY2V0SWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgdG1wOiBGYWNldERhdGFbXSA9IFtdO1xyXG4gICAgICAgICAgICB0bXAgPSB0bXAuY29uY2F0KGZpcnN0TGF5ZXJUbXAuZmlsdGVyKHggPT4gZm9sZEZhY2V0SWRzLmluZGV4T2YoeC5mYWNldElkKSA9PT0gLTEpKTtcclxuICAgICAgICAgICAgY29uc3QgZmFjZXRUbXA6IEZhY2V0RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgZmFjZXROYW1lOiAn5YW25LuW5YiG6Z2iJyxcclxuICAgICAgICAgICAgICAgIGZhY2V0TGF5ZXI6IC0xLFxyXG4gICAgICAgICAgICAgICAgcGFyZW50RmFjZXRJZDogMCxcclxuICAgICAgICAgICAgICAgIHRvcGljSWQ6IGRhdGEudG9waWNJZCxcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuTnVtYmVyOiBmb2xkRmFjZXRJZHMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2JyYW5jaCcsXHJcbiAgICAgICAgICAgICAgICBjb250YWluQ2hpbGRyZW5GYWNldDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBmaXJzdExheWVyVG1wLmZpbHRlcih4ID0+IGZvbGRGYWNldElkcy5pbmRleE9mKHguZmFjZXRJZCkgIT09IC0xKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdG1wLnB1c2goZmFjZXRUbXApO1xyXG4gICAgICAgICAgICBmaXJzdExheWVyVG1wID0gdG1wO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBzb3J0IGZvbGQgZmFjZXRzXHJcbiAgICBmaXJzdExheWVyVG1wLnNvcnQoKGEsIGIpID0+IGNhbGNXZWlnaHQoYikgLSBjYWxjV2VpZ2h0KGEpKTtcclxuXHJcbiAgICByZXN1bHQudHJlZURhdGEgPSBmaXJzdExheWVyVG1wO1xyXG5cclxuICAgIGNvbnN0IGZpcnN0TGF5ZXJUbXBOdW1iZXIgPSBmaXJzdExheWVyVG1wLmxlbmd0aDtcclxuICAgIC8vIOWIhumdouaVsOWlh+WBtuaAp1xyXG4gICAgY29uc3Qgb2RkID0gZmlyc3RMYXllclRtcE51bWJlciAlIDIgPT09IDEgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAvLyDlj7blrZDliIbluIPnmoTpq5jluqZcclxuICAgIGNvbnN0IHRvcEhlaWdodCA9IGhlaWdodCAqICgxIC0gYnJhbmNoUmF0ZSk7XHJcbiAgICAvLyBjYWxjIGxlYXZlcyBwb3NpdGlvblxyXG4gICAgY29uc3QgYW5nbGUgPSBNYXRoLlBJIC8gKGZpcnN0TGF5ZXJUbXBOdW1iZXIqMiApO1xyXG4gICAgY29uc3QgcjEgPSB3aWR0aCAqIE1hdGgudGFuKGFuZ2xlKSAvICgyICogKDEgKyBNYXRoLnRhbihhbmdsZSkpKTtcclxuICAgIGNvbnN0IHIyID0gb2RkID8gdG9wSGVpZ2h0IC8gKDEgKyAxIC8gTWF0aC5zaW4oYW5nbGUpKSA6IHRvcEhlaWdodCAvICgxICsgMSAvIE1hdGgudGFuKGFuZ2xlKSk7XHJcbiAgICBjb25zdCByID0gcjEgPCByMiA/IHIxIDogcjI7XHJcbiAgICBjb25zdCBSID0gciAvIE1hdGguc2luKGFuZ2xlKTtcclxuXHJcbiAgICBjb25zdCBkZWx0YUludGVydmFsID0gUiArIHIgPCB0b3BIZWlnaHQgPyAodG9wSGVpZ2h0IC0gUiAtIHIpIC8gZmlyc3RMYXllclRtcE51bWJlciAqIDIgOiAwO1xyXG5cclxuICAgIGxldCBpbml0QW5nbGUgPSBvZGQgPyAwIDogYW5nbGU7XHJcbiAgICBsZXQgdGVtcEluZGV4ID0gTWF0aC5mbG9vcihmaXJzdExheWVyVG1wTnVtYmVyIC8gMik7XHJcbiAgICB3aGlsZSAoaW5pdEFuZ2xlIDwgTWF0aC5QSSAvIDIpIHtcclxuICAgICAgICBjb25zdCBsZWFmMTogTGVhZiA9IHtcclxuICAgICAgICAgICAgY3g6IFIgKiBNYXRoLnNpbihpbml0QW5nbGUpICsgd2lkdGggLyAyLFxyXG4gICAgICAgICAgICBjeTogdG9wSGVpZ2h0IC0gUiAqIE1hdGguY29zKGluaXRBbmdsZSkgLSBkZWx0YUludGVydmFsICogdGVtcEluZGV4LFxyXG4gICAgICAgICAgICByOiByIC8gMixcclxuICAgICAgICAgICAgY29sb3I6ICcjZmZmZmZmJyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGxlYWYyID0geyAuLi5sZWFmMSB9O1xyXG4gICAgICAgIGxlYWYyLmN4ID0gd2lkdGggLyAyIC0gUiAqIE1hdGguc2luKGluaXRBbmdsZSk7XHJcbiAgICAgICAgcmVzdWx0LmxlYXZlcy5wdXNoKGxlYWYxKTtcclxuICAgICAgICByZXN1bHQubGVhdmVzLnB1c2gobGVhZjIpO1xyXG4gICAgICAgIGluaXRBbmdsZSArPSBhbmdsZSAqIDI7XHJcbiAgICAgICAgdGVtcEluZGV4LS07XHJcbiAgICB9XHJcbiAgICBpZiAob2RkKSB7XHJcbiAgICAgICAgcmVzdWx0LmxlYXZlcy5zaGlmdCgpO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdExheWVyVG1wTnVtYmVyOyBpKyspIHtcclxuICAgICAgICByZXN1bHQubGVhdmVzW2ldLmNvbG9yID0gcGFsZXR0ZXNbaV1bQ29sb3JOb107XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5LiA57qn5YiG6Z2i5a695bqmXHJcbiAgICBjb25zdCB3aWR0aEJldHdlZW5TaWRlID0gTWF0aC5hYnMocmVzdWx0LmxlYXZlc1tmaXJzdExheWVyVG1wTnVtYmVyIC0gMV0uY3ggLSByZXN1bHQubGVhdmVzW2ZpcnN0TGF5ZXJUbXBOdW1iZXIgLSAyXS5jeCk7XHJcbiAgICBjb25zdCB4SW5pdEZsYWcgPSAod2lkdGhCZXR3ZWVuU2lkZSAtIHIpIDwgKHdpZHRoICogYnJhbmNoV2lkdGhSYXRlKSA/IHRydWUgOiBmYWxzZTtcclxuICAgIGNvbnN0IGZhY2V0V2lkdGggPSB4SW5pdEZsYWcgPyAoTWF0aC5hYnMocmVzdWx0LmxlYXZlc1tmaXJzdExheWVyVG1wTnVtYmVyIC0gMV0uY3ggLSByZXN1bHQubGVhdmVzW2ZpcnN0TGF5ZXJUbXBOdW1iZXIgLSAyXS5jeCkgLSByKSAvICgoMSArIGJyYW5jaEludGVydmFsUmF0ZSkgKiBmaXJzdExheWVyVG1wTnVtYmVyIC0gYnJhbmNoSW50ZXJ2YWxSYXRlKSA6ICh3aWR0aCAqIGJyYW5jaFdpZHRoUmF0ZSkgLyAoKDEgKyBicmFuY2hJbnRlcnZhbFJhdGUpICogZmlyc3RMYXllclRtcE51bWJlciAtIGJyYW5jaEludGVydmFsUmF0ZSk7XHJcbiAgICBjb25zdCBmYWNldEludGVydmFsID0gZmFjZXRXaWR0aCAqIGJyYW5jaEludGVydmFsUmF0ZTtcclxuICAgIC8vIOacgOW3puaoquWdkOagh1xyXG4gICAgbGV0IHhJbml0ID0gKHJlc3VsdC5sZWF2ZXNbZmlyc3RMYXllclRtcE51bWJlciAtIDFdLmN4IDwgcmVzdWx0LmxlYXZlc1tmaXJzdExheWVyVG1wTnVtYmVyIC0gMl0uY3hcclxuICAgICAgICA/IHJlc3VsdC5sZWF2ZXNbZmlyc3RMYXllclRtcE51bWJlciAtIDFdLmN4ICsgciAvIDJcclxuICAgICAgICA6IHJlc3VsdC5sZWF2ZXNbZmlyc3RMYXllclRtcE51bWJlciAtIDJdLmN4ICsgciAvIDIpO1xyXG4gICAgaWYgKCF4SW5pdEZsYWcpIHtcclxuICAgICAgICB4SW5pdCA9IHdpZHRoICogKDEgLSBicmFuY2hXaWR0aFJhdGUpIC8gMjtcclxuICAgIH1cclxuICAgIC8vIOWIneWni+WMluS4gOe6p+WIhumdouWvueW6lOeahGJyYW5jaFxyXG4gICAgZmlyc3RMYXllclRtcC5mb3JFYWNoKChmYWNldCwgaW5kZXgpID0+IHtcclxuICAgICAgICBjb25zdCBicmFuY2g6IEJyYW5jaCA9IHtcclxuICAgICAgICAgICAgeDogeEluaXQgKyBpbmRleCAqICgxICsgYnJhbmNoSW50ZXJ2YWxSYXRlKSAqIGZhY2V0V2lkdGgsXHJcbiAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgICAgIHdpZHRoOiBmYWNldFdpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgIGZhY2V0SWQ6IC0xLFxyXG4gICAgICAgICAgICBmYWNldE5hbWU6ICcnLFxyXG4gICAgICAgICAgICBjb2xvcjogJycsXHJcbiAgICAgICAgICAgIGNoaWxyZW5OdW1iZXI6MCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlc3VsdC5icmFuY2hlcy5wdXNoKGJyYW5jaCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDlsIbliJ3lp4vljJbnmoRicmFuY2jku47kuK3pl7TliLDkuKTovrnph43mlrDmjpLluo9cclxuICAgIHJlc3VsdC5icmFuY2hlcyA9IGNhbWVsU29ydChyZXN1bHQuYnJhbmNoZXMpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3RMYXllclRtcE51bWJlcjsgaSsrKSB7XHJcbiAgICAgICAgcmVzdWx0LmJyYW5jaGVzW2ldLmZhY2V0TmFtZSA9IGZpcnN0TGF5ZXJUbXBbaV0uZmFjZXROYW1lO1xyXG4gICAgICAgIHJlc3VsdC5icmFuY2hlc1tpXS5mYWNldElkID0gZmlyc3RMYXllclRtcFtpXS5mYWNldElkO1xyXG4gICAgICAgIHJlc3VsdC5icmFuY2hlc1tpXS5jaGlscmVuTnVtYmVyID0gZmlyc3RMYXllclRtcFtpXS5jaGlsZHJlbk51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpcnN0TGF5ZXJUbXBOdW1iZXI7IGkrKykge1xyXG4gICAgICAgIHJlc3VsdC5icmFuY2hlc1tpXS55ID0gcmVzdWx0LmxlYXZlc1tpXS5jeSAvIDIgKyBoZWlnaHQgKiAoMSAtIGJyYW5jaFJhdGUgKiAwLjgpIC8gMjtcclxuICAgICAgICByZXN1bHQuYnJhbmNoZXNbaV0uaGVpZ2h0ID0gaGVpZ2h0IC0gcmVzdWx0LmJyYW5jaGVzW2ldLnkgLSA0MDtcclxuICAgICAgICByZXN1bHQuYnJhbmNoZXNbaV0uY29sb3IgPSBwYWxldHRlc1tpXVtDb2xvck5vXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUn+aIkGZvbGRCcmFuY2hlc1xyXG4gICAgICovXHJcbiAgICB0ZW1wSW5kZXggPSBmaXJzdExheWVyVG1wTnVtYmVyICsgMTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3RMYXllclRtcE51bWJlcjsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgZm9sZEJyYW5jaDogRm9sZEJyYW5jaCA9IHtcclxuICAgICAgICAgICAgeDogcmVzdWx0LmJyYW5jaGVzW2ldLnggPCB3aWR0aCAvIDIgPyByZXN1bHQuYnJhbmNoZXNbaV0ueCArIHJlc3VsdC5icmFuY2hlc1tpXS53aWR0aCA6IHJlc3VsdC5icmFuY2hlc1tpXS54IC0gcmVzdWx0LmJyYW5jaGVzW2ldLndpZHRoLFxyXG4gICAgICAgICAgICB5OiByZXN1bHQuYnJhbmNoZXNbaV0ueSxcclxuICAgICAgICAgICAgd2lkdGg6IHJlc3VsdC5icmFuY2hlc1tpXS53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiByZXN1bHQuYnJhbmNoZXNbaV0ueCA+IHdpZHRoIC8gMiA/IE1hdGguc3FydChNYXRoLnBvdyhyZXN1bHQubGVhdmVzW2ldLmN4IC0gcmVzdWx0LmJyYW5jaGVzW2ldLnggKyBmYWNldFdpZHRoIC8gMiwgMikgKyBNYXRoLnBvdyhyZXN1bHQubGVhdmVzW2ldLmN5IC0gcmVzdWx0LmJyYW5jaGVzW2ldLnksIDIpKSAvIDJcclxuICAgICAgICAgICAgICAgIDogTWF0aC5zcXJ0KE1hdGgucG93KHJlc3VsdC5sZWF2ZXNbaV0uY3ggLSByZXN1bHQuYnJhbmNoZXNbaV0ueCAtIGZhY2V0V2lkdGgsIDIpICsgTWF0aC5wb3cocmVzdWx0LmxlYXZlc1tpXS5jeSAtIHJlc3VsdC5icmFuY2hlc1tpXS55LCAyKSkgLyAyLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICcnLFxyXG4gICAgICAgICAgICBjb2xvcjogcGFsZXR0ZXNbaV1bQ29sb3JOb10sXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBtaWRkbGVYID0gcmVzdWx0LmJyYW5jaGVzW2ldLnggKyBmb2xkQnJhbmNoLndpZHRoIC8gMjtcclxuICAgICAgICBjb25zdCBtaWRkbGVZID0gZm9sZEJyYW5jaC55O1xyXG5cclxuICAgICAgICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbihNYXRoLmFicygocmVzdWx0LmxlYXZlc1tpXS5jeSAtIG1pZGRsZVkpIC8gKHJlc3VsdC5sZWF2ZXNbaV0uY3ggLSBtaWRkbGVYKSkpIC8gTWF0aC5QSSAqIDE4MDtcclxuICAgICAgICBpZiAocmVzdWx0LmJyYW5jaGVzW2ldLnggPCB3aWR0aCAvIDIpIHtcclxuICAgICAgICAgICAgZm9sZEJyYW5jaC50cmFuc2Zvcm0gPSAncm90YXRlKCcgKyAoYW5nbGUgKyA5MCkgKyAnICcgKyBmb2xkQnJhbmNoLnggKyAnLCcgKyBmb2xkQnJhbmNoLnkgKyAnKSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9sZEJyYW5jaC50cmFuc2Zvcm0gPSAncm90YXRlKCcgKyAoLWFuZ2xlIC0gOTApICsgJyAnICsgcmVzdWx0LmJyYW5jaGVzW2ldLnggKyAnLCcgKyBmb2xkQnJhbmNoLnkgKyAnKSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXN1bHQuZm9sZEJyYW5jaGVzLnB1c2goZm9sZEJyYW5jaCk7XHJcbiAgICAgICAgdGVtcEluZGV4LS07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc3QgZm9udFNpemUgPSBmYWNldFdpZHRoIC0gNCA+IG1heEZhY2V0Rm9udFNpemUgPyBtYXhGYWNldEZvbnRTaXplIDogZmFjZXRXaWR0aCAtIDQ7XHJcblxyXG4gICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdExheWVyVG1wTnVtYmVyOyBpKyspIHtcclxuICAgIC8vICAgICAvLyDnlJ/miJBmYWNldENoYXJ0XHJcbiAgICAvLyAgICAgaWYgKGZpcnN0TGF5ZXJUbXBbaV0uY29udGFpbkNoaWxkcmVuRmFjZXQpIHtcclxuICAgIC8vICAgICAgICAgcmVzdWx0LmZhY2V0Q2hhcnQucHVzaChcclxuICAgIC8vICAgICAgICAgICAgIGNhbGNGYWNldENoYXJ0KGZpcnN0TGF5ZXJUbXBbaV0sXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcmVzdWx0LmxlYXZlc1tpXS5jeCxcclxuICAgIC8vICAgICAgICAgICAgICAgICByZXN1bHQubGVhdmVzW2ldLmN5LFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHJlc3VsdC5sZWF2ZXNbaV0uY29sb3IsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcmVzdWx0LmxlYXZlc1tpXS5yKVxyXG4gICAgLy8gICAgICAgICApO1xyXG4gICAgLy8gICAgIH1cclxuICAgIGNvbnN0IGZvbnRTaXpldyA9IGZhY2V0V2lkdGggLSAxMCA+IG1heEZhY2V0Rm9udFNpemUgPyBtYXhGYWNldEZvbnRTaXplIDogZmFjZXRXaWR0aCAtIDQ7XHJcbiAgICBcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3RMYXllclRtcE51bWJlcjsgaSsrKSB7XHJcbiAgICAgICAgLy8g55Sf5oiQZmFjZXRDaGFydFxyXG4gICAgICAgIGlmIChmaXJzdExheWVyVG1wW2ldLmNvbnRhaW5DaGlsZHJlbkZhY2V0KSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5mYWNldENoYXJ0LnB1c2goXHJcbiAgICAgICAgICAgICAgICBjYWxjRmFjZXRDaGFydChmaXJzdExheWVyVG1wW2ldLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5sZWF2ZXNbaV0uY3gsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmxlYXZlc1tpXS5jeSxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQubGVhdmVzW2ldLmNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5sZWF2ZXNbaV0ucixcclxuICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0wqBmb250U2l6ZcKgPcKgZm9udFNpemV3O1xyXG4gICAgICAgIGNvbnN0IGZvbnRTaXplaCA9IHJlc3VsdC5icmFuY2hlc1tpXS5oZWlnaHQvKHJlc3VsdC5icmFuY2hlc1tpXS5mYWNldE5hbWUubGVuZ3RoKzgpO1xyXG4gICAgICAgXHJcbiAgICAgICAgaWbCoChmb250U2l6ZXfCoD7CoGZvbnRTaXplaMKgKXtcclxuICAgICAgICAgICAgwqDCoGZvbnRTaXplwqA9wqBmb250U2l6ZWg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIMKgwqDCoGZvbnRTaXplwqA9wqBmb250U2l6ZXc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOeUn+aIkHRleHRcclxuICAgICAgICByZXN1bHQudGV4dHMucHVzaCh7XHJcbiAgICAgICAgICAgIHg6IHJlc3VsdC5icmFuY2hlc1tpXS54ICsgZmFjZXRXaWR0aCAvIDIgLSBmb250U2l6ZSAvIDQsXHJcbiAgICAgICAgICAgIHk6IHJlc3VsdC5icmFuY2hlc1tpXS55ICsgOCxcclxuICAgICAgICAgICAgdGV4dDogcmVzdWx0LmJyYW5jaGVzW2ldLmZhY2V0TmFtZSxcclxuICAgICAgICAgICAgZm9udFNpemVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICBcclxuICAgICAgICByZXN1bHQudGV4dHNfbGVhZi5wdXNoKHtcclxuICAgICAgICAgICAgeDogcmVzdWx0LmxlYXZlc1tpXS5jeCAtICgyMCAqIGRhdGEuY2hpbGRyZW5baV0uY2hpbGRyZW5OdW1iZXIudG9TdHJpbmcoKS5sZW5ndGgpIC8gMyxcclxuICAgICAgICAgICAgeTogcmVzdWx0LmxlYXZlc1tpXS5jeSArICAyMCowLjYgICxcclxuICAgICAgICAgICAgdGV4dDogcmVzdWx0LmJyYW5jaGVzW2ldLmNoaWxyZW5OdW1iZXIudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgZm9udFNpemU6MjBcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgbGVhZiBvZiByZXN1bHQubGVhdmVzKSB7XHJcbiAgICAgICAgbGVhZi5yID0gZmFjZXRXaWR0aCAqIDAuNjtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGNvbnN0IHBpZSBvZiByZXN1bHQuZmFjZXRDaGFydCkge1xyXG4gICAgICAgIHBpZS5yID0gZmFjZXRXaWR0aCAqIDAuODtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNvbnN0IGdsb2JhbFN0YXRlID0gbmV3IEJlaGF2aW9yU3ViamVjdCh7XG4gICAgY3VycmVudEZhY2V0SWQ6IC0xLFxuICAgIGJyYW5jaEZhY2V0SWQ6IC0xLFxuICAgIGV4cGFuZGVkRmFjZXRJZDogJy0yLC0yJyxcbiAgICBpbml0OiBmYWxzZSxcbn0pO1xuXG5leHBvcnQgY29uc3QgZ2xvYmFsRGF0YSA9IHtcbiAgICB0cmVlRGF0YTogbnVsbCxcbn07XG5cbmV4cG9ydCBjb25zdCBnbG9iYWxCcmFuY2ggPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHtcbiAgICBjdXJyZW50RmFjZXRJZDogLTEsXG4gICAgZXhwYW5kZWRGYWNldElkOiAnLTIsLTInLFxuICAgIGluaXQ6IGZhbHNlLFxufSk7IiwiZXhwb3J0IGZ1bmN0aW9uIGVtcHR5Q2hpbGRyZW4oZG9tOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gZG9tLmNoaWxkTm9kZXM7XG4gICAgXG4gICAgd2hpbGUgKGNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZG9tLnJlbW92ZUNoaWxkKGNoaWxkcmVuWzBdKTtcbiAgICB9XG59IiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIG1vZHVsZSBleHBvcnRzIG11c3QgYmUgcmV0dXJuZWQgZnJvbSBydW50aW1lIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbnJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0OTIpO1xuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiXSwic291cmNlUm9vdCI6IiJ9