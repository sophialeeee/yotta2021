/*! For license information please see facetTree.js.LICENSE.txt */
/*eslint-disable*/ 
!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.facetTree=n():t.facetTree=n()}(self,(function(){return(()=>{var t={4778:function(t,n,e){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var i=r(e(7621));function o(t,n,e){var r;return(r=Math.round(t.h)>=60&&Math.round(t.h)<=240?e?Math.round(t.h)-2*n:Math.round(t.h)+2*n:e?Math.round(t.h)+2*n:Math.round(t.h)-2*n)<0?r+=360:r>=360&&(r-=360),r}function u(t,n,e){return 0===t.h&&0===t.s?t.s:((r=e?Math.round(100*t.s)-16*n:4===n?Math.round(100*t.s)+16:Math.round(100*t.s)+5*n)>100&&(r=100),e&&5===n&&r>10&&(r=10),r<6&&(r=6),r);var r}function a(t,n,e){return e?Math.round(100*t.v)+5*n:Math.round(100*t.v)-15*n}n.default=function(t){for(var n=[],e=i.default(t),r=5;r>0;r-=1){var c=e.toHsv(),s=i.default({h:o(c,r,!0),s:u(c,r,!0),v:a(c,r,!0)}).toHexString();n.push(s)}for(n.push(e.toHexString()),r=1;r<=4;r+=1)c=e.toHsv(),s=i.default({h:o(c,r),s:u(c,r),v:a(c,r)}).toHexString(),n.push(s);return n}},9086:function(t,n,e){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var i=r(e(4778));n.generate=i.default;var o={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"};n.presetPrimaryColors=o;var u={};n.presetPalettes=u,Object.keys(o).forEach((function(t){u[t]=i.default(o[t]),u[t].primary=u[t][5]}));var a=u.red;n.red=a;var c=u.volcano;n.volcano=c;var s=u.gold;n.gold=s;var f=u.orange;n.orange=f;var l=u.yellow;n.yellow=l;var h=u.lime;n.lime=h;var p=u.green;n.green=p;var d=u.cyan;n.cyan=d;var v=u.blue;n.blue=v;var y=u.geekblue;n.geekblue=y;var b=u.purple;n.purple=b;var g=u.magenta;n.magenta=g;var _=u.grey;n.grey=_},9362:(t,n,e)=>{"use strict";e.r(n),e.d(n,{FormatSpecifier:()=>cc,active:()=>Jr,arc:()=>ix,area:()=>fx,areaRadial:()=>_x,ascending:()=>i,autoType:()=>Lu,axisBottom:()=>it,axisLeft:()=>ot,axisRight:()=>rt,axisTop:()=>et,bisect:()=>s,bisectLeft:()=>c,bisectRight:()=>a,bisector:()=>o,blob:()=>ya,brush:()=>Ai,brushSelection:()=>Ti,brushX:()=>Ni,brushY:()=>Ei,buffer:()=>ga,chord:()=>Li,clientPoint:()=>Ie,cluster:()=>Tp,color:()=>Xn,contourDensity:()=>au,contours:()=>nu,create:()=>Im,creator:()=>on,cross:()=>h,csv:()=>Sa,csvFormat:()=>Mu,csvFormatBody:()=>Tu,csvFormatRow:()=>Eu,csvFormatRows:()=>Nu,csvFormatValue:()=>Au,csvParse:()=>wu,csvParseRows:()=>Su,cubehelix:()=>Yo,curveBasis:()=>Jx,curveBasisClosed:()=>nw,curveBasisOpen:()=>rw,curveBundle:()=>ow,curveCardinal:()=>cw,curveCardinalClosed:()=>fw,curveCardinalOpen:()=>hw,curveCatmullRom:()=>vw,curveCatmullRomClosed:()=>bw,curveCatmullRomOpen:()=>_w,curveLinear:()=>ux,curveLinearClosed:()=>xw,curveMonotoneX:()=>kw,curveMonotoneY:()=>Cw,curveNatural:()=>Pw,curveStep:()=>jw,curveStepAfter:()=>Lw,curveStepBefore:()=>Ow,customEvent:()=>bn,descending:()=>p,deviation:()=>y,dispatch:()=>ht,drag:()=>du,dragDisable:()=>An,dragEnable:()=>kn,dsv:()=>wa,dsvFormat:()=>mu,easeBack:()=>fa,easeBackIn:()=>ca,easeBackInOut:()=>fa,easeBackOut:()=>sa,easeBounce:()=>oa,easeBounceIn:()=>ia,easeBounceInOut:()=>ua,easeBounceOut:()=>oa,easeCircle:()=>ea,easeCircleIn:()=>ta,easeCircleInOut:()=>ea,easeCircleOut:()=>na,easeCubic:()=>$r,easeCubicIn:()=>Hr,easeCubicInOut:()=>$r,easeCubicOut:()=>Xr,easeElastic:()=>pa,easeElasticIn:()=>ha,easeElasticInOut:()=>da,easeElasticOut:()=>pa,easeExp:()=>Ju,easeExpIn:()=>Ku,easeExpInOut:()=>Ju,easeExpOut:()=>Qu,easeLinear:()=>Ru,easePoly:()=>Yu,easePolyIn:()=>qu,easePolyInOut:()=>Yu,easePolyOut:()=>Zu,easeQuad:()=>Uu,easeQuadIn:()=>Vu,easeQuadInOut:()=>Uu,easeQuadOut:()=>Bu,easeSin:()=>Gu,easeSinIn:()=>Xu,easeSinInOut:()=>Gu,easeSinOut:()=>$u,entries:()=>vo,event:()=>ln,extent:()=>b,forceCenter:()=>Fa,forceCollide:()=>Ya,forceLink:()=>Xa,forceManyBody:()=>Ja,forceRadial:()=>tc,forceSimulation:()=>Qa,forceX:()=>nc,forceY:()=>ec,format:()=>pc,formatDefaultLocale:()=>gc,formatLocale:()=>bc,formatPrefix:()=>dc,formatSpecifier:()=>ac,geoAlbers:()=>Vh,geoAlbersUsa:()=>Bh,geoArea:()=>ds,geoAzimuthalEqualArea:()=>Yh,geoAzimuthalEqualAreaRaw:()=>Zh,geoAzimuthalEquidistant:()=>Hh,geoAzimuthalEquidistantRaw:()=>Wh,geoBounds:()=>af,geoCentroid:()=>_f,geoCircle:()=>Cf,geoClipAntimeridian:()=>Uf,geoClipCircle:()=>qf,geoClipExtent:()=>Hf,geoClipRectangle:()=>Wf,geoConicConformal:()=>Jh,geoConicConformalRaw:()=>Qh,geoConicEqualArea:()=>Rh,geoConicEqualAreaRaw:()=>Dh,geoConicEquidistant:()=>rp,geoConicEquidistantRaw:()=>ep,geoContains:()=>dl,geoDistance:()=>ol,geoEqualEarth:()=>fp,geoEqualEarthRaw:()=>sp,geoEquirectangular:()=>np,geoEquirectangularRaw:()=>tp,geoGnomonic:()=>hp,geoGnomonicRaw:()=>lp,geoGraticule:()=>bl,geoGraticule10:()=>gl,geoIdentity:()=>pp,geoInterpolate:()=>_l,geoLength:()=>el,geoMercator:()=>$h,geoMercatorRaw:()=>Xh,geoNaturalEarth1:()=>vp,geoNaturalEarth1Raw:()=>dp,geoOrthographic:()=>bp,geoOrthographicRaw:()=>yp,geoPath:()=>xh,geoProjection:()=>jh,geoProjectionMutator:()=>Oh,geoRotation:()=>Ef,geoStereographic:()=>_p,geoStereographicRaw:()=>gp,geoStream:()=>ns,geoTransform:()=>wh,geoTransverseMercator:()=>xp,geoTransverseMercatorRaw:()=>mp,gray:()=>Mo,hcl:()=>Po,hierarchy:()=>Ep,histogram:()=>I,hsl:()=>oe,html:()=>Ca,image:()=>Ta,interpolate:()=>ke,interpolateArray:()=>xe,interpolateBasis:()=>se,interpolateBasisClosed:()=>fe,interpolateBlues:()=>im,interpolateBrBG:()=>y_,interpolateBuGn:()=>z_,interpolateBuPu:()=>O_,interpolateCividis:()=>vm,interpolateCool:()=>gm,interpolateCubehelix:()=>Rd,interpolateCubehelixDefault:()=>ym,interpolateCubehelixLong:()=>Vd,interpolateDate:()=>Se,interpolateDiscrete:()=>Td,interpolateGnBu:()=>D_,interpolateGreens:()=>um,interpolateGreys:()=>cm,interpolateHcl:()=>Od,interpolateHclLong:()=>Ld,interpolateHsl:()=>Fd,interpolateHslLong:()=>Pd,interpolateHue:()=>Nd,interpolateInferno:()=>km,interpolateLab:()=>zd,interpolateMagma:()=>Am,interpolateNumber:()=>Me,interpolateNumberArray:()=>_e,interpolateObject:()=>Te,interpolateOrRd:()=>V_,interpolateOranges:()=>dm,interpolatePRGn:()=>g_,interpolatePiYG:()=>m_,interpolatePlasma:()=>Cm,interpolatePuBu:()=>Z_,interpolatePuBuGn:()=>U_,interpolatePuOr:()=>w_,interpolatePuRd:()=>W_,interpolatePurples:()=>fm,interpolateRainbow:()=>mm,interpolateRdBu:()=>M_,interpolateRdGy:()=>N_,interpolateRdPu:()=>X_,interpolateRdYlBu:()=>A_,interpolateRdYlGn:()=>C_,interpolateReds:()=>hm,interpolateRgb:()=>ve,interpolateRgbBasis:()=>be,interpolateRgbBasisClosed:()=>ge,interpolateRound:()=>Ed,interpolateSinebow:()=>Mm,interpolateSpectral:()=>F_,interpolateString:()=>Ae,interpolateTransformCss:()=>dr,interpolateTransformSvg:()=>vr,interpolateTurbo:()=>Tm,interpolateViridis:()=>Em,interpolateWarm:()=>bm,interpolateYlGn:()=>Q_,interpolateYlGnBu:()=>G_,interpolateYlOrBr:()=>tm,interpolateYlOrRd:()=>em,interpolateZoom:()=>Cd,interrupt:()=>or,interval:()=>eS,isoFormat:()=>tS,isoParse:()=>nS,json:()=>Ea,keys:()=>ho,lab:()=>To,lch:()=>Fo,line:()=>sx,lineRadial:()=>gx,linkHorizontal:()=>Ax,linkRadial:()=>Cx,linkVertical:()=>kx,local:()=>Pm,map:()=>eo,matcher:()=>bt,max:()=>j,mean:()=>O,median:()=>L,merge:()=>D,min:()=>R,mouse:()=>Pe,namespace:()=>Tt,namespaces:()=>Mt,nest:()=>ro,now:()=>Ze,pack:()=>Qp,packEnclose:()=>Pp,packSiblings:()=>Wp,pairs:()=>f,partition:()=>id,path:()=>Wi,permute:()=>V,pie:()=>px,piecewise:()=>Bd,pointRadial:()=>mx,polygonArea:()=>qd,polygonCentroid:()=>Zd,polygonContains:()=>$d,polygonHull:()=>Xd,polygonLength:()=>Gd,precisionFixed:()=>_c,precisionPrefix:()=>mc,precisionRound:()=>xc,quadtree:()=>Ra,quantile:()=>F,quantize:()=>Ud,radialArea:()=>_x,radialLine:()=>gx,randomBates:()=>ev,randomExponential:()=>rv,randomIrwinHall:()=>nv,randomLogNormal:()=>tv,randomNormal:()=>Jd,randomUniform:()=>Qd,range:()=>S,rgb:()=>Qn,ribbon:()=>Qi,scaleBand:()=>lv,scaleDiverging:()=>Qg,scaleDivergingLog:()=>Jg,scaleDivergingPow:()=>n_,scaleDivergingSqrt:()=>e_,scaleDivergingSymlog:()=>t_,scaleIdentity:()=>Ev,scaleImplicit:()=>sv,scaleLinear:()=>Nv,scaleLog:()=>Ov,scaleOrdinal:()=>fv,scalePoint:()=>pv,scalePow:()=>Yv,scaleQuantile:()=>Hv,scaleQuantize:()=>Xv,scaleSequential:()=>Yg,scaleSequentialLog:()=>Wg,scaleSequentialPow:()=>Xg,scaleSequentialQuantile:()=>Gg,scaleSequentialSqrt:()=>$g,scaleSequentialSymlog:()=>Hg,scaleSqrt:()=>Wv,scaleSymlog:()=>Vv,scaleThreshold:()=>$v,scaleTime:()=>Fg,scaleUtc:()=>Ug,scan:()=>B,schemeAccent:()=>o_,schemeBlues:()=>rm,schemeBrBG:()=>v_,schemeBuGn:()=>P_,schemeBuPu:()=>j_,schemeCategory10:()=>i_,schemeDark2:()=>u_,schemeGnBu:()=>L_,schemeGreens:()=>om,schemeGreys:()=>am,schemeOrRd:()=>R_,schemeOranges:()=>pm,schemePRGn:()=>b_,schemePaired:()=>a_,schemePastel1:()=>c_,schemePastel2:()=>s_,schemePiYG:()=>__,schemePuBu:()=>q_,schemePuBuGn:()=>B_,schemePuOr:()=>x_,schemePuRd:()=>Y_,schemePurples:()=>sm,schemeRdBu:()=>S_,schemeRdGy:()=>T_,schemeRdPu:()=>H_,schemeRdYlBu:()=>E_,schemeRdYlGn:()=>k_,schemeReds:()=>lm,schemeSet1:()=>f_,schemeSet2:()=>l_,schemeSet3:()=>h_,schemeSpectral:()=>I_,schemeTableau10:()=>p_,schemeYlGn:()=>K_,schemeYlGnBu:()=>$_,schemeYlOrBr:()=>J_,schemeYlOrRd:()=>nm,select:()=>Tn,selectAll:()=>jm,selection:()=>Mn,selector:()=>dt,selectorAll:()=>yt,set:()=>lo,shuffle:()=>U,stack:()=>Bw,stackOffsetDiverging:()=>qw,stackOffsetExpand:()=>Uw,stackOffsetNone:()=>Dw,stackOffsetSilhouette:()=>Zw,stackOffsetWiggle:()=>Yw,stackOrderAppearance:()=>Ww,stackOrderAscending:()=>Xw,stackOrderDescending:()=>Gw,stackOrderInsideOut:()=>Kw,stackOrderNone:()=>Rw,stackOrderReverse:()=>Qw,stratify:()=>sd,style:()=>Ot,sum:()=>q,svg:()=>Ia,symbol:()=>$x,symbolCircle:()=>Ix,symbolCross:()=>Fx,symbolDiamond:()=>jx,symbolSquare:()=>Vx,symbolStar:()=>Rx,symbolTriangle:()=>Ux,symbolWye:()=>Hx,symbols:()=>Xx,text:()=>ma,thresholdFreedmanDiaconis:()=>P,thresholdScott:()=>z,thresholdSturges:()=>C,tickFormat:()=>Mv,tickIncrement:()=>A,tickStep:()=>k,ticks:()=>E,timeDay:()=>Ny,timeDays:()=>Ey,timeFormat:()=>hb,timeFormatDefaultLocale:()=>Eg,timeFormatLocale:()=>fb,timeFriday:()=>yy,timeFridays:()=>Sy,timeHour:()=>ky,timeHours:()=>Cy,timeInterval:()=>Qv,timeMillisecond:()=>Dy,timeMilliseconds:()=>Ry,timeMinute:()=>Fy,timeMinutes:()=>Py,timeMonday:()=>hy,timeMondays:()=>_y,timeMonth:()=>ry,timeMonths:()=>iy,timeParse:()=>pb,timeSaturday:()=>by,timeSaturdays:()=>My,timeSecond:()=>jy,timeSeconds:()=>Oy,timeSunday:()=>ly,timeSundays:()=>gy,timeThursday:()=>vy,timeThursdays:()=>wy,timeTuesday:()=>py,timeTuesdays:()=>my,timeWednesday:()=>dy,timeWednesdays:()=>xy,timeWeek:()=>ly,timeWeeks:()=>gy,timeYear:()=>ty,timeYears:()=>ny,timeout:()=>Qe,timer:()=>He,timerFlush:()=>Xe,touch:()=>Fe,touches:()=>Om,transition:()=>Zr,transpose:()=>Z,tree:()=>yd,treemap:()=>xd,treemapBinary:()=>wd,treemapDice:()=>rd,treemapResquarify:()=>Md,treemapSlice:()=>bd,treemapSliceDice:()=>Sd,treemapSquarify:()=>md,tsv:()=>Ma,tsvFormat:()=>Fu,tsvFormatBody:()=>Pu,tsvFormatRow:()=>ju,tsvFormatRows:()=>zu,tsvFormatValue:()=>Ou,tsvParse:()=>Cu,tsvParseRows:()=>Iu,utcDay:()=>eb,utcDays:()=>rb,utcFormat:()=>db,utcFriday:()=>Wy,utcFridays:()=>Jy,utcHour:()=>Lg,utcHours:()=>Dg,utcMillisecond:()=>Dy,utcMilliseconds:()=>Ry,utcMinute:()=>Vg,utcMinutes:()=>Bg,utcMonday:()=>Uy,utcMondays:()=>$y,utcMonth:()=>zg,utcMonths:()=>jg,utcParse:()=>vb,utcSaturday:()=>Hy,utcSaturdays:()=>tb,utcSecond:()=>jy,utcSeconds:()=>Oy,utcSunday:()=>By,utcSundays:()=>Xy,utcThursday:()=>Yy,utcThursdays:()=>Qy,utcTuesday:()=>qy,utcTuesdays:()=>Gy,utcWednesday:()=>Zy,utcWednesdays:()=>Ky,utcWeek:()=>By,utcWeeks:()=>Xy,utcYear:()=>ob,utcYears:()=>ub,values:()=>po,variance:()=>v,version:()=>r,voronoi:()=>US,window:()=>Ft,xml:()=>ka,zip:()=>W,zoom:()=>eM,zoomIdentity:()=>WS,zoomTransform:()=>HS});var r="5.16.0";function i(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function o(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}}var u=o(i),a=u.right,c=u.left;const s=a;function f(t,n){null==n&&(n=l);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o}function l(t,n){return[t,n]}function h(t,n,e){var r,i,o,u,a=t.length,c=n.length,s=new Array(a*c);for(null==e&&(e=l),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)s[o]=e(u,n[i]);return s}function p(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function d(t){return null===t?NaN:+t}function v(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=d(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=d(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)}function y(t,n){var e=v(t,n);return e?Math.sqrt(e):e}function b(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}var g=Array.prototype,_=g.slice,m=g.map;function x(t){return function(){return t}}function w(t){return t}function S(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var M=Math.sqrt(50),T=Math.sqrt(10),N=Math.sqrt(2);function E(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=A(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o}function A(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=M?10:o>=T?5:o>=N?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=M?10:o>=T?5:o>=N?2:1)}function k(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=M?i*=10:o>=T?i*=5:o>=N&&(i*=2),n<t?-i:i}function C(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}function I(){var t=w,n=b,e=C;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var c=n(a),f=c[0],l=c[1],h=e(a,f,l);Array.isArray(h)||(h=k(f,l,h),h=S(Math.ceil(f/h)*h,l,h));for(var p=h.length;h[0]<=f;)h.shift(),--p;for(;h[p-1]>l;)h.pop(),--p;var d,v=new Array(p+1);for(i=0;i<=p;++i)(d=v[i]=[]).x0=i>0?h[i-1]:f,d.x1=i<p?h[i]:l;for(i=0;i<u;++i)f<=(o=a[i])&&o<=l&&v[s(h,o,0,p)].push(r[i]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:x(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:x([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?x(_.call(t)):x(t),r):e},r}function F(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}}function P(t,n,e){return t=m.call(t,d).sort(i),Math.ceil((e-n)/(2*(F(t,.75)-F(t,.25))*Math.pow(t.length,-1/3)))}function z(t,n,e){return Math.ceil((e-n)/(3.5*y(t)*Math.pow(t.length,-1/3)))}function j(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function O(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:u+=e;if(i)return u/i}function L(t,n){var e,r=t.length,o=-1,u=[];if(null==n)for(;++o<r;)isNaN(e=d(t[o]))||u.push(e);else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))||u.push(e);return F(u.sort(i),.5)}function D(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e}function R(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}function V(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r}function B(t,n){if(e=t.length){var e,r,o=0,u=0,a=t[u];for(null==n&&(n=i);++o<e;)(n(r=t[o],a)<0||0!==n(a,a))&&(a=r,u=o);return 0===n(a,a)?u:void 0}}function U(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t}function q(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o}function Z(t){if(!(i=t.length))return[];for(var n=-1,e=R(t,Y),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r}function Y(t){return t.length}function W(){return Z(arguments)}var H=Array.prototype.slice;function X(t){return t}var $=1e-6;function G(t){return"translate("+(t+.5)+",0)"}function K(t){return"translate(0,"+(t+.5)+")"}function Q(t){return function(n){return+t(n)}}function J(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function tt(){return!this.__axis}function nt(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=1===t||4===t?-1:1,s=4===t||2===t?"x":"y",f=1===t||3===t?G:K;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):X:i,d=Math.max(o,0)+a,v=n.range(),y=+v[0]+.5,b=+v[v.length-1]+.5,g=(n.bandwidth?J:Q)(n.copy()),_=l.selection?l.selection():l,m=_.selectAll(".domain").data([null]),x=_.selectAll(".tick").data(h,n).order(),w=x.exit(),S=x.enter().append("g").attr("class","tick"),M=x.select("line"),T=x.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(s+"2",c*o)),T=T.merge(S.append("text").attr("fill","currentColor").attr(s,c*d).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),l!==_&&(m=m.transition(l),x=x.transition(l),M=M.transition(l),T=T.transition(l),w=w.transition(l).attr("opacity",$).attr("transform",(function(t){return isFinite(t=g(t))?f(t):this.getAttribute("transform")})),S.attr("opacity",$).attr("transform",(function(t){var n=this.parentNode.__axis;return f(n&&isFinite(n=n(t))?n:g(t))}))),w.remove(),m.attr("d",4===t||2==t?u?"M"+c*u+","+y+"H0.5V"+b+"H"+c*u:"M0.5,"+y+"V"+b:u?"M"+y+","+c*u+"V0.5H"+b+"V"+c*u:"M"+y+",0.5H"+b),x.attr("opacity",1).attr("transform",(function(t){return f(g(t))})),M.attr(s+"2",c*o),T.attr(s,c*d).text(p),_.filter(tt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),_.each((function(){this.__axis=g}))}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=H.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:H.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:H.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=u=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(u=+t,l):u},l.tickPadding=function(t){return arguments.length?(a=+t,l):a},l}function et(t){return nt(1,t)}function rt(t){return nt(2,t)}function it(t){return nt(3,t)}function ot(t){return nt(4,t)}var ut={value:function(){}};function at(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function st(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function ft(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function lt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ut,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ct.prototype=at.prototype={constructor:ct,on:function(t,n){var e,r=this._,i=st(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=lt(r[e],t.name,n);else if(null==n)for(e in r)r[e]=lt(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=ft(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ct(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const ht=at;function pt(){}function dt(t){return null==t?pt:function(){return this.querySelector(t)}}function vt(){return[]}function yt(t){return null==t?vt:function(){return this.querySelectorAll(t)}}function bt(t){return function(){return this.matches(t)}}function gt(t){return new Array(t.length)}function _t(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function mt(t,n,e,r,i,o){for(var u,a=0,c=n.length,s=o.length;a<s;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new _t(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function xt(t,n,e,r,i,o,u){var a,c,s,f={},l=n.length,h=o.length,p=new Array(l);for(a=0;a<l;++a)(c=n[a])&&(p[a]=s="$"+u.call(c,c.__data__,a,n),s in f?i[a]=c:f[s]=c);for(a=0;a<h;++a)(c=f[s="$"+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],f[s]=null):e[a]=new _t(t,o[a]);for(a=0;a<l;++a)(c=n[a])&&f[p[a]]===c&&(i[a]=c)}function wt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}_t.prototype={constructor:_t,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var St="http://www.w3.org/1999/xhtml";const Mt={svg:"http://www.w3.org/2000/svg",xhtml:St,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Tt(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Mt.hasOwnProperty(n)?{space:Mt[n],local:t}:t}function Nt(t){return function(){this.removeAttribute(t)}}function Et(t){return function(){this.removeAttributeNS(t.space,t.local)}}function At(t,n){return function(){this.setAttribute(t,n)}}function kt(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Ct(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function It(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function Ft(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Pt(t){return function(){this.style.removeProperty(t)}}function zt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function jt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function Ot(t,n){return t.style.getPropertyValue(n)||Ft(t).getComputedStyle(t,null).getPropertyValue(n)}function Lt(t){return function(){delete this[t]}}function Dt(t,n){return function(){this[t]=n}}function Rt(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Vt(t){return t.trim().split(/^|\s+/)}function Bt(t){return t.classList||new Ut(t)}function Ut(t){this._node=t,this._names=Vt(t.getAttribute("class")||"")}function qt(t,n){for(var e=Bt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Zt(t,n){for(var e=Bt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Yt(t){return function(){qt(this,t)}}function Wt(t){return function(){Zt(this,t)}}function Ht(t,n){return function(){(n.apply(this,arguments)?qt:Zt)(this,t)}}function Xt(){this.textContent=""}function $t(t){return function(){this.textContent=t}}function Gt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Kt(){this.innerHTML=""}function Qt(t){return function(){this.innerHTML=t}}function Jt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function tn(){this.nextSibling&&this.parentNode.appendChild(this)}function nn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function en(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===St&&n.documentElement.namespaceURI===St?n.createElement(t):n.createElementNS(e,t)}}function rn(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function on(t){var n=Tt(t);return(n.local?rn:en)(n)}function un(){return null}function an(){var t=this.parentNode;t&&t.removeChild(this)}function cn(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function sn(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}Ut.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var fn={},ln=null;function hn(t,n,e){return t=pn(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function pn(t,n,e){return function(r){var i=ln;ln=r;try{t.call(this,this.__data__,n,e)}finally{ln=i}}}function dn(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function vn(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function yn(t,n,e){var r=fn.hasOwnProperty(t.type)?hn:pn;return function(i,o,u){var a,c=this.__on,s=r(n,o,u);if(c)for(var f=0,l=c.length;f<l;++f)if((a=c[f]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=s,a.capture=e),void(a.value=n);this.addEventListener(t.type,s,e),a={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(a):this.__on=[a]}}function bn(t,n,e,r){var i=ln;t.sourceEvent=ln,ln=t;try{return n.apply(e,r)}finally{ln=i}}function gn(t,n,e){var r=Ft(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function _n(t,n){return function(){return gn(this,t,n)}}function mn(t,n){return function(){return gn(this,t,n.apply(this,arguments))}}"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(fn={mouseenter:"mouseover",mouseleave:"mouseout"}));var xn=[null];function wn(t,n){this._groups=t,this._parents=n}function Sn(){return new wn([[document.documentElement]],xn)}wn.prototype=Sn.prototype={constructor:wn,select:function(t){"function"!=typeof t&&(t=dt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,s=r[i]=new Array(c),f=0;f<c;++f)(o=a[f])&&(u=t.call(o,o.__data__,f,a))&&("__data__"in o&&(u.__data__=o.__data__),s[f]=u);return new wn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=yt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,s=0;s<c;++s)(u=a[s])&&(r.push(t.call(u,u.__data__,s,a)),i.push(u));return new wn(r,i)},filter:function(t){"function"!=typeof t&&(t=bt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new wn(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),f=-1,this.each((function(t){d[++f]=t})),d;var e,r=n?xt:mt,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),s=new Array(u),f=0;f<u;++f){var l=i[f],h=o[f],p=h.length,d=t.call(l,l&&l.__data__,f,i),v=d.length,y=c[f]=new Array(v),b=a[f]=new Array(v);r(l,h,y,b,s[f]=new Array(p),d,n);for(var g,_,m=0,x=0;m<v;++m)if(g=y[m]){for(m>=x&&(x=m+1);!(_=b[x])&&++x<v;);g._next=_||null}}return(a=new wn(a,i))._enter=c,a._exit=s,a},enter:function(){return new wn(this._enter||this._groups.map(gt),this._parents)},exit:function(){return new wn(this._exit||this._groups.map(gt),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],f=e[a],l=s.length,h=u[a]=new Array(l),p=0;p<l;++p)(c=s[p]||f[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new wn(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=wt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,s=i[o]=new Array(c),f=0;f<c;++f)(u=a[f])&&(s[f]=u);s.sort(n)}return new wn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=Tt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?Et:Nt:"function"==typeof n?e.local?It:Ct:e.local?kt:At)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Pt:"function"==typeof n?jt:zt)(t,n,null==e?"":e)):Ot(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?Lt:"function"==typeof n?Rt:Dt)(t,n)):this.node()[t]},classed:function(t,n){var e=Vt(t+"");if(arguments.length<2){for(var r=Bt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Ht:n?Yt:Wt)(e,n))},text:function(t){return arguments.length?this.each(null==t?Xt:("function"==typeof t?Gt:$t)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Kt:("function"==typeof t?Jt:Qt)(t)):this.node().innerHTML},raise:function(){return this.each(tn)},lower:function(){return this.each(nn)},append:function(t){var n="function"==typeof t?t:on(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:on(t),r=null==n?un:"function"==typeof n?n:dt(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(an)},clone:function(t){return this.select(t?sn:cn)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=dn(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?yn:vn,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,s=0,f=a.length;s<f;++s)for(r=0,c=a[s];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?mn:_n)(t,n))}};const Mn=Sn;function Tn(t){return"string"==typeof t?new wn([[document.querySelector(t)]],[document.documentElement]):new wn([[t]],xn)}function Nn(){ln.stopImmediatePropagation()}function En(){ln.preventDefault(),ln.stopImmediatePropagation()}function An(t){var n=t.document.documentElement,e=Tn(t).on("dragstart.drag",En,!0);"onselectstart"in n?e.on("selectstart.drag",En,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function kn(t,n){var e=t.document.documentElement,r=Tn(t).on("dragstart.drag",null);n&&(r.on("click.drag",En,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function Cn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function In(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Fn(){}var Pn=.7,zn=1/Pn,jn="\\s*([+-]?\\d+)\\s*",On="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ln="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Dn=/^#([0-9a-f]{3,8})$/,Rn=new RegExp("^rgb\\("+[jn,jn,jn]+"\\)$"),Vn=new RegExp("^rgb\\("+[Ln,Ln,Ln]+"\\)$"),Bn=new RegExp("^rgba\\("+[jn,jn,jn,On]+"\\)$"),Un=new RegExp("^rgba\\("+[Ln,Ln,Ln,On]+"\\)$"),qn=new RegExp("^hsl\\("+[On,Ln,Ln]+"\\)$"),Zn=new RegExp("^hsla\\("+[On,Ln,Ln,On]+"\\)$"),Yn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Wn(){return this.rgb().formatHex()}function Hn(){return this.rgb().formatRgb()}function Xn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Dn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?$n(n):3===e?new Jn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Gn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Gn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Rn.exec(t))?new Jn(n[1],n[2],n[3],1):(n=Vn.exec(t))?new Jn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Bn.exec(t))?Gn(n[1],n[2],n[3],n[4]):(n=Un.exec(t))?Gn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=qn.exec(t))?re(n[1],n[2]/100,n[3]/100,1):(n=Zn.exec(t))?re(n[1],n[2]/100,n[3]/100,n[4]):Yn.hasOwnProperty(t)?$n(Yn[t]):"transparent"===t?new Jn(NaN,NaN,NaN,0):null}function $n(t){return new Jn(t>>16&255,t>>8&255,255&t,1)}function Gn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Jn(t,n,e,r)}function Kn(t){return t instanceof Fn||(t=Xn(t)),t?new Jn((t=t.rgb()).r,t.g,t.b,t.opacity):new Jn}function Qn(t,n,e,r){return 1===arguments.length?Kn(t):new Jn(t,n,e,null==r?1:r)}function Jn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function te(){return"#"+ee(this.r)+ee(this.g)+ee(this.b)}function ne(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function ee(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function re(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new ue(t,n,e,r)}function ie(t){if(t instanceof ue)return new ue(t.h,t.s,t.l,t.opacity);if(t instanceof Fn||(t=Xn(t)),!t)return new ue;if(t instanceof ue)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new ue(u,a,c,t.opacity)}function oe(t,n,e,r){return 1===arguments.length?ie(t):new ue(t,n,e,null==r?1:r)}function ue(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ae(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function ce(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}function se(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return ce((e-r/n)*n,u,i,o,a)}}function fe(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return ce((e-r/n)*n,i,o,u,a)}}function le(t){return function(){return t}}function he(t,n){return function(e){return t+e*n}}function pe(t,n){var e=n-t;return e?he(t,e>180||e<-180?e-360*Math.round(e/360):e):le(isNaN(t)?n:t)}function de(t,n){var e=n-t;return e?he(t,e):le(isNaN(t)?n:t)}Cn(Fn,Xn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Wn,formatHex:Wn,formatHsl:function(){return ie(this).formatHsl()},formatRgb:Hn,toString:Hn}),Cn(Jn,Qn,In(Fn,{brighter:function(t){return t=null==t?zn:Math.pow(zn,t),new Jn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?Pn:Math.pow(Pn,t),new Jn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:te,formatHex:te,formatRgb:ne,toString:ne})),Cn(ue,oe,In(Fn,{brighter:function(t){return t=null==t?zn:Math.pow(zn,t),new ue(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Pn:Math.pow(Pn,t),new ue(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Jn(ae(t>=240?t-240:t+120,i,r),ae(t,i,r),ae(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const ve=function t(n){var e=function(t){return 1==(t=+t)?de:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):le(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Qn(t)).r,(n=Qn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=de(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function ye(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Qn(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}var be=ye(se),ge=ye(fe);function _e(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function me(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function xe(t,n){return(me(n)?_e:we)(t,n)}function we(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=ke(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}function Se(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function Me(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function Te(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=ke(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var Ne=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ee=new RegExp(Ne.source,"g");function Ae(t,n){var e,r,i,o=Ne.lastIndex=Ee.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=Ne.exec(t))&&(r=Ee.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:Me(e,r)})),o=Ee.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})}function ke(t,n){var e,r=typeof n;return null==n||"boolean"===r?le(n):("number"===r?Me:"string"===r?(e=Xn(n))?(n=e,ve):Ae:n instanceof Xn?ve:n instanceof Date?Se:me(n)?_e:Array.isArray(n)?we:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Te:Me)(t,n)}function Ce(){for(var t,n=ln;t=n.sourceEvent;)n=t;return n}function Ie(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function Fe(t,n,e){arguments.length<3&&(e=n,n=Ce().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return Ie(t,r);return null}function Pe(t){var n=Ce();return n.changedTouches&&(n=n.changedTouches[0]),Ie(t,n)}var ze,je,Oe=0,Le=0,De=0,Re=0,Ve=0,Be=0,Ue="object"==typeof performance&&performance.now?performance:Date,qe="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ze(){return Ve||(qe(Ye),Ve=Ue.now()+Be)}function Ye(){Ve=0}function We(){this._call=this._time=this._next=null}function He(t,n,e){var r=new We;return r.restart(t,n,e),r}function Xe(){Ze(),++Oe;for(var t,n=ze;n;)(t=Ve-n._time)>=0&&n._call.call(null,t),n=n._next;--Oe}function $e(){Ve=(Re=Ue.now())+Be,Oe=Le=0;try{Xe()}finally{Oe=0,function(){for(var t,n,e=ze,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:ze=n);je=t,Ke(r)}(),Ve=0}}function Ge(){var t=Ue.now(),n=t-Re;n>1e3&&(Be-=n,Re=t)}function Ke(t){Oe||(Le&&(Le=clearTimeout(Le)),t-Ve>24?(t<1/0&&(Le=setTimeout($e,t-Ue.now()-Be)),De&&(De=clearInterval(De))):(De||(Re=Ue.now(),De=setInterval(Ge,1e3)),Oe=1,qe($e)))}function Qe(t,n,e){var r=new We;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}We.prototype=He.prototype={constructor:We,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Ze():+e)+(null==n?0:+n),this._next||je===this||(je?je._next=this:ze=this,je=this),this._call=t,this._time=e,Ke()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ke())}};var Je=ht("start","end","cancel","interrupt"),tr=[];function nr(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var s,f,l,h;if(1!==e.state)return a();for(s in i)if((h=i[s]).name===e.name){if(3===h.state)return Qe(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(Qe((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),s=0,f=-1;s<l;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++f]=h);r.length=f+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=He((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Je,tween:tr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function er(t,n){var e=ir(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function rr(t,n){var e=ir(t,n);if(e.state>3)throw new Error("too late; already running");return e}function ir(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function or(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}}var ur,ar,cr,sr,fr=180/Math.PI,lr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function hr(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*fr,skewX:Math.atan(c)*fr,scaleX:u,scaleY:a}}function pr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:Me(t,i)},{i:c-2,x:Me(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Me(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Me(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:Me(t,e)},{i:a-2,x:Me(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var dr=pr((function(t){return"none"===t?lr:(ur||(ur=document.createElement("DIV"),ar=document.documentElement,cr=document.defaultView),ur.style.transform=t,t=cr.getComputedStyle(ar.appendChild(ur),null).getPropertyValue("transform"),ar.removeChild(ur),hr(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),vr=pr((function(t){return null==t?lr:(sr||(sr=document.createElementNS("http://www.w3.org/2000/svg","g")),sr.setAttribute("transform",t),(t=sr.transform.baseVal.consolidate())?hr((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):lr)}),", ",")",")");function yr(t,n){var e,r;return function(){var i=rr(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function br(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=rr(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=a;break}c===s&&i.push(a)}o.tween=i}}function gr(t,n,e){var r=t._id;return t.each((function(){var t=rr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return ir(t,r).value[n]}}function _r(t,n){var e;return("number"==typeof n?Me:n instanceof Xn?ve:(e=Xn(n))?(n=e,ve):Ae)(t,n)}function mr(t){return function(){this.removeAttribute(t)}}function xr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function wr(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}}function Sr(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}function Mr(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttribute(t))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttribute(t)}}function Tr(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttributeNS(t.space,t.local))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttributeNS(t.space,t.local)}}function Nr(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Er(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Ar(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Er(t,i)),e}return i._value=n,i}function kr(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Nr(t,i)),e}return i._value=n,i}function Cr(t,n){return function(){er(this,t).delay=+n.apply(this,arguments)}}function Ir(t,n){return n=+n,function(){er(this,t).delay=n}}function Fr(t,n){return function(){rr(this,t).duration=+n.apply(this,arguments)}}function Pr(t,n){return n=+n,function(){rr(this,t).duration=n}}function zr(t,n){if("function"!=typeof n)throw new Error;return function(){rr(this,t).ease=n}}function jr(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?er:rr;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var Or=Mn.prototype.constructor;function Lr(t){return function(){this.style.removeProperty(t)}}function Dr(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Rr(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Dr(t,o,e)),r}return o._value=n,o}function Vr(t){return function(n){this.textContent=t.call(this,n)}}function Br(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Vr(r)),n}return r._value=t,r}var Ur=0;function qr(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Zr(t){return Mn().transition(t)}function Yr(){return++Ur}var Wr=Mn.prototype;function Hr(t){return t*t*t}function Xr(t){return--t*t*t+1}function $r(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}qr.prototype=Zr.prototype={constructor:qr,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=dt(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,s=r[u],f=s.length,l=o[u]=new Array(f),h=0;h<f;++h)(a=s[h])&&(c=t.call(a,a.__data__,h,s))&&("__data__"in a&&(c.__data__=a.__data__),l[h]=c,nr(l[h],n,e,h,l,ir(a,e)));return new qr(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=yt(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,s=r[a],f=s.length,l=0;l<f;++l)if(c=s[l]){for(var h,p=t.call(c,c.__data__,l,s),d=ir(c,e),v=0,y=p.length;v<y;++v)(h=p[v])&&nr(h,n,e,v,p,d);o.push(p),u.push(c)}return new qr(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=bt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new qr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],f=e[a],l=s.length,h=u[a]=new Array(l),p=0;p<l;++p)(c=s[p]||f[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new qr(u,this._parents,this._name,this._id)},selection:function(){return new Or(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Yr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)if(u=a[s]){var f=ir(u,n);nr(u,t,e,s,a,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new qr(r,this._parents,t,e)},call:Wr.call,nodes:Wr.nodes,node:Wr.node,size:Wr.size,empty:Wr.empty,each:Wr.each,on:function(t,n){var e=this._id;return arguments.length<2?ir(this.node(),e).on.on(t):this.each(jr(e,t,n))},attr:function(t,n){var e=Tt(t),r="transform"===e?vr:_r;return this.attrTween(t,"function"==typeof n?(e.local?Tr:Mr)(e,r,gr(this,"attr."+t,n)):null==n?(e.local?xr:mr)(e):(e.local?Sr:wr)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Tt(t);return this.tween(e,(r.local?Ar:kr)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?dr:_r;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Ot(this,t),u=(this.style.removeProperty(t),Ot(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,Lr(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Ot(this,t),a=e(this),c=a+"";return null==a&&(this.style.removeProperty(t),c=a=Ot(this,t)),u===c?null:u===r&&c===i?o:(i=c,o=n(r=u,a))}}(t,r,gr(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var c=rr(this,t),s=c.on,f=null==c.value[u]?o||(o=Lr(n)):void 0;s===e&&i===f||(r=(e=s).copy()).on(a,i=f),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Ot(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Rr(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(gr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Br(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ir(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?yr:br)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Cr:Ir)(n,t)):ir(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Fr:Pr)(n,t)):ir(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(zr(n,t)):ir(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,u){var a={value:u},c={value:function(){0==--i&&o()}};e.each((function(){var e=rr(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(c)),e.on=n}))}))}};var Gr={time:null,delay:0,duration:250,ease:$r};function Kr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Gr.time=Ze(),Gr;return e}Mn.prototype.interrupt=function(t){return this.each((function(){or(this,t)}))},Mn.prototype.transition=function(t){var n,e;t instanceof qr?(n=t._id,t=t._name):(n=Yr(),(e=Gr).time=Ze(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)(u=a[s])&&nr(u,t,n,s,a,e||Kr(u,n));return new qr(r,this._parents,t,n)};var Qr=[null];function Jr(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new qr([[t]],Qr,n,+r);return null}function ti(t){return function(){return t}}function ni(t,n,e){this.target=t,this.type=n,this.selection=e}function ei(){ln.stopImmediatePropagation()}function ri(){ln.preventDefault(),ln.stopImmediatePropagation()}var ii={name:"drag"},oi={name:"space"},ui={name:"handle"},ai={name:"center"};function ci(t){return[+t[0],+t[1]]}function si(t){return[ci(t[0]),ci(t[1])]}function fi(t){return function(n){return Fe(n,ln.touches,t)}}var li={name:"x",handles:["w","e"].map(_i),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},hi={name:"y",handles:["n","s"].map(_i),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},pi={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(_i),input:function(t){return null==t?null:si(t)},output:function(t){return t}},di={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},vi={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},yi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},bi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},gi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function _i(t){return{type:t}}function mi(){return!ln.ctrlKey&&!ln.button}function xi(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function wi(){return navigator.maxTouchPoints||"ontouchstart"in this}function Si(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Mi(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Ti(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Ni(){return ki(li)}function Ei(){return ki(hi)}function Ai(){return ki(pi)}function ki(t){var n,e=xi,r=mi,i=wi,o=!0,u=ht("start","brush","end"),a=6;function c(n){var e=n.property("__brush",v).selectAll(".overlay").data([_i("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",di.overlay).merge(e).each((function(){var t=Si(this).extent;Tn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([_i("selection")]).enter().append("rect").attr("class","selection").attr("cursor",di.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return di[t.type]})),n.each(s).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",p).on("touchend.brush touchcancel.brush",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function s(){var t=Tn(this),n=Si(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-a/2:n[0][0]-a/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-a/2:n[0][1]-a/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+a:a})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+a:a}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function f(t,n,e){return!e&&t.__brush.emitter||new l(t,n)}function l(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function h(){if((!n||ln.touches)&&r.apply(this,arguments)){var e,i,u,a,c,l,h,p,d,v,y,b=this,g=ln.target.__data__.type,_="selection"===(o&&ln.metaKey?g="overlay":g)?ii:o&&ln.altKey?ai:ui,m=t===hi?null:bi[g],x=t===li?null:gi[g],w=Si(b),S=w.extent,M=w.selection,T=S[0][0],N=S[0][1],E=S[1][0],A=S[1][1],k=0,C=0,I=m&&x&&o&&ln.shiftKey,F=ln.touches?fi(ln.changedTouches[0].identifier):Pe,P=F(b),z=P,j=f(b,arguments,!0).beforestart();"overlay"===g?(M&&(d=!0),w.selection=M=[[e=t===hi?T:P[0],u=t===li?N:P[1]],[c=t===hi?E:e,h=t===li?A:u]]):(e=M[0][0],u=M[0][1],c=M[1][0],h=M[1][1]),i=e,a=u,l=c,p=h;var O=Tn(b).attr("pointer-events","none"),L=O.selectAll(".overlay").attr("cursor",di[g]);if(ln.touches)j.moved=R,j.ended=B;else{var D=Tn(ln.view).on("mousemove.brush",R,!0).on("mouseup.brush",B,!0);o&&D.on("keydown.brush",U,!0).on("keyup.brush",q,!0),An(ln.view)}ei(),or(b),s.call(b),j.start()}function R(){var t=F(b);!I||v||y||(Math.abs(t[0]-z[0])>Math.abs(t[1]-z[1])?y=!0:v=!0),z=t,d=!0,ri(),V()}function V(){var t;switch(k=z[0]-P[0],C=z[1]-P[1],_){case oi:case ii:m&&(k=Math.max(T-e,Math.min(E-c,k)),i=e+k,l=c+k),x&&(C=Math.max(N-u,Math.min(A-h,C)),a=u+C,p=h+C);break;case ui:m<0?(k=Math.max(T-e,Math.min(E-e,k)),i=e+k,l=c):m>0&&(k=Math.max(T-c,Math.min(E-c,k)),i=e,l=c+k),x<0?(C=Math.max(N-u,Math.min(A-u,C)),a=u+C,p=h):x>0&&(C=Math.max(N-h,Math.min(A-h,C)),a=u,p=h+C);break;case ai:m&&(i=Math.max(T,Math.min(E,e-k*m)),l=Math.max(T,Math.min(E,c+k*m))),x&&(a=Math.max(N,Math.min(A,u-C*x)),p=Math.max(N,Math.min(A,h+C*x)))}l<i&&(m*=-1,t=e,e=c,c=t,t=i,i=l,l=t,g in vi&&L.attr("cursor",di[g=vi[g]])),p<a&&(x*=-1,t=u,u=h,h=t,t=a,a=p,p=t,g in yi&&L.attr("cursor",di[g=yi[g]])),w.selection&&(M=w.selection),v&&(i=M[0][0],l=M[1][0]),y&&(a=M[0][1],p=M[1][1]),M[0][0]===i&&M[0][1]===a&&M[1][0]===l&&M[1][1]===p||(w.selection=[[i,a],[l,p]],s.call(b),j.brush())}function B(){if(ei(),ln.touches){if(ln.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else kn(ln.view,d),D.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);O.attr("pointer-events","all"),L.attr("cursor",di.overlay),w.selection&&(M=w.selection),Mi(M)&&(w.selection=null,s.call(b)),j.end()}function U(){switch(ln.keyCode){case 16:I=m&&x;break;case 18:_===ui&&(m&&(c=l-k*m,e=i+k*m),x&&(h=p-C*x,u=a+C*x),_=ai,V());break;case 32:_!==ui&&_!==ai||(m<0?c=l-k:m>0&&(e=i-k),x<0?h=p-C:x>0&&(u=a-C),_=oi,L.attr("cursor",di.selection),V());break;default:return}ri()}function q(){switch(ln.keyCode){case 16:I&&(v=y=I=!1,V());break;case 18:_===ai&&(m<0?c=l:m>0&&(e=i),x<0?h=p:x>0&&(u=a),_=ui,V());break;case 32:_===oi&&(ln.altKey?(m&&(c=l-k*m,e=i+k*m),x&&(h=p-C*x,u=a+C*x),_=ai):(m<0?c=l:m>0&&(e=i),x<0?h=p:x>0&&(u=a),_=ui),L.attr("cursor",di[g]),V());break;default:return}ri()}}function p(){f(this,arguments).moved()}function d(){f(this,arguments).ended()}function v(){var n=this.__brush||{selection:null};return n.extent=si(e.apply(this,arguments)),n.dim=t,n}return c.move=function(n,e){n.selection?n.on("start.brush",(function(){f(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){f(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=f(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),a=ke(o,u);function c(t){r.selection=1===t&&null===u?null:a(t),s.call(n),i.brush()}return null!==o&&null!==u?c:c(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),u=f(n,r).beforestart();or(n),i.selection=null===o?null:o,s.call(n),u.start().brush().end()}))},c.clear=function(t){c.move(t,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){bn(new ni(c,n,t.output(this.state.selection)),u.apply,u,[n,this.that,this.args])}},c.extent=function(t){return arguments.length?(e="function"==typeof t?t:ti(si(t)),c):e},c.filter=function(t){return arguments.length?(r="function"==typeof t?t:ti(!!t),c):r},c.touchable=function(t){return arguments.length?(i="function"==typeof t?t:ti(!!t),c):i},c.handleSize=function(t){return arguments.length?(a=+t,c):a},c.keyModifiers=function(t){return arguments.length?(o=!!t,c):o},c.on=function(){var t=u.on.apply(u,arguments);return t===u?c:t},c}var Ci=Math.cos,Ii=Math.sin,Fi=Math.PI,Pi=Fi/2,zi=2*Fi,ji=Math.max;function Oi(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function Li(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,s,f,l=i.length,h=[],p=S(l),d=[],v=[],y=v.groups=new Array(l),b=new Array(l*l);for(o=0,s=-1;++s<l;){for(u=0,f=-1;++f<l;)u+=i[s][f];h.push(u),d.push(S(l)),o+=u}for(n&&p.sort((function(t,e){return n(h[t],h[e])})),e&&d.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),c=(o=ji(0,zi-t*l)/o)?t:zi/l,u=0,s=-1;++s<l;){for(a=u,f=-1;++f<l;){var g=p[s],_=d[g][f],m=i[g][_],x=u,w=u+=m*o;b[_*l+g]={index:g,subindex:_,startAngle:x,endAngle:w,value:m}}y[g]={index:g,startAngle:a,endAngle:u,value:h[g]},u+=c}for(s=-1;++s<l;)for(f=s-1;++f<l;){var M=b[f*l+s],T=b[s*l+f];(M.value||T.value)&&v.push(M.value<T.value?{source:T,target:M}:{source:M,target:T})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=ji(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Oi(t))._=t,i):r&&r._},i}var Di=Array.prototype.slice;function Ri(t){return function(){return t}}var Vi=Math.PI,Bi=2*Vi,Ui=1e-6,qi=Bi-Ui;function Zi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Yi(){return new Zi}Zi.prototype=Yi.prototype={constructor:Zi,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,s=o-t,f=u-n,l=s*s+f*f;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>Ui)if(Math.abs(f*a-c*s)>Ui&&i){var h=e-o,p=r-u,d=a*a+c*c,v=h*h+p*p,y=Math.sqrt(d),b=Math.sqrt(l),g=i*Math.tan((Vi-Math.acos((d+l-v)/(2*y*b)))/2),_=g/b,m=g/y;Math.abs(_-1)>Ui&&(this._+="L"+(t+_*s)+","+(n+_*f)),this._+="A"+i+","+i+",0,0,"+ +(f*h>s*p)+","+(this._x1=t+m*a)+","+(this._y1=n+m*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,s=n+a,f=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>Ui||Math.abs(this._y1-s)>Ui)&&(this._+="L"+c+","+s),e&&(l<0&&(l=l%Bi+Bi),l>qi?this._+="A"+e+","+e+",0,1,"+f+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+f+","+(this._x1=c)+","+(this._y1=s):l>Ui&&(this._+="A"+e+","+e+",0,"+ +(l>=Vi)+","+f+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const Wi=Yi;function Hi(t){return t.source}function Xi(t){return t.target}function $i(t){return t.radius}function Gi(t){return t.startAngle}function Ki(t){return t.endAngle}function Qi(){var t=Hi,n=Xi,e=$i,r=Gi,i=Ki,o=null;function u(){var u,a=Di.call(arguments),c=t.apply(this,a),s=n.apply(this,a),f=+e.apply(this,(a[0]=c,a)),l=r.apply(this,a)-Pi,h=i.apply(this,a)-Pi,p=f*Ci(l),d=f*Ii(l),v=+e.apply(this,(a[0]=s,a)),y=r.apply(this,a)-Pi,b=i.apply(this,a)-Pi;if(o||(o=u=Wi()),o.moveTo(p,d),o.arc(0,0,f,l,h),l===y&&h===b||(o.quadraticCurveTo(0,0,v*Ci(y),v*Ii(y)),o.arc(0,0,v,y,b)),o.quadraticCurveTo(0,0,p,d),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:Ri(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Ri(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Ri(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}var Ji="$";function to(){}function no(t,n){var e=new to;if(t instanceof to)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}to.prototype=no.prototype={constructor:to,has:function(t){return Ji+t in this},get:function(t){return this[Ji+t]},set:function(t,n){return this[Ji+t]=n,this},remove:function(t){var n=Ji+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===Ji&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===Ji&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===Ji&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===Ji&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===Ji&&++t;return t},empty:function(){for(var t in this)if(t[0]===Ji)return!1;return!0},each:function(t){for(var n in this)n[0]===Ji&&t(this[n],n.slice(1),this)}};const eo=no;function ro(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,s,f,l=-1,h=e.length,p=r[i++],d=eo(),v=u();++l<h;)(f=d.get(c=p(s=e[l])+""))?f.push(s):d.set(c,[s]);return d.each((function(t,n){a(v,n,o(t,i,u,a))})),v}function u(t,e){if(++e>r.length)return t;var o,a=i[e-1];return null!=n&&e>=r.length?o=t.entries():(o=[],t.each((function(t,n){o.push({key:n,values:u(t,e)})}))),null!=a?o.sort((function(t,n){return a(t.key,n.key)})):o}return e={object:function(t){return o(t,0,io,oo)},map:function(t){return o(t,0,uo,ao)},entries:function(t){return u(o(t,0,uo,ao),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function io(){return{}}function oo(t,n,e){t[n]=e}function uo(){return eo()}function ao(t,n,e){t.set(n,e)}function co(){}var so=eo.prototype;function fo(t,n){var e=new co;if(t instanceof co)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}co.prototype=fo.prototype={constructor:co,has:so.has,add:function(t){return this[Ji+(t+="")]=t,this},remove:so.remove,clear:so.clear,values:so.keys,size:so.size,empty:so.empty,each:so.each};const lo=fo;function ho(t){var n=[];for(var e in t)n.push(e);return n}function po(t){var n=[];for(var e in t)n.push(t[e]);return n}function vo(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n}var yo=Math.PI/180,bo=180/Math.PI,go=.96422,_o=.82521,mo=4/29,xo=6/29,wo=3*xo*xo;function So(t){if(t instanceof No)return new No(t.l,t.a,t.b,t.opacity);if(t instanceof zo)return jo(t);t instanceof Jn||(t=Kn(t));var n,e,r=Co(t.r),i=Co(t.g),o=Co(t.b),u=Eo((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=u:(n=Eo((.4360747*r+.3850649*i+.1430804*o)/go),e=Eo((.0139322*r+.0971045*i+.7141733*o)/_o)),new No(116*u-16,500*(n-u),200*(u-e),t.opacity)}function Mo(t,n){return new No(t,0,0,null==n?1:n)}function To(t,n,e,r){return 1===arguments.length?So(t):new No(t,n,e,null==r?1:r)}function No(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Eo(t){return t>.008856451679035631?Math.pow(t,1/3):t/wo+mo}function Ao(t){return t>xo?t*t*t:wo*(t-mo)}function ko(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Co(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Io(t){if(t instanceof zo)return new zo(t.h,t.c,t.l,t.opacity);if(t instanceof No||(t=So(t)),0===t.a&&0===t.b)return new zo(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*bo;return new zo(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Fo(t,n,e,r){return 1===arguments.length?Io(t):new zo(e,n,t,null==r?1:r)}function Po(t,n,e,r){return 1===arguments.length?Io(t):new zo(t,n,e,null==r?1:r)}function zo(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function jo(t){if(isNaN(t.h))return new No(t.l,0,0,t.opacity);var n=t.h*yo;return new No(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}Cn(No,To,In(Fn,{brighter:function(t){return new No(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new No(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Jn(ko(3.1338561*(n=go*Ao(n))-1.6168667*(t=1*Ao(t))-.4906146*(e=_o*Ao(e))),ko(-.9787684*n+1.9161415*t+.033454*e),ko(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Cn(zo,Po,In(Fn,{brighter:function(t){return new zo(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new zo(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return jo(this).rgb()}}));var Oo=-.14861,Lo=1.78277,Do=-.29227,Ro=-.90649,Vo=1.97294,Bo=Vo*Ro,Uo=Vo*Lo,qo=Lo*Do-Ro*Oo;function Zo(t){if(t instanceof Wo)return new Wo(t.h,t.s,t.l,t.opacity);t instanceof Jn||(t=Kn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(qo*r+Bo*n-Uo*e)/(qo+Bo-Uo),o=r-i,u=(Vo*(e-i)-Do*o)/Ro,a=Math.sqrt(u*u+o*o)/(Vo*i*(1-i)),c=a?Math.atan2(u,o)*bo-120:NaN;return new Wo(c<0?c+360:c,a,i,t.opacity)}function Yo(t,n,e,r){return 1===arguments.length?Zo(t):new Wo(t,n,e,null==r?1:r)}function Wo(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}Cn(Wo,Yo,In(Fn,{brighter:function(t){return t=null==t?zn:Math.pow(zn,t),new Wo(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Pn:Math.pow(Pn,t),new Wo(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*yo,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Jn(255*(n+e*(Oo*r+Lo*i)),255*(n+e*(Do*r+Ro*i)),255*(n+e*(Vo*r)),this.opacity)}}));var Ho=Array.prototype.slice;function Xo(t,n){return t-n}function $o(t){return function(){return t}}function Go(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=Ko(t,n[r]))return e;return 0}function Ko(t,n){for(var e=n[0],r=n[1],i=-1,o=0,u=t.length,a=u-1;o<u;a=o++){var c=t[o],s=c[0],f=c[1],l=t[a],h=l[0],p=l[1];if(Qo(c,l,n))return 0;f>r!=p>r&&e<(h-s)*(r-f)/(p-f)+s&&(i=-i)}return i}function Qo(t,n,e){var r,i,o,u;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],u=n[r],i<=o&&o<=u||u<=o&&o<=i)}function Jo(){}var tu=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function nu(){var t=1,n=1,e=C,r=a;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(Xo);else{var r=b(t),i=r[0],u=r[1];n=k(i,u,n),n=S(Math.floor(i/n)*n,Math.floor(u/n)*n,n)}return n.map((function(n){return o(t,n)}))}function o(e,i){var o=[],a=[];return function(e,r,i){var o,a,c,s,f,l,h=new Array,p=new Array;for(o=a=-1,s=e[0]>=r,tu[s<<1].forEach(d);++o<t-1;)c=s,s=e[o+1]>=r,tu[c|s<<1].forEach(d);for(tu[s<<0].forEach(d);++a<n-1;){for(o=-1,s=e[a*t+t]>=r,f=e[a*t]>=r,tu[s<<1|f<<2].forEach(d);++o<t-1;)c=s,s=e[a*t+t+o+1]>=r,l=f,f=e[a*t+o+1]>=r,tu[c|s<<1|f<<2|l<<3].forEach(d);tu[s|f<<3].forEach(d)}for(o=-1,f=e[a*t]>=r,tu[f<<2].forEach(d);++o<t-1;)l=f,f=e[a*t+o+1]>=r,tu[f<<2|l<<3].forEach(d);function d(t){var n,e,r=[t[0][0]+o,t[0][1]+a],c=[t[1][0]+o,t[1][1]+a],s=u(r),f=u(c);(n=p[s])?(e=h[f])?(delete p[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=p[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete p[n.end],n.ring.push(c),p[n.end=f]=n):(n=h[f])?(e=p[s])?(delete h[n.start],delete p[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=p[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=s]=n):h[s]=p[f]={start:s,end:f,ring:[r,c]}}tu[f<<3].forEach(d)}(e,i,(function(t){r(t,e,i),function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r}(t)>0?o.push([t]):a.push(t)})),a.forEach((function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==Go((n=o[e])[0],t))return void n.push(t)})),{type:"MultiPolygon",value:i,coordinates:o}}function u(n){return 2*n[0]+n[1]*(t+1)*4}function a(e,r,i){e.forEach((function(e){var o,u=e[0],a=e[1],c=0|u,s=0|a,f=r[s*t+c];u>0&&u<t&&c===u&&(o=r[s*t+c-1],e[0]=u+(i-o)/(f-o)-.5),a>0&&a<n&&s===a&&(o=r[(s-1)*t+c],e[1]=a+(i-o)/(f-o)-.5)}))}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?$o(Ho.call(t)):$o(t),i):e},i.smooth=function(t){return arguments.length?(r=t?a:Jo,i):r===a},i}function eu(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<i;++u)for(var a=0,c=0;a<r+e;++a)a<r&&(c+=t.data[a+u*r]),a>=e&&(a>=o&&(c-=t.data[a-o+u*r]),n.data[a-e+u*r]=c/Math.min(a+1,r-1+o-a,o))}function ru(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<r;++u)for(var a=0,c=0;a<i+e;++a)a<i&&(c+=t.data[u+a*r]),a>=e&&(a>=o&&(c-=t.data[u+(a-o)*r]),n.data[u+(a-e)*r]=c/Math.min(a+1,i-1+o-a,o))}function iu(t){return t[0]}function ou(t){return t[1]}function uu(){return 1}function au(){var t=iu,n=ou,e=uu,r=960,i=500,o=20,u=2,a=3*o,c=r+2*a>>u,s=i+2*a>>u,f=$o(20);function l(r){var i=new Float32Array(c*s),l=new Float32Array(c*s);r.forEach((function(r,o,f){var l=+t(r,o,f)+a>>u,h=+n(r,o,f)+a>>u,p=+e(r,o,f);l>=0&&l<c&&h>=0&&h<s&&(i[l+h*c]+=p)})),eu({width:c,height:s,data:i},{width:c,height:s,data:l},o>>u),ru({width:c,height:s,data:l},{width:c,height:s,data:i},o>>u),eu({width:c,height:s,data:i},{width:c,height:s,data:l},o>>u),ru({width:c,height:s,data:l},{width:c,height:s,data:i},o>>u),eu({width:c,height:s,data:i},{width:c,height:s,data:l},o>>u),ru({width:c,height:s,data:l},{width:c,height:s,data:i},o>>u);var p=f(i);if(!Array.isArray(p)){var d=j(i);p=k(0,d,p),(p=S(0,Math.floor(d/p)*p,p)).shift()}return nu().thresholds(p).size([c,s])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*u),t.coordinates.forEach(p),t}function p(t){t.forEach(d)}function d(t){t.forEach(v)}function v(t){t[0]=t[0]*Math.pow(2,u)-a,t[1]=t[1]*Math.pow(2,u)-a}function y(){return c=r+2*(a=3*o)>>u,s=i+2*a>>u,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:$o(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:$o(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:$o(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,y()},l.cellSize=function(t){if(!arguments.length)return 1<<u;if(!((t=+t)>=1))throw new Error("invalid cell size");return u=Math.floor(Math.log(t)/Math.LN2),y()},l.thresholds=function(t){return arguments.length?(f="function"==typeof t?t:Array.isArray(t)?$o(Ho.call(t)):$o(t),l):f},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),y()},l}function cu(t){return function(){return t}}function su(t,n,e,r,i,o,u,a,c,s){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=s}function fu(){return!ln.ctrlKey&&!ln.button}function lu(){return this.parentNode}function hu(t){return null==t?{x:ln.x,y:ln.y}:t}function pu(){return navigator.maxTouchPoints||"ontouchstart"in this}function du(){var t,n,e,r,i=fu,o=lu,u=hu,a=pu,c={},s=ht("start","drag","end"),f=0,l=0;function h(t){t.on("mousedown.drag",p).filter(a).on("touchstart.drag",y).on("touchmove.drag",b).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!r&&i.apply(this,arguments)){var u=_("mouse",o.apply(this,arguments),Pe,this,arguments);u&&(Tn(ln.view).on("mousemove.drag",d,!0).on("mouseup.drag",v,!0),An(ln.view),Nn(),e=!1,t=ln.clientX,n=ln.clientY,u("start"))}}function d(){if(En(),!e){var r=ln.clientX-t,i=ln.clientY-n;e=r*r+i*i>l}c.mouse("drag")}function v(){Tn(ln.view).on("mousemove.drag mouseup.drag",null),kn(ln.view,e),En(),c.mouse("end")}function y(){if(i.apply(this,arguments)){var t,n,e=ln.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=_(e[t].identifier,r,Fe,this,arguments))&&(Nn(),n("start"))}}function b(){var t,n,e=ln.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(En(),n("drag"))}function g(){var t,n,e=ln.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=c[e[t].identifier])&&(Nn(),n("end"))}function _(t,n,e,r,i){var o,a,l,p=e(n,t),d=s.copy();if(bn(new su(h,"beforestart",o,t,f,p[0],p[1],0,0,d),(function(){return null!=(ln.subject=o=u.apply(r,i))&&(a=o.x-p[0]||0,l=o.y-p[1]||0,!0)})))return function u(s){var v,y=p;switch(s){case"start":c[t]=u,v=f++;break;case"end":delete c[t],--f;case"drag":p=e(n,t),v=f}bn(new su(h,s,o,t,v,p[0]+a,p[1]+l,p[0]-y[0],p[1]-y[1],d),d.apply,d,[s,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:cu(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:cu(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:cu(t),h):u},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:cu(!!t),h):a},h.on=function(){var t=s.on.apply(s,arguments);return t===s?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h}su.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var vu={},yu={};function bu(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function gu(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function _u(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function mu(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,s=!1;function f(){if(c)return yu;if(s)return s=!1,vu;var n,r,i=u;if(34===t.charCodeAt(i)){for(;u++<o&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=o?c=!0:10===(r=t.charCodeAt(u++))?s=!0:13===r&&(s=!0,10===t.charCodeAt(u)&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if(10===(r=t.charCodeAt(n=u++)))s=!0;else if(13===r)s=!0,10===t.charCodeAt(u)&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=f())!==yu;){for(var l=[];r!==vu&&r!==yu;)l.push(r),r=f();n&&null==(l=n(l,a++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return u(n[t])})).join(t)}))}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?function(t){var n=t.getUTCHours(),e=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+_u(-t,6):t>9999?"+"+_u(t,6):_u(t,4)}(t.getUTCFullYear())+"-"+_u(t.getUTCMonth()+1,2)+"-"+_u(t.getUTCDate(),2)+(i?"T"+_u(n,2)+":"+_u(e,2)+":"+_u(r,2)+"."+_u(i,3)+"Z":r?"T"+_u(n,2)+":"+_u(e,2)+":"+_u(r,2)+"Z":e||n?"T"+_u(n,2)+":"+_u(e,2)+"Z":"")}(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=bu(t);return function(r,i){return n(e(r),i,t)}}(t,n):bu(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=gu(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=gu(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:u}}var xu=mu(","),wu=xu.parse,Su=xu.parseRows,Mu=xu.format,Tu=xu.formatBody,Nu=xu.formatRows,Eu=xu.formatRow,Au=xu.formatValue,ku=mu("\t"),Cu=ku.parse,Iu=ku.parseRows,Fu=ku.format,Pu=ku.formatBody,zu=ku.formatRows,ju=ku.formatRow,Ou=ku.formatValue;function Lu(t){for(var n in t){var e,r,i=t[n].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(e=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Du&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=e;else i=null;t[n]=i}return t}var Du=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function Ru(t){return+t}function Vu(t){return t*t}function Bu(t){return t*(2-t)}function Uu(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var qu=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),Zu=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Yu=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Wu=Math.PI,Hu=Wu/2;function Xu(t){return 1-Math.cos(t*Hu)}function $u(t){return Math.sin(t*Hu)}function Gu(t){return(1-Math.cos(Wu*t))/2}function Ku(t){return Math.pow(2,10*t-10)}function Qu(t){return 1-Math.pow(2,-10*t)}function Ju(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function ta(t){return 1-Math.sqrt(1-t*t)}function na(t){return Math.sqrt(1- --t*t)}function ea(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var ra=7.5625;function ia(t){return 1-oa(1-t)}function oa(t){return(t=+t)<.36363636363636365?ra*t*t:t<.7272727272727273?ra*(t-=.5454545454545454)*t+.75:t<.9090909090909091?ra*(t-=.8181818181818182)*t+.9375:ra*(t-=.9545454545454546)*t+.984375}function ua(t){return((t*=2)<=1?1-oa(1-t):oa(t-1)+1)/2}var aa=1.70158,ca=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(aa),sa=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(aa),fa=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(aa),la=2*Math.PI,ha=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=la);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*la)},i.period=function(e){return t(n,e)},i}(1,.3),pa=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=la);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*la)},i.period=function(e){return t(n,e)},i}(1,.3),da=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=la);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*la)},i.period=function(e){return t(n,e)},i}(1,.3);function va(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}function ya(t,n){return fetch(t,n).then(va)}function ba(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}function ga(t,n){return fetch(t,n).then(ba)}function _a(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function ma(t,n){return fetch(t,n).then(_a)}function xa(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),ma(n,e).then((function(n){return t(n,r)}))}}function wa(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=mu(t);return ma(n,e).then((function(t){return i.parse(t,r)}))}var Sa=xa(wu),Ma=xa(Cu);function Ta(t,n){return new Promise((function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t}))}function Na(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function Ea(t,n){return fetch(t,n).then(Na)}function Aa(t){return function(n,e){return ma(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}const ka=Aa("application/xml");var Ca=Aa("text/html"),Ia=Aa("image/svg+xml");function Fa(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r}function Pa(t){return function(){return t}}function za(){return 1e-6*(Math.random()-.5)}function ja(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,s,f,l,h,p=t._root,d={data:r},v=t._x0,y=t._y0,b=t._x1,g=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((s=n>=(o=(v+b)/2))?v=o:b=o,(f=e>=(u=(y+g)/2))?y=u:g=u,i=p,!(p=p[l=f<<1|s]))return i[l]=d,t;if(a=+t._x.call(null,p.data),c=+t._y.call(null,p.data),n===a&&e===c)return d.next=p,i?i[l]=d:t._root=d,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(s=n>=(o=(v+b)/2))?v=o:b=o,(f=e>=(u=(y+g)/2))?y=u:g=u}while((l=f<<1|s)==(h=(c>=u)<<1|a>=o));return i[h]=p,i[l]=d,t}function Oa(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function La(t){return t[0]}function Da(t){return t[1]}function Ra(t,n,e){var r=new Va(null==n?La:n,null==e?Da:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Va(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Ba(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Ua=Ra.prototype=Va.prototype;function qa(t){return t.x+t.vx}function Za(t){return t.y+t.vy}function Ya(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,s,f,l,h=n.length,p=0;p<i;++p)for(o=Ra(n,qa,Za).visitAfter(u),t=0;t<h;++t)a=n[t],f=e[a.index],l=f*f,c=a.x+a.vx,s=a.y+a.vy,o.visit(d);function d(t,n,e,i,o){var u=t.data,h=t.r,p=f+h;if(!u)return n>c+p||i<c-p||e>s+p||o<s-p;if(u.index>a.index){var d=c-u.x-u.vx,v=s-u.y-u.vy,y=d*d+v*v;y<p*p&&(0===d&&(y+=(d=za())*d),0===v&&(y+=(v=za())*v),y=(p-(y=Math.sqrt(y)))/y*r,a.vx+=(d*=y)*(p=(h*=h)/(l+h)),a.vy+=(v*=y)*p,u.vx-=d*(p=1-p),u.vy-=v*p)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=Pa(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:Pa(+n),a(),o):t},o}function Wa(t){return t.index}function Ha(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function Xa(t){var n,e,r,i,o,u=Wa,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=Pa(30),s=1;function f(r){for(var i=0,u=t.length;i<s;++i)for(var a,c,f,l,h,p,d,v=0;v<u;++v)c=(a=t[v]).source,l=(f=a.target).x+f.vx-c.x-c.vx||za(),h=f.y+f.vy-c.y-c.vy||za(),l*=p=((p=Math.sqrt(l*l+h*h))-e[v])/p*r*n[v],h*=p,f.vx-=l*(d=o[v]),f.vy-=h*d,c.vx+=l*(d=1-d),c.vy+=h*d}function l(){if(r){var a,c,s=r.length,f=t.length,l=eo(r,u);for(a=0,i=new Array(s);a<f;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=Ha(l,c.source)),"object"!=typeof c.target&&(c.target=Ha(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(f);a<f;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(f),h(),e=new Array(f),p()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function p(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),f.initialize=function(t){r=t,l()},f.links=function(n){return arguments.length?(t=n,l(),f):t},f.id=function(t){return arguments.length?(u=t,f):u},f.iterations=function(t){return arguments.length?(s=+t,f):s},f.strength=function(t){return arguments.length?(a="function"==typeof t?t:Pa(+t),h(),f):a},f.distance=function(t){return arguments.length?(c="function"==typeof t?t:Pa(+t),p(),f):c},f}function $a(t){return t.x}function Ga(t){return t.y}Ua.copy=function(){var t,n,e=new Va(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Ba(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Ba(n));return e},Ua.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return ja(this.cover(n,e),n,e,t)},Ua.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,s=1/0,f=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>f&&(f=r),i<s&&(s=i),i>l&&(l=i));if(c>f||s>l)return this;for(this.cover(c,s).cover(f,l),e=0;e<o;++e)ja(this,u[e],a[e],t[e]);return this},Ua.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var u,a,c=i-e,s=this._root;e>t||t>=i||r>n||n>=o;)switch(a=(n<r)<<1|t<e,(u=new Array(4))[a]=s,s=u,c*=2,a){case 0:i=e+c,o=r+c;break;case 1:e=i-c,o=r+c;break;case 2:i=e+c,r=o-c;break;case 3:e=i-c,r=o-c}this._root&&this._root.length&&(this._root=s)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Ua.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Ua.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Ua.find=function(t,n,e){var r,i,o,u,a,c,s,f=this._x0,l=this._y0,h=this._x1,p=this._y1,d=[],v=this._root;for(v&&d.push(new Oa(v,f,l,h,p)),null==e?e=1/0:(f=t-e,l=n-e,h=t+e,p=n+e,e*=e);c=d.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>p||(u=c.x1)<f||(a=c.y1)<l))if(v.length){var y=(i+u)/2,b=(o+a)/2;d.push(new Oa(v[3],y,b,u,a),new Oa(v[2],i,b,y,a),new Oa(v[1],y,o,u,b),new Oa(v[0],i,o,y,b)),(s=(n>=b)<<1|t>=y)&&(c=d[d.length-1],d[d.length-1]=d[d.length-1-s],d[d.length-1-s]=c)}else{var g=t-+this._x.call(null,v.data),_=n-+this._y.call(null,v.data),m=g*g+_*_;if(m<e){var x=Math.sqrt(e=m);f=t-x,l=n-x,h=t+x,p=n+x,r=v.data}}return r},Ua.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,s,f,l,h,p=this._root,d=this._x0,v=this._y0,y=this._x1,b=this._y1;if(!p)return this;if(p.length)for(;;){if((s=o>=(a=(d+y)/2))?d=a:y=a,(f=u>=(c=(v+b)/2))?v=c:b=c,n=p,!(p=p[l=f<<1|s]))return this;if(!p.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},Ua.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Ua.root=function(){return this._root},Ua.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Ua.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new Oa(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var s=(r+o)/2,f=(i+u)/2;(e=c[3])&&a.push(new Oa(e,s,f,o,u)),(e=c[2])&&a.push(new Oa(e,r,f,s,u)),(e=c[1])&&a.push(new Oa(e,s,i,o,f)),(e=c[0])&&a.push(new Oa(e,r,i,s,f))}return this},Ua.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Oa(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,s=n.y1,f=(u+c)/2,l=(a+s)/2;(o=i[0])&&e.push(new Oa(o,u,a,f,l)),(o=i[1])&&e.push(new Oa(o,f,a,c,l)),(o=i[2])&&e.push(new Oa(o,u,l,f,s)),(o=i[3])&&e.push(new Oa(o,f,l,c,s))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Ua.x=function(t){return arguments.length?(this._x=t,this):this._x},Ua.y=function(t){return arguments.length?(this._y=t,this):this._y};var Ka=Math.PI*(3-Math.sqrt(5));function Qa(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=eo(),c=He(f),s=ht("tick","end");function f(){l(),s.call("tick",n),e<r&&(c.stop(),s.call("end",n))}function l(r){var c,s,f=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,a.each((function(t){t(e)})),c=0;c<f;++c)null==(s=t[c]).fx?s.x+=s.vx*=u:(s.x=s.fx,s.vx=0),null==s.fy?s.y+=s.vy*=u:(s.y=s.fy,s.vy=0);return n}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*Ka;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function p(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return c.restart(f),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(p),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,p(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,s=0,f=t.length;for(null==r?r=1/0:r*=r,s=0;s<f;++s)(u=(i=n-(a=t[s]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(s.on(t,e),n):s.on(t)}}}function Ja(){var t,n,e,r,i=Pa(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=Ra(t,$a,Ga).visitAfter(f);for(e=r,i=0;i<o;++i)n=t[i],u.visit(l)}function s(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function f(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function l(t,i,c,s){if(!t.value)return!0;var f=t.x-n.x,l=t.y-n.y,h=s-i,p=f*f+l*l;if(h*h/a<p)return p<u&&(0===f&&(p+=(f=za())*f),0===l&&(p+=(l=za())*l),p<o&&(p=Math.sqrt(o*p)),n.vx+=f*t.value*e/p,n.vy+=l*t.value*e/p),!0;if(!(t.length||p>=u)){(t.data!==n||t.next)&&(0===f&&(p+=(f=za())*f),0===l&&(p+=(l=za())*l),p<o&&(p=Math.sqrt(o*p)));do{t.data!==n&&(h=r[t.data.index]*e/p,n.vx+=f*h,n.vy+=l*h)}while(t=t.next)}}return c.initialize=function(n){t=n,s()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:Pa(+t),s(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c}function tc(t,n,e){var r,i,o,u=Pa(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],s=c.x-n||1e-6,f=c.y-e||1e-6,l=Math.sqrt(s*s+f*f),h=(o[u]-l)*i[u]*t/l;c.vx+=s*h,c.vy+=f*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=Pa(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:Pa(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:Pa(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a}function nc(t){var n,e,r,i=Pa(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=Pa(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:Pa(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:Pa(+n),u(),o):t},o}function ec(t){var n,e,r,i=Pa(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=Pa(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:Pa(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:Pa(+n),u(),o):t},o}function rc(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function ic(t){return(t=rc(Math.abs(t)))?t[1]:NaN}var oc,uc=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ac(t){if(!(n=uc.exec(t)))throw new Error("invalid format: "+t);var n;return new cc({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function cc(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function sc(t,n){var e=rc(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}ac.prototype=cc.prototype,cc.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const fc={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return sc(100*t,n)},r:sc,s:function(t,n){var e=rc(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(oc=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+rc(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function lc(t){return t}var hc,pc,dc,vc=Array.prototype.map,yc=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function bc(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?lc:(n=vc.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?lc:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(vc.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"-":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=ac(t)).fill,e=t.align,l=t.sign,h=t.symbol,p=t.zero,d=t.width,v=t.comma,y=t.precision,b=t.trim,g=t.type;"n"===g?(v=!0,g="g"):fc[g]||(void 0===y&&(y=12),b=!0,g="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===h?o:/[%p]/.test(g)?c:"",x=fc[g],w=/[defgprs%]/.test(g);function S(t){var i,o,c,h=_,S=m;if("c"===g)S=x(t)+S,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:x(Math.abs(t),y),b&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),M&&0==+t&&"+"!==l&&(M=!1),h=(M?"("===l?l:s:"-"===l||"("===l?"":l)+h,S=("s"===g?yc[8+oc/3]:"")+S+(M&&"("===l?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){S=(46===c?u+t.slice(i+1):t.slice(i))+S,t=t.slice(0,i);break}}v&&!p&&(t=r(t,1/0));var T=h.length+t.length+S.length,N=T<d?new Array(d-T+1).join(n):"";switch(v&&p&&(t=r(N+t,N.length?d-S.length:1/0),N=""),e){case"<":t=h+t+S+N;break;case"=":t=h+N+t+S;break;case"^":t=N.slice(0,T=N.length>>1)+h+t+S+N.slice(T);break;default:t=N+h+t+S}return a(t)}return y=void 0===y?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),S.toString=function(){return t+""},S}return{format:l,formatPrefix:function(t,n){var e=l(((t=ac(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ic(n)/3))),i=Math.pow(10,-r),o=yc[8+r/3];return function(t){return e(i*t)+o}}}}function gc(t){return hc=bc(t),pc=hc.format,dc=hc.formatPrefix,hc}function _c(t){return Math.max(0,-ic(Math.abs(t)))}function mc(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ic(n)/3)))-ic(Math.abs(t)))}function xc(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,ic(n)-ic(t))+1}function wc(){return new Sc}function Sc(){this.reset()}gc({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Sc.prototype={constructor:Sc,reset:function(){this.s=this.t=0},add:function(t){Tc(Mc,t,this.t),Tc(this,Mc.s,this.s),this.s?this.t+=Mc.t:this.s=Mc.t},valueOf:function(){return this.s}};var Mc=new Sc;function Tc(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var Nc=1e-6,Ec=1e-12,Ac=Math.PI,kc=Ac/2,Cc=Ac/4,Ic=2*Ac,Fc=180/Ac,Pc=Ac/180,zc=Math.abs,jc=Math.atan,Oc=Math.atan2,Lc=Math.cos,Dc=Math.ceil,Rc=Math.exp,Vc=(Math.floor,Math.log),Bc=Math.pow,Uc=Math.sin,qc=Math.sign||function(t){return t>0?1:t<0?-1:0},Zc=Math.sqrt,Yc=Math.tan;function Wc(t){return t>1?0:t<-1?Ac:Math.acos(t)}function Hc(t){return t>1?kc:t<-1?-kc:Math.asin(t)}function Xc(t){return(t=Uc(t/2))*t}function $c(){}function Gc(t,n){t&&Qc.hasOwnProperty(t.type)&&Qc[t.type](t,n)}var Kc={Feature:function(t,n){Gc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Gc(e[r].geometry,n)}},Qc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Jc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Jc(e[r],n,0)},Polygon:function(t,n){ts(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)ts(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Gc(e[r],n)}};function Jc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function ts(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Jc(t[e],n,1);n.polygonEnd()}function ns(t,n){t&&Kc.hasOwnProperty(t.type)?Kc[t.type](t,n):Gc(t,n)}var es,rs,is,os,us,as=wc(),cs=wc(),ss={point:$c,lineStart:$c,lineEnd:$c,polygonStart:function(){as.reset(),ss.lineStart=fs,ss.lineEnd=ls},polygonEnd:function(){var t=+as;cs.add(t<0?Ic+t:t),this.lineStart=this.lineEnd=this.point=$c},sphere:function(){cs.add(Ic)}};function fs(){ss.point=hs}function ls(){ps(es,rs)}function hs(t,n){ss.point=ps,es=t,rs=n,is=t*=Pc,os=Lc(n=(n*=Pc)/2+Cc),us=Uc(n)}function ps(t,n){var e=(t*=Pc)-is,r=e>=0?1:-1,i=r*e,o=Lc(n=(n*=Pc)/2+Cc),u=Uc(n),a=us*u,c=os*o+a*Lc(i),s=a*r*Uc(i);as.add(Oc(s,c)),is=t,os=o,us=u}function ds(t){return cs.reset(),ns(t,ss),2*cs}function vs(t){return[Oc(t[1],t[0]),Hc(t[2])]}function ys(t){var n=t[0],e=t[1],r=Lc(e);return[r*Lc(n),r*Uc(n),Uc(e)]}function bs(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function gs(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function _s(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function ms(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function xs(t){var n=Zc(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var ws,Ss,Ms,Ts,Ns,Es,As,ks,Cs,Is,Fs,Ps,zs,js,Os,Ls,Ds,Rs,Vs,Bs,Us,qs,Zs,Ys,Ws,Hs,Xs=wc(),$s={point:Gs,lineStart:Qs,lineEnd:Js,polygonStart:function(){$s.point=tf,$s.lineStart=nf,$s.lineEnd=ef,Xs.reset(),ss.polygonStart()},polygonEnd:function(){ss.polygonEnd(),$s.point=Gs,$s.lineStart=Qs,$s.lineEnd=Js,as<0?(ws=-(Ms=180),Ss=-(Ts=90)):Xs>Nc?Ts=90:Xs<-1e-6&&(Ss=-90),Is[0]=ws,Is[1]=Ms},sphere:function(){ws=-(Ms=180),Ss=-(Ts=90)}};function Gs(t,n){Cs.push(Is=[ws=t,Ms=t]),n<Ss&&(Ss=n),n>Ts&&(Ts=n)}function Ks(t,n){var e=ys([t*Pc,n*Pc]);if(ks){var r=gs(ks,e),i=gs([r[1],-r[0],0],r);xs(i),i=vs(i);var o,u=t-Ns,a=u>0?1:-1,c=i[0]*Fc*a,s=zc(u)>180;s^(a*Ns<c&&c<a*t)?(o=i[1]*Fc)>Ts&&(Ts=o):s^(a*Ns<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*Fc)<Ss&&(Ss=o):(n<Ss&&(Ss=n),n>Ts&&(Ts=n)),s?t<Ns?rf(ws,t)>rf(ws,Ms)&&(Ms=t):rf(t,Ms)>rf(ws,Ms)&&(ws=t):Ms>=ws?(t<ws&&(ws=t),t>Ms&&(Ms=t)):t>Ns?rf(ws,t)>rf(ws,Ms)&&(Ms=t):rf(t,Ms)>rf(ws,Ms)&&(ws=t)}else Cs.push(Is=[ws=t,Ms=t]);n<Ss&&(Ss=n),n>Ts&&(Ts=n),ks=e,Ns=t}function Qs(){$s.point=Ks}function Js(){Is[0]=ws,Is[1]=Ms,$s.point=Gs,ks=null}function tf(t,n){if(ks){var e=t-Ns;Xs.add(zc(e)>180?e+(e>0?360:-360):e)}else Es=t,As=n;ss.point(t,n),Ks(t,n)}function nf(){ss.lineStart()}function ef(){tf(Es,As),ss.lineEnd(),zc(Xs)>Nc&&(ws=-(Ms=180)),Is[0]=ws,Is[1]=Ms,ks=null}function rf(t,n){return(n-=t)<0?n+360:n}function of(t,n){return t[0]-n[0]}function uf(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function af(t){var n,e,r,i,o,u,a;if(Ts=Ms=-(ws=Ss=1/0),Cs=[],ns(t,$s),e=Cs.length){for(Cs.sort(of),n=1,o=[r=Cs[0]];n<e;++n)uf(r,(i=Cs[n])[0])||uf(r,i[1])?(rf(r[0],i[1])>rf(r[0],r[1])&&(r[1]=i[1]),rf(i[0],r[1])>rf(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=rf(r[1],i[0]))>u&&(u=a,ws=i[0],Ms=r[1])}return Cs=Is=null,ws===1/0||Ss===1/0?[[NaN,NaN],[NaN,NaN]]:[[ws,Ss],[Ms,Ts]]}var cf={sphere:$c,point:sf,lineStart:lf,lineEnd:df,polygonStart:function(){cf.lineStart=vf,cf.lineEnd=yf},polygonEnd:function(){cf.lineStart=lf,cf.lineEnd=df}};function sf(t,n){t*=Pc;var e=Lc(n*=Pc);ff(e*Lc(t),e*Uc(t),Uc(n))}function ff(t,n,e){++Fs,zs+=(t-zs)/Fs,js+=(n-js)/Fs,Os+=(e-Os)/Fs}function lf(){cf.point=hf}function hf(t,n){t*=Pc;var e=Lc(n*=Pc);Ys=e*Lc(t),Ws=e*Uc(t),Hs=Uc(n),cf.point=pf,ff(Ys,Ws,Hs)}function pf(t,n){t*=Pc;var e=Lc(n*=Pc),r=e*Lc(t),i=e*Uc(t),o=Uc(n),u=Oc(Zc((u=Ws*o-Hs*i)*u+(u=Hs*r-Ys*o)*u+(u=Ys*i-Ws*r)*u),Ys*r+Ws*i+Hs*o);Ps+=u,Ls+=u*(Ys+(Ys=r)),Ds+=u*(Ws+(Ws=i)),Rs+=u*(Hs+(Hs=o)),ff(Ys,Ws,Hs)}function df(){cf.point=sf}function vf(){cf.point=bf}function yf(){gf(qs,Zs),cf.point=sf}function bf(t,n){qs=t,Zs=n,t*=Pc,n*=Pc,cf.point=gf;var e=Lc(n);Ys=e*Lc(t),Ws=e*Uc(t),Hs=Uc(n),ff(Ys,Ws,Hs)}function gf(t,n){t*=Pc;var e=Lc(n*=Pc),r=e*Lc(t),i=e*Uc(t),o=Uc(n),u=Ws*o-Hs*i,a=Hs*r-Ys*o,c=Ys*i-Ws*r,s=Zc(u*u+a*a+c*c),f=Hc(s),l=s&&-f/s;Vs+=l*u,Bs+=l*a,Us+=l*c,Ps+=f,Ls+=f*(Ys+(Ys=r)),Ds+=f*(Ws+(Ws=i)),Rs+=f*(Hs+(Hs=o)),ff(Ys,Ws,Hs)}function _f(t){Fs=Ps=zs=js=Os=Ls=Ds=Rs=Vs=Bs=Us=0,ns(t,cf);var n=Vs,e=Bs,r=Us,i=n*n+e*e+r*r;return i<Ec&&(n=Ls,e=Ds,r=Rs,Ps<Nc&&(n=zs,e=js,r=Os),(i=n*n+e*e+r*r)<Ec)?[NaN,NaN]:[Oc(e,n)*Fc,Hc(r/Zc(i))*Fc]}function mf(t){return function(){return t}}function xf(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function wf(t,n){return[zc(t)>Ac?t+Math.round(-t/Ic)*Ic:t,n]}function Sf(t,n,e){return(t%=Ic)?n||e?xf(Tf(t),Nf(n,e)):Tf(t):n||e?Nf(n,e):wf}function Mf(t){return function(n,e){return[(n+=t)>Ac?n-Ic:n<-Ac?n+Ic:n,e]}}function Tf(t){var n=Mf(t);return n.invert=Mf(-t),n}function Nf(t,n){var e=Lc(t),r=Uc(t),i=Lc(n),o=Uc(n);function u(t,n){var u=Lc(n),a=Lc(t)*u,c=Uc(t)*u,s=Uc(n),f=s*e+a*r;return[Oc(c*i-f*o,a*e-s*r),Hc(f*i+c*o)]}return u.invert=function(t,n){var u=Lc(n),a=Lc(t)*u,c=Uc(t)*u,s=Uc(n),f=s*i-c*o;return[Oc(c*i+s*o,a*e+f*r),Hc(f*e-a*r)]},u}function Ef(t){function n(n){return(n=t(n[0]*Pc,n[1]*Pc))[0]*=Fc,n[1]*=Fc,n}return t=Sf(t[0]*Pc,t[1]*Pc,t.length>2?t[2]*Pc:0),n.invert=function(n){return(n=t.invert(n[0]*Pc,n[1]*Pc))[0]*=Fc,n[1]*=Fc,n},n}function Af(t,n,e,r,i,o){if(e){var u=Lc(n),a=Uc(n),c=r*e;null==i?(i=n+r*Ic,o=n-c/2):(i=kf(u,i),o=kf(u,o),(r>0?i<o:i>o)&&(i+=r*Ic));for(var s,f=i;r>0?f>o:f<o;f-=c)s=vs([u,-a*Lc(f),-a*Uc(f)]),t.point(s[0],s[1])}}function kf(t,n){(n=ys(n))[0]-=t,xs(n);var e=Wc(-n[1]);return((-n[2]<0?-e:e)+Ic-Nc)%Ic}function Cf(){var t,n,e=mf([0,0]),r=mf(90),i=mf(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=Fc,e[1]*=Fc}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*Pc,c=i.apply(this,arguments)*Pc;return t=[],n=Sf(-u[0]*Pc,-u[1]*Pc,0).invert,Af(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:mf([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:mf(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:mf(+t),u):i},u}function If(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:$c,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function Ff(t,n){return zc(t[0]-n[0])<Nc&&zc(t[1]-n[1])<Nc}function Pf(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function zf(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(Ff(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new Pf(r,t,null,!0)),c.push(e.o=new Pf(r,null,e,!1)),a.push(e=new Pf(u,t,null,!1)),c.push(e.o=new Pf(u,null,e,!0))}})),a.length){for(c.sort(n),jf(a),jf(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var s,f,l=a[0];;){for(var h=l,p=!0;h.v;)if((h=h.n)===l)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=s.length;o<u;++o)i.point((f=s[o])[0],f[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(s=h.p.z,o=s.length-1;o>=0;--o)i.point((f=s[o])[0],f[1]);else r(h.x,h.p.x,-1,i);h=h.p}s=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}}function jf(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}wf.invert=wf;var Of=wc();function Lf(t){return zc(t[0])<=Ac?t[0]:qc(t[0])*((zc(t[0])+Ac)%Ic-Ac)}function Df(t,n){var e=Lf(n),r=n[1],i=Uc(r),o=[Uc(e),-Lc(e),0],u=0,a=0;Of.reset(),1===i?r=kc+Nc:-1===i&&(r=-kc-Nc);for(var c=0,s=t.length;c<s;++c)if(l=(f=t[c]).length)for(var f,l,h=f[l-1],p=Lf(h),d=h[1]/2+Cc,v=Uc(d),y=Lc(d),b=0;b<l;++b,p=_,v=x,y=w,h=g){var g=f[b],_=Lf(g),m=g[1]/2+Cc,x=Uc(m),w=Lc(m),S=_-p,M=S>=0?1:-1,T=M*S,N=T>Ac,E=v*x;if(Of.add(Oc(E*M*Uc(T),y*w+E*Lc(T))),u+=N?S+M*Ic:S,N^p>=e^_>=e){var A=gs(ys(h),ys(g));xs(A);var k=gs(o,A);xs(k);var C=(N^S>=0?-1:1)*Hc(k[2]);(r>C||r===C&&(A[0]||A[1]))&&(a+=N^S>=0?1:-1)}}return(u<-1e-6||u<Nc&&Of<-1e-6)^1&a}function Rf(t,n,e,r){return function(i){var o,u,a,c=n(i),s=If(),f=n(s),l=!1,h={point:p,lineStart:v,lineEnd:y,polygonStart:function(){h.point=b,h.lineStart=g,h.lineEnd=_,u=[],o=[]},polygonEnd:function(){h.point=p,h.lineStart=v,h.lineEnd=y,u=D(u);var t=Df(o,r);u.length?(l||(i.polygonStart(),l=!0),zf(u,Bf,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function d(t,n){c.point(t,n)}function v(){h.point=d,c.lineStart()}function y(){h.point=p,c.lineEnd()}function b(t,n){a.push([t,n]),f.point(t,n)}function g(){f.lineStart(),a=[]}function _(){b(a[0][0],a[0][1]),f.lineEnd();var t,n,e,r,c=f.clean(),h=s.result(),p=h.length;if(a.pop(),o.push(a),a=null,p)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(Vf))}return h}}function Vf(t){return t.length>1}function Bf(t,n){return((t=t.x)[0]<0?t[1]-kc-Nc:kc-t[1])-((n=n.x)[0]<0?n[1]-kc-Nc:kc-n[1])}const Uf=Rf((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?Ac:-Ac,c=zc(o-e);zc(c-Ac)<Nc?(t.point(e,r=(r+u)/2>0?kc:-kc),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=Ac&&(zc(e-i)<Nc&&(e-=i*Nc),zc(o-a)<Nc&&(o-=a*Nc),r=function(t,n,e,r){var i,o,u=Uc(t-e);return zc(u)>Nc?jc((Uc(n)*(o=Lc(r))*Uc(e)-Uc(r)*(i=Lc(n))*Uc(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*kc,r.point(-Ac,i),r.point(0,i),r.point(Ac,i),r.point(Ac,0),r.point(Ac,-i),r.point(0,-i),r.point(-Ac,-i),r.point(-Ac,0),r.point(-Ac,i);else if(zc(t[0]-n[0])>Nc){var o=t[0]<n[0]?Ac:-Ac;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-Ac,-kc]);function qf(t){var n=Lc(t),e=6*Pc,r=n>0,i=zc(n)>Nc;function o(t,e){return Lc(t)*Lc(e)>n}function u(t,e,r){var i=[1,0,0],o=gs(ys(t),ys(e)),u=bs(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var s=n*u/c,f=-n*a/c,l=gs(i,o),h=ms(i,s);_s(h,ms(o,f));var p=l,d=bs(h,p),v=bs(p,p),y=d*d-v*(bs(h,h)-1);if(!(y<0)){var b=Zc(y),g=ms(p,(-d-b)/v);if(_s(g,h),g=vs(g),!r)return g;var _,m=t[0],x=e[0],w=t[1],S=e[1];x<m&&(_=m,m=x,x=_);var M=x-m,T=zc(M-Ac)<Nc;if(!T&&S<w&&(_=w,w=S,S=_),T||M<Nc?T?w+S>0^g[1]<(zc(g[0]-m)<Nc?w:S):w<=g[1]&&g[1]<=S:M>Ac^(m<=g[0]&&g[0]<=x)){var N=ms(p,(-d+b)/v);return _s(N,h),[g,vs(N)]}}}function a(n,e){var i=r?t:Ac-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return Rf(o,(function(t){var n,e,c,s,f;return{lineStart:function(){s=c=!1,f=1},point:function(l,h){var p,d=[l,h],v=o(l,h),y=r?v?0:a(l,h):v?a(l+(l<0?Ac:-Ac),h):0;if(!n&&(s=c=v)&&t.lineStart(),v!==c&&(!(p=u(n,d))||Ff(n,p)||Ff(d,p))&&(d[0]+=Nc,d[1]+=Nc,v=o(d[0],d[1])),v!==c)f=0,v?(t.lineStart(),p=u(d,n),t.point(p[0],p[1])):(p=u(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(i&&n&&r^v){var b;y&e||!(b=u(d,n,!0))||(f=0,r?(t.lineStart(),t.point(b[0][0],b[0][1]),t.point(b[1][0],b[1][1]),t.lineEnd()):(t.point(b[1][0],b[1][1]),t.lineEnd(),t.lineStart(),t.point(b[0][0],b[0][1])))}!v||n&&Ff(n,d)||t.point(d[0],d[1]),n=d,c=v,e=y},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return f|(s&&c)<<1}}}),(function(n,r,i,o){Af(o,t,e,i,n,r)}),r?[0,-t]:[-Ac,t-Ac])}var Zf=1e9,Yf=-Zf;function Wf(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,s){var f=0,l=0;if(null==i||(f=u(i,a))!==(l=u(o,a))||c(i,o)<0^a>0)do{s.point(0===f||3===f?t:e,f>1?r:n)}while((f=(f+a+4)%4)!==l);else s.point(o[0],o[1])}function u(r,i){return zc(r[0]-t)<Nc?i>0?0:3:zc(r[0]-e)<Nc?i>0?2:1:zc(r[1]-n)<Nc?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,s,f,l,h,p,d,v,y,b,g,_=u,m=If(),x={point:w,lineStart:function(){x.point=S,s&&s.push(f=[]),b=!0,y=!1,d=v=NaN},lineEnd:function(){c&&(S(l,h),p&&y&&m.rejoin(),c.push(m.result())),x.point=w,y&&_.lineEnd()},polygonStart:function(){_=m,c=[],s=[],g=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=s.length;e<i;++e)for(var o,u,a=s[e],c=1,f=a.length,l=a[0],h=l[0],p=l[1];c<f;++c)o=h,u=p,h=(l=a[c])[0],p=l[1],u<=r?p>r&&(h-o)*(r-u)>(p-u)*(t-o)&&++n:p<=r&&(h-o)*(r-u)<(p-u)*(t-o)&&--n;return n}(),e=g&&n,i=(c=D(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&zf(c,a,n,o,u),u.polygonEnd()),_=u,c=s=f=null}};function w(t,n){i(t,n)&&_.point(t,n)}function S(o,u){var a=i(o,u);if(s&&f.push([o,u]),b)l=o,h=u,p=a,b=!1,a&&(_.lineStart(),_.point(o,u));else if(a&&y)_.point(o,u);else{var c=[d=Math.max(Yf,Math.min(Zf,d)),v=Math.max(Yf,Math.min(Zf,v))],m=[o=Math.max(Yf,Math.min(Zf,o)),u=Math.max(Yf,Math.min(Zf,u))];!function(t,n,e,r,i,o){var u,a=t[0],c=t[1],s=0,f=1,l=n[0]-a,h=n[1]-c;if(u=e-a,l||!(u>0)){if(u/=l,l<0){if(u<s)return;u<f&&(f=u)}else if(l>0){if(u>f)return;u>s&&(s=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>f)return;u>s&&(s=u)}else if(l>0){if(u<s)return;u<f&&(f=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<s)return;u<f&&(f=u)}else if(h>0){if(u>f)return;u>s&&(s=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>f)return;u>s&&(s=u)}else if(h>0){if(u<s)return;u<f&&(f=u)}return s>0&&(t[0]=a+s*l,t[1]=c+s*h),f<1&&(n[0]=a+f*l,n[1]=c+f*h),!0}}}}}(c,m,t,n,e,r)?a&&(_.lineStart(),_.point(o,u),g=!1):(y||(_.lineStart(),_.point(c[0],c[1])),_.point(m[0],m[1]),a||_.lineEnd(),g=!1)}d=o,v=u,y=a}return x}}function Hf(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=Wf(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}}var Xf,$f,Gf,Kf=wc(),Qf={sphere:$c,point:$c,lineStart:function(){Qf.point=tl,Qf.lineEnd=Jf},lineEnd:$c,polygonStart:$c,polygonEnd:$c};function Jf(){Qf.point=Qf.lineEnd=$c}function tl(t,n){Xf=t*=Pc,$f=Uc(n*=Pc),Gf=Lc(n),Qf.point=nl}function nl(t,n){t*=Pc;var e=Uc(n*=Pc),r=Lc(n),i=zc(t-Xf),o=Lc(i),u=r*Uc(i),a=Gf*e-$f*r*o,c=$f*e+Gf*r*o;Kf.add(Oc(Zc(u*u+a*a),c)),Xf=t,$f=e,Gf=r}function el(t){return Kf.reset(),ns(t,Qf),+Kf}var rl=[null,null],il={type:"LineString",coordinates:rl};function ol(t,n){return rl[0]=t,rl[1]=n,el(il)}var ul={Feature:function(t,n){return cl(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(cl(e[r].geometry,n))return!0;return!1}},al={Sphere:function(){return!0},Point:function(t,n){return sl(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(sl(e[r],n))return!0;return!1},LineString:function(t,n){return fl(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(fl(e[r],n))return!0;return!1},Polygon:function(t,n){return ll(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(ll(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(cl(e[r],n))return!0;return!1}};function cl(t,n){return!(!t||!al.hasOwnProperty(t.type))&&al[t.type](t,n)}function sl(t,n){return 0===ol(t,n)}function fl(t,n){for(var e,r,i,o=0,u=t.length;o<u;o++){if(0===(r=ol(t[o],n)))return!0;if(o>0&&(i=ol(t[o],t[o-1]))>0&&e<=i&&r<=i&&(e+r-i)*(1-Math.pow((e-r)/i,2))<Ec*i)return!0;e=r}return!1}function ll(t,n){return!!Df(t.map(hl),pl(n))}function hl(t){return(t=t.map(pl)).pop(),t}function pl(t){return[t[0]*Pc,t[1]*Pc]}function dl(t,n){return(t&&ul.hasOwnProperty(t.type)?ul[t.type]:cl)(t,n)}function vl(t,n,e){var r=S(t,n-Nc,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function yl(t,n,e){var r=S(t,n-Nc,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function bl(){var t,n,e,r,i,o,u,a,c,s,f,l,h=10,p=h,d=90,v=360,y=2.5;function b(){return{type:"MultiLineString",coordinates:g()}}function g(){return S(Dc(r/d)*d,e,d).map(f).concat(S(Dc(a/v)*v,u,v).map(l)).concat(S(Dc(n/h)*h,t,h).filter((function(t){return zc(t%d)>Nc})).map(c)).concat(S(Dc(o/p)*p,i,p).filter((function(t){return zc(t%v)>Nc})).map(s))}return b.lines=function(){return g().map((function(t){return{type:"LineString",coordinates:t}}))},b.outline=function(){return{type:"Polygon",coordinates:[f(r).concat(l(u).slice(1),f(e).reverse().slice(1),l(a).reverse().slice(1))]}},b.extent=function(t){return arguments.length?b.extentMajor(t).extentMinor(t):b.extentMinor()},b.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),b.precision(y)):[[r,a],[e,u]]},b.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),b.precision(y)):[[n,o],[t,i]]},b.step=function(t){return arguments.length?b.stepMajor(t).stepMinor(t):b.stepMinor()},b.stepMajor=function(t){return arguments.length?(d=+t[0],v=+t[1],b):[d,v]},b.stepMinor=function(t){return arguments.length?(h=+t[0],p=+t[1],b):[h,p]},b.precision=function(h){return arguments.length?(y=+h,c=vl(o,i,90),s=yl(n,t,y),f=vl(a,u,90),l=yl(r,e,y),b):y},b.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function gl(){return bl()()}function _l(t,n){var e=t[0]*Pc,r=t[1]*Pc,i=n[0]*Pc,o=n[1]*Pc,u=Lc(r),a=Uc(r),c=Lc(o),s=Uc(o),f=u*Lc(e),l=u*Uc(e),h=c*Lc(i),p=c*Uc(i),d=2*Hc(Zc(Xc(o-r)+u*c*Xc(i-e))),v=Uc(d),y=d?function(t){var n=Uc(t*=d)/v,e=Uc(d-t)/v,r=e*f+n*h,i=e*l+n*p,o=e*a+n*s;return[Oc(i,r)*Fc,Oc(o,Zc(r*r+i*i))*Fc]}:function(){return[e*Fc,r*Fc]};return y.distance=d,y}function ml(t){return t}var xl,wl,Sl,Ml,Tl=wc(),Nl=wc(),El={point:$c,lineStart:$c,lineEnd:$c,polygonStart:function(){El.lineStart=Al,El.lineEnd=Il},polygonEnd:function(){El.lineStart=El.lineEnd=El.point=$c,Tl.add(zc(Nl)),Nl.reset()},result:function(){var t=Tl/2;return Tl.reset(),t}};function Al(){El.point=kl}function kl(t,n){El.point=Cl,xl=Sl=t,wl=Ml=n}function Cl(t,n){Nl.add(Ml*t-Sl*n),Sl=t,Ml=n}function Il(){Cl(xl,wl)}const Fl=El;var Pl=1/0,zl=Pl,jl=-Pl,Ol=jl;const Ll={point:function(t,n){t<Pl&&(Pl=t),t>jl&&(jl=t),n<zl&&(zl=n),n>Ol&&(Ol=n)},lineStart:$c,lineEnd:$c,polygonStart:$c,polygonEnd:$c,result:function(){var t=[[Pl,zl],[jl,Ol]];return jl=Ol=-(zl=Pl=1/0),t}};var Dl,Rl,Vl,Bl,Ul=0,ql=0,Zl=0,Yl=0,Wl=0,Hl=0,Xl=0,$l=0,Gl=0,Kl={point:Ql,lineStart:Jl,lineEnd:eh,polygonStart:function(){Kl.lineStart=rh,Kl.lineEnd=ih},polygonEnd:function(){Kl.point=Ql,Kl.lineStart=Jl,Kl.lineEnd=eh},result:function(){var t=Gl?[Xl/Gl,$l/Gl]:Hl?[Yl/Hl,Wl/Hl]:Zl?[Ul/Zl,ql/Zl]:[NaN,NaN];return Ul=ql=Zl=Yl=Wl=Hl=Xl=$l=Gl=0,t}};function Ql(t,n){Ul+=t,ql+=n,++Zl}function Jl(){Kl.point=th}function th(t,n){Kl.point=nh,Ql(Vl=t,Bl=n)}function nh(t,n){var e=t-Vl,r=n-Bl,i=Zc(e*e+r*r);Yl+=i*(Vl+t)/2,Wl+=i*(Bl+n)/2,Hl+=i,Ql(Vl=t,Bl=n)}function eh(){Kl.point=Ql}function rh(){Kl.point=oh}function ih(){uh(Dl,Rl)}function oh(t,n){Kl.point=uh,Ql(Dl=Vl=t,Rl=Bl=n)}function uh(t,n){var e=t-Vl,r=n-Bl,i=Zc(e*e+r*r);Yl+=i*(Vl+t)/2,Wl+=i*(Bl+n)/2,Hl+=i,Xl+=(i=Bl*t-Vl*n)*(Vl+t),$l+=i*(Bl+n),Gl+=3*i,Ql(Vl=t,Bl=n)}const ah=Kl;function ch(t){this._context=t}ch.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Ic)}},result:$c};var sh,fh,lh,hh,ph,dh=wc(),vh={point:$c,lineStart:function(){vh.point=yh},lineEnd:function(){sh&&bh(fh,lh),vh.point=$c},polygonStart:function(){sh=!0},polygonEnd:function(){sh=null},result:function(){var t=+dh;return dh.reset(),t}};function yh(t,n){vh.point=bh,fh=hh=t,lh=ph=n}function bh(t,n){hh-=t,ph-=n,dh.add(Zc(hh*hh+ph*ph)),hh=t,ph=n}const gh=vh;function _h(){this._string=[]}function mh(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function xh(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),ns(t,e(r))),r.result()}return o.area=function(t){return ns(t,e(Fl)),Fl.result()},o.measure=function(t){return ns(t,e(gh)),gh.result()},o.bounds=function(t){return ns(t,e(Ll)),Ll.result()},o.centroid=function(t){return ns(t,e(ah)),ah.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,ml):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new _h):new ch(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)}function wh(t){return{stream:Sh(t)}}function Sh(t){return function(n){var e=new Mh;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Mh(){}function Th(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),ns(e,t.stream(Ll)),n(Ll.result()),null!=r&&t.clipExtent(r),t}function Nh(t,n,e){return Th(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])}),e)}function Eh(t,n,e){return Nh(t,[[0,0],n],e)}function Ah(t,n,e){return Th(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])}),e)}function kh(t,n,e){return Th(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])}),e)}_h.prototype={_radius:4.5,_circle:mh(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=mh(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},Mh.prototype={constructor:Mh,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Ch=Lc(30*Pc);function Ih(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,s,f,l,h,p,d,v,y){var b=s-r,g=f-i,_=b*b+g*g;if(_>4*n&&v--){var m=u+h,x=a+p,w=c+d,S=Zc(m*m+x*x+w*w),M=Hc(w/=S),T=zc(zc(w)-1)<Nc||zc(o-l)<Nc?(o+l)/2:Oc(x,m),N=t(T,M),E=N[0],A=N[1],k=E-r,C=A-i,I=g*k-b*C;(I*I/_>n||zc((b*k+g*C)/_-.5)>.3||u*h+a*p+c*d<Ch)&&(e(r,i,o,u,a,c,E,A,T,m/=S,x/=S,w,v,y),y.point(E,A),e(E,A,T,m,x,w,s,f,l,h,p,d,v,y))}}return function(n){var r,i,o,u,a,c,s,f,l,h,p,d,v={point:y,lineStart:b,lineEnd:_,polygonStart:function(){n.polygonStart(),v.lineStart=m},polygonEnd:function(){n.polygonEnd(),v.lineStart=b}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function b(){f=NaN,v.point=g,n.lineStart()}function g(r,i){var o=ys([r,i]),u=t(r,i);e(f,l,s,h,p,d,f=u[0],l=u[1],s=r,h=o[0],p=o[1],d=o[2],16,n),n.point(f,l)}function _(){v.point=y,n.lineEnd()}function m(){b(),v.point=x,v.lineEnd=w}function x(t,n){g(r=t,n),i=f,o=l,u=h,a=p,c=d,v.point=g}function w(){e(f,l,s,h,p,d,i,o,r,u,a,c,16,n),v.lineEnd=_,_()}return v}}(t,n):function(t){return Sh({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var Fh=Sh({point:function(t,n){this.stream.point(t*Pc,n*Pc)}});function Ph(t,n,e,r,i){function o(o,u){return[n+t*(o*=r),e-t*(u*=i)]}return o.invert=function(o,u){return[(o-n)/t*r,(e-u)/t*i]},o}function zh(t,n,e,r,i,o){var u=Lc(o),a=Uc(o),c=u*t,s=a*t,f=u/t,l=a/t,h=(a*e-u*n)/t,p=(a*n+u*e)/t;function d(t,o){return[c*(t*=r)-s*(o*=i)+n,e-s*t-c*o]}return d.invert=function(t,n){return[r*(f*t-l*n+h),i*(p-l*t-f*n)]},d}function jh(t){return Oh((function(){return t}))()}function Oh(t){var n,e,r,i,o,u,a,c,s,f,l=150,h=480,p=250,d=0,v=0,y=0,b=0,g=0,_=0,m=1,x=1,w=null,S=Uf,M=null,T=ml,N=.5;function E(t){return c(t[0]*Pc,t[1]*Pc)}function A(t){return(t=c.invert(t[0],t[1]))&&[t[0]*Fc,t[1]*Fc]}function k(){var t=zh(l,0,0,m,x,_).apply(null,n(d,v)),r=(_?zh:Ph)(l,h-t[0],p-t[1],m,x,_);return e=Sf(y,b,g),a=xf(n,r),c=xf(e,a),u=Ih(a,N),C()}function C(){return s=f=null,E}return E.stream=function(t){return s&&f===t?s:s=Fh(function(t){return Sh({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(S(u(T(f=t)))))},E.preclip=function(t){return arguments.length?(S=t,w=void 0,C()):S},E.postclip=function(t){return arguments.length?(T=t,M=r=i=o=null,C()):T},E.clipAngle=function(t){return arguments.length?(S=+t?qf(w=t*Pc):(w=null,Uf),C()):w*Fc},E.clipExtent=function(t){return arguments.length?(T=null==t?(M=r=i=o=null,ml):Wf(M=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),C()):null==M?null:[[M,r],[i,o]]},E.scale=function(t){return arguments.length?(l=+t,k()):l},E.translate=function(t){return arguments.length?(h=+t[0],p=+t[1],k()):[h,p]},E.center=function(t){return arguments.length?(d=t[0]%360*Pc,v=t[1]%360*Pc,k()):[d*Fc,v*Fc]},E.rotate=function(t){return arguments.length?(y=t[0]%360*Pc,b=t[1]%360*Pc,g=t.length>2?t[2]%360*Pc:0,k()):[y*Fc,b*Fc,g*Fc]},E.angle=function(t){return arguments.length?(_=t%360*Pc,k()):_*Fc},E.reflectX=function(t){return arguments.length?(m=t?-1:1,k()):m<0},E.reflectY=function(t){return arguments.length?(x=t?-1:1,k()):x<0},E.precision=function(t){return arguments.length?(u=Ih(a,N=t*t),C()):Zc(N)},E.fitExtent=function(t,n){return Nh(E,t,n)},E.fitSize=function(t,n){return Eh(E,t,n)},E.fitWidth=function(t,n){return Ah(E,t,n)},E.fitHeight=function(t,n){return kh(E,t,n)},function(){return n=t.apply(this,arguments),E.invert=n.invert&&A,k()}}function Lh(t){var n=0,e=Ac/3,r=Oh(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Pc,e=t[1]*Pc):[n*Fc,e*Fc]},i}function Dh(t,n){var e=Uc(t),r=(e+Uc(n))/2;if(zc(r)<Nc)return function(t){var n=Lc(t);function e(t,e){return[t*n,Uc(e)/n]}return e.invert=function(t,e){return[t/n,Hc(e*n)]},e}(t);var i=1+e*(2*r-e),o=Zc(i)/r;function u(t,n){var e=Zc(i-2*r*Uc(n))/r;return[e*Uc(t*=r),o-e*Lc(t)]}return u.invert=function(t,n){var e=o-n,u=Oc(t,zc(e))*qc(e);return e*r<0&&(u-=Ac*qc(t)*qc(e)),[u/r,Hc((i-(t*t+e*e)*r*r)/(2*r))]},u}function Rh(){return Lh(Dh).scale(155.424).center([0,33.6442])}function Vh(){return Rh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function Bh(){var t,n,e,r,i,o,u=Vh(),a=Rh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Rh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,n){o=[t,n]}};function f(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function l(){return t=n=null,f}return f.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},f.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},f.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),l()):u.precision()},f.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),f.translate(u.translate())):u.scale()},f.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],f=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,f-.238*n],[o+.455*n,f+.238*n]]).stream(s),r=a.translate([o-.307*n,f+.201*n]).clipExtent([[o-.425*n+Nc,f+.12*n+Nc],[o-.214*n-Nc,f+.234*n-Nc]]).stream(s),i=c.translate([o-.205*n,f+.212*n]).clipExtent([[o-.214*n+Nc,f+.166*n+Nc],[o-.115*n-Nc,f+.234*n-Nc]]).stream(s),l()},f.fitExtent=function(t,n){return Nh(f,t,n)},f.fitSize=function(t,n){return Eh(f,t,n)},f.fitWidth=function(t,n){return Ah(f,t,n)},f.fitHeight=function(t,n){return kh(f,t,n)},f.scale(1070)}function Uh(t){return function(n,e){var r=Lc(n),i=Lc(e),o=t(r*i);return[o*i*Uc(n),o*Uc(e)]}}function qh(t){return function(n,e){var r=Zc(n*n+e*e),i=t(r),o=Uc(i),u=Lc(i);return[Oc(n*o,r*u),Hc(r&&e*o/r)]}}var Zh=Uh((function(t){return Zc(2/(1+t))}));function Yh(){return jh(Zh).scale(124.75).clipAngle(179.999)}Zh.invert=qh((function(t){return 2*Hc(t/2)}));var Wh=Uh((function(t){return(t=Wc(t))&&t/Uc(t)}));function Hh(){return jh(Wh).scale(79.4188).clipAngle(179.999)}function Xh(t,n){return[t,Vc(Yc((kc+n)/2))]}function $h(){return Gh(Xh).scale(961/Ic)}function Gh(t){var n,e,r,i=jh(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,s=null;function f(){var o=Ac*u(),a=i(Ef(i.rotate()).invert([0,0]));return c(null==s?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===Xh?[[Math.max(a[0]-o,s),n],[Math.min(a[0]+o,e),r]]:[[s,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),f()):u()},i.translate=function(t){return arguments.length?(a(t),f()):a()},i.center=function(t){return arguments.length?(o(t),f()):o()},i.clipExtent=function(t){return arguments.length?(null==t?s=n=e=r=null:(s=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),f()):null==s?null:[[s,n],[e,r]]},f()}function Kh(t){return Yc((kc+t)/2)}function Qh(t,n){var e=Lc(t),r=t===n?Uc(t):Vc(e/Lc(n))/Vc(Kh(n)/Kh(t)),i=e*Bc(Kh(t),r)/r;if(!r)return Xh;function o(t,n){i>0?n<-kc+Nc&&(n=-kc+Nc):n>kc-Nc&&(n=kc-Nc);var e=i/Bc(Kh(n),r);return[e*Uc(r*t),i-e*Lc(r*t)]}return o.invert=function(t,n){var e=i-n,o=qc(r)*Zc(t*t+e*e),u=Oc(t,zc(e))*qc(e);return e*r<0&&(u-=Ac*qc(t)*qc(e)),[u/r,2*jc(Bc(i/o,1/r))-kc]},o}function Jh(){return Lh(Qh).scale(109.5).parallels([30,30])}function tp(t,n){return[t,n]}function np(){return jh(tp).scale(152.63)}function ep(t,n){var e=Lc(t),r=t===n?Uc(t):(e-Lc(n))/(n-t),i=e/r+t;if(zc(r)<Nc)return tp;function o(t,n){var e=i-n,o=r*t;return[e*Uc(o),i-e*Lc(o)]}return o.invert=function(t,n){var e=i-n,o=Oc(t,zc(e))*qc(e);return e*r<0&&(o-=Ac*qc(t)*qc(e)),[o/r,i-qc(r)*Zc(t*t+e*e)]},o}function rp(){return Lh(ep).scale(131.154).center([0,13.9389])}Wh.invert=qh((function(t){return t})),Xh.invert=function(t,n){return[t,2*jc(Rc(n))-kc]},tp.invert=tp;var ip=1.340264,op=-.081106,up=893e-6,ap=.003796,cp=Zc(3)/2;function sp(t,n){var e=Hc(cp*Uc(n)),r=e*e,i=r*r*r;return[t*Lc(e)/(cp*(ip+3*op*r+i*(7*up+9*ap*r))),e*(ip+op*r+i*(up+ap*r))]}function fp(){return jh(sp).scale(177.158)}function lp(t,n){var e=Lc(n),r=Lc(t)*e;return[e*Uc(t)/r,Uc(n)/r]}function hp(){return jh(lp).scale(144.049).clipAngle(60)}function pp(){var t,n,e,r,i,o,u,a=1,c=0,s=0,f=1,l=1,h=0,p=null,d=1,v=1,y=Sh({point:function(t,n){var e=_([t,n]);this.stream.point(e[0],e[1])}}),b=ml;function g(){return d=a*f,v=a*l,o=u=null,_}function _(e){var r=e[0]*d,i=e[1]*v;if(h){var o=i*t-r*n;r=r*t+i*n,i=o}return[r+c,i+s]}return _.invert=function(e){var r=e[0]-c,i=e[1]-s;if(h){var o=i*t+r*n;r=r*t-i*n,i=o}return[r/d,i/v]},_.stream=function(t){return o&&u===t?o:o=y(b(u=t))},_.postclip=function(t){return arguments.length?(b=t,p=e=r=i=null,g()):b},_.clipExtent=function(t){return arguments.length?(b=null==t?(p=e=r=i=null,ml):Wf(p=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),g()):null==p?null:[[p,e],[r,i]]},_.scale=function(t){return arguments.length?(a=+t,g()):a},_.translate=function(t){return arguments.length?(c=+t[0],s=+t[1],g()):[c,s]},_.angle=function(e){return arguments.length?(n=Uc(h=e%360*Pc),t=Lc(h),g()):h*Fc},_.reflectX=function(t){return arguments.length?(f=t?-1:1,g()):f<0},_.reflectY=function(t){return arguments.length?(l=t?-1:1,g()):l<0},_.fitExtent=function(t,n){return Nh(_,t,n)},_.fitSize=function(t,n){return Eh(_,t,n)},_.fitWidth=function(t,n){return Ah(_,t,n)},_.fitHeight=function(t,n){return kh(_,t,n)},_}function dp(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function vp(){return jh(dp).scale(175.295)}function yp(t,n){return[Lc(n)*Uc(t),Uc(n)]}function bp(){return jh(yp).scale(249.5).clipAngle(90.000001)}function gp(t,n){var e=Lc(n),r=1+Lc(t)*e;return[e*Uc(t)/r,Uc(n)/r]}function _p(){return jh(gp).scale(250).clipAngle(142)}function mp(t,n){return[Vc(Yc((kc+n)/2)),-t]}function xp(){var t=Gh(mp),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}function wp(t,n){return t.parent===n.parent?1:2}function Sp(t,n){return t+n.x}function Mp(t,n){return Math.max(t,n.y)}function Tp(){var t=wp,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Sp,0)/t.length}(e),n.y=function(t){return 1+t.reduce(Mp,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)}));var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),s=a.x-t(a,c)/2,f=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-s)/(f-s)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function Np(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Ep(t,n){var e,r,i,o,u,a=new Ip(t),c=+t.value&&(a.value=t.value),s=[a];for(null==n&&(n=Ap);e=s.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)s.push(r=e.children[o]=new Ip(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(Cp)}function Ap(t){return t.children}function kp(t){t.data=t.data.data}function Cp(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Ip(t){this.data=t,this.depth=this.height=0,this.parent=null}sp.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(ip+op*i+o*(up+ap*i))-n)/(ip+3*op*i+o*(7*up+9*ap*i)))*r)*i*i,!(zc(e)<Ec));++u);return[cp*t*(ip+3*op*i+o*(7*up+9*ap*i))/Lc(r),Hc(Uc(r)/cp)]},lp.invert=qh(jc),dp.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(zc(e)>Nc&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]},yp.invert=qh(Hc),gp.invert=qh((function(t){return 2*jc(t)})),mp.invert=function(t,n){return[-n,2*jc(Rc(t))-kc]},Ip.prototype=Ep.prototype={constructor:Ip,count:function(){return this.eachAfter(Np)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return Ep(this).eachBefore(kp)}};var Fp=Array.prototype.slice;function Pp(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Fp.call(t))).length,o=[];r<i;)n=t[r],e&&Op(e,n)?++r:(e=Dp(o=zp(o,n)),r=0);return e}function zp(t,n){var e,r;if(Lp(n,t))return[n];for(e=0;e<t.length;++e)if(jp(n,t[e])&&Lp(Rp(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(jp(Rp(t[e],t[r]),n)&&jp(Rp(t[e],n),t[r])&&jp(Rp(t[r],n),t[e])&&Lp(Vp(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function jp(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Op(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Lp(t,n){for(var e=0;e<n.length;++e)if(!Op(t,n[e]))return!1;return!0}function Dp(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return Rp(t[0],t[1]);case 3:return Vp(t[0],t[1],t[2])}}function Rp(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,s=u-r,f=a-i,l=Math.sqrt(c*c+s*s);return{x:(e+o+c/l*f)/2,y:(r+u+s/l*f)/2,r:(l+i+a)/2}}function Vp(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,s=e.x,f=e.y,l=e.r,h=r-u,p=r-s,d=i-a,v=i-f,y=c-o,b=l-o,g=r*r+i*i-o*o,_=g-u*u-a*a+c*c,m=g-s*s-f*f+l*l,x=p*d-h*v,w=(d*m-v*_)/(2*x)-r,S=(v*y-d*b)/x,M=(p*_-h*m)/(2*x)-i,T=(h*b-p*y)/x,N=S*S+T*T-1,E=2*(o+w*S+M*T),A=w*w+M*M-o*o,k=-(N?(E+Math.sqrt(E*E-4*N*A))/(2*N):A/E);return{x:r+w+S*k,y:i+M+T*k,r:k}}function Bp(t,n,e){var r,i,o,u,a=t.x-n.x,c=t.y-n.y,s=a*a+c*c;s?(i=n.r+e.r,i*=i,u=t.r+e.r,i>(u*=u)?(r=(s+u-i)/(2*s),o=Math.sqrt(Math.max(0,u/s-r*r)),e.x=t.x-r*a-o*c,e.y=t.y-r*c+o*a):(r=(s+i-u)/(2*s),o=Math.sqrt(Math.max(0,i/s-r*r)),e.x=n.x+r*a-o*c,e.y=n.y+r*c+o*a)):(e.x=n.x+e.r,e.y=n.y)}function Up(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function qp(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Zp(t){this._=t,this.next=null,this.previous=null}function Yp(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,s,f,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Bp(e,n,r=t[2]),n=new Zp(n),e=new Zp(e),r=new Zp(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){Bp(n._,e._,r=t[a]),r=new Zp(r),c=e.next,s=n.previous,f=e._.r,l=n._.r;do{if(f<=l){if(Up(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}f+=c._.r,c=c.next}else{if(Up(s._,r._)){(n=s).next=e,e.previous=n,--a;continue t}l+=s._.r,s=s.previous}}while(c!==s.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=qp(n);(r=r.next)!==e;)(u=qp(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=Pp(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}function Wp(t){return Yp(t),t}function Hp(t){return null==t?null:Xp(t)}function Xp(t){if("function"!=typeof t)throw new Error;return t}function $p(){return 0}function Gp(t){return function(){return t}}function Kp(t){return Math.sqrt(t.value)}function Qp(){var t=null,n=1,e=1,r=$p;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Jp(t)).eachAfter(td(r,.5)).eachBefore(nd(1)):i.eachBefore(Jp(Kp)).eachAfter(td($p,1)).eachAfter(td(r,i.r/Math.min(n,e))).eachBefore(nd(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Hp(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Gp(+t),i):r},i}function Jp(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function td(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Yp(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function nd(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function ed(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function rd(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,s=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*s}function id(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&rd(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(ed),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i}var od={depth:-1},ud={};function ad(t){return t.id}function cd(t){return t.parentId}function sd(){var t=ad,n=cd;function e(e){var r,i,o,u,a,c,s,f=e.length,l=new Array(f),h={};for(i=0;i<f;++i)r=e[i],a=l[i]=new Ip(r),null!=(c=t(r,i,e))&&(c+="")&&(h[s="$"+(a.id=c)]=s in h?ud:a);for(i=0;i<f;++i)if(a=l[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h["$"+c]))throw new Error("missing: "+c);if(u===ud)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=od,o.eachBefore((function(t){t.depth=t.parent.depth+1,--f})).eachBefore(Cp),o.parent=null,f>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Xp(n),e):t},e.parentId=function(t){return arguments.length?(n=Xp(t),e):n},e}function fd(t,n){return t.parent===n.parent?1:2}function ld(t){var n=t.children;return n?n[0]:t.t}function hd(t){var n=t.children;return n?n[n.length-1]:t.t}function pd(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function dd(t,n,e){return t.a.parent===n.parent?t.a:e}function vd(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function yd(){var t=fd,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new vd(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new vd(r[i],i)),e.parent=n;return(u.parent=new vd(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var s=i,f=i,l=i;i.eachBefore((function(t){t.x<s.x&&(s=t),t.x>f.x&&(f=t),t.depth>l.depth&&(l=t)}));var h=s===f?1:t(s,f)/2,p=h-s.x,d=n/(f.x+h+p),v=e/(l.depth||1);i.eachBefore((function(t){t.x=(t.x+p)*d,t.y=t.depth*v}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],s=o.m,f=u.m,l=a.m,h=c.m;a=hd(a),o=ld(o),a&&o;)c=ld(c),(u=hd(u)).a=n,(i=a.z+l-o.z-s+t(a._,o._))>0&&(pd(dd(a,n,r),n,i),s+=i,f+=i),l+=a.m,s+=o.m,h+=c.m,f+=u.m;a&&!hd(u)&&(u.t=a,u.m+=l-f),o&&!ld(c)&&(c.t=o,c.m+=s-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function bd(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,s=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*s}vd.prototype=Object.create(Ip.prototype);var gd=(1+Math.sqrt(5))/2;function _d(t,n,e,r,i,o){for(var u,a,c,s,f,l,h,p,d,v,y,b=[],g=n.children,_=0,m=0,x=g.length,w=n.value;_<x;){c=i-e,s=o-r;do{f=g[m++].value}while(!f&&m<x);for(l=h=f,y=f*f*(v=Math.max(s/c,c/s)/(w*t)),d=Math.max(h/y,y/l);m<x;++m){if(f+=a=g[m].value,a<l&&(l=a),a>h&&(h=a),y=f*f*v,(p=Math.max(h/y,y/l))>d){f-=a;break}d=p}b.push(u={value:f,dice:c<s,children:g.slice(_,m)}),u.dice?rd(u,e,r,i,w?r+=s*f/w:o):bd(u,e,r,w?e+=c*f/w:i,o),w-=f,_=m}return b}const md=function t(n){function e(t,e,r,i,o){_d(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(gd);function xd(){var t=md,n=!1,e=1,r=1,i=[0],o=$p,u=$p,a=$p,c=$p,s=$p;function f(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(ed),t}function l(n){var e=i[n.depth],r=n.x0+e,f=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<f&&(f=h=(f+h)/2),n.x0=r,n.y0=f,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=s(n)-e,f+=u(n)-e,(l-=a(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<f&&(f=h=(f+h)/2),t(n,r,f,l,h))}return f.round=function(t){return arguments.length?(n=!!t,f):n},f.size=function(t){return arguments.length?(e=+t[0],r=+t[1],f):[e,r]},f.tile=function(n){return arguments.length?(t=Xp(n),f):t},f.padding=function(t){return arguments.length?f.paddingInner(t).paddingOuter(t):f.paddingInner()},f.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Gp(+t),f):o},f.paddingOuter=function(t){return arguments.length?f.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):f.paddingTop()},f.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:Gp(+t),f):u},f.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Gp(+t),f):a},f.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Gp(+t),f):c},f.paddingLeft=function(t){return arguments.length?(s="function"==typeof t?t:Gp(+t),f):s},f}function wd(t,n,e,r,i){var o,u,a=t.children,c=a.length,s=new Array(c+1);for(s[0]=u=o=0;o<c;++o)s[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var f=a[n];return f.x0=i,f.y0=o,f.x1=u,void(f.y1=c)}for(var l=s[n],h=r/2+l,p=n+1,d=e-1;p<d;){var v=p+d>>>1;s[v]<h?p=v+1:d=v}h-s[p-1]<s[p]-h&&n+1<p&&--p;var y=s[p]-l,b=r-y;if(u-i>c-o){var g=(i*b+u*y)/r;t(n,p,y,i,o,g,c),t(p,e,b,g,o,u,c)}else{var _=(o*b+c*y)/r;t(n,p,y,i,o,u,_),t(p,e,b,i,_,u,c)}}(0,c,t.value,n,e,r,i)}function Sd(t,n,e,r,i){(1&t.depth?bd:rd)(t,n,e,r,i)}const Md=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,s,f,l=-1,h=u.length,p=t.value;++l<h;){for(c=(a=u[l]).children,s=a.value=0,f=c.length;s<f;++s)a.value+=c[s].value;a.dice?rd(a,e,r,i,r+=(o-r)*a.value/p):bd(a,e,r,e+=(i-e)*a.value/p,o),p-=a.value}else t._squarify=u=_d(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(gd);function Td(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}function Nd(t,n){var e=pe(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}}function Ed(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}var Ad=Math.SQRT2;function kd(t){return((t=Math.exp(t))+1/t)/2}function Cd(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],s=n[2],f=a-i,l=c-o,h=f*f+l*l;if(h<1e-12)r=Math.log(s/u)/Ad,e=function(t){return[i+t*f,o+t*l,u*Math.exp(Ad*t*r)]};else{var p=Math.sqrt(h),d=(s*s-u*u+4*h)/(2*u*2*p),v=(s*s-u*u-4*h)/(2*s*2*p),y=Math.log(Math.sqrt(d*d+1)-d),b=Math.log(Math.sqrt(v*v+1)-v);r=(b-y)/Ad,e=function(t){var n,e=t*r,a=kd(y),c=u/(2*p)*(a*(n=Ad*e+y,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(y));return[i+c*f,o+c*l,u*a/kd(Ad*e+y)]}}return e.duration=1e3*r,e}function Id(t){return function(n,e){var r=t((n=oe(n)).h,(e=oe(e)).h),i=de(n.s,e.s),o=de(n.l,e.l),u=de(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}const Fd=Id(pe);var Pd=Id(de);function zd(t,n){var e=de((t=To(t)).l,(n=To(n)).l),r=de(t.a,n.a),i=de(t.b,n.b),o=de(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function jd(t){return function(n,e){var r=t((n=Po(n)).h,(e=Po(e)).h),i=de(n.c,e.c),o=de(n.l,e.l),u=de(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}const Od=jd(pe);var Ld=jd(de);function Dd(t){return function n(e){function r(n,r){var i=t((n=Yo(n)).h,(r=Yo(r)).h),o=de(n.s,r.s),u=de(n.l,r.l),a=de(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}const Rd=Dd(pe);var Vd=Dd(de);function Bd(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}function Ud(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e}function qd(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2}function Zd(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]}function Yd(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function Wd(t,n){return t[0]-n[0]||t[1]-n[1]}function Hd(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&Yd(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function Xd(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Wd),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Hd(r),u=Hd(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],s=[];for(n=o.length-1;n>=0;--n)s.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)s.push(t[r[u[n]][2]]);return s}function $d(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],s=o[1],f=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>a!=s>a&&u<(c-e)*(a-r)/(s-r)+e&&(f=!f),c=e,s=r;return f}function Gd(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c}function Kd(){return Math.random()}const Qd=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Kd),Jd=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Kd),tv=function t(n){function e(){var t=Jd.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Kd),nv=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Kd),ev=function t(n){function e(t){var e=nv.source(n)(t);return function(){return e()/t}}return e.source=t,e}(Kd),rv=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Kd);function iv(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function ov(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var uv=Array.prototype,av=uv.map,cv=uv.slice,sv={name:"implicit"};function fv(){var t=eo(),n=[],e=[],r=sv;function i(i){var o=i+"",u=t.get(o);if(!u){if(r!==sv)return r;t.set(o,u=n.push(i))}return e[(u-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=eo();for(var r,o,u=-1,a=e.length;++u<a;)t.has(o=(r=e[u])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=cv.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return fv(n,e).unknown(r)},iv.apply(i,arguments),i}function lv(){var t,n,e=fv().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,s=.5;function f(){var e=r().length,f=o[1]<o[0],l=o[f-0],h=o[1-f];t=(h-l)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),l+=(h-l-t*(e-a))*s,n=t*(1-a),u&&(l=Math.round(l),n=Math.round(n));var p=S(e).map((function(n){return l+t*n}));return i(f?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),f()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],f()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,f()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,f()):u},e.padding=function(t){return arguments.length?(a=Math.min(1,c=+t),f()):a},e.paddingInner=function(t){return arguments.length?(a=Math.min(1,t),f()):a},e.paddingOuter=function(t){return arguments.length?(c=+t,f()):c},e.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),f()):s},e.copy=function(){return lv(r(),o).round(u).paddingInner(a).paddingOuter(c).align(s)},iv.apply(f(),arguments)}function hv(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return hv(n())},t}function pv(){return hv(lv.apply(null,arguments).paddingInner(1))}function dv(t){return+t}var vv=[0,1];function yv(t){return t}function bv(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function gv(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function _v(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=bv(i,r),o=e(u,o)):(r=bv(r,i),o=e(o,u)),function(t){return o(r(t))}}function mv(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=bv(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=s(t,n,1,r)-1;return o[e](i[e](n))}}function xv(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function wv(){var t,n,e,r,i,o,u=vv,a=vv,c=ke,s=yv;function f(){return r=Math.min(u.length,a.length)>2?mv:_v,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,c)))(t(s(n)))}return l.invert=function(e){return s(n((o||(o=r(a,u.map(t),Me)))(e)))},l.domain=function(t){return arguments.length?(u=av.call(t,dv),s===yv||(s=gv(u)),f()):u.slice()},l.range=function(t){return arguments.length?(a=cv.call(t),f()):a.slice()},l.rangeRound=function(t){return a=cv.call(t),c=Ed,f()},l.clamp=function(t){return arguments.length?(s=t?gv(u):yv,l):s!==yv},l.interpolate=function(t){return arguments.length?(c=t,f()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,f()}}function Sv(t,n){return wv()(t,n)}function Mv(t,n,e,r){var i,o=k(t,n,e);switch((r=ac(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=mc(o,u))||(r.precision=i),dc(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=xc(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=_c(o))||(r.precision=i-2*("%"===r.type))}return pc(r)}function Tv(t){var n=t.domain;return t.ticks=function(t){var e=n();return E(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Mv(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=A(a,c,e))>0?r=A(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=A(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function Nv(){var t=Sv(yv,yv);return t.copy=function(){return xv(t,Nv())},iv.apply(t,arguments),Tv(t)}function Ev(t){var n;function e(t){return isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=av.call(n,dv),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Ev(t).unknown(n)},t=arguments.length?av.call(t,dv):[0,1],Tv(e)}function Av(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t}function kv(t){return Math.log(t)}function Cv(t){return Math.exp(t)}function Iv(t){return-Math.log(-t)}function Fv(t){return-Math.exp(-t)}function Pv(t){return isFinite(t)?+("1e"+t):t<0?0:t}function zv(t){return function(n){return-t(-n)}}function jv(t){var n,e,r=t(kv,Cv),i=r.domain,o=10;function u(){return n=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}(o),e=function(t){return 10===t?Pv:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}(o),i()[0]<0?(n=zv(n),e=zv(e),t(Iv,Fv)):t(kv,Cv),r}return r.base=function(t){return arguments.length?(o=+t,u()):o},r.domain=function(t){return arguments.length?(i(t),u()):i()},r.ticks=function(t){var r,u=i(),a=u[0],c=u[u.length-1];(r=c<a)&&(h=a,a=c,c=h);var s,f,l,h=n(a),p=n(c),d=null==t?10:+t,v=[];if(!(o%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,a>0){for(;h<p;++h)for(f=1,s=e(h);f<o;++f)if(!((l=s*f)<a)){if(l>c)break;v.push(l)}}else for(;h<p;++h)for(f=o-1,s=e(h);f>=1;--f)if(!((l=s*f)<a)){if(l>c)break;v.push(l)}}else v=E(h,p,Math.min(p-h,d)).map(e);return r?v.reverse():v},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=pc(i)),t===1/0)return i;null==t&&(t=10);var u=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/e(Math.round(n(t)));return r*o<o-.5&&(r*=o),r<=u?i(t):""}},r.nice=function(){return i(Av(i(),{floor:function(t){return e(Math.floor(n(t)))},ceil:function(t){return e(Math.ceil(n(t)))}}))},r}function Ov(){var t=jv(wv()).domain([1,10]);return t.copy=function(){return xv(t,Ov()).base(t.base())},iv.apply(t,arguments),t}function Lv(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function Dv(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function Rv(t){var n=1,e=t(Lv(n),Dv(n));return e.constant=function(e){return arguments.length?t(Lv(n=+e),Dv(n)):n},Tv(e)}function Vv(){var t=Rv(wv());return t.copy=function(){return xv(t,Vv()).constant(t.constant())},iv.apply(t,arguments)}function Bv(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function Uv(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function qv(t){return t<0?-t*t:t*t}function Zv(t){var n=t(yv,yv),e=1;function r(){return 1===e?t(yv,yv):.5===e?t(Uv,qv):t(Bv(e),Bv(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},Tv(n)}function Yv(){var t=Zv(wv());return t.copy=function(){return xv(t,Yv()).exponent(t.exponent())},iv.apply(t,arguments),t}function Wv(){return Yv.apply(null,arguments).exponent(.5)}function Hv(){var t,n=[],e=[],r=[];function o(){var t=0,i=Math.max(1,e.length);for(r=new Array(i-1);++t<i;)r[t-1]=F(n,t/i);return u}function u(n){return isNaN(n=+n)?t:e[s(r,n)]}return u.invertExtent=function(t){var i=e.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:n[0],i<r.length?r[i]:n[n.length-1]]},u.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var e,r=0,u=t.length;r<u;++r)null==(e=t[r])||isNaN(e=+e)||n.push(e);return n.sort(i),o()},u.range=function(t){return arguments.length?(e=cv.call(t),o()):e.slice()},u.unknown=function(n){return arguments.length?(t=n,u):t},u.quantiles=function(){return r.slice()},u.copy=function(){return Hv().domain(n).range(e).unknown(t)},iv.apply(u,arguments)}function Xv(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function u(n){return n<=n?o[s(i,n,0,r)]:t}function a(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return u}return u.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],a()):[n,e]},u.range=function(t){return arguments.length?(r=(o=cv.call(t)).length-1,a()):o.slice()},u.invertExtent=function(t){var u=o.indexOf(t);return u<0?[NaN,NaN]:u<1?[n,i[0]]:u>=r?[i[r-1],e]:[i[u-1],i[u]]},u.unknown=function(n){return arguments.length?(t=n,u):u},u.thresholds=function(){return i.slice()},u.copy=function(){return Xv().domain([n,e]).range(o).unknown(t)},iv.apply(Tv(u),arguments)}function $v(){var t,n=[.5],e=[0,1],r=1;function i(i){return i<=i?e[s(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=cv.call(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=cv.call(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return $v().domain(n).range(e).unknown(t)},iv.apply(i,arguments)}var Gv=new Date,Kv=new Date;function Qv(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return Qv((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Gv.setTime(+n),Kv.setTime(+r),t(Gv),t(Kv),Math.floor(e(Gv,Kv))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Jv=Qv((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Jv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Qv((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};const ty=Jv;var ny=Jv.range,ey=Qv((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}));const ry=ey;var iy=ey.range,oy=1e3,uy=6e4,ay=36e5,cy=864e5,sy=6048e5;function fy(t){return Qv((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*uy)/sy}))}var ly=fy(0),hy=fy(1),py=fy(2),dy=fy(3),vy=fy(4),yy=fy(5),by=fy(6),gy=ly.range,_y=hy.range,my=py.range,xy=dy.range,wy=vy.range,Sy=yy.range,My=by.range,Ty=Qv((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*uy)/cy}),(function(t){return t.getDate()-1}));const Ny=Ty;var Ey=Ty.range,Ay=Qv((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*oy-t.getMinutes()*uy)}),(function(t,n){t.setTime(+t+n*ay)}),(function(t,n){return(n-t)/ay}),(function(t){return t.getHours()}));const ky=Ay;var Cy=Ay.range,Iy=Qv((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*oy)}),(function(t,n){t.setTime(+t+n*uy)}),(function(t,n){return(n-t)/uy}),(function(t){return t.getMinutes()}));const Fy=Iy;var Py=Iy.range,zy=Qv((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+n*oy)}),(function(t,n){return(n-t)/oy}),(function(t){return t.getUTCSeconds()}));const jy=zy;var Oy=zy.range,Ly=Qv((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));Ly.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Qv((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Ly:null};const Dy=Ly;var Ry=Ly.range;function Vy(t){return Qv((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/sy}))}var By=Vy(0),Uy=Vy(1),qy=Vy(2),Zy=Vy(3),Yy=Vy(4),Wy=Vy(5),Hy=Vy(6),Xy=By.range,$y=Uy.range,Gy=qy.range,Ky=Zy.range,Qy=Yy.range,Jy=Wy.range,tb=Hy.range,nb=Qv((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/cy}),(function(t){return t.getUTCDate()-1}));const eb=nb;var rb=nb.range,ib=Qv((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));ib.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Qv((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};const ob=ib;var ub=ib.range;function ab(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function cb(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function sb(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}function fb(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,s=wb(i),f=Sb(i),l=wb(o),h=Sb(o),p=wb(u),d=Sb(u),v=wb(a),y=Sb(a),b=wb(c),g=Sb(c),_={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Zb,e:Zb,f:$b,H:Yb,I:Wb,j:Hb,L:Xb,m:Gb,M:Kb,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Tg,s:Ng,S:Qb,u:Jb,U:tg,V:ng,w:eg,W:rg,x:null,X:null,y:ig,Y:og,Z:ug,"%":Mg},m={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:ag,e:ag,f:hg,H:cg,I:sg,j:fg,L:lg,m:pg,M:dg,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Tg,s:Ng,S:vg,u:yg,U:bg,V:gg,w:_g,W:mg,x:null,X:null,y:xg,Y:wg,Z:Sg,"%":Mg},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=b.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return M(t,n,e,r)},d:zb,e:zb,f:Vb,H:Ob,I:Ob,j:jb,L:Rb,m:Pb,M:Lb,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=f[r[0].toLowerCase()],e+r[0].length):-1},q:Fb,Q:Ub,s:qb,S:Db,u:Tb,U:Nb,V:Eb,w:Mb,W:Ab,x:function(t,n,r){return M(t,e,n,r)},X:function(t,n,e){return M(t,r,n,e)},y:Cb,Y:kb,Z:Ib,"%":Bb};function w(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++a<s;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=yb[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function S(t,n){return function(e){var r,i,o=sb(1900,void 0,1);if(M(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=cb(sb(o.y,0,1))).getUTCDay(),r=i>4||0===i?Uy.ceil(r):Uy(r),r=eb.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=ab(sb(o.y,0,1))).getDay(),r=i>4||0===i?hy.ceil(r):hy(r),r=Ny.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?cb(sb(o.y,0,1)).getUTCDay():ab(sb(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,cb(o)):ab(o)}}function M(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in yb?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=w(e,_),_.X=w(r,_),_.c=w(n,_),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=S(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=S(t+="",!0);return n.toString=function(){return t},n}}}var lb,hb,pb,db,vb,yb={"-":"",_:" ",0:"0"},bb=/^\s*\d+/,gb=/^%/,_b=/[\\^$*+?|[\]().{}]/g;function mb(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function xb(t){return t.replace(_b,"\\$&")}function wb(t){return new RegExp("^(?:"+t.map(xb).join("|")+")","i")}function Sb(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Mb(t,n,e){var r=bb.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Tb(t,n,e){var r=bb.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Nb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Eb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Ab(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function kb(t,n,e){var r=bb.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Cb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Ib(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Fb(t,n,e){var r=bb.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Pb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function zb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function jb(t,n,e){var r=bb.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Ob(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Lb(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Db(t,n,e){var r=bb.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Rb(t,n,e){var r=bb.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Vb(t,n,e){var r=bb.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Bb(t,n,e){var r=gb.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Ub(t,n,e){var r=bb.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function qb(t,n,e){var r=bb.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Zb(t,n){return mb(t.getDate(),n,2)}function Yb(t,n){return mb(t.getHours(),n,2)}function Wb(t,n){return mb(t.getHours()%12||12,n,2)}function Hb(t,n){return mb(1+Ny.count(ty(t),t),n,3)}function Xb(t,n){return mb(t.getMilliseconds(),n,3)}function $b(t,n){return Xb(t,n)+"000"}function Gb(t,n){return mb(t.getMonth()+1,n,2)}function Kb(t,n){return mb(t.getMinutes(),n,2)}function Qb(t,n){return mb(t.getSeconds(),n,2)}function Jb(t){var n=t.getDay();return 0===n?7:n}function tg(t,n){return mb(ly.count(ty(t)-1,t),n,2)}function ng(t,n){var e=t.getDay();return t=e>=4||0===e?vy(t):vy.ceil(t),mb(vy.count(ty(t),t)+(4===ty(t).getDay()),n,2)}function eg(t){return t.getDay()}function rg(t,n){return mb(hy.count(ty(t)-1,t),n,2)}function ig(t,n){return mb(t.getFullYear()%100,n,2)}function og(t,n){return mb(t.getFullYear()%1e4,n,4)}function ug(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+mb(n/60|0,"0",2)+mb(n%60,"0",2)}function ag(t,n){return mb(t.getUTCDate(),n,2)}function cg(t,n){return mb(t.getUTCHours(),n,2)}function sg(t,n){return mb(t.getUTCHours()%12||12,n,2)}function fg(t,n){return mb(1+eb.count(ob(t),t),n,3)}function lg(t,n){return mb(t.getUTCMilliseconds(),n,3)}function hg(t,n){return lg(t,n)+"000"}function pg(t,n){return mb(t.getUTCMonth()+1,n,2)}function dg(t,n){return mb(t.getUTCMinutes(),n,2)}function vg(t,n){return mb(t.getUTCSeconds(),n,2)}function yg(t){var n=t.getUTCDay();return 0===n?7:n}function bg(t,n){return mb(By.count(ob(t)-1,t),n,2)}function gg(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Yy(t):Yy.ceil(t),mb(Yy.count(ob(t),t)+(4===ob(t).getUTCDay()),n,2)}function _g(t){return t.getUTCDay()}function mg(t,n){return mb(Uy.count(ob(t)-1,t),n,2)}function xg(t,n){return mb(t.getUTCFullYear()%100,n,2)}function wg(t,n){return mb(t.getUTCFullYear()%1e4,n,4)}function Sg(){return"+0000"}function Mg(){return"%"}function Tg(t){return+t}function Ng(t){return Math.floor(+t/1e3)}function Eg(t){return lb=fb(t),hb=lb.format,pb=lb.parse,db=lb.utcFormat,vb=lb.utcParse,lb}Eg({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Ag=31536e6;function kg(t){return new Date(t)}function Cg(t){return t instanceof Date?+t:+new Date(+t)}function Ig(t,n,e,r,i,u,a,c,s){var f=Sv(yv,yv),l=f.invert,h=f.domain,p=s(".%L"),d=s(":%S"),v=s("%I:%M"),y=s("%I %p"),b=s("%a %d"),g=s("%b %d"),_=s("%B"),m=s("%Y"),x=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[u,1,6e4],[u,5,3e5],[u,15,9e5],[u,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,Ag]];function w(o){return(a(o)<o?p:u(o)<o?d:i(o)<o?v:r(o)<o?y:n(o)<o?e(o)<o?b:g:t(o)<o?_:m)(o)}function S(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=o((function(t){return t[2]})).right(x,u);a===x.length?(i=k(e/Ag,r/Ag,n),n=t):a?(i=(a=x[u/x[a-1][2]<x[a][2]/u?a-1:a])[1],n=a[0]):(i=Math.max(k(e,r,n),1),n=c)}return null==i?n:n.every(i)}return f.invert=function(t){return new Date(l(t))},f.domain=function(t){return arguments.length?h(av.call(t,Cg)):h().map(kg)},f.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=S(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},f.tickFormat=function(t,n){return null==n?w:s(n)},f.nice=function(t,n){var e=h();return(t=S(t,e[0],e[e.length-1],n))?h(Av(e,t)):f},f.copy=function(){return xv(f,Ig(t,n,e,r,i,u,a,c,s))},f}function Fg(){return iv.apply(Ig(ty,ry,ly,Ny,ky,Fy,jy,Dy,hb).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}var Pg=Qv((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));const zg=Pg;var jg=Pg.range,Og=Qv((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+n*ay)}),(function(t,n){return(n-t)/ay}),(function(t){return t.getUTCHours()}));const Lg=Og;var Dg=Og.range,Rg=Qv((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*uy)}),(function(t,n){return(n-t)/uy}),(function(t){return t.getUTCMinutes()}));const Vg=Rg;var Bg=Rg.range;function Ug(){return iv.apply(Ig(ob,zg,By,eb,Lg,Vg,jy,Dy,db).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function qg(){var t,n,e,r,i,o=0,u=1,a=yv,c=!1;function s(n){return isNaN(n=+n)?i:a(0===e?.5:(n=(r(n)-t)*e,c?Math.max(0,Math.min(1,n)):n))}return s.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(u=+i[1]),e=t===n?0:1/(n-t),s):[o,u]},s.clamp=function(t){return arguments.length?(c=!!t,s):c},s.interpolator=function(t){return arguments.length?(a=t,s):a},s.unknown=function(t){return arguments.length?(i=t,s):i},function(i){return r=i,t=i(o),n=i(u),e=t===n?0:1/(n-t),s}}function Zg(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function Yg(){var t=Tv(qg()(yv));return t.copy=function(){return Zg(t,Yg())},ov.apply(t,arguments)}function Wg(){var t=jv(qg()).domain([1,10]);return t.copy=function(){return Zg(t,Wg()).base(t.base())},ov.apply(t,arguments)}function Hg(){var t=Rv(qg());return t.copy=function(){return Zg(t,Hg()).constant(t.constant())},ov.apply(t,arguments)}function Xg(){var t=Zv(qg());return t.copy=function(){return Zg(t,Xg()).exponent(t.exponent())},ov.apply(t,arguments)}function $g(){return Xg.apply(null,arguments).exponent(.5)}function Gg(){var t=[],n=yv;function e(e){if(!isNaN(e=+e))return n((s(t,e)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var r,o=0,u=n.length;o<u;++o)null==(r=n[o])||isNaN(r=+r)||t.push(r);return t.sort(i),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Gg(n).domain(t)},ov.apply(e,arguments)}function Kg(){var t,n,e,r,i,o,u,a=0,c=.5,s=1,f=yv,l=!1;function h(t){return isNaN(t=+t)?u:(t=.5+((t=+o(t))-n)*(t<n?r:i),f(l?Math.max(0,Math.min(1,t)):t))}return h.domain=function(u){return arguments.length?(t=o(a=+u[0]),n=o(c=+u[1]),e=o(s=+u[2]),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h):[a,c,s]},h.clamp=function(t){return arguments.length?(l=!!t,h):l},h.interpolator=function(t){return arguments.length?(f=t,h):f},h.unknown=function(t){return arguments.length?(u=t,h):u},function(u){return o=u,t=u(a),n=u(c),e=u(s),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h}}function Qg(){var t=Tv(Kg()(yv));return t.copy=function(){return Zg(t,Qg())},ov.apply(t,arguments)}function Jg(){var t=jv(Kg()).domain([.1,1,10]);return t.copy=function(){return Zg(t,Jg()).base(t.base())},ov.apply(t,arguments)}function t_(){var t=Rv(Kg());return t.copy=function(){return Zg(t,t_()).constant(t.constant())},ov.apply(t,arguments)}function n_(){var t=Zv(Kg());return t.copy=function(){return Zg(t,n_()).exponent(t.exponent())},ov.apply(t,arguments)}function e_(){return n_.apply(null,arguments).exponent(.5)}function r_(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e}const i_=r_("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),o_=r_("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),u_=r_("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),a_=r_("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),c_=r_("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),s_=r_("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),f_=r_("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),l_=r_("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),h_=r_("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),p_=r_("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");function d_(t){return be(t[t.length-1])}var v_=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(r_);const y_=d_(v_);var b_=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(r_);const g_=d_(b_);var __=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(r_);const m_=d_(__);var x_=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(r_);const w_=d_(x_);var S_=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(r_);const M_=d_(S_);var T_=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(r_);const N_=d_(T_);var E_=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(r_);const A_=d_(E_);var k_=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(r_);const C_=d_(k_);var I_=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(r_);const F_=d_(I_);var P_=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(r_);const z_=d_(P_);var j_=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(r_);const O_=d_(j_);var L_=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(r_);const D_=d_(L_);var R_=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(r_);const V_=d_(R_);var B_=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(r_);const U_=d_(B_);var q_=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(r_);const Z_=d_(q_);var Y_=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(r_);const W_=d_(Y_);var H_=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(r_);const X_=d_(H_);var $_=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(r_);const G_=d_($_);var K_=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(r_);const Q_=d_(K_);var J_=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(r_);const tm=d_(J_);var nm=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(r_);const em=d_(nm);var rm=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(r_);const im=d_(rm);var om=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(r_);const um=d_(om);var am=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(r_);const cm=d_(am);var sm=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(r_);const fm=d_(sm);var lm=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(r_);const hm=d_(lm);var pm=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(r_);const dm=d_(pm);function vm(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"}const ym=Vd(Yo(300,.5,0),Yo(-240,.5,1));var bm=Vd(Yo(-100,.75,.35),Yo(80,1.5,.8)),gm=Vd(Yo(260,.75,.35),Yo(80,1.5,.8)),_m=Yo();function mm(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return _m.h=360*t-100,_m.s=1.5-1.5*n,_m.l=.8-.9*n,_m+""}var xm=Qn(),wm=Math.PI/3,Sm=2*Math.PI/3;function Mm(t){var n;return t=(.5-t)*Math.PI,xm.r=255*(n=Math.sin(t))*n,xm.g=255*(n=Math.sin(t+wm))*n,xm.b=255*(n=Math.sin(t+Sm))*n,xm+""}function Tm(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"}function Nm(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}const Em=Nm(r_("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var Am=Nm(r_("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),km=Nm(r_("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Cm=Nm(r_("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Im(t){return Tn(on(t).call(document.documentElement))}var Fm=0;function Pm(){return new zm}function zm(){this._="@"+(++Fm).toString(36)}function jm(t){return"string"==typeof t?new wn([document.querySelectorAll(t)],[document.documentElement]):new wn([null==t?[]:t],xn)}function Om(t,n){null==n&&(n=Ce().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=Ie(t,n[e]);return i}function Lm(t){return function(){return t}}zm.prototype=Pm.prototype={constructor:zm,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Dm=Math.abs,Rm=Math.atan2,Vm=Math.cos,Bm=Math.max,Um=Math.min,qm=Math.sin,Zm=Math.sqrt,Ym=1e-12,Wm=Math.PI,Hm=Wm/2,Xm=2*Wm;function $m(t){return t>1?0:t<-1?Wm:Math.acos(t)}function Gm(t){return t>=1?Hm:t<=-1?-Hm:Math.asin(t)}function Km(t){return t.innerRadius}function Qm(t){return t.outerRadius}function Jm(t){return t.startAngle}function tx(t){return t.endAngle}function nx(t){return t&&t.padAngle}function ex(t,n,e,r,i,o,u,a){var c=e-t,s=r-n,f=u-i,l=a-o,h=l*c-f*s;if(!(h*h<Ym))return[t+(h=(f*(n-o)-l*(t-i))/h)*c,n+h*s]}function rx(t,n,e,r,i,o,u){var a=t-e,c=n-r,s=(u?o:-o)/Zm(a*a+c*c),f=s*c,l=-s*a,h=t+f,p=n+l,d=e+f,v=r+l,y=(h+d)/2,b=(p+v)/2,g=d-h,_=v-p,m=g*g+_*_,x=i-o,w=h*v-d*p,S=(_<0?-1:1)*Zm(Bm(0,x*x*m-w*w)),M=(w*_-g*S)/m,T=(-w*g-_*S)/m,N=(w*_+g*S)/m,E=(-w*g+_*S)/m,A=M-y,k=T-b,C=N-y,I=E-b;return A*A+k*k>C*C+I*I&&(M=N,T=E),{cx:M,cy:T,x01:-f,y01:-l,x11:M*(i/x-1),y11:T*(i/x-1)}}function ix(){var t=Km,n=Qm,e=Lm(0),r=null,i=Jm,o=tx,u=nx,a=null;function c(){var c,s,f=+t.apply(this,arguments),l=+n.apply(this,arguments),h=i.apply(this,arguments)-Hm,p=o.apply(this,arguments)-Hm,d=Dm(p-h),v=p>h;if(a||(a=c=Wi()),l<f&&(s=l,l=f,f=s),l>Ym)if(d>Xm-Ym)a.moveTo(l*Vm(h),l*qm(h)),a.arc(0,0,l,h,p,!v),f>Ym&&(a.moveTo(f*Vm(p),f*qm(p)),a.arc(0,0,f,p,h,v));else{var y,b,g=h,_=p,m=h,x=p,w=d,S=d,M=u.apply(this,arguments)/2,T=M>Ym&&(r?+r.apply(this,arguments):Zm(f*f+l*l)),N=Um(Dm(l-f)/2,+e.apply(this,arguments)),E=N,A=N;if(T>Ym){var k=Gm(T/f*qm(M)),C=Gm(T/l*qm(M));(w-=2*k)>Ym?(m+=k*=v?1:-1,x-=k):(w=0,m=x=(h+p)/2),(S-=2*C)>Ym?(g+=C*=v?1:-1,_-=C):(S=0,g=_=(h+p)/2)}var I=l*Vm(g),F=l*qm(g),P=f*Vm(x),z=f*qm(x);if(N>Ym){var j,O=l*Vm(_),L=l*qm(_),D=f*Vm(m),R=f*qm(m);if(d<Wm&&(j=ex(I,F,D,R,O,L,P,z))){var V=I-j[0],B=F-j[1],U=O-j[0],q=L-j[1],Z=1/qm($m((V*U+B*q)/(Zm(V*V+B*B)*Zm(U*U+q*q)))/2),Y=Zm(j[0]*j[0]+j[1]*j[1]);E=Um(N,(f-Y)/(Z-1)),A=Um(N,(l-Y)/(Z+1))}}S>Ym?A>Ym?(y=rx(D,R,I,F,l,A,v),b=rx(O,L,P,z,l,A,v),a.moveTo(y.cx+y.x01,y.cy+y.y01),A<N?a.arc(y.cx,y.cy,A,Rm(y.y01,y.x01),Rm(b.y01,b.x01),!v):(a.arc(y.cx,y.cy,A,Rm(y.y01,y.x01),Rm(y.y11,y.x11),!v),a.arc(0,0,l,Rm(y.cy+y.y11,y.cx+y.x11),Rm(b.cy+b.y11,b.cx+b.x11),!v),a.arc(b.cx,b.cy,A,Rm(b.y11,b.x11),Rm(b.y01,b.x01),!v))):(a.moveTo(I,F),a.arc(0,0,l,g,_,!v)):a.moveTo(I,F),f>Ym&&w>Ym?E>Ym?(y=rx(P,z,O,L,f,-E,v),b=rx(I,F,D,R,f,-E,v),a.lineTo(y.cx+y.x01,y.cy+y.y01),E<N?a.arc(y.cx,y.cy,E,Rm(y.y01,y.x01),Rm(b.y01,b.x01),!v):(a.arc(y.cx,y.cy,E,Rm(y.y01,y.x01),Rm(y.y11,y.x11),!v),a.arc(0,0,f,Rm(y.cy+y.y11,y.cx+y.x11),Rm(b.cy+b.y11,b.cx+b.x11),v),a.arc(b.cx,b.cy,E,Rm(b.y11,b.x11),Rm(b.y01,b.x01),!v))):a.arc(0,0,f,x,m,v):a.lineTo(P,z)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Wm/2;return[Vm(r)*e,qm(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:Lm(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Lm(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Lm(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Lm(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Lm(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Lm(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:Lm(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c}function ox(t){this._context=t}function ux(t){return new ox(t)}function ax(t){return t[0]}function cx(t){return t[1]}function sx(){var t=ax,n=cx,e=Lm(!0),r=null,i=ux,o=null;function u(u){var a,c,s,f=u.length,l=!1;for(null==r&&(o=i(s=Wi())),a=0;a<=f;++a)!(a<f&&e(c=u[a],a,u))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,a,u),+n(c,a,u));if(s)return o=null,s+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:Lm(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:Lm(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:Lm(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u}function fx(){var t=ax,n=null,e=Lm(0),r=cx,i=Lm(!0),o=null,u=ux,a=null;function c(c){var s,f,l,h,p,d=c.length,v=!1,y=new Array(d),b=new Array(d);for(null==o&&(a=u(p=Wi())),s=0;s<=d;++s){if(!(s<d&&i(h=c[s],s,c))===v)if(v=!v)f=s,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),l=s-1;l>=f;--l)a.point(y[l],b[l]);a.lineEnd(),a.areaEnd()}v&&(y[s]=+t(h,s,c),b[s]=+e(h,s,c),a.point(n?+n(h,s,c):y[s],r?+r(h,s,c):b[s]))}if(p)return a=null,p+""||null}function s(){return sx().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:Lm(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:Lm(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Lm(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:Lm(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:Lm(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Lm(+t),c):r},c.lineX0=c.lineY0=function(){return s().x(t).y(e)},c.lineY1=function(){return s().x(t).y(r)},c.lineX1=function(){return s().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:Lm(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c}function lx(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function hx(t){return t}function px(){var t=hx,n=lx,e=null,r=Lm(0),i=Lm(Xm),o=Lm(0);function u(u){var a,c,s,f,l,h=u.length,p=0,d=new Array(h),v=new Array(h),y=+r.apply(this,arguments),b=Math.min(Xm,Math.max(-Xm,i.apply(this,arguments)-y)),g=Math.min(Math.abs(b)/h,o.apply(this,arguments)),_=g*(b<0?-1:1);for(a=0;a<h;++a)(l=v[d[a]=a]=+t(u[a],a,u))>0&&(p+=l);for(null!=n?d.sort((function(t,e){return n(v[t],v[e])})):null!=e&&d.sort((function(t,n){return e(u[t],u[n])})),a=0,s=p?(b-h*_)/p:0;a<h;++a,y=f)c=d[a],f=y+((l=v[c])>0?l*s:0)+_,v[c]={data:u[c],index:a,value:l,startAngle:y,endAngle:f,padAngle:g};return v}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:Lm(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Lm(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Lm(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Lm(+t),u):o},u}ox.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var dx=yx(ux);function vx(t){this._curve=t}function yx(t){function n(n){return new vx(t(n))}return n._curve=t,n}function bx(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(yx(t)):n()._curve},t}function gx(){return bx(sx().curve(dx))}function _x(){var t=fx().curve(dx),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return bx(e())},delete t.lineX0,t.lineEndAngle=function(){return bx(r())},delete t.lineX1,t.lineInnerRadius=function(){return bx(i())},delete t.lineY0,t.lineOuterRadius=function(){return bx(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(yx(t)):n()._curve},t}function mx(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}vx.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var xx=Array.prototype.slice;function wx(t){return t.source}function Sx(t){return t.target}function Mx(t){var n=wx,e=Sx,r=ax,i=cx,o=null;function u(){var u,a=xx.call(arguments),c=n.apply(this,a),s=e.apply(this,a);if(o||(o=u=Wi()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=s,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:Lm(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:Lm(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function Tx(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function Nx(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function Ex(t,n,e,r,i){var o=mx(n,e),u=mx(n,e=(e+i)/2),a=mx(r,e),c=mx(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function Ax(){return Mx(Tx)}function kx(){return Mx(Nx)}function Cx(){var t=Mx(Ex);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const Ix={draw:function(t,n){var e=Math.sqrt(n/Wm);t.moveTo(e,0),t.arc(0,0,e,0,Xm)}},Fx={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}};var Px=Math.sqrt(1/3),zx=2*Px;const jx={draw:function(t,n){var e=Math.sqrt(n/zx),r=e*Px;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}};var Ox=Math.sin(Wm/10)/Math.sin(7*Wm/10),Lx=Math.sin(Xm/10)*Ox,Dx=-Math.cos(Xm/10)*Ox;const Rx={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=Lx*e,i=Dx*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=Xm*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},Vx={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}};var Bx=Math.sqrt(3);const Ux={draw:function(t,n){var e=-Math.sqrt(n/(3*Bx));t.moveTo(0,2*e),t.lineTo(-Bx*e,-e),t.lineTo(Bx*e,-e),t.closePath()}};var qx=-.5,Zx=Math.sqrt(3)/2,Yx=1/Math.sqrt(12),Wx=3*(Yx/2+1);const Hx={draw:function(t,n){var e=Math.sqrt(n/Wx),r=e/2,i=e*Yx,o=r,u=e*Yx+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(qx*r-Zx*i,Zx*r+qx*i),t.lineTo(qx*o-Zx*u,Zx*o+qx*u),t.lineTo(qx*a-Zx*c,Zx*a+qx*c),t.lineTo(qx*r+Zx*i,qx*i-Zx*r),t.lineTo(qx*o+Zx*u,qx*u-Zx*o),t.lineTo(qx*a+Zx*c,qx*c-Zx*a),t.closePath()}};var Xx=[Ix,Fx,jx,Vx,Rx,Ux,Hx];function $x(){var t=Lm(Ix),n=Lm(64),e=null;function r(){var r;if(e||(e=r=Wi()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:Lm(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:Lm(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r}function Gx(){}function Kx(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Qx(t){this._context=t}function Jx(t){return new Qx(t)}function tw(t){this._context=t}function nw(t){return new tw(t)}function ew(t){this._context=t}function rw(t){return new ew(t)}function iw(t,n){this._basis=new Qx(t),this._beta=n}Qx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Kx(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Kx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},tw.prototype={areaStart:Gx,areaEnd:Gx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Kx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},ew.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Kx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},iw.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};const ow=function t(n){function e(t){return 1===n?new Qx(t):new iw(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function uw(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function aw(t,n){this._context=t,this._k=(1-n)/6}aw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:uw(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:uw(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const cw=function t(n){function e(t){return new aw(t,n)}return e.tension=function(n){return t(+n)},e}(0);function sw(t,n){this._context=t,this._k=(1-n)/6}sw.prototype={areaStart:Gx,areaEnd:Gx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:uw(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const fw=function t(n){function e(t){return new sw(t,n)}return e.tension=function(n){return t(+n)},e}(0);function lw(t,n){this._context=t,this._k=(1-n)/6}lw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:uw(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const hw=function t(n){function e(t){return new lw(t,n)}return e.tension=function(n){return t(+n)},e}(0);function pw(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>Ym){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>Ym){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,f=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*s+t._x1*t._l23_2a-n*t._l12_2a)/f,u=(u*s+t._y1*t._l23_2a-e*t._l12_2a)/f}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function dw(t,n){this._context=t,this._alpha=n}dw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:pw(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const vw=function t(n){function e(t){return n?new dw(t,n):new aw(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function yw(t,n){this._context=t,this._alpha=n}yw.prototype={areaStart:Gx,areaEnd:Gx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:pw(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const bw=function t(n){function e(t){return n?new yw(t,n):new sw(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function gw(t,n){this._context=t,this._alpha=n}gw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:pw(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const _w=function t(n){function e(t){return n?new gw(t,n):new lw(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function mw(t){this._context=t}function xw(t){return new mw(t)}function ww(t){return t<0?-1:1}function Sw(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(ww(o)+ww(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function Mw(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Tw(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Nw(t){this._context=t}function Ew(t){this._context=new Aw(t)}function Aw(t){this._context=t}function kw(t){return new Nw(t)}function Cw(t){return new Ew(t)}function Iw(t){this._context=t}function Fw(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function Pw(t){return new Iw(t)}function zw(t,n){this._context=t,this._t=n}function jw(t){return new zw(t,.5)}function Ow(t){return new zw(t,0)}function Lw(t){return new zw(t,1)}function Dw(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function Rw(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}function Vw(t,n){return t[n]}function Bw(){var t=Lm([]),n=Rw,e=Dw,r=Vw;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,s=a.length,f=new Array(s);for(o=0;o<s;++o){for(var l,h=a[o],p=f[o]=new Array(c),d=0;d<c;++d)p[d]=l=[0,+r(i[d],h,d,i)],l.data=i[d];p.key=h}for(o=0,u=n(f);o<s;++o)f[u[o]].index=o;return e(f,u),f}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:Lm(xx.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:Lm(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Rw:"function"==typeof t?t:Lm(xx.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?Dw:t,i):e},i}function Uw(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}Dw(t,n)}}function qw(t,n){if((a=t.length)>0)for(var e,r,i,o,u,a,c=0,s=t[n[0]].length;c<s;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):(r[0]=0,r[1]=i)}function Zw(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}Dw(t,n)}}function Yw(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,s=0;a<i;++a){for(var f=t[n[a]],l=f[u][1]||0,h=(l-(f[u-1][1]||0))/2,p=0;p<a;++p){var d=t[n[p]];h+=(d[u][1]||0)-(d[u-1][1]||0)}c+=l,s+=h*l}e[u-1][1]+=e[u-1][0]=o,c&&(o-=s/c)}e[u-1][1]+=e[u-1][0]=o,Dw(t,n)}}function Ww(t){var n=t.map(Hw);return Rw(t).sort((function(t,e){return n[t]-n[e]}))}function Hw(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}function Xw(t){var n=t.map($w);return Rw(t).sort((function(t,e){return n[t]-n[e]}))}function $w(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function Gw(t){return Xw(t).reverse()}function Kw(t){var n,e,r=t.length,i=t.map($w),o=Ww(t),u=0,a=0,c=[],s=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],s.push(e));return s.reverse().concat(c)}function Qw(t){return Rw(t).reverse()}mw.prototype={areaStart:Gx,areaEnd:Gx,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},Nw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Tw(this,this._t0,Mw(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Tw(this,Mw(this,e=Sw(this,t,n)),e);break;default:Tw(this,this._t0,e=Sw(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Ew.prototype=Object.create(Nw.prototype)).point=function(t,n){Nw.prototype.point.call(this,n,t)},Aw.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},Iw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Fw(t),i=Fw(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},zw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var Jw="%Y-%m-%dT%H:%M:%S.%LZ";const tS=Date.prototype.toISOString?function(t){return t.toISOString()}:db(Jw),nS=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:vb(Jw);function eS(t,n,e){var r=new We,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?Ze():+e,r.restart((function o(u){u+=i,r.restart(o,i+=n,e),t(u)}),n,e),r)}function rS(t){return function(){return t}}function iS(t){return t[0]}function oS(t){return t[1]}function uS(){this._=null}function aS(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function cS(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function sS(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function fS(t){for(;t.L;)t=t.L;return t}uS.prototype={constructor:uS,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=fS(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(cS(this,e),e=(t=e).U),e.C=!1,r.C=!0,sS(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(sS(this,e),e=(t=e).U),e.C=!1,r.C=!0,cS(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?fS(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,cS(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,sS(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,cS(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,sS(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,cS(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,sS(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};const lS=uS;function hS(t,n,e,r){var i=[null,null],o=OS.push(i)-1;return i.left=t,i.right=n,e&&dS(i,t,n,e),r&&dS(i,n,t,r),zS[t.index].halfedges.push(o),zS[n.index].halfedges.push(o),i}function pS(t,n,e){var r=[n,e];return r.left=t,r}function dS(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function vS(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],s=u[1],f=0,l=1,h=a[0]-c,p=a[1]-s;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<f)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>f&&(f=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>f&&(f=o)}else if(h>0){if(o<f)return;o<l&&(l=o)}if(o=e-s,p||!(o>0)){if(o/=p,p<0){if(o<f)return;o<l&&(l=o)}else if(p>0){if(o>l)return;o>f&&(f=o)}if(o=i-s,p||!(o<0)){if(o/=p,p<0){if(o>l)return;o>f&&(f=o)}else if(p>0){if(o<f)return;o<l&&(l=o)}return!(f>0||l<1)||(f>0&&(t[0]=[c+f*h,s+f*p]),l<1&&(t[1]=[c+l*h,s+l*p]),!0)}}}}}function yS(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],s=t.left,f=t.right,l=s[0],h=s[1],p=f[0],d=f[1],v=(l+p)/2,y=(h+d)/2;if(d===h){if(v<n||v>=r)return;if(l>p){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(a=y-(u=(l-p)/(d-h))*v,u<-1||u>1)if(l>p){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<d){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function bS(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function gS(t,n){return n[+(n.left!==t.site)]}function _S(t,n){return n[+(n.left===t.site)]}var mS,xS=[];function wS(){aS(this),this.x=this.y=this.arc=this.site=this.cy=null}function SS(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,s=r[1]-a,f=o[0]-u,l=o[1]-a,h=2*(c*l-s*f);if(!(h>=-DS)){var p=c*c+s*s,d=f*f+l*l,v=(l*p-s*d)/h,y=(c*d-f*p)/h,b=xS.pop()||new wS;b.arc=t,b.site=i,b.x=v+u,b.y=(b.cy=y+a)+Math.sqrt(v*v+y*y),t.circle=b;for(var g=null,_=jS._;_;)if(b.y<_.y||b.y===_.y&&b.x<=_.x){if(!_.L){g=_.P;break}_=_.L}else{if(!_.R){g=_;break}_=_.R}jS.insert(g,b),g||(mS=b)}}}}function MS(t){var n=t.circle;n&&(n.P||(mS=n.N),jS.remove(n),xS.push(n),aS(n),t.circle=null)}var TS=[];function NS(){aS(this),this.edge=this.site=this.circle=null}function ES(t){var n=TS.pop()||new NS;return n.site=t,n}function AS(t){MS(t),PS.remove(t),TS.push(t),aS(t)}function kS(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];AS(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<LS&&Math.abs(r-c.circle.cy)<LS;)o=c.P,a.unshift(c),AS(c),c=o;a.unshift(c),MS(c);for(var s=u;s.circle&&Math.abs(e-s.circle.x)<LS&&Math.abs(r-s.circle.cy)<LS;)u=s.N,a.push(s),AS(s),s=u;a.push(s),MS(s);var f,l=a.length;for(f=1;f<l;++f)s=a[f],c=a[f-1],dS(s.edge,c.site,s.site,i);c=a[0],(s=a[l-1]).edge=hS(c.site,s.site,null,i),SS(c),SS(s)}function CS(t){for(var n,e,r,i,o=t[0],u=t[1],a=PS._;a;)if((r=IS(a,u)-o)>LS)a=a.L;else{if(!((i=o-FS(a,u))>LS)){r>-LS?(n=a.P,e=a):i>-LS?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){zS[t.index]={site:t,halfedges:[]}}(t);var c=ES(t);if(PS.insert(n,c),n||e){if(n===e)return MS(n),e=ES(n.site),PS.insert(c,e),c.edge=e.edge=hS(n.site,c.site),SS(n),void SS(e);if(e){MS(n),MS(e);var s=n.site,f=s[0],l=s[1],h=t[0]-f,p=t[1]-l,d=e.site,v=d[0]-f,y=d[1]-l,b=2*(h*y-p*v),g=h*h+p*p,_=v*v+y*y,m=[(y*g-p*_)/b+f,(h*_-v*g)/b+l];dS(e.edge,s,d,m),c.edge=hS(s,t,null,m),e.edge=hS(t,d,null,m),SS(n),SS(e)}else c.edge=hS(n.site,c.site)}}function IS(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],s=c-n;if(!s)return a;var f=a-r,l=1/o-1/s,h=f/s;return l?(-h+Math.sqrt(h*h-2*l*(f*f/(-2*s)-c+s/2+i-o/2)))/l+r:(r+a)/2}function FS(t,n){var e=t.N;if(e)return IS(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var PS,zS,jS,OS,LS=1e-6,DS=1e-12;function RS(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function VS(t,n){return n[1]-t[1]||n[0]-t[0]}function BS(t,n){var e,r,i,o=t.sort(VS).pop();for(OS=[],zS=new Array(t.length),PS=new lS,jS=new lS;;)if(i=mS,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(CS(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;kS(i.arc)}if(function(){for(var t,n,e,r,i=0,o=zS.length;i<o;++i)if((t=zS[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=bS(t,OS[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],s=+n[1][1];!function(t,n,e,r){for(var i,o=OS.length;o--;)yS(i=OS[o],t,n,e,r)&&vS(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>LS||Math.abs(i[0][1]-i[1][1])>LS)||delete OS[o]}(u,a,c,s),function(t,n,e,r){var i,o,u,a,c,s,f,l,h,p,d,v,y=zS.length,b=!0;for(i=0;i<y;++i)if(o=zS[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)OS[c[a]]||c.splice(a,1);for(a=0,s=c.length;a<s;)d=(p=_S(o,OS[c[a]]))[0],v=p[1],l=(f=gS(o,OS[c[++a%s]]))[0],h=f[1],(Math.abs(d-l)>LS||Math.abs(v-h)>LS)&&(c.splice(a,0,OS.push(pS(u,p,Math.abs(d-t)<LS&&r-v>LS?[t,Math.abs(l-t)<LS?h:r]:Math.abs(v-r)<LS&&e-d>LS?[Math.abs(h-r)<LS?l:e,r]:Math.abs(d-e)<LS&&v-n>LS?[e,Math.abs(l-e)<LS?h:n]:Math.abs(v-n)<LS&&d-t>LS?[Math.abs(h-n)<LS?l:t,n]:null))-1),++s);s&&(b=!1)}if(b){var g,_,m,x=1/0;for(i=0,b=null;i<y;++i)(o=zS[i])&&(m=(g=(u=o.site)[0]-t)*g+(_=u[1]-n)*_)<x&&(x=m,b=o);if(b){var w=[t,n],S=[t,r],M=[e,r],T=[e,n];b.halfedges.push(OS.push(pS(u=b.site,w,S))-1,OS.push(pS(u,S,M))-1,OS.push(pS(u,M,T))-1,OS.push(pS(u,T,w))-1)}}for(i=0;i<y;++i)(o=zS[i])&&(o.halfedges.length||delete zS[i])}(u,a,c,s)}this.edges=OS,this.cells=zS,PS=jS=OS=zS=null}function US(){var t=iS,n=oS,e=null;function r(r){return new BS(r.map((function(e,i){var o=[Math.round(t(e,i,r)/LS)*LS,Math.round(n(e,i,r)/LS)*LS];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:rS(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:rS(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r}function qS(t){return function(){return t}}function ZS(t,n,e){this.target=t,this.type=n,this.transform=e}function YS(t,n,e){this.k=t,this.x=n,this.y=e}BS.prototype={constructor:BS,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return gS(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a=e.site,c=-1,s=n[i[o-1]],f=s.left===a?s.right:s.left;++c<o;)u=f,f=(s=n[i[c]]).left===a?s.right:s.left,u&&f&&r<u.index&&r<f.index&&RS(a,u,f)<0&&t.push([a.data,u.data,f.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],s=n-i.site[1],f=c*c+s*s;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],s=n-a[1],l=c*c+s*s;l<f&&(f=l,u=a.index)}}))}while(null!==u);return o._found=r,null==e||f<=e*e?i.site:null}},YS.prototype={constructor:YS,scale:function(t){return 1===t?this:new YS(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new YS(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var WS=new YS(1,0,0);function HS(t){for(;!t.__zoom;)if(!(t=t.parentNode))return WS;return t.__zoom}function XS(){ln.stopImmediatePropagation()}function $S(){ln.preventDefault(),ln.stopImmediatePropagation()}function GS(){return!ln.ctrlKey&&!ln.button}function KS(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function QS(){return this.__zoom||WS}function JS(){return-ln.deltaY*(1===ln.deltaMode?.05:ln.deltaMode?1:.002)}function tM(){return navigator.maxTouchPoints||"ontouchstart"in this}function nM(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],u=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),u>o?(o+u)/2:Math.min(0,o)||Math.max(0,u))}function eM(){var t,n,e=GS,r=KS,i=nM,o=JS,u=tM,a=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],s=250,f=Cd,l=ht("start","zoom","end"),h=500,p=0;function d(t){t.property("__zoom",QS).on("wheel.zoom",x).on("mousedown.zoom",w).on("dblclick.zoom",S).filter(u).on("touchstart.zoom",M).on("touchmove.zoom",T).on("touchend.zoom touchcancel.zoom",N).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function v(t,n){return(n=Math.max(a[0],Math.min(a[1],n)))===t.k?t:new YS(n,t.x,t.y)}function y(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new YS(t.k,r,i)}function b(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function g(t,n,e){t.on("start.zoom",(function(){_(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){_(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,o=_(t,i),u=r.apply(t,i),a=null==e?b(u):"function"==typeof e?e.apply(t,i):e,c=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),s=t.__zoom,l="function"==typeof n?n.apply(t,i):n,h=f(s.invert(a).concat(c/s.k),l.invert(a).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=h(t),e=c/n[2];t=new YS(e,a[0]-n[0]*e,a[1]-n[1]*e)}o.zoom(null,t)}}))}function _(t,n,e){return!e&&t.__zooming||new m(t,n)}function m(t,n){this.that=t,this.args=n,this.active=0,this.extent=r.apply(t,n),this.taps=0}function x(){if(e.apply(this,arguments)){var t=_(this,arguments),n=this.__zoom,r=Math.max(a[0],Math.min(a[1],n.k*Math.pow(2,o.apply(this,arguments)))),u=Pe(this);if(t.wheel)t.mouse[0][0]===u[0]&&t.mouse[0][1]===u[1]||(t.mouse[1]=n.invert(t.mouse[0]=u)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[u,n.invert(u)],or(this),t.start()}$S(),t.wheel=setTimeout(s,150),t.zoom("mouse",i(y(v(n,r),t.mouse[0],t.mouse[1]),t.extent,c))}function s(){t.wheel=null,t.end()}}function w(){if(!n&&e.apply(this,arguments)){var t=_(this,arguments,!0),r=Tn(ln.view).on("mousemove.zoom",s,!0).on("mouseup.zoom",f,!0),o=Pe(this),u=ln.clientX,a=ln.clientY;An(ln.view),XS(),t.mouse=[o,this.__zoom.invert(o)],or(this),t.start()}function s(){if($S(),!t.moved){var n=ln.clientX-u,e=ln.clientY-a;t.moved=n*n+e*e>p}t.zoom("mouse",i(y(t.that.__zoom,t.mouse[0]=Pe(t.that),t.mouse[1]),t.extent,c))}function f(){r.on("mousemove.zoom mouseup.zoom",null),kn(ln.view,t.moved),$S(),t.end()}}function S(){if(e.apply(this,arguments)){var t=this.__zoom,n=Pe(this),o=t.invert(n),u=t.k*(ln.shiftKey?.5:2),a=i(y(v(t,u),n,o),r.apply(this,arguments),c);$S(),s>0?Tn(this).transition().duration(s).call(g,a,n):Tn(this).call(d.transform,a)}}function M(){if(e.apply(this,arguments)){var n,r,i,o,u=ln.touches,a=u.length,c=_(this,arguments,ln.changedTouches.length===a);for(XS(),r=0;r<a;++r)o=[o=Fe(this,u,(i=u[r]).identifier),this.__zoom.invert(o),i.identifier],c.touch0?c.touch1||c.touch0[2]===o[2]||(c.touch1=o,c.taps=0):(c.touch0=o,n=!0,c.taps=1+!!t);t&&(t=clearTimeout(t)),n&&(c.taps<2&&(t=setTimeout((function(){t=null}),h)),or(this),c.start())}}function T(){if(this.__zooming){var n,e,r,o,u=_(this,arguments),a=ln.changedTouches,s=a.length;for($S(),t&&(t=clearTimeout(t)),u.taps=0,n=0;n<s;++n)r=Fe(this,a,(e=a[n]).identifier),u.touch0&&u.touch0[2]===e.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===e.identifier&&(u.touch1[0]=r);if(e=u.that.__zoom,u.touch1){var f=u.touch0[0],l=u.touch0[1],h=u.touch1[0],p=u.touch1[1],d=(d=h[0]-f[0])*d+(d=h[1]-f[1])*d,b=(b=p[0]-l[0])*b+(b=p[1]-l[1])*b;e=v(e,Math.sqrt(d/b)),r=[(f[0]+h[0])/2,(f[1]+h[1])/2],o=[(l[0]+p[0])/2,(l[1]+p[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],o=u.touch0[1]}u.zoom("touch",i(y(e,r,o),u.extent,c))}}function N(){if(this.__zooming){var t,e,r=_(this,arguments),i=ln.changedTouches,o=i.length;for(XS(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),h),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var u=Tn(this).on("dblclick.zoom");u&&u.apply(this,arguments)}}}return d.transform=function(t,n,e){var r=t.selection?t.selection():t;r.property("__zoom",QS),t!==r?g(t,n,e):r.interrupt().each((function(){_(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},d.scaleBy=function(t,n,e){d.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}),e)},d.scaleTo=function(t,n,e){d.transform(t,(function(){var t=r.apply(this,arguments),o=this.__zoom,u=null==e?b(t):"function"==typeof e?e.apply(this,arguments):e,a=o.invert(u),s="function"==typeof n?n.apply(this,arguments):n;return i(y(v(o,s),u,a),t,c)}),e)},d.translateBy=function(t,n,e){d.transform(t,(function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments),c)}))},d.translateTo=function(t,n,e,o){d.transform(t,(function(){var t=r.apply(this,arguments),u=this.__zoom,a=null==o?b(t):"function"==typeof o?o.apply(this,arguments):o;return i(WS.translate(a[0],a[1]).scale(u.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)}),o)},m.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){bn(new ZS(d,t,this.that.__zoom),l.apply,l,[t,this.that,this.args])}},d.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:qS(+t),d):o},d.filter=function(t){return arguments.length?(e="function"==typeof t?t:qS(!!t),d):e},d.touchable=function(t){return arguments.length?(u="function"==typeof t?t:qS(!!t),d):u},d.extent=function(t){return arguments.length?(r="function"==typeof t?t:qS([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),d):r},d.scaleExtent=function(t){return arguments.length?(a[0]=+t[0],a[1]=+t[1],d):[a[0],a[1]]},d.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],d):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},d.constrain=function(t){return arguments.length?(i=t,d):i},d.duration=function(t){return arguments.length?(s=+t,d):s},d.interpolate=function(t){return arguments.length?(f=t,d):f},d.on=function(){var t=l.on.apply(l,arguments);return t===l?d:t},d.clickDistance=function(t){return arguments.length?(p=(t=+t)*t,d):Math.sqrt(p)},d}HS.prototype=YS.prototype},6486:function(t,n,e){var r;t=e.nmd(t),function(){var i,o="Expected a function",u="__lodash_hash_undefined__",a="__lodash_placeholder__",c=32,s=128,f=1/0,l=9007199254740991,h=NaN,p=4294967295,d=[["ary",s],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",c],["partialRight",64],["rearg",256]],v="[object Arguments]",y="[object Array]",b="[object Boolean]",g="[object Date]",_="[object Error]",m="[object Function]",x="[object GeneratorFunction]",w="[object Map]",S="[object Number]",M="[object Object]",T="[object Promise]",N="[object RegExp]",E="[object Set]",A="[object String]",k="[object Symbol]",C="[object WeakMap]",I="[object ArrayBuffer]",F="[object DataView]",P="[object Float32Array]",z="[object Float64Array]",j="[object Int8Array]",O="[object Int16Array]",L="[object Int32Array]",D="[object Uint8Array]",R="[object Uint8ClampedArray]",V="[object Uint16Array]",B="[object Uint32Array]",U=/\b__p \+= '';/g,q=/\b(__p \+=) '' \+/g,Z=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Y=/&(?:amp|lt|gt|quot|#39);/g,W=/[&<>"']/g,H=RegExp(Y.source),X=RegExp(W.source),$=/<%-([\s\S]+?)%>/g,G=/<%([\s\S]+?)%>/g,K=/<%=([\s\S]+?)%>/g,Q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,J=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,nt=/[\\^$.*+?()[\]{}|]/g,et=RegExp(nt.source),rt=/^\s+|\s+$/g,it=/^\s+/,ot=/\s+$/,ut=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,at=/\{\n\/\* \[wrapped with (.+)\] \*/,ct=/,? & /,st=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ft=/\\(\\)?/g,lt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ht=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,dt=/^0b[01]+$/i,vt=/^\[object .+?Constructor\]$/,yt=/^0o[0-7]+$/i,bt=/^(?:0|[1-9]\d*)$/,gt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,_t=/($^)/,mt=/['\n\r\u2028\u2029\\]/g,xt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",wt="a-z\\xdf-\\xf6\\xf8-\\xff",St="A-Z\\xc0-\\xd6\\xd8-\\xde",Mt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Tt="["+Mt+"]",Nt="["+xt+"]",Et="\\d+",At="["+wt+"]",kt="[^\\ud800-\\udfff"+Mt+Et+"\\u2700-\\u27bf"+wt+St+"]",Ct="\\ud83c[\\udffb-\\udfff]",It="[^\\ud800-\\udfff]",Ft="(?:\\ud83c[\\udde6-\\uddff]){2}",Pt="[\\ud800-\\udbff][\\udc00-\\udfff]",zt="["+St+"]",jt="(?:"+At+"|"+kt+")",Ot="(?:"+zt+"|"+kt+")",Lt="(?:['’](?:d|ll|m|re|s|t|ve))?",Dt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Rt="(?:"+Nt+"|"+Ct+")?",Vt="[\\ufe0e\\ufe0f]?",Bt=Vt+Rt+"(?:\\u200d(?:"+[It,Ft,Pt].join("|")+")"+Vt+Rt+")*",Ut="(?:"+["[\\u2700-\\u27bf]",Ft,Pt].join("|")+")"+Bt,qt="(?:"+[It+Nt+"?",Nt,Ft,Pt,"[\\ud800-\\udfff]"].join("|")+")",Zt=RegExp("['’]","g"),Yt=RegExp(Nt,"g"),Wt=RegExp(Ct+"(?="+Ct+")|"+qt+Bt,"g"),Ht=RegExp([zt+"?"+At+"+"+Lt+"(?="+[Tt,zt,"$"].join("|")+")",Ot+"+"+Dt+"(?="+[Tt,zt+jt,"$"].join("|")+")",zt+"?"+jt+"+"+Lt,zt+"+"+Dt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Et,Ut].join("|"),"g"),Xt=RegExp("[\\u200d\\ud800-\\udfff"+xt+"\\ufe0e\\ufe0f]"),$t=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Gt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Kt=-1,Qt={};Qt[P]=Qt[z]=Qt[j]=Qt[O]=Qt[L]=Qt[D]=Qt[R]=Qt[V]=Qt[B]=!0,Qt[v]=Qt[y]=Qt[I]=Qt[b]=Qt[F]=Qt[g]=Qt[_]=Qt[m]=Qt[w]=Qt[S]=Qt[M]=Qt[N]=Qt[E]=Qt[A]=Qt[C]=!1;var Jt={};Jt[v]=Jt[y]=Jt[I]=Jt[F]=Jt[b]=Jt[g]=Jt[P]=Jt[z]=Jt[j]=Jt[O]=Jt[L]=Jt[w]=Jt[S]=Jt[M]=Jt[N]=Jt[E]=Jt[A]=Jt[k]=Jt[D]=Jt[R]=Jt[V]=Jt[B]=!0,Jt[_]=Jt[m]=Jt[C]=!1;var tn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},nn=parseFloat,en=parseInt,rn="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,on="object"==typeof self&&self&&self.Object===Object&&self,un=rn||on||Function("return this")(),an=n&&!n.nodeType&&n,cn=an&&t&&!t.nodeType&&t,sn=cn&&cn.exports===an,fn=sn&&rn.process,ln=function(){try{return cn&&cn.require&&cn.require("util").types||fn&&fn.binding&&fn.binding("util")}catch(t){}}(),hn=ln&&ln.isArrayBuffer,pn=ln&&ln.isDate,dn=ln&&ln.isMap,vn=ln&&ln.isRegExp,yn=ln&&ln.isSet,bn=ln&&ln.isTypedArray;function gn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function _n(t,n,e,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];n(r,u,e(u),t)}return r}function mn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function xn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function wn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function Sn(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var u=t[e];n(u,e,t)&&(o[i++]=u)}return o}function Mn(t,n){return!(null==t||!t.length)&&zn(t,n,0)>-1}function Tn(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function Nn(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function En(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function An(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}function kn(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function Cn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var In=Dn("length");function Fn(t,n,e){var r;return e(t,(function(t,e,i){if(n(t,e,i))return r=e,!1})),r}function Pn(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function zn(t,n,e){return n==n?function(t,n,e){for(var r=e-1,i=t.length;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):Pn(t,On,e)}function jn(t,n,e,r){for(var i=e-1,o=t.length;++i<o;)if(r(t[i],n))return i;return-1}function On(t){return t!=t}function Ln(t,n){var e=null==t?0:t.length;return e?Bn(t,n)/e:h}function Dn(t){return function(n){return null==n?i:n[t]}}function Rn(t){return function(n){return null==t?i:t[n]}}function Vn(t,n,e,r,i){return i(t,(function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)})),e}function Bn(t,n){for(var e,r=-1,o=t.length;++r<o;){var u=n(t[r]);u!==i&&(e=e===i?u:e+u)}return e}function Un(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function qn(t){return function(n){return t(n)}}function Zn(t,n){return Nn(n,(function(n){return t[n]}))}function Yn(t,n){return t.has(n)}function Wn(t,n){for(var e=-1,r=t.length;++e<r&&zn(n,t[e],0)>-1;);return e}function Hn(t,n){for(var e=t.length;e--&&zn(n,t[e],0)>-1;);return e}function Xn(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}var $n=Rn({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Gn=Rn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Kn(t){return"\\"+tn[t]}function Qn(t){return Xt.test(t)}function Jn(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function te(t,n){return function(e){return t(n(e))}}function ne(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e];u!==n&&u!==a||(t[e]=a,o[i++]=e)}return o}function ee(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function re(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function ie(t){return Qn(t)?function(t){for(var n=Wt.lastIndex=0;Wt.test(t);)++n;return n}(t):In(t)}function oe(t){return Qn(t)?function(t){return t.match(Wt)||[]}(t):function(t){return t.split("")}(t)}var ue=Rn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ae=function t(n){var e,r=(n=null==n?un:ae.defaults(un.Object(),n,ae.pick(un,Gt))).Array,xt=n.Date,wt=n.Error,St=n.Function,Mt=n.Math,Tt=n.Object,Nt=n.RegExp,Et=n.String,At=n.TypeError,kt=r.prototype,Ct=St.prototype,It=Tt.prototype,Ft=n["__core-js_shared__"],Pt=Ct.toString,zt=It.hasOwnProperty,jt=0,Ot=(e=/[^.]+$/.exec(Ft&&Ft.keys&&Ft.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",Lt=It.toString,Dt=Pt.call(Tt),Rt=un._,Vt=Nt("^"+Pt.call(zt).replace(nt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Bt=sn?n.Buffer:i,Ut=n.Symbol,qt=n.Uint8Array,Wt=Bt?Bt.allocUnsafe:i,Xt=te(Tt.getPrototypeOf,Tt),tn=Tt.create,rn=It.propertyIsEnumerable,on=kt.splice,an=Ut?Ut.isConcatSpreadable:i,cn=Ut?Ut.iterator:i,fn=Ut?Ut.toStringTag:i,ln=function(){try{var t=co(Tt,"defineProperty");return t({},"",{}),t}catch(t){}}(),In=n.clearTimeout!==un.clearTimeout&&n.clearTimeout,Rn=xt&&xt.now!==un.Date.now&&xt.now,ce=n.setTimeout!==un.setTimeout&&n.setTimeout,se=Mt.ceil,fe=Mt.floor,le=Tt.getOwnPropertySymbols,he=Bt?Bt.isBuffer:i,pe=n.isFinite,de=kt.join,ve=te(Tt.keys,Tt),ye=Mt.max,be=Mt.min,ge=xt.now,_e=n.parseInt,me=Mt.random,xe=kt.reverse,we=co(n,"DataView"),Se=co(n,"Map"),Me=co(n,"Promise"),Te=co(n,"Set"),Ne=co(n,"WeakMap"),Ee=co(Tt,"create"),Ae=Ne&&new Ne,ke={},Ce=Do(we),Ie=Do(Se),Fe=Do(Me),Pe=Do(Te),ze=Do(Ne),je=Ut?Ut.prototype:i,Oe=je?je.valueOf:i,Le=je?je.toString:i;function De(t){if(na(t)&&!Zu(t)&&!(t instanceof Ue)){if(t instanceof Be)return t;if(zt.call(t,"__wrapped__"))return Ro(t)}return new Be(t)}var Re=function(){function t(){}return function(n){if(!ta(n))return{};if(tn)return tn(n);t.prototype=n;var e=new t;return t.prototype=i,e}}();function Ve(){}function Be(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=i}function Ue(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function qe(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ze(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ye(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function We(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new Ye;++n<e;)this.add(t[n])}function He(t){var n=this.__data__=new Ze(t);this.size=n.size}function Xe(t,n){var e=Zu(t),r=!e&&qu(t),i=!e&&!r&&Xu(t),o=!e&&!r&&!i&&sa(t),u=e||r||i||o,a=u?Un(t.length,Et):[],c=a.length;for(var s in t)!n&&!zt.call(t,s)||u&&("length"==s||i&&("offset"==s||"parent"==s)||o&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||yo(s,c))||a.push(s);return a}function $e(t){var n=t.length;return n?t[Yr(0,n-1)]:i}function Ge(t,n){return Po(Ni(t),or(n,0,t.length))}function Ke(t){return Po(Ni(t))}function Qe(t,n,e){(e!==i&&!Vu(t[n],e)||e===i&&!(n in t))&&rr(t,n,e)}function Je(t,n,e){var r=t[n];zt.call(t,n)&&Vu(r,e)&&(e!==i||n in t)||rr(t,n,e)}function tr(t,n){for(var e=t.length;e--;)if(Vu(t[e][0],n))return e;return-1}function nr(t,n,e,r){return fr(t,(function(t,i,o){n(r,t,e(t),o)})),r}function er(t,n){return t&&Ei(n,Ia(n),t)}function rr(t,n,e){"__proto__"==n&&ln?ln(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function ir(t,n){for(var e=-1,o=n.length,u=r(o),a=null==t;++e<o;)u[e]=a?i:Na(t,n[e]);return u}function or(t,n,e){return t==t&&(e!==i&&(t=t<=e?t:e),n!==i&&(t=t>=n?t:n)),t}function ur(t,n,e,r,o,u){var a,c=1&n,s=2&n,f=4&n;if(e&&(a=o?e(t,r,o,u):e(t)),a!==i)return a;if(!ta(t))return t;var l=Zu(t);if(l){if(a=function(t){var n=t.length,e=new t.constructor(n);return n&&"string"==typeof t[0]&&zt.call(t,"index")&&(e.index=t.index,e.input=t.input),e}(t),!c)return Ni(t,a)}else{var h=lo(t),p=h==m||h==x;if(Xu(t))return mi(t,c);if(h==M||h==v||p&&!o){if(a=s||p?{}:po(t),!c)return s?function(t,n){return Ei(t,fo(t),n)}(t,function(t,n){return t&&Ei(n,Fa(n),t)}(a,t)):function(t,n){return Ei(t,so(t),n)}(t,er(a,t))}else{if(!Jt[h])return o?t:{};a=function(t,n,e){var r,i=t.constructor;switch(n){case I:return xi(t);case b:case g:return new i(+t);case F:return function(t,n){var e=n?xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case P:case z:case j:case O:case L:case D:case R:case V:case B:return wi(t,e);case w:return new i;case S:case A:return new i(t);case N:return function(t){var n=new t.constructor(t.source,ht.exec(t));return n.lastIndex=t.lastIndex,n}(t);case E:return new i;case k:return r=t,Oe?Tt(Oe.call(r)):{}}}(t,h,c)}}u||(u=new He);var d=u.get(t);if(d)return d;u.set(t,a),ua(t)?t.forEach((function(r){a.add(ur(r,n,e,r,t,u))})):ea(t)&&t.forEach((function(r,i){a.set(i,ur(r,n,e,i,t,u))}));var y=l?i:(f?s?no:to:s?Fa:Ia)(t);return mn(y||t,(function(r,i){y&&(r=t[i=r]),Je(a,i,ur(r,n,e,i,t,u))})),a}function ar(t,n,e){var r=e.length;if(null==t)return!r;for(t=Tt(t);r--;){var o=e[r],u=n[o],a=t[o];if(a===i&&!(o in t)||!u(a))return!1}return!0}function cr(t,n,e){if("function"!=typeof t)throw new At(o);return ko((function(){t.apply(i,e)}),n)}function sr(t,n,e,r){var i=-1,o=Mn,u=!0,a=t.length,c=[],s=n.length;if(!a)return c;e&&(n=Nn(n,qn(e))),r?(o=Tn,u=!1):n.length>=200&&(o=Yn,u=!1,n=new We(n));t:for(;++i<a;){var f=t[i],l=null==e?f:e(f);if(f=r||0!==f?f:0,u&&l==l){for(var h=s;h--;)if(n[h]===l)continue t;c.push(f)}else o(n,l,r)||c.push(f)}return c}De.templateSettings={escape:$,evaluate:G,interpolate:K,variable:"",imports:{_:De}},De.prototype=Ve.prototype,De.prototype.constructor=De,Be.prototype=Re(Ve.prototype),Be.prototype.constructor=Be,Ue.prototype=Re(Ve.prototype),Ue.prototype.constructor=Ue,qe.prototype.clear=function(){this.__data__=Ee?Ee(null):{},this.size=0},qe.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},qe.prototype.get=function(t){var n=this.__data__;if(Ee){var e=n[t];return e===u?i:e}return zt.call(n,t)?n[t]:i},qe.prototype.has=function(t){var n=this.__data__;return Ee?n[t]!==i:zt.call(n,t)},qe.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=Ee&&n===i?u:n,this},Ze.prototype.clear=function(){this.__data__=[],this.size=0},Ze.prototype.delete=function(t){var n=this.__data__,e=tr(n,t);return!(e<0||(e==n.length-1?n.pop():on.call(n,e,1),--this.size,0))},Ze.prototype.get=function(t){var n=this.__data__,e=tr(n,t);return e<0?i:n[e][1]},Ze.prototype.has=function(t){return tr(this.__data__,t)>-1},Ze.prototype.set=function(t,n){var e=this.__data__,r=tr(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},Ye.prototype.clear=function(){this.size=0,this.__data__={hash:new qe,map:new(Se||Ze),string:new qe}},Ye.prototype.delete=function(t){var n=uo(this,t).delete(t);return this.size-=n?1:0,n},Ye.prototype.get=function(t){return uo(this,t).get(t)},Ye.prototype.has=function(t){return uo(this,t).has(t)},Ye.prototype.set=function(t,n){var e=uo(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},We.prototype.add=We.prototype.push=function(t){return this.__data__.set(t,u),this},We.prototype.has=function(t){return this.__data__.has(t)},He.prototype.clear=function(){this.__data__=new Ze,this.size=0},He.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},He.prototype.get=function(t){return this.__data__.get(t)},He.prototype.has=function(t){return this.__data__.has(t)},He.prototype.set=function(t,n){var e=this.__data__;if(e instanceof Ze){var r=e.__data__;if(!Se||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new Ye(r)}return e.set(t,n),this.size=e.size,this};var fr=Ci(gr),lr=Ci(_r,!0);function hr(t,n){var e=!0;return fr(t,(function(t,r,i){return e=!!n(t,r,i)})),e}function pr(t,n,e){for(var r=-1,o=t.length;++r<o;){var u=t[r],a=n(u);if(null!=a&&(c===i?a==a&&!ca(a):e(a,c)))var c=a,s=u}return s}function dr(t,n){var e=[];return fr(t,(function(t,r,i){n(t,r,i)&&e.push(t)})),e}function vr(t,n,e,r,i){var o=-1,u=t.length;for(e||(e=vo),i||(i=[]);++o<u;){var a=t[o];n>0&&e(a)?n>1?vr(a,n-1,e,r,i):En(i,a):r||(i[i.length]=a)}return i}var yr=Ii(),br=Ii(!0);function gr(t,n){return t&&yr(t,n,Ia)}function _r(t,n){return t&&br(t,n,Ia)}function mr(t,n){return Sn(n,(function(n){return Ku(t[n])}))}function xr(t,n){for(var e=0,r=(n=yi(n,t)).length;null!=t&&e<r;)t=t[Lo(n[e++])];return e&&e==r?t:i}function wr(t,n,e){var r=n(t);return Zu(t)?r:En(r,e(t))}function Sr(t){return null==t?t===i?"[object Undefined]":"[object Null]":fn&&fn in Tt(t)?function(t){var n=zt.call(t,fn),e=t[fn];try{t[fn]=i;var r=!0}catch(t){}var o=Lt.call(t);return r&&(n?t[fn]=e:delete t[fn]),o}(t):function(t){return Lt.call(t)}(t)}function Mr(t,n){return t>n}function Tr(t,n){return null!=t&&zt.call(t,n)}function Nr(t,n){return null!=t&&n in Tt(t)}function Er(t,n,e){for(var o=e?Tn:Mn,u=t[0].length,a=t.length,c=a,s=r(a),f=1/0,l=[];c--;){var h=t[c];c&&n&&(h=Nn(h,qn(n))),f=be(h.length,f),s[c]=!e&&(n||u>=120&&h.length>=120)?new We(c&&h):i}h=t[0];var p=-1,d=s[0];t:for(;++p<u&&l.length<f;){var v=h[p],y=n?n(v):v;if(v=e||0!==v?v:0,!(d?Yn(d,y):o(l,y,e))){for(c=a;--c;){var b=s[c];if(!(b?Yn(b,y):o(t[c],y,e)))continue t}d&&d.push(y),l.push(v)}}return l}function Ar(t,n,e){var r=null==(t=To(t,n=yi(n,t)))?t:t[Lo(Go(n))];return null==r?i:gn(r,t,e)}function kr(t){return na(t)&&Sr(t)==v}function Cr(t,n,e,r,o){return t===n||(null==t||null==n||!na(t)&&!na(n)?t!=t&&n!=n:function(t,n,e,r,o,u){var a=Zu(t),c=Zu(n),s=a?y:lo(t),f=c?y:lo(n),l=(s=s==v?M:s)==M,h=(f=f==v?M:f)==M,p=s==f;if(p&&Xu(t)){if(!Xu(n))return!1;a=!0,l=!1}if(p&&!l)return u||(u=new He),a||sa(t)?Qi(t,n,e,r,o,u):function(t,n,e,r,i,o,u){switch(e){case F:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case I:return!(t.byteLength!=n.byteLength||!o(new qt(t),new qt(n)));case b:case g:case S:return Vu(+t,+n);case _:return t.name==n.name&&t.message==n.message;case N:case A:return t==n+"";case w:var a=Jn;case E:var c=1&r;if(a||(a=ee),t.size!=n.size&&!c)return!1;var s=u.get(t);if(s)return s==n;r|=2,u.set(t,n);var f=Qi(a(t),a(n),r,i,o,u);return u.delete(t),f;case k:if(Oe)return Oe.call(t)==Oe.call(n)}return!1}(t,n,s,e,r,o,u);if(!(1&e)){var d=l&&zt.call(t,"__wrapped__"),m=h&&zt.call(n,"__wrapped__");if(d||m){var x=d?t.value():t,T=m?n.value():n;return u||(u=new He),o(x,T,e,r,u)}}return!!p&&(u||(u=new He),function(t,n,e,r,o,u){var a=1&e,c=to(t),s=c.length;if(s!=to(n).length&&!a)return!1;for(var f=s;f--;){var l=c[f];if(!(a?l in n:zt.call(n,l)))return!1}var h=u.get(t);if(h&&u.get(n))return h==n;var p=!0;u.set(t,n),u.set(n,t);for(var d=a;++f<s;){var v=t[l=c[f]],y=n[l];if(r)var b=a?r(y,v,l,n,t,u):r(v,y,l,t,n,u);if(!(b===i?v===y||o(v,y,e,r,u):b)){p=!1;break}d||(d="constructor"==l)}if(p&&!d){var g=t.constructor,_=n.constructor;g==_||!("constructor"in t)||!("constructor"in n)||"function"==typeof g&&g instanceof g&&"function"==typeof _&&_ instanceof _||(p=!1)}return u.delete(t),u.delete(n),p}(t,n,e,r,o,u))}(t,n,e,r,Cr,o))}function Ir(t,n,e,r){var o=e.length,u=o,a=!r;if(null==t)return!u;for(t=Tt(t);o--;){var c=e[o];if(a&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++o<u;){var s=(c=e[o])[0],f=t[s],l=c[1];if(a&&c[2]){if(f===i&&!(s in t))return!1}else{var h=new He;if(r)var p=r(f,l,s,t,n,h);if(!(p===i?Cr(l,f,3,r,h):p))return!1}}return!0}function Fr(t){return!(!ta(t)||(n=t,Ot&&Ot in n))&&(Ku(t)?Vt:vt).test(Do(t));var n}function Pr(t){return"function"==typeof t?t:null==t?rc:"object"==typeof t?Zu(t)?Dr(t[0],t[1]):Lr(t):hc(t)}function zr(t){if(!xo(t))return ve(t);var n=[];for(var e in Tt(t))zt.call(t,e)&&"constructor"!=e&&n.push(e);return n}function jr(t,n){return t<n}function Or(t,n){var e=-1,i=Wu(t)?r(t.length):[];return fr(t,(function(t,r,o){i[++e]=n(t,r,o)})),i}function Lr(t){var n=ao(t);return 1==n.length&&n[0][2]?So(n[0][0],n[0][1]):function(e){return e===t||Ir(e,t,n)}}function Dr(t,n){return go(t)&&wo(n)?So(Lo(t),n):function(e){var r=Na(e,t);return r===i&&r===n?Ea(e,t):Cr(n,r,3)}}function Rr(t,n,e,r,o){t!==n&&yr(n,(function(u,a){if(o||(o=new He),ta(u))!function(t,n,e,r,o,u,a){var c=Eo(t,e),s=Eo(n,e),f=a.get(s);if(f)Qe(t,e,f);else{var l=u?u(c,s,e+"",t,n,a):i,h=l===i;if(h){var p=Zu(s),d=!p&&Xu(s),v=!p&&!d&&sa(s);l=s,p||d||v?Zu(c)?l=c:Hu(c)?l=Ni(c):d?(h=!1,l=mi(s,!0)):v?(h=!1,l=wi(s,!0)):l=[]:ia(s)||qu(s)?(l=c,qu(c)?l=ba(c):ta(c)&&!Ku(c)||(l=po(s))):h=!1}h&&(a.set(s,l),o(l,s,r,u,a),a.delete(s)),Qe(t,e,l)}}(t,n,a,e,Rr,r,o);else{var c=r?r(Eo(t,a),u,a+"",t,n,o):i;c===i&&(c=u),Qe(t,a,c)}}),Fa)}function Vr(t,n){var e=t.length;if(e)return yo(n+=n<0?e:0,e)?t[n]:i}function Br(t,n,e){var r=-1;return n=Nn(n.length?n:[rc],qn(oo())),function(t,n){var r=t.length;for(t.sort((function(t,n){return function(t,n,e){for(var r=-1,i=t.criteria,o=n.criteria,u=i.length,a=e.length;++r<u;){var c=Si(i[r],o[r]);if(c)return r>=a?c:c*("desc"==e[r]?-1:1)}return t.index-n.index}(t,n,e)}));r--;)t[r]=t[r].value;return t}(Or(t,(function(t,e,i){return{criteria:Nn(n,(function(n){return n(t)})),index:++r,value:t}})))}function Ur(t,n,e){for(var r=-1,i=n.length,o={};++r<i;){var u=n[r],a=xr(t,u);e(a,u)&&Gr(o,yi(u,t),a)}return o}function qr(t,n,e,r){var i=r?jn:zn,o=-1,u=n.length,a=t;for(t===n&&(n=Ni(n)),e&&(a=Nn(t,qn(e)));++o<u;)for(var c=0,s=n[o],f=e?e(s):s;(c=i(a,f,c,r))>-1;)a!==t&&on.call(a,c,1),on.call(t,c,1);return t}function Zr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==o){var o=i;yo(i)?on.call(t,i,1):ci(t,i)}}return t}function Yr(t,n){return t+fe(me()*(n-t+1))}function Wr(t,n){var e="";if(!t||n<1||n>l)return e;do{n%2&&(e+=t),(n=fe(n/2))&&(t+=t)}while(n);return e}function Hr(t,n){return Co(Mo(t,n,rc),t+"")}function Xr(t){return $e(Va(t))}function $r(t,n){var e=Va(t);return Po(e,or(n,0,e.length))}function Gr(t,n,e,r){if(!ta(t))return t;for(var o=-1,u=(n=yi(n,t)).length,a=u-1,c=t;null!=c&&++o<u;){var s=Lo(n[o]),f=e;if(o!=a){var l=c[s];(f=r?r(l,s,c):i)===i&&(f=ta(l)?l:yo(n[o+1])?[]:{})}Je(c,s,f),c=c[s]}return t}var Kr=Ae?function(t,n){return Ae.set(t,n),t}:rc,Qr=ln?function(t,n){return ln(t,"toString",{configurable:!0,enumerable:!1,value:tc(n),writable:!0})}:rc;function Jr(t){return Po(Va(t))}function ti(t,n,e){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var u=r(o);++i<o;)u[i]=t[i+n];return u}function ni(t,n){var e;return fr(t,(function(t,r,i){return!(e=n(t,r,i))})),!!e}function ei(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;r<i;){var o=r+i>>>1,u=t[o];null!==u&&!ca(u)&&(e?u<=n:u<n)?r=o+1:i=o}return i}return ri(t,n,rc,e)}function ri(t,n,e,r){n=e(n);for(var o=0,u=null==t?0:t.length,a=n!=n,c=null===n,s=ca(n),f=n===i;o<u;){var l=fe((o+u)/2),h=e(t[l]),p=h!==i,d=null===h,v=h==h,y=ca(h);if(a)var b=r||v;else b=f?v&&(r||p):c?v&&p&&(r||!d):s?v&&p&&!d&&(r||!y):!d&&!y&&(r?h<=n:h<n);b?o=l+1:u=l}return be(u,4294967294)}function ii(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e],a=n?n(u):u;if(!e||!Vu(a,c)){var c=a;o[i++]=0===u?0:u}}return o}function oi(t){return"number"==typeof t?t:ca(t)?h:+t}function ui(t){if("string"==typeof t)return t;if(Zu(t))return Nn(t,ui)+"";if(ca(t))return Le?Le.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ai(t,n,e){var r=-1,i=Mn,o=t.length,u=!0,a=[],c=a;if(e)u=!1,i=Tn;else if(o>=200){var s=n?null:Wi(t);if(s)return ee(s);u=!1,i=Yn,c=new We}else c=n?[]:a;t:for(;++r<o;){var f=t[r],l=n?n(f):f;if(f=e||0!==f?f:0,u&&l==l){for(var h=c.length;h--;)if(c[h]===l)continue t;n&&c.push(l),a.push(f)}else i(c,l,e)||(c!==a&&c.push(l),a.push(f))}return a}function ci(t,n){return null==(t=To(t,n=yi(n,t)))||delete t[Lo(Go(n))]}function si(t,n,e,r){return Gr(t,n,e(xr(t,n)),r)}function fi(t,n,e,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&n(t[o],o,t););return e?ti(t,r?0:o,r?o+1:i):ti(t,r?o+1:0,r?i:o)}function li(t,n){var e=t;return e instanceof Ue&&(e=e.value()),An(n,(function(t,n){return n.func.apply(n.thisArg,En([t],n.args))}),e)}function hi(t,n,e){var i=t.length;if(i<2)return i?ai(t[0]):[];for(var o=-1,u=r(i);++o<i;)for(var a=t[o],c=-1;++c<i;)c!=o&&(u[o]=sr(u[o]||a,t[c],n,e));return ai(vr(u,1),n,e)}function pi(t,n,e){for(var r=-1,o=t.length,u=n.length,a={};++r<o;){var c=r<u?n[r]:i;e(a,t[r],c)}return a}function di(t){return Hu(t)?t:[]}function vi(t){return"function"==typeof t?t:rc}function yi(t,n){return Zu(t)?t:go(t,n)?[t]:Oo(ga(t))}var bi=Hr;function gi(t,n,e){var r=t.length;return e=e===i?r:e,!n&&e>=r?t:ti(t,n,e)}var _i=In||function(t){return un.clearTimeout(t)};function mi(t,n){if(n)return t.slice();var e=t.length,r=Wt?Wt(e):new t.constructor(e);return t.copy(r),r}function xi(t){var n=new t.constructor(t.byteLength);return new qt(n).set(new qt(t)),n}function wi(t,n){var e=n?xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function Si(t,n){if(t!==n){var e=t!==i,r=null===t,o=t==t,u=ca(t),a=n!==i,c=null===n,s=n==n,f=ca(n);if(!c&&!f&&!u&&t>n||u&&a&&s&&!c&&!f||r&&a&&s||!e&&s||!o)return 1;if(!r&&!u&&!f&&t<n||f&&e&&o&&!r&&!u||c&&e&&o||!a&&o||!s)return-1}return 0}function Mi(t,n,e,i){for(var o=-1,u=t.length,a=e.length,c=-1,s=n.length,f=ye(u-a,0),l=r(s+f),h=!i;++c<s;)l[c]=n[c];for(;++o<a;)(h||o<u)&&(l[e[o]]=t[o]);for(;f--;)l[c++]=t[o++];return l}function Ti(t,n,e,i){for(var o=-1,u=t.length,a=-1,c=e.length,s=-1,f=n.length,l=ye(u-c,0),h=r(l+f),p=!i;++o<l;)h[o]=t[o];for(var d=o;++s<f;)h[d+s]=n[s];for(;++a<c;)(p||o<u)&&(h[d+e[a]]=t[o++]);return h}function Ni(t,n){var e=-1,i=t.length;for(n||(n=r(i));++e<i;)n[e]=t[e];return n}function Ei(t,n,e,r){var o=!e;e||(e={});for(var u=-1,a=n.length;++u<a;){var c=n[u],s=r?r(e[c],t[c],c,e,t):i;s===i&&(s=t[c]),o?rr(e,c,s):Je(e,c,s)}return e}function Ai(t,n){return function(e,r){var i=Zu(e)?_n:nr,o=n?n():{};return i(e,t,oo(r,2),o)}}function ki(t){return Hr((function(n,e){var r=-1,o=e.length,u=o>1?e[o-1]:i,a=o>2?e[2]:i;for(u=t.length>3&&"function"==typeof u?(o--,u):i,a&&bo(e[0],e[1],a)&&(u=o<3?i:u,o=1),n=Tt(n);++r<o;){var c=e[r];c&&t(n,c,r,u)}return n}))}function Ci(t,n){return function(e,r){if(null==e)return e;if(!Wu(e))return t(e,r);for(var i=e.length,o=n?i:-1,u=Tt(e);(n?o--:++o<i)&&!1!==r(u[o],o,u););return e}}function Ii(t){return function(n,e,r){for(var i=-1,o=Tt(n),u=r(n),a=u.length;a--;){var c=u[t?a:++i];if(!1===e(o[c],c,o))break}return n}}function Fi(t){return function(n){var e=Qn(n=ga(n))?oe(n):i,r=e?e[0]:n.charAt(0),o=e?gi(e,1).join(""):n.slice(1);return r[t]()+o}}function Pi(t){return function(n){return An(Ka(qa(n).replace(Zt,"")),t,"")}}function zi(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=Re(t.prototype),r=t.apply(e,n);return ta(r)?r:e}}function ji(t){return function(n,e,r){var o=Tt(n);if(!Wu(n)){var u=oo(e,3);n=Ia(n),e=function(t){return u(o[t],t,o)}}var a=t(n,e,r);return a>-1?o[u?n[a]:a]:i}}function Oi(t){return Ji((function(n){var e=n.length,r=e,u=Be.prototype.thru;for(t&&n.reverse();r--;){var a=n[r];if("function"!=typeof a)throw new At(o);if(u&&!c&&"wrapper"==ro(a))var c=new Be([],!0)}for(r=c?r:e;++r<e;){var s=ro(a=n[r]),f="wrapper"==s?eo(a):i;c=f&&_o(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?c[ro(f[0])].apply(c,f[3]):1==a.length&&_o(a)?c[s]():c.thru(a)}return function(){var t=arguments,r=t[0];if(c&&1==t.length&&Zu(r))return c.plant(r).value();for(var i=0,o=e?n[i].apply(this,t):r;++i<e;)o=n[i].call(this,o);return o}}))}function Li(t,n,e,o,u,a,c,f,l,h){var p=n&s,d=1&n,v=2&n,y=24&n,b=512&n,g=v?i:zi(t);return function i(){for(var s=arguments.length,_=r(s),m=s;m--;)_[m]=arguments[m];if(y)var x=io(i),w=Xn(_,x);if(o&&(_=Mi(_,o,u,y)),a&&(_=Ti(_,a,c,y)),s-=w,y&&s<h){var S=ne(_,x);return Zi(t,n,Li,i.placeholder,e,_,S,f,l,h-s)}var M=d?e:this,T=v?M[t]:t;return s=_.length,f?_=No(_,f):b&&s>1&&_.reverse(),p&&l<s&&(_.length=l),this&&this!==un&&this instanceof i&&(T=g||zi(T)),T.apply(M,_)}}function Di(t,n){return function(e,r){return function(t,n,e,r){return gr(t,(function(t,i,o){n(r,e(t),i,o)})),r}(e,t,n(r),{})}}function Ri(t,n){return function(e,r){var o;if(e===i&&r===i)return n;if(e!==i&&(o=e),r!==i){if(o===i)return r;"string"==typeof e||"string"==typeof r?(e=ui(e),r=ui(r)):(e=oi(e),r=oi(r)),o=t(e,r)}return o}}function Vi(t){return Ji((function(n){return n=Nn(n,qn(oo())),Hr((function(e){var r=this;return t(n,(function(t){return gn(t,r,e)}))}))}))}function Bi(t,n){var e=(n=n===i?" ":ui(n)).length;if(e<2)return e?Wr(n,t):n;var r=Wr(n,se(t/ie(n)));return Qn(n)?gi(oe(r),0,t).join(""):r.slice(0,t)}function Ui(t){return function(n,e,o){return o&&"number"!=typeof o&&bo(n,e,o)&&(e=o=i),n=pa(n),e===i?(e=n,n=0):e=pa(e),function(t,n,e,i){for(var o=-1,u=ye(se((n-t)/(e||1)),0),a=r(u);u--;)a[i?u:++o]=t,t+=e;return a}(n,e,o=o===i?n<e?1:-1:pa(o),t)}}function qi(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=ya(n),e=ya(e)),t(n,e)}}function Zi(t,n,e,r,o,u,a,s,f,l){var h=8&n;n|=h?c:64,4&(n&=~(h?64:c))||(n&=-4);var p=[t,n,o,h?u:i,h?a:i,h?i:u,h?i:a,s,f,l],d=e.apply(i,p);return _o(t)&&Ao(d,p),d.placeholder=r,Io(d,t,n)}function Yi(t){var n=Mt[t];return function(t,e){if(t=ya(t),(e=null==e?0:be(da(e),292))&&pe(t)){var r=(ga(t)+"e").split("e");return+((r=(ga(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Wi=Te&&1/ee(new Te([,-0]))[1]==f?function(t){return new Te(t)}:cc;function Hi(t){return function(n){var e=lo(n);return e==w?Jn(n):e==E?re(n):function(t,n){return Nn(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function Xi(t,n,e,u,f,l,h,p){var d=2&n;if(!d&&"function"!=typeof t)throw new At(o);var v=u?u.length:0;if(v||(n&=-97,u=f=i),h=h===i?h:ye(da(h),0),p=p===i?p:da(p),v-=f?f.length:0,64&n){var y=u,b=f;u=f=i}var g=d?i:eo(t),_=[t,n,e,u,f,y,b,l,h,p];if(g&&function(t,n){var e=t[1],r=n[1],i=e|r,o=i<131,u=r==s&&8==e||r==s&&256==e&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!o&&!u)return t;1&r&&(t[2]=n[2],i|=1&e?0:4);var c=n[3];if(c){var f=t[3];t[3]=f?Mi(f,c,n[4]):c,t[4]=f?ne(t[3],a):n[4]}(c=n[5])&&(f=t[5],t[5]=f?Ti(f,c,n[6]):c,t[6]=f?ne(t[5],a):n[6]),(c=n[7])&&(t[7]=c),r&s&&(t[8]=null==t[8]?n[8]:be(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(_,g),t=_[0],n=_[1],e=_[2],u=_[3],f=_[4],!(p=_[9]=_[9]===i?d?0:t.length:ye(_[9]-v,0))&&24&n&&(n&=-25),n&&1!=n)m=8==n||16==n?function(t,n,e){var o=zi(t);return function u(){for(var a=arguments.length,c=r(a),s=a,f=io(u);s--;)c[s]=arguments[s];var l=a<3&&c[0]!==f&&c[a-1]!==f?[]:ne(c,f);return(a-=l.length)<e?Zi(t,n,Li,u.placeholder,i,c,l,i,i,e-a):gn(this&&this!==un&&this instanceof u?o:t,this,c)}}(t,n,p):n!=c&&33!=n||f.length?Li.apply(i,_):function(t,n,e,i){var o=1&n,u=zi(t);return function n(){for(var a=-1,c=arguments.length,s=-1,f=i.length,l=r(f+c),h=this&&this!==un&&this instanceof n?u:t;++s<f;)l[s]=i[s];for(;c--;)l[s++]=arguments[++a];return gn(h,o?e:this,l)}}(t,n,e,u);else var m=function(t,n,e){var r=1&n,i=zi(t);return function n(){return(this&&this!==un&&this instanceof n?i:t).apply(r?e:this,arguments)}}(t,n,e);return Io((g?Kr:Ao)(m,_),t,n)}function $i(t,n,e,r){return t===i||Vu(t,It[e])&&!zt.call(r,e)?n:t}function Gi(t,n,e,r,o,u){return ta(t)&&ta(n)&&(u.set(n,t),Rr(t,n,i,Gi,u),u.delete(n)),t}function Ki(t){return ia(t)?i:t}function Qi(t,n,e,r,o,u){var a=1&e,c=t.length,s=n.length;if(c!=s&&!(a&&s>c))return!1;var f=u.get(t);if(f&&u.get(n))return f==n;var l=-1,h=!0,p=2&e?new We:i;for(u.set(t,n),u.set(n,t);++l<c;){var d=t[l],v=n[l];if(r)var y=a?r(v,d,l,n,t,u):r(d,v,l,t,n,u);if(y!==i){if(y)continue;h=!1;break}if(p){if(!Cn(n,(function(t,n){if(!Yn(p,n)&&(d===t||o(d,t,e,r,u)))return p.push(n)}))){h=!1;break}}else if(d!==v&&!o(d,v,e,r,u)){h=!1;break}}return u.delete(t),u.delete(n),h}function Ji(t){return Co(Mo(t,i,Yo),t+"")}function to(t){return wr(t,Ia,so)}function no(t){return wr(t,Fa,fo)}var eo=Ae?function(t){return Ae.get(t)}:cc;function ro(t){for(var n=t.name+"",e=ke[n],r=zt.call(ke,n)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==t)return i.name}return n}function io(t){return(zt.call(De,"placeholder")?De:t).placeholder}function oo(){var t=De.iteratee||ic;return t=t===ic?Pr:t,arguments.length?t(arguments[0],arguments[1]):t}function uo(t,n){var e,r,i=t.__data__;return("string"==(r=typeof(e=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof n?"string":"hash"]:i.map}function ao(t){for(var n=Ia(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,wo(i)]}return n}function co(t,n){var e=function(t,n){return null==t?i:t[n]}(t,n);return Fr(e)?e:i}var so=le?function(t){return null==t?[]:(t=Tt(t),Sn(le(t),(function(n){return rn.call(t,n)})))}:vc,fo=le?function(t){for(var n=[];t;)En(n,so(t)),t=Xt(t);return n}:vc,lo=Sr;function ho(t,n,e){for(var r=-1,i=(n=yi(n,t)).length,o=!1;++r<i;){var u=Lo(n[r]);if(!(o=null!=t&&e(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Ju(i)&&yo(u,i)&&(Zu(t)||qu(t))}function po(t){return"function"!=typeof t.constructor||xo(t)?{}:Re(Xt(t))}function vo(t){return Zu(t)||qu(t)||!!(an&&t&&t[an])}function yo(t,n){var e=typeof t;return!!(n=null==n?l:n)&&("number"==e||"symbol"!=e&&bt.test(t))&&t>-1&&t%1==0&&t<n}function bo(t,n,e){if(!ta(e))return!1;var r=typeof n;return!!("number"==r?Wu(e)&&yo(n,e.length):"string"==r&&n in e)&&Vu(e[n],t)}function go(t,n){if(Zu(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!ca(t))||J.test(t)||!Q.test(t)||null!=n&&t in Tt(n)}function _o(t){var n=ro(t),e=De[n];if("function"!=typeof e||!(n in Ue.prototype))return!1;if(t===e)return!0;var r=eo(e);return!!r&&t===r[0]}(we&&lo(new we(new ArrayBuffer(1)))!=F||Se&&lo(new Se)!=w||Me&&lo(Me.resolve())!=T||Te&&lo(new Te)!=E||Ne&&lo(new Ne)!=C)&&(lo=function(t){var n=Sr(t),e=n==M?t.constructor:i,r=e?Do(e):"";if(r)switch(r){case Ce:return F;case Ie:return w;case Fe:return T;case Pe:return E;case ze:return C}return n});var mo=Ft?Ku:yc;function xo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||It)}function wo(t){return t==t&&!ta(t)}function So(t,n){return function(e){return null!=e&&e[t]===n&&(n!==i||t in Tt(e))}}function Mo(t,n,e){return n=ye(n===i?t.length-1:n,0),function(){for(var i=arguments,o=-1,u=ye(i.length-n,0),a=r(u);++o<u;)a[o]=i[n+o];o=-1;for(var c=r(n+1);++o<n;)c[o]=i[o];return c[n]=e(a),gn(t,this,c)}}function To(t,n){return n.length<2?t:xr(t,ti(n,0,-1))}function No(t,n){for(var e=t.length,r=be(n.length,e),o=Ni(t);r--;){var u=n[r];t[r]=yo(u,e)?o[u]:i}return t}function Eo(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var Ao=Fo(Kr),ko=ce||function(t,n){return un.setTimeout(t,n)},Co=Fo(Qr);function Io(t,n,e){var r=n+"";return Co(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(ut,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return mn(d,(function(e){var r="_."+e[0];n&e[1]&&!Mn(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(at);return n?n[1].split(ct):[]}(r),e)))}function Fo(t){var n=0,e=0;return function(){var r=ge(),o=16-(r-e);if(e=r,o>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(i,arguments)}}function Po(t,n){var e=-1,r=t.length,o=r-1;for(n=n===i?r:n;++e<n;){var u=Yr(e,o),a=t[u];t[u]=t[e],t[e]=a}return t.length=n,t}var zo,jo,Oo=(zo=zu((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(tt,(function(t,e,r,i){n.push(r?i.replace(ft,"$1"):e||t)})),n}),(function(t){return 500===jo.size&&jo.clear(),t})),jo=zo.cache,zo);function Lo(t){if("string"==typeof t||ca(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Do(t){if(null!=t){try{return Pt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Ro(t){if(t instanceof Ue)return t.clone();var n=new Be(t.__wrapped__,t.__chain__);return n.__actions__=Ni(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Vo=Hr((function(t,n){return Hu(t)?sr(t,vr(n,1,Hu,!0)):[]})),Bo=Hr((function(t,n){var e=Go(n);return Hu(e)&&(e=i),Hu(t)?sr(t,vr(n,1,Hu,!0),oo(e,2)):[]})),Uo=Hr((function(t,n){var e=Go(n);return Hu(e)&&(e=i),Hu(t)?sr(t,vr(n,1,Hu,!0),i,e):[]}));function qo(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:da(e);return i<0&&(i=ye(r+i,0)),Pn(t,oo(n,3),i)}function Zo(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return e!==i&&(o=da(e),o=e<0?ye(r+o,0):be(o,r-1)),Pn(t,oo(n,3),o,!0)}function Yo(t){return null!=t&&t.length?vr(t,1):[]}function Wo(t){return t&&t.length?t[0]:i}var Ho=Hr((function(t){var n=Nn(t,di);return n.length&&n[0]===t[0]?Er(n):[]})),Xo=Hr((function(t){var n=Go(t),e=Nn(t,di);return n===Go(e)?n=i:e.pop(),e.length&&e[0]===t[0]?Er(e,oo(n,2)):[]})),$o=Hr((function(t){var n=Go(t),e=Nn(t,di);return(n="function"==typeof n?n:i)&&e.pop(),e.length&&e[0]===t[0]?Er(e,i,n):[]}));function Go(t){var n=null==t?0:t.length;return n?t[n-1]:i}var Ko=Hr(Qo);function Qo(t,n){return t&&t.length&&n&&n.length?qr(t,n):t}var Jo=Ji((function(t,n){var e=null==t?0:t.length,r=ir(t,n);return Zr(t,Nn(n,(function(t){return yo(t,e)?+t:t})).sort(Si)),r}));function tu(t){return null==t?t:xe.call(t)}var nu=Hr((function(t){return ai(vr(t,1,Hu,!0))})),eu=Hr((function(t){var n=Go(t);return Hu(n)&&(n=i),ai(vr(t,1,Hu,!0),oo(n,2))})),ru=Hr((function(t){var n=Go(t);return n="function"==typeof n?n:i,ai(vr(t,1,Hu,!0),i,n)}));function iu(t){if(!t||!t.length)return[];var n=0;return t=Sn(t,(function(t){if(Hu(t))return n=ye(t.length,n),!0})),Un(n,(function(n){return Nn(t,Dn(n))}))}function ou(t,n){if(!t||!t.length)return[];var e=iu(t);return null==n?e:Nn(e,(function(t){return gn(n,i,t)}))}var uu=Hr((function(t,n){return Hu(t)?sr(t,n):[]})),au=Hr((function(t){return hi(Sn(t,Hu))})),cu=Hr((function(t){var n=Go(t);return Hu(n)&&(n=i),hi(Sn(t,Hu),oo(n,2))})),su=Hr((function(t){var n=Go(t);return n="function"==typeof n?n:i,hi(Sn(t,Hu),i,n)})),fu=Hr(iu),lu=Hr((function(t){var n=t.length,e=n>1?t[n-1]:i;return e="function"==typeof e?(t.pop(),e):i,ou(t,e)}));function hu(t){var n=De(t);return n.__chain__=!0,n}function pu(t,n){return n(t)}var du=Ji((function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,o=function(n){return ir(n,t)};return!(n>1||this.__actions__.length)&&r instanceof Ue&&yo(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:pu,args:[o],thisArg:i}),new Be(r,this.__chain__).thru((function(t){return n&&!t.length&&t.push(i),t}))):this.thru(o)})),vu=Ai((function(t,n,e){zt.call(t,e)?++t[e]:rr(t,e,1)})),yu=ji(qo),bu=ji(Zo);function gu(t,n){return(Zu(t)?mn:fr)(t,oo(n,3))}function _u(t,n){return(Zu(t)?xn:lr)(t,oo(n,3))}var mu=Ai((function(t,n,e){zt.call(t,e)?t[e].push(n):rr(t,e,[n])})),xu=Hr((function(t,n,e){var i=-1,o="function"==typeof n,u=Wu(t)?r(t.length):[];return fr(t,(function(t){u[++i]=o?gn(n,t,e):Ar(t,n,e)})),u})),wu=Ai((function(t,n,e){rr(t,e,n)}));function Su(t,n){return(Zu(t)?Nn:Or)(t,oo(n,3))}var Mu=Ai((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]})),Tu=Hr((function(t,n){if(null==t)return[];var e=n.length;return e>1&&bo(t,n[0],n[1])?n=[]:e>2&&bo(n[0],n[1],n[2])&&(n=[n[0]]),Br(t,vr(n,1),[])})),Nu=Rn||function(){return un.Date.now()};function Eu(t,n,e){return n=e?i:n,n=t&&null==n?t.length:n,Xi(t,s,i,i,i,i,n)}function Au(t,n){var e;if("function"!=typeof n)throw new At(o);return t=da(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=i),e}}var ku=Hr((function(t,n,e){var r=1;if(e.length){var i=ne(e,io(ku));r|=c}return Xi(t,r,n,e,i)})),Cu=Hr((function(t,n,e){var r=3;if(e.length){var i=ne(e,io(Cu));r|=c}return Xi(n,r,t,e,i)}));function Iu(t,n,e){var r,u,a,c,s,f,l=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new At(o);function v(n){var e=r,o=u;return r=u=i,l=n,c=t.apply(o,e)}function y(t){return l=t,s=ko(g,n),h?v(t):c}function b(t){var e=t-f;return f===i||e>=n||e<0||p&&t-l>=a}function g(){var t=Nu();if(b(t))return _(t);s=ko(g,function(t){var e=n-(t-f);return p?be(e,a-(t-l)):e}(t))}function _(t){return s=i,d&&r?v(t):(r=u=i,c)}function m(){var t=Nu(),e=b(t);if(r=arguments,u=this,f=t,e){if(s===i)return y(f);if(p)return _i(s),s=ko(g,n),v(f)}return s===i&&(s=ko(g,n)),c}return n=ya(n)||0,ta(e)&&(h=!!e.leading,a=(p="maxWait"in e)?ye(ya(e.maxWait)||0,n):a,d="trailing"in e?!!e.trailing:d),m.cancel=function(){s!==i&&_i(s),l=0,r=f=u=s=i},m.flush=function(){return s===i?c:_(Nu())},m}var Fu=Hr((function(t,n){return cr(t,1,n)})),Pu=Hr((function(t,n,e){return cr(t,ya(n)||0,e)}));function zu(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new At(o);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return e.cache=o.set(i,u)||o,u};return e.cache=new(zu.Cache||Ye),e}function ju(t){if("function"!=typeof t)throw new At(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}zu.Cache=Ye;var Ou=bi((function(t,n){var e=(n=1==n.length&&Zu(n[0])?Nn(n[0],qn(oo())):Nn(vr(n,1),qn(oo()))).length;return Hr((function(r){for(var i=-1,o=be(r.length,e);++i<o;)r[i]=n[i].call(this,r[i]);return gn(t,this,r)}))})),Lu=Hr((function(t,n){var e=ne(n,io(Lu));return Xi(t,c,i,n,e)})),Du=Hr((function(t,n){var e=ne(n,io(Du));return Xi(t,64,i,n,e)})),Ru=Ji((function(t,n){return Xi(t,256,i,i,i,n)}));function Vu(t,n){return t===n||t!=t&&n!=n}var Bu=qi(Mr),Uu=qi((function(t,n){return t>=n})),qu=kr(function(){return arguments}())?kr:function(t){return na(t)&&zt.call(t,"callee")&&!rn.call(t,"callee")},Zu=r.isArray,Yu=hn?qn(hn):function(t){return na(t)&&Sr(t)==I};function Wu(t){return null!=t&&Ju(t.length)&&!Ku(t)}function Hu(t){return na(t)&&Wu(t)}var Xu=he||yc,$u=pn?qn(pn):function(t){return na(t)&&Sr(t)==g};function Gu(t){if(!na(t))return!1;var n=Sr(t);return n==_||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!ia(t)}function Ku(t){if(!ta(t))return!1;var n=Sr(t);return n==m||n==x||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Qu(t){return"number"==typeof t&&t==da(t)}function Ju(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=l}function ta(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function na(t){return null!=t&&"object"==typeof t}var ea=dn?qn(dn):function(t){return na(t)&&lo(t)==w};function ra(t){return"number"==typeof t||na(t)&&Sr(t)==S}function ia(t){if(!na(t)||Sr(t)!=M)return!1;var n=Xt(t);if(null===n)return!0;var e=zt.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&Pt.call(e)==Dt}var oa=vn?qn(vn):function(t){return na(t)&&Sr(t)==N},ua=yn?qn(yn):function(t){return na(t)&&lo(t)==E};function aa(t){return"string"==typeof t||!Zu(t)&&na(t)&&Sr(t)==A}function ca(t){return"symbol"==typeof t||na(t)&&Sr(t)==k}var sa=bn?qn(bn):function(t){return na(t)&&Ju(t.length)&&!!Qt[Sr(t)]},fa=qi(jr),la=qi((function(t,n){return t<=n}));function ha(t){if(!t)return[];if(Wu(t))return aa(t)?oe(t):Ni(t);if(cn&&t[cn])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[cn]());var n=lo(t);return(n==w?Jn:n==E?ee:Va)(t)}function pa(t){return t?(t=ya(t))===f||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function da(t){var n=pa(t),e=n%1;return n==n?e?n-e:n:0}function va(t){return t?or(da(t),0,p):0}function ya(t){if("number"==typeof t)return t;if(ca(t))return h;if(ta(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=ta(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(rt,"");var e=dt.test(t);return e||yt.test(t)?en(t.slice(2),e?2:8):pt.test(t)?h:+t}function ba(t){return Ei(t,Fa(t))}function ga(t){return null==t?"":ui(t)}var _a=ki((function(t,n){if(xo(n)||Wu(n))Ei(n,Ia(n),t);else for(var e in n)zt.call(n,e)&&Je(t,e,n[e])})),ma=ki((function(t,n){Ei(n,Fa(n),t)})),xa=ki((function(t,n,e,r){Ei(n,Fa(n),t,r)})),wa=ki((function(t,n,e,r){Ei(n,Ia(n),t,r)})),Sa=Ji(ir),Ma=Hr((function(t,n){t=Tt(t);var e=-1,r=n.length,o=r>2?n[2]:i;for(o&&bo(n[0],n[1],o)&&(r=1);++e<r;)for(var u=n[e],a=Fa(u),c=-1,s=a.length;++c<s;){var f=a[c],l=t[f];(l===i||Vu(l,It[f])&&!zt.call(t,f))&&(t[f]=u[f])}return t})),Ta=Hr((function(t){return t.push(i,Gi),gn(za,i,t)}));function Na(t,n,e){var r=null==t?i:xr(t,n);return r===i?e:r}function Ea(t,n){return null!=t&&ho(t,n,Nr)}var Aa=Di((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Lt.call(n)),t[n]=e}),tc(rc)),ka=Di((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Lt.call(n)),zt.call(t,n)?t[n].push(e):t[n]=[e]}),oo),Ca=Hr(Ar);function Ia(t){return Wu(t)?Xe(t):zr(t)}function Fa(t){return Wu(t)?Xe(t,!0):function(t){if(!ta(t))return function(t){var n=[];if(null!=t)for(var e in Tt(t))n.push(e);return n}(t);var n=xo(t),e=[];for(var r in t)("constructor"!=r||!n&&zt.call(t,r))&&e.push(r);return e}(t)}var Pa=ki((function(t,n,e){Rr(t,n,e)})),za=ki((function(t,n,e,r){Rr(t,n,e,r)})),ja=Ji((function(t,n){var e={};if(null==t)return e;var r=!1;n=Nn(n,(function(n){return n=yi(n,t),r||(r=n.length>1),n})),Ei(t,no(t),e),r&&(e=ur(e,7,Ki));for(var i=n.length;i--;)ci(e,n[i]);return e})),Oa=Ji((function(t,n){return null==t?{}:function(t,n){return Ur(t,n,(function(n,e){return Ea(t,e)}))}(t,n)}));function La(t,n){if(null==t)return{};var e=Nn(no(t),(function(t){return[t]}));return n=oo(n),Ur(t,e,(function(t,e){return n(t,e[0])}))}var Da=Hi(Ia),Ra=Hi(Fa);function Va(t){return null==t?[]:Zn(t,Ia(t))}var Ba=Pi((function(t,n,e){return n=n.toLowerCase(),t+(e?Ua(n):n)}));function Ua(t){return Ga(ga(t).toLowerCase())}function qa(t){return(t=ga(t))&&t.replace(gt,$n).replace(Yt,"")}var Za=Pi((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),Ya=Pi((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),Wa=Fi("toLowerCase"),Ha=Pi((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()})),Xa=Pi((function(t,n,e){return t+(e?" ":"")+Ga(n)})),$a=Pi((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Ga=Fi("toUpperCase");function Ka(t,n,e){return t=ga(t),(n=e?i:n)===i?function(t){return $t.test(t)}(t)?function(t){return t.match(Ht)||[]}(t):function(t){return t.match(st)||[]}(t):t.match(n)||[]}var Qa=Hr((function(t,n){try{return gn(t,i,n)}catch(t){return Gu(t)?t:new wt(t)}})),Ja=Ji((function(t,n){return mn(n,(function(n){n=Lo(n),rr(t,n,ku(t[n],t))})),t}));function tc(t){return function(){return t}}var nc=Oi(),ec=Oi(!0);function rc(t){return t}function ic(t){return Pr("function"==typeof t?t:ur(t,1))}var oc=Hr((function(t,n){return function(e){return Ar(e,t,n)}})),uc=Hr((function(t,n){return function(e){return Ar(t,e,n)}}));function ac(t,n,e){var r=Ia(n),i=mr(n,r);null!=e||ta(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=mr(n,Ia(n)));var o=!(ta(e)&&"chain"in e&&!e.chain),u=Ku(t);return mn(i,(function(e){var r=n[e];t[e]=r,u&&(t.prototype[e]=function(){var n=this.__chain__;if(o||n){var e=t(this.__wrapped__),i=e.__actions__=Ni(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,En([this.value()],arguments))})})),t}function cc(){}var sc=Vi(Nn),fc=Vi(wn),lc=Vi(Cn);function hc(t){return go(t)?Dn(Lo(t)):function(t){return function(n){return xr(n,t)}}(t)}var pc=Ui(),dc=Ui(!0);function vc(){return[]}function yc(){return!1}var bc,gc=Ri((function(t,n){return t+n}),0),_c=Yi("ceil"),mc=Ri((function(t,n){return t/n}),1),xc=Yi("floor"),wc=Ri((function(t,n){return t*n}),1),Sc=Yi("round"),Mc=Ri((function(t,n){return t-n}),0);return De.after=function(t,n){if("function"!=typeof n)throw new At(o);return t=da(t),function(){if(--t<1)return n.apply(this,arguments)}},De.ary=Eu,De.assign=_a,De.assignIn=ma,De.assignInWith=xa,De.assignWith=wa,De.at=Sa,De.before=Au,De.bind=ku,De.bindAll=Ja,De.bindKey=Cu,De.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Zu(t)?t:[t]},De.chain=hu,De.chunk=function(t,n,e){n=(e?bo(t,n,e):n===i)?1:ye(da(n),0);var o=null==t?0:t.length;if(!o||n<1)return[];for(var u=0,a=0,c=r(se(o/n));u<o;)c[a++]=ti(t,u,u+=n);return c},De.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var o=t[n];o&&(i[r++]=o)}return i},De.concat=function(){var t=arguments.length;if(!t)return[];for(var n=r(t-1),e=arguments[0],i=t;i--;)n[i-1]=arguments[i];return En(Zu(e)?Ni(e):[e],vr(n,1))},De.cond=function(t){var n=null==t?0:t.length,e=oo();return t=n?Nn(t,(function(t){if("function"!=typeof t[1])throw new At(o);return[e(t[0]),t[1]]})):[],Hr((function(e){for(var r=-1;++r<n;){var i=t[r];if(gn(i[0],this,e))return gn(i[1],this,e)}}))},De.conforms=function(t){return function(t){var n=Ia(t);return function(e){return ar(e,t,n)}}(ur(t,1))},De.constant=tc,De.countBy=vu,De.create=function(t,n){var e=Re(t);return null==n?e:er(e,n)},De.curry=function t(n,e,r){var o=Xi(n,8,i,i,i,i,i,e=r?i:e);return o.placeholder=t.placeholder,o},De.curryRight=function t(n,e,r){var o=Xi(n,16,i,i,i,i,i,e=r?i:e);return o.placeholder=t.placeholder,o},De.debounce=Iu,De.defaults=Ma,De.defaultsDeep=Ta,De.defer=Fu,De.delay=Pu,De.difference=Vo,De.differenceBy=Bo,De.differenceWith=Uo,De.drop=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,(n=e||n===i?1:da(n))<0?0:n,r):[]},De.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,0,(n=r-(n=e||n===i?1:da(n)))<0?0:n):[]},De.dropRightWhile=function(t,n){return t&&t.length?fi(t,oo(n,3),!0,!0):[]},De.dropWhile=function(t,n){return t&&t.length?fi(t,oo(n,3),!0):[]},De.fill=function(t,n,e,r){var o=null==t?0:t.length;return o?(e&&"number"!=typeof e&&bo(t,n,e)&&(e=0,r=o),function(t,n,e,r){var o=t.length;for((e=da(e))<0&&(e=-e>o?0:o+e),(r=r===i||r>o?o:da(r))<0&&(r+=o),r=e>r?0:va(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},De.filter=function(t,n){return(Zu(t)?Sn:dr)(t,oo(n,3))},De.flatMap=function(t,n){return vr(Su(t,n),1)},De.flatMapDeep=function(t,n){return vr(Su(t,n),f)},De.flatMapDepth=function(t,n,e){return e=e===i?1:da(e),vr(Su(t,n),e)},De.flatten=Yo,De.flattenDeep=function(t){return null!=t&&t.length?vr(t,f):[]},De.flattenDepth=function(t,n){return null!=t&&t.length?vr(t,n=n===i?1:da(n)):[]},De.flip=function(t){return Xi(t,512)},De.flow=nc,De.flowRight=ec,De.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},De.functions=function(t){return null==t?[]:mr(t,Ia(t))},De.functionsIn=function(t){return null==t?[]:mr(t,Fa(t))},De.groupBy=mu,De.initial=function(t){return null!=t&&t.length?ti(t,0,-1):[]},De.intersection=Ho,De.intersectionBy=Xo,De.intersectionWith=$o,De.invert=Aa,De.invertBy=ka,De.invokeMap=xu,De.iteratee=ic,De.keyBy=wu,De.keys=Ia,De.keysIn=Fa,De.map=Su,De.mapKeys=function(t,n){var e={};return n=oo(n,3),gr(t,(function(t,r,i){rr(e,n(t,r,i),t)})),e},De.mapValues=function(t,n){var e={};return n=oo(n,3),gr(t,(function(t,r,i){rr(e,r,n(t,r,i))})),e},De.matches=function(t){return Lr(ur(t,1))},De.matchesProperty=function(t,n){return Dr(t,ur(n,1))},De.memoize=zu,De.merge=Pa,De.mergeWith=za,De.method=oc,De.methodOf=uc,De.mixin=ac,De.negate=ju,De.nthArg=function(t){return t=da(t),Hr((function(n){return Vr(n,t)}))},De.omit=ja,De.omitBy=function(t,n){return La(t,ju(oo(n)))},De.once=function(t){return Au(2,t)},De.orderBy=function(t,n,e,r){return null==t?[]:(Zu(n)||(n=null==n?[]:[n]),Zu(e=r?i:e)||(e=null==e?[]:[e]),Br(t,n,e))},De.over=sc,De.overArgs=Ou,De.overEvery=fc,De.overSome=lc,De.partial=Lu,De.partialRight=Du,De.partition=Mu,De.pick=Oa,De.pickBy=La,De.property=hc,De.propertyOf=function(t){return function(n){return null==t?i:xr(t,n)}},De.pull=Ko,De.pullAll=Qo,De.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?qr(t,n,oo(e,2)):t},De.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?qr(t,n,i,e):t},De.pullAt=Jo,De.range=pc,De.rangeRight=dc,De.rearg=Ru,De.reject=function(t,n){return(Zu(t)?Sn:dr)(t,ju(oo(n,3)))},De.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],o=t.length;for(n=oo(n,3);++r<o;){var u=t[r];n(u,r,t)&&(e.push(u),i.push(r))}return Zr(t,i),e},De.rest=function(t,n){if("function"!=typeof t)throw new At(o);return Hr(t,n=n===i?n:da(n))},De.reverse=tu,De.sampleSize=function(t,n,e){return n=(e?bo(t,n,e):n===i)?1:da(n),(Zu(t)?Ge:$r)(t,n)},De.set=function(t,n,e){return null==t?t:Gr(t,n,e)},De.setWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:Gr(t,n,e,r)},De.shuffle=function(t){return(Zu(t)?Ke:Jr)(t)},De.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&bo(t,n,e)?(n=0,e=r):(n=null==n?0:da(n),e=e===i?r:da(e)),ti(t,n,e)):[]},De.sortBy=Tu,De.sortedUniq=function(t){return t&&t.length?ii(t):[]},De.sortedUniqBy=function(t,n){return t&&t.length?ii(t,oo(n,2)):[]},De.split=function(t,n,e){return e&&"number"!=typeof e&&bo(t,n,e)&&(n=e=i),(e=e===i?p:e>>>0)?(t=ga(t))&&("string"==typeof n||null!=n&&!oa(n))&&!(n=ui(n))&&Qn(t)?gi(oe(t),0,e):t.split(n,e):[]},De.spread=function(t,n){if("function"!=typeof t)throw new At(o);return n=null==n?0:ye(da(n),0),Hr((function(e){var r=e[n],i=gi(e,0,n);return r&&En(i,r),gn(t,this,i)}))},De.tail=function(t){var n=null==t?0:t.length;return n?ti(t,1,n):[]},De.take=function(t,n,e){return t&&t.length?ti(t,0,(n=e||n===i?1:da(n))<0?0:n):[]},De.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,(n=r-(n=e||n===i?1:da(n)))<0?0:n,r):[]},De.takeRightWhile=function(t,n){return t&&t.length?fi(t,oo(n,3),!1,!0):[]},De.takeWhile=function(t,n){return t&&t.length?fi(t,oo(n,3)):[]},De.tap=function(t,n){return n(t),t},De.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new At(o);return ta(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),Iu(t,n,{leading:r,maxWait:n,trailing:i})},De.thru=pu,De.toArray=ha,De.toPairs=Da,De.toPairsIn=Ra,De.toPath=function(t){return Zu(t)?Nn(t,Lo):ca(t)?[t]:Ni(Oo(ga(t)))},De.toPlainObject=ba,De.transform=function(t,n,e){var r=Zu(t),i=r||Xu(t)||sa(t);if(n=oo(n,4),null==e){var o=t&&t.constructor;e=i?r?new o:[]:ta(t)&&Ku(o)?Re(Xt(t)):{}}return(i?mn:gr)(t,(function(t,r,i){return n(e,t,r,i)})),e},De.unary=function(t){return Eu(t,1)},De.union=nu,De.unionBy=eu,De.unionWith=ru,De.uniq=function(t){return t&&t.length?ai(t):[]},De.uniqBy=function(t,n){return t&&t.length?ai(t,oo(n,2)):[]},De.uniqWith=function(t,n){return n="function"==typeof n?n:i,t&&t.length?ai(t,i,n):[]},De.unset=function(t,n){return null==t||ci(t,n)},De.unzip=iu,De.unzipWith=ou,De.update=function(t,n,e){return null==t?t:si(t,n,vi(e))},De.updateWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:si(t,n,vi(e),r)},De.values=Va,De.valuesIn=function(t){return null==t?[]:Zn(t,Fa(t))},De.without=uu,De.words=Ka,De.wrap=function(t,n){return Lu(vi(n),t)},De.xor=au,De.xorBy=cu,De.xorWith=su,De.zip=fu,De.zipObject=function(t,n){return pi(t||[],n||[],Je)},De.zipObjectDeep=function(t,n){return pi(t||[],n||[],Gr)},De.zipWith=lu,De.entries=Da,De.entriesIn=Ra,De.extend=ma,De.extendWith=xa,ac(De,De),De.add=gc,De.attempt=Qa,De.camelCase=Ba,De.capitalize=Ua,De.ceil=_c,De.clamp=function(t,n,e){return e===i&&(e=n,n=i),e!==i&&(e=(e=ya(e))==e?e:0),n!==i&&(n=(n=ya(n))==n?n:0),or(ya(t),n,e)},De.clone=function(t){return ur(t,4)},De.cloneDeep=function(t){return ur(t,5)},De.cloneDeepWith=function(t,n){return ur(t,5,n="function"==typeof n?n:i)},De.cloneWith=function(t,n){return ur(t,4,n="function"==typeof n?n:i)},De.conformsTo=function(t,n){return null==n||ar(t,n,Ia(n))},De.deburr=qa,De.defaultTo=function(t,n){return null==t||t!=t?n:t},De.divide=mc,De.endsWith=function(t,n,e){t=ga(t),n=ui(n);var r=t.length,o=e=e===i?r:or(da(e),0,r);return(e-=n.length)>=0&&t.slice(e,o)==n},De.eq=Vu,De.escape=function(t){return(t=ga(t))&&X.test(t)?t.replace(W,Gn):t},De.escapeRegExp=function(t){return(t=ga(t))&&et.test(t)?t.replace(nt,"\\$&"):t},De.every=function(t,n,e){var r=Zu(t)?wn:hr;return e&&bo(t,n,e)&&(n=i),r(t,oo(n,3))},De.find=yu,De.findIndex=qo,De.findKey=function(t,n){return Fn(t,oo(n,3),gr)},De.findLast=bu,De.findLastIndex=Zo,De.findLastKey=function(t,n){return Fn(t,oo(n,3),_r)},De.floor=xc,De.forEach=gu,De.forEachRight=_u,De.forIn=function(t,n){return null==t?t:yr(t,oo(n,3),Fa)},De.forInRight=function(t,n){return null==t?t:br(t,oo(n,3),Fa)},De.forOwn=function(t,n){return t&&gr(t,oo(n,3))},De.forOwnRight=function(t,n){return t&&_r(t,oo(n,3))},De.get=Na,De.gt=Bu,De.gte=Uu,De.has=function(t,n){return null!=t&&ho(t,n,Tr)},De.hasIn=Ea,De.head=Wo,De.identity=rc,De.includes=function(t,n,e,r){t=Wu(t)?t:Va(t),e=e&&!r?da(e):0;var i=t.length;return e<0&&(e=ye(i+e,0)),aa(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&zn(t,n,e)>-1},De.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:da(e);return i<0&&(i=ye(r+i,0)),zn(t,n,i)},De.inRange=function(t,n,e){return n=pa(n),e===i?(e=n,n=0):e=pa(e),function(t,n,e){return t>=be(n,e)&&t<ye(n,e)}(t=ya(t),n,e)},De.invoke=Ca,De.isArguments=qu,De.isArray=Zu,De.isArrayBuffer=Yu,De.isArrayLike=Wu,De.isArrayLikeObject=Hu,De.isBoolean=function(t){return!0===t||!1===t||na(t)&&Sr(t)==b},De.isBuffer=Xu,De.isDate=$u,De.isElement=function(t){return na(t)&&1===t.nodeType&&!ia(t)},De.isEmpty=function(t){if(null==t)return!0;if(Wu(t)&&(Zu(t)||"string"==typeof t||"function"==typeof t.splice||Xu(t)||sa(t)||qu(t)))return!t.length;var n=lo(t);if(n==w||n==E)return!t.size;if(xo(t))return!zr(t).length;for(var e in t)if(zt.call(t,e))return!1;return!0},De.isEqual=function(t,n){return Cr(t,n)},De.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:i)?e(t,n):i;return r===i?Cr(t,n,i,e):!!r},De.isError=Gu,De.isFinite=function(t){return"number"==typeof t&&pe(t)},De.isFunction=Ku,De.isInteger=Qu,De.isLength=Ju,De.isMap=ea,De.isMatch=function(t,n){return t===n||Ir(t,n,ao(n))},De.isMatchWith=function(t,n,e){return e="function"==typeof e?e:i,Ir(t,n,ao(n),e)},De.isNaN=function(t){return ra(t)&&t!=+t},De.isNative=function(t){if(mo(t))throw new wt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Fr(t)},De.isNil=function(t){return null==t},De.isNull=function(t){return null===t},De.isNumber=ra,De.isObject=ta,De.isObjectLike=na,De.isPlainObject=ia,De.isRegExp=oa,De.isSafeInteger=function(t){return Qu(t)&&t>=-9007199254740991&&t<=l},De.isSet=ua,De.isString=aa,De.isSymbol=ca,De.isTypedArray=sa,De.isUndefined=function(t){return t===i},De.isWeakMap=function(t){return na(t)&&lo(t)==C},De.isWeakSet=function(t){return na(t)&&"[object WeakSet]"==Sr(t)},De.join=function(t,n){return null==t?"":de.call(t,n)},De.kebabCase=Za,De.last=Go,De.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=r;return e!==i&&(o=(o=da(e))<0?ye(r+o,0):be(o,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,o):Pn(t,On,o,!0)},De.lowerCase=Ya,De.lowerFirst=Wa,De.lt=fa,De.lte=la,De.max=function(t){return t&&t.length?pr(t,rc,Mr):i},De.maxBy=function(t,n){return t&&t.length?pr(t,oo(n,2),Mr):i},De.mean=function(t){return Ln(t,rc)},De.meanBy=function(t,n){return Ln(t,oo(n,2))},De.min=function(t){return t&&t.length?pr(t,rc,jr):i},De.minBy=function(t,n){return t&&t.length?pr(t,oo(n,2),jr):i},De.stubArray=vc,De.stubFalse=yc,De.stubObject=function(){return{}},De.stubString=function(){return""},De.stubTrue=function(){return!0},De.multiply=wc,De.nth=function(t,n){return t&&t.length?Vr(t,da(n)):i},De.noConflict=function(){return un._===this&&(un._=Rt),this},De.noop=cc,De.now=Nu,De.pad=function(t,n,e){t=ga(t);var r=(n=da(n))?ie(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return Bi(fe(i),e)+t+Bi(se(i),e)},De.padEnd=function(t,n,e){t=ga(t);var r=(n=da(n))?ie(t):0;return n&&r<n?t+Bi(n-r,e):t},De.padStart=function(t,n,e){t=ga(t);var r=(n=da(n))?ie(t):0;return n&&r<n?Bi(n-r,e)+t:t},De.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),_e(ga(t).replace(it,""),n||0)},De.random=function(t,n,e){if(e&&"boolean"!=typeof e&&bo(t,n,e)&&(n=e=i),e===i&&("boolean"==typeof n?(e=n,n=i):"boolean"==typeof t&&(e=t,t=i)),t===i&&n===i?(t=0,n=1):(t=pa(t),n===i?(n=t,t=0):n=pa(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var o=me();return be(t+o*(n-t+nn("1e-"+((o+"").length-1))),n)}return Yr(t,n)},De.reduce=function(t,n,e){var r=Zu(t)?An:Vn,i=arguments.length<3;return r(t,oo(n,4),e,i,fr)},De.reduceRight=function(t,n,e){var r=Zu(t)?kn:Vn,i=arguments.length<3;return r(t,oo(n,4),e,i,lr)},De.repeat=function(t,n,e){return n=(e?bo(t,n,e):n===i)?1:da(n),Wr(ga(t),n)},De.replace=function(){var t=arguments,n=ga(t[0]);return t.length<3?n:n.replace(t[1],t[2])},De.result=function(t,n,e){var r=-1,o=(n=yi(n,t)).length;for(o||(o=1,t=i);++r<o;){var u=null==t?i:t[Lo(n[r])];u===i&&(r=o,u=e),t=Ku(u)?u.call(t):u}return t},De.round=Sc,De.runInContext=t,De.sample=function(t){return(Zu(t)?$e:Xr)(t)},De.size=function(t){if(null==t)return 0;if(Wu(t))return aa(t)?ie(t):t.length;var n=lo(t);return n==w||n==E?t.size:zr(t).length},De.snakeCase=Ha,De.some=function(t,n,e){var r=Zu(t)?Cn:ni;return e&&bo(t,n,e)&&(n=i),r(t,oo(n,3))},De.sortedIndex=function(t,n){return ei(t,n)},De.sortedIndexBy=function(t,n,e){return ri(t,n,oo(e,2))},De.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=ei(t,n);if(r<e&&Vu(t[r],n))return r}return-1},De.sortedLastIndex=function(t,n){return ei(t,n,!0)},De.sortedLastIndexBy=function(t,n,e){return ri(t,n,oo(e,2),!0)},De.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var e=ei(t,n,!0)-1;if(Vu(t[e],n))return e}return-1},De.startCase=Xa,De.startsWith=function(t,n,e){return t=ga(t),e=null==e?0:or(da(e),0,t.length),n=ui(n),t.slice(e,e+n.length)==n},De.subtract=Mc,De.sum=function(t){return t&&t.length?Bn(t,rc):0},De.sumBy=function(t,n){return t&&t.length?Bn(t,oo(n,2)):0},De.template=function(t,n,e){var r=De.templateSettings;e&&bo(t,n,e)&&(n=i),t=ga(t),n=xa({},n,r,$i);var o,u,a=xa({},n.imports,r.imports,$i),c=Ia(a),s=Zn(a,c),f=0,l=n.interpolate||_t,h="__p += '",p=Nt((n.escape||_t).source+"|"+l.source+"|"+(l===K?lt:_t).source+"|"+(n.evaluate||_t).source+"|$","g"),d="//# sourceURL="+(zt.call(n,"sourceURL")?(n.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Kt+"]")+"\n";t.replace(p,(function(n,e,r,i,a,c){return r||(r=i),h+=t.slice(f,c).replace(mt,Kn),e&&(o=!0,h+="' +\n__e("+e+") +\n'"),a&&(u=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),f=c+n.length,n})),h+="';\n";var v=zt.call(n,"variable")&&n.variable;v||(h="with (obj) {\n"+h+"\n}\n"),h=(u?h.replace(U,""):h).replace(q,"$1").replace(Z,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var y=Qa((function(){return St(c,d+"return "+h).apply(i,s)}));if(y.source=h,Gu(y))throw y;return y},De.times=function(t,n){if((t=da(t))<1||t>l)return[];var e=p,r=be(t,p);n=oo(n),t-=p;for(var i=Un(r,n);++e<t;)n(e);return i},De.toFinite=pa,De.toInteger=da,De.toLength=va,De.toLower=function(t){return ga(t).toLowerCase()},De.toNumber=ya,De.toSafeInteger=function(t){return t?or(da(t),-9007199254740991,l):0===t?t:0},De.toString=ga,De.toUpper=function(t){return ga(t).toUpperCase()},De.trim=function(t,n,e){if((t=ga(t))&&(e||n===i))return t.replace(rt,"");if(!t||!(n=ui(n)))return t;var r=oe(t),o=oe(n);return gi(r,Wn(r,o),Hn(r,o)+1).join("")},De.trimEnd=function(t,n,e){if((t=ga(t))&&(e||n===i))return t.replace(ot,"");if(!t||!(n=ui(n)))return t;var r=oe(t);return gi(r,0,Hn(r,oe(n))+1).join("")},De.trimStart=function(t,n,e){if((t=ga(t))&&(e||n===i))return t.replace(it,"");if(!t||!(n=ui(n)))return t;var r=oe(t);return gi(r,Wn(r,oe(n))).join("")},De.truncate=function(t,n){var e=30,r="...";if(ta(n)){var o="separator"in n?n.separator:o;e="length"in n?da(n.length):e,r="omission"in n?ui(n.omission):r}var u=(t=ga(t)).length;if(Qn(t)){var a=oe(t);u=a.length}if(e>=u)return t;var c=e-ie(r);if(c<1)return r;var s=a?gi(a,0,c).join(""):t.slice(0,c);if(o===i)return s+r;if(a&&(c+=s.length-c),oa(o)){if(t.slice(c).search(o)){var f,l=s;for(o.global||(o=Nt(o.source,ga(ht.exec(o))+"g")),o.lastIndex=0;f=o.exec(l);)var h=f.index;s=s.slice(0,h===i?c:h)}}else if(t.indexOf(ui(o),c)!=c){var p=s.lastIndexOf(o);p>-1&&(s=s.slice(0,p))}return s+r},De.unescape=function(t){return(t=ga(t))&&H.test(t)?t.replace(Y,ue):t},De.uniqueId=function(t){var n=++jt;return ga(t)+n},De.upperCase=$a,De.upperFirst=Ga,De.each=gu,De.eachRight=_u,De.first=Wo,ac(De,(bc={},gr(De,(function(t,n){zt.call(De.prototype,n)||(bc[n]=t)})),bc),{chain:!1}),De.VERSION="4.17.15",mn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){De[t].placeholder=De})),mn(["drop","take"],(function(t,n){Ue.prototype[t]=function(e){e=e===i?1:ye(da(e),0);var r=this.__filtered__&&!n?new Ue(this):this.clone();return r.__filtered__?r.__takeCount__=be(e,r.__takeCount__):r.__views__.push({size:be(e,p),type:t+(r.__dir__<0?"Right":"")}),r},Ue.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),mn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;Ue.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:oo(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),mn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");Ue.prototype[t]=function(){return this[e](1).value()[0]}})),mn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");Ue.prototype[t]=function(){return this.__filtered__?new Ue(this):this[e](1)}})),Ue.prototype.compact=function(){return this.filter(rc)},Ue.prototype.find=function(t){return this.filter(t).head()},Ue.prototype.findLast=function(t){return this.reverse().find(t)},Ue.prototype.invokeMap=Hr((function(t,n){return"function"==typeof t?new Ue(this):this.map((function(e){return Ar(e,t,n)}))})),Ue.prototype.reject=function(t){return this.filter(ju(oo(t)))},Ue.prototype.slice=function(t,n){t=da(t);var e=this;return e.__filtered__&&(t>0||n<0)?new Ue(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==i&&(e=(n=da(n))<0?e.dropRight(-n):e.take(n-t)),e)},Ue.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Ue.prototype.toArray=function(){return this.take(p)},gr(Ue.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),o=De[r?"take"+("last"==n?"Right":""):n],u=r||/^find/.test(n);o&&(De.prototype[n]=function(){var n=this.__wrapped__,a=r?[1]:arguments,c=n instanceof Ue,s=a[0],f=c||Zu(n),l=function(t){var n=o.apply(De,En([t],a));return r&&h?n[0]:n};f&&e&&"function"==typeof s&&1!=s.length&&(c=f=!1);var h=this.__chain__,p=!!this.__actions__.length,d=u&&!h,v=c&&!p;if(!u&&f){n=v?n:new Ue(this);var y=t.apply(n,a);return y.__actions__.push({func:pu,args:[l],thisArg:i}),new Be(y,h)}return d&&v?t.apply(this,a):(y=this.thru(l),d?r?y.value()[0]:y.value():y)})})),mn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=kt[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);De.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(Zu(i)?i:[],t)}return this[e]((function(e){return n.apply(Zu(e)?e:[],t)}))}})),gr(Ue.prototype,(function(t,n){var e=De[n];if(e){var r=e.name+"";zt.call(ke,r)||(ke[r]=[]),ke[r].push({name:n,func:e})}})),ke[Li(i,2).name]=[{name:"wrapper",func:i}],Ue.prototype.clone=function(){var t=new Ue(this.__wrapped__);return t.__actions__=Ni(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ni(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ni(this.__views__),t},Ue.prototype.reverse=function(){if(this.__filtered__){var t=new Ue(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Ue.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=Zu(t),r=n<0,i=e?t.length:0,o=function(t,n,e){for(var r=-1,i=e.length;++r<i;){var o=e[r],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":n-=u;break;case"take":n=be(n,t+u);break;case"takeRight":t=ye(t,n-u)}}return{start:t,end:n}}(0,i,this.__views__),u=o.start,a=o.end,c=a-u,s=r?a:u-1,f=this.__iteratees__,l=f.length,h=0,p=be(c,this.__takeCount__);if(!e||!r&&i==c&&p==c)return li(t,this.__actions__);var d=[];t:for(;c--&&h<p;){for(var v=-1,y=t[s+=n];++v<l;){var b=f[v],g=b.iteratee,_=b.type,m=g(y);if(2==_)y=m;else if(!m){if(1==_)continue t;break t}}d[h++]=y}return d},De.prototype.at=du,De.prototype.chain=function(){return hu(this)},De.prototype.commit=function(){return new Be(this.value(),this.__chain__)},De.prototype.next=function(){this.__values__===i&&(this.__values__=ha(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},De.prototype.plant=function(t){for(var n,e=this;e instanceof Ve;){var r=Ro(e);r.__index__=0,r.__values__=i,n?o.__wrapped__=r:n=r;var o=r;e=e.__wrapped__}return o.__wrapped__=t,n},De.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Ue){var n=t;return this.__actions__.length&&(n=new Ue(this)),(n=n.reverse()).__actions__.push({func:pu,args:[tu],thisArg:i}),new Be(n,this.__chain__)}return this.thru(tu)},De.prototype.toJSON=De.prototype.valueOf=De.prototype.value=function(){return li(this.__wrapped__,this.__actions__)},De.prototype.first=De.prototype.head,cn&&(De.prototype[cn]=function(){return this}),De}();un._=ae,(r=function(){return ae}.call(n,e,n,t))===i||(t.exports=r)}.call(this)},4143:(t,n,e)=>{"use strict";e.r(n),e.d(n,{ArgumentOutOfRangeError:()=>k.W,AsyncSubject:()=>f.c,BehaviorSubject:()=>c.X,ConnectableObservable:()=>i.c,EMPTY:()=>X.E,EmptyError:()=>C.K,GroupedObservable:()=>o.T,NEVER:()=>ft,Notification:()=>M.P,NotificationKind:()=>M.W,ObjectUnsubscribedError:()=>I.N,Observable:()=>r.y,ReplaySubject:()=>s.t,Scheduler:()=>x.b,Subject:()=>a.xQ,Subscriber:()=>S.L,Subscription:()=>w.w,TimeoutError:()=>P.W,UnsubscriptionError:()=>F.B,VirtualAction:()=>m,VirtualTimeScheduler:()=>_,animationFrameScheduler:()=>g,asapScheduler:()=>l.e,asyncScheduler:()=>h.P,bindCallback:()=>D,bindNodeCallback:()=>B,combineLatest:()=>Y.aj,concat:()=>W.z,config:()=>At.v,defer:()=>H.P,empty:()=>X.c,forkJoin:()=>K,from:()=>G.D,fromEvent:()=>tt,fromEventPattern:()=>et,generate:()=>rt,identity:()=>E.y,iif:()=>ot,interval:()=>at,isObservable:()=>A,merge:()=>st.T,never:()=>lt,noop:()=>N.Z,observable:()=>u.L,of:()=>ht.of,onErrorResumeNext:()=>pt,pairs:()=>dt,partition:()=>_t,pipe:()=>T.z,queueScheduler:()=>p.c,race:()=>mt.S3,range:()=>xt,scheduled:()=>Et.x,throwError:()=>St._,timer:()=>Mt.H,using:()=>Tt,zip:()=>Nt.$R});var r=e(2772),i=e(3140),o=e(1120),u=e(5050),a=e(211),c=e(9233),s=e(2630),f=e(364),l=e(6650),h=e(964),p=e(2546),d=e(655),v=e(6114),y=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return d.ZT(n,t),n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,n,e,r):(n.actions.push(this),n.scheduled||(n.scheduled=requestAnimationFrame((function(){return n.flush(null)}))))},n.prototype.recycleAsyncId=function(n,e,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,n,e,r);0===n.actions.length&&(cancelAnimationFrame(e),n.scheduled=void 0)},n}(v.o),b=e(8399),g=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return d.ZT(n,t),n.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var n,e=this.actions,r=-1,i=e.length;t=t||e.shift();do{if(n=t.execute(t.state,t.delay))break}while(++r<i&&(t=e.shift()));if(this.active=!1,n){for(;++r<i&&(t=e.shift());)t.unsubscribe();throw n}},n}(b.v))(y),_=function(t){function n(n,e){void 0===n&&(n=m),void 0===e&&(e=Number.POSITIVE_INFINITY);var r=t.call(this,n,(function(){return r.frame}))||this;return r.maxFrames=e,r.frame=0,r.index=-1,r}return d.ZT(n,t),n.prototype.flush=function(){for(var t,n,e=this.actions,r=this.maxFrames;(n=e[0])&&n.delay<=r&&(e.shift(),this.frame=n.delay,!(t=n.execute(n.state,n.delay))););if(t){for(;n=e.shift();)n.unsubscribe();throw t}},n.frameTimeFactor=10,n}(b.v),m=function(t){function n(n,e,r){void 0===r&&(r=n.index+=1);var i=t.call(this,n,e)||this;return i.scheduler=n,i.work=e,i.index=r,i.active=!0,i.index=n.index=r,i}return d.ZT(n,t),n.prototype.schedule=function(e,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,e,r);this.active=!1;var i=new n(this.scheduler,this.work);return this.add(i),i.schedule(e,r)},n.prototype.requestAsyncId=function(t,e,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(n.sortActions),!0},n.prototype.recycleAsyncId=function(t,n,e){void 0===e&&(e=0)},n.prototype._execute=function(n,e){if(!0===this.active)return t.prototype._execute.call(this,n,e)},n.sortActions=function(t,n){return t.delay===n.delay?t.index===n.index?0:t.index>n.index?1:-1:t.delay>n.delay?1:-1},n}(v.o),x=e(8725),w=e(8760),S=e(979),M=e(2632),T=e(2561),N=e(3306),E=e(3608);function A(t){return!!t&&(t instanceof r.y||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var k=e(6565),C=e(6929),I=e(1016),F=e(8782),P=e(1462),z=e(5709),j=e(3642),O=e(9026),L=e(7507);function D(t,n,e){if(n){if(!(0,L.K)(n))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return D(t,e).apply(void 0,r).pipe((0,z.U)((function(t){return(0,O.k)(t)?n.apply(void 0,t):n(t)})))};e=n}return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o,u=this,a={context:u,subject:o,callbackFunc:t,scheduler:e};return new r.y((function(r){if(e){var i={args:n,subscriber:r,params:a};return e.schedule(R,0,i)}if(!o){o=new f.c;try{t.apply(u,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){(0,j._)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)}))}}function R(t){var n=this,e=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,u=i.context,a=i.scheduler,c=i.subject;if(!c){c=i.subject=new f.c;try{o.apply(u,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.length<=1?t[0]:t;n.add(a.schedule(V,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function V(t){var n=t.value,e=t.subject;e.next(n),e.complete()}function B(t,n,e){if(n){if(!(0,L.K)(n))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return B(t,e).apply(void 0,r).pipe((0,z.U)((function(t){return(0,O.k)(t)?n.apply(void 0,t):n(t)})))};e=n}return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o={subject:void 0,args:n,callbackFunc:t,scheduler:e,context:this};return new r.y((function(r){var i=o.context,u=o.subject;if(e)return e.schedule(U,0,{params:o,subscriber:r,context:i});if(!u){u=o.subject=new f.c;try{t.apply(i,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.shift();e?u.error(e):(u.next(t.length<=1?t[0]:t),u.complete())}]))}catch(t){(0,j._)(u)?u.error(t):console.warn(t)}}return u.subscribe(r)}))}}function U(t){var n=this,e=t.params,r=t.subscriber,i=t.context,o=e.callbackFunc,u=e.args,a=e.scheduler,c=e.subject;if(!c){c=e.subject=new f.c;try{o.apply(i,u.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.shift();if(r)n.add(a.schedule(Z,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;n.add(a.schedule(q,0,{value:i,subject:c}))}}]))}catch(t){this.add(a.schedule(Z,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function q(t){var n=t.value,e=t.subject;e.next(n),e.complete()}function Z(t){var n=t.err;t.subject.error(n)}var Y=e(5142),W=e(9795),H=e(1410),X=e(5631),$=e(2009),G=e(5760);function K(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){var e=t[0];if((0,O.k)(e))return Q(e,null);if((0,$.K)(e)&&Object.getPrototypeOf(e)===Object.prototype){var r=Object.keys(e);return Q(r.map((function(t){return e[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return Q(t=1===t.length&&(0,O.k)(t[0])?t[0]:t,null).pipe((0,z.U)((function(t){return i.apply(void 0,t)})))}return Q(t,null)}function Q(t,n){return new r.y((function(e){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,u=0,a=function(a){var c=(0,G.D)(t[a]),s=!1;e.add(c.subscribe({next:function(t){s||(s=!0,u++),i[a]=t},error:function(t){return e.error(t)},complete:function(){++o!==r&&s||(u===r&&e.next(n?n.reduce((function(t,n,e){return t[n]=i[e],t}),{}):i),e.complete())}}))},c=0;c<r;c++)a(c);else e.complete()}))}var J=e(4156);function tt(t,n,e,i){return(0,J.m)(e)&&(i=e,e=void 0),i?tt(t,n,e).pipe((0,z.U)((function(t){return(0,O.k)(t)?i.apply(void 0,t):i(t)}))):new r.y((function(r){nt(t,n,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,e)}))}function nt(t,n,e,r,i){var o;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(t)){var u=t;t.addEventListener(n,e,i),o=function(){return u.removeEventListener(n,e,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(t)){var a=t;t.on(n,e),o=function(){return a.off(n,e)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(t)){var c=t;t.addListener(n,e),o=function(){return c.removeListener(n,e)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var s=0,f=t.length;s<f;s++)nt(t[s],n,e,r,i)}r.add(o)}function et(t,n,e){return e?et(t,n).pipe((0,z.U)((function(t){return(0,O.k)(t)?e.apply(void 0,t):e(t)}))):new r.y((function(e){var r,i=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void e.error(t)}if((0,J.m)(n))return function(){return n(i,r)}}))}function rt(t,n,e,i,o){var u,a;if(1==arguments.length){var c=t;a=c.initialState,n=c.condition,e=c.iterate,u=c.resultSelector||E.y,o=c.scheduler}else void 0===i||(0,L.K)(i)?(a=t,u=E.y,o=i):(a=t,u=i);return new r.y((function(t){var r=a;if(o)return o.schedule(it,0,{subscriber:t,iterate:e,condition:n,resultSelector:u,state:r});for(;;){if(n){var i=void 0;try{i=n(r)}catch(n){return void t.error(n)}if(!i){t.complete();break}}var c=void 0;try{c=u(r)}catch(n){return void t.error(n)}if(t.next(c),t.closed)break;try{r=e(r)}catch(n){return void t.error(n)}}}))}function it(t){var n=t.subscriber,e=t.condition;if(!n.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void n.error(t)}else t.needIterate=!0;if(e){var r=void 0;try{r=e(t.state)}catch(t){return void n.error(t)}if(!r)return void n.complete();if(n.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void n.error(t)}if(!n.closed&&(n.next(i),!n.closed))return this.schedule(t)}}function ot(t,n,e){return void 0===n&&(n=X.E),void 0===e&&(e=X.E),(0,H.P)((function(){return t()?n:e}))}var ut=e(5812);function at(t,n){return void 0===t&&(t=0),void 0===n&&(n=h.P),(!(0,ut.k)(t)||t<0)&&(t=0),n&&"function"==typeof n.schedule||(n=h.P),new r.y((function(e){return e.add(n.schedule(ct,t,{subscriber:e,counter:0,period:t})),e}))}function ct(t){var n=t.subscriber,e=t.counter,r=t.period;n.next(e),this.schedule({subscriber:n,counter:e+1,period:r},r)}var st=e(4370),ft=new r.y(N.Z);function lt(){return ft}var ht=e(8170);function pt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(0===t.length)return X.E;var e=t[0],i=t.slice(1);return 1===t.length&&(0,O.k)(e)?pt.apply(void 0,e):new r.y((function(t){var n=function(){return t.add(pt.apply(void 0,i).subscribe(t))};return(0,G.D)(e).subscribe({next:function(n){t.next(n)},error:n,complete:n})}))}function dt(t,n){return n?new r.y((function(e){var r=Object.keys(t),i=new w.w;return i.add(n.schedule(vt,0,{keys:r,index:0,subscriber:e,subscription:i,obj:t})),i})):new r.y((function(n){for(var e=Object.keys(t),r=0;r<e.length&&!n.closed;r++){var i=e[r];t.hasOwnProperty(i)&&n.next([i,t[i]])}n.complete()}))}function vt(t){var n=t.keys,e=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(e<n.length){var u=n[e];r.next([u,o[u]]),i.add(this.schedule({keys:n,index:e+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var yt=e(8463),bt=e(7843),gt=e(6008);function _t(t,n,e){return[(0,gt.h)(n,e)(new r.y((0,bt.s)(t))),(0,gt.h)((0,yt.f)(n,e))(new r.y((0,bt.s)(t)))]}var mt=e(8821);function xt(t,n,e){return void 0===t&&(t=0),new r.y((function(r){void 0===n&&(n=t,t=0);var i=0,o=t;if(e)return e.schedule(wt,0,{index:i,count:n,start:t,subscriber:r});for(;;){if(i++>=n){r.complete();break}if(r.next(o++),r.closed)break}}))}function wt(t){var n=t.start,e=t.index,r=t.count,i=t.subscriber;e>=r?i.complete():(i.next(n),i.closed||(t.index=e+1,t.start=n+1,this.schedule(t)))}var St=e(4944),Mt=e(9604);function Tt(t,n){return new r.y((function(e){var r,i;try{r=t()}catch(t){return void e.error(t)}try{i=n(r)}catch(t){return void e.error(t)}var o=(i?(0,G.D)(i):X.E).subscribe(e);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}var Nt=e(5080),Et=e(8107),At=e(150)},364:(t,n,e)=>{"use strict";e.d(n,{c:()=>u});var r=e(655),i=e(211),o=e(8760),u=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.value=null,n.hasNext=!1,n.hasCompleted=!1,n}return r.ZT(n,t),n.prototype._subscribe=function(n){return this.hasError?(n.error(this.thrownError),o.w.EMPTY):this.hasCompleted&&this.hasNext?(n.next(this.value),n.complete(),o.w.EMPTY):t.prototype._subscribe.call(this,n)},n.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},n.prototype.error=function(n){this.hasCompleted||t.prototype.error.call(this,n)},n.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},n}(i.xQ)},9233:(t,n,e)=>{"use strict";e.d(n,{X:()=>u});var r=e(655),i=e(211),o=e(1016),u=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return r.ZT(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return e&&!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.N;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(i.xQ)},1112:(t,n,e)=>{"use strict";e.d(n,{d:()=>i});var r=e(655),i=function(t){function n(n,e,r){var i=t.call(this)||this;return i.parent=n,i.outerValue=e,i.outerIndex=r,i.index=0,i}return r.ZT(n,t),n.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},n.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},n}(e(979).L)},2632:(t,n,e)=>{"use strict";e.d(n,{W:()=>r,P:()=>a});var r,i=e(5631),o=e(8170),u=e(4944);r||(r={});var a=function(){function t(t,n,e){this.kind=t,this.value=n,this.error=e,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,n,e){switch(this.kind){case"N":return t&&t(this.value);case"E":return n&&n(this.error);case"C":return e&&e()}},t.prototype.accept=function(t,n,e){return t&&"function"==typeof t.next?this.observe(t):this.do(t,n,e)},t.prototype.toObservable=function(){switch(this.kind){case"N":return(0,o.of)(this.value);case"E":return(0,u._)(this.error);case"C":return(0,i.c)()}throw new Error("unexpected notification kind value")},t.createNext=function(n){return void 0!==n?new t("N",n):t.undefinedValueNotification},t.createError=function(n){return new t("E",void 0,n)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},2772:(t,n,e)=>{"use strict";e.d(n,{y:()=>f});var r=e(3642),i=e(979),o=e(3142),u=e(2174),a=e(5050),c=e(2561),s=e(150),f=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r=this.operator,a=function(t,n,e){if(t){if(t instanceof i.L)return t;if(t[o.b])return t[o.b]()}return t||n||e?new i.L(t,n,e):new i.L(u.c)}(t,n,e);if(r?a.add(r.call(a,this.source)):a.add(this.source||s.v.useDeprecatedSynchronousErrorHandling&&!a.syncErrorThrowable?this._subscribe(a):this._trySubscribe(a)),s.v.useDeprecatedSynchronousErrorHandling&&a.syncErrorThrowable&&(a.syncErrorThrowable=!1,a.syncErrorThrown))throw a.syncErrorValue;return a},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){s.v.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),(0,r._)(t)?t.error(n):console.warn(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=l(n))((function(n,r){var i;i=e.subscribe((function(n){try{t(n)}catch(t){r(t),i&&i.unsubscribe()}}),r,n)}))},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[a.L]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:(0,c.U)(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=l(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function l(t){if(t||(t=s.v.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},2174:(t,n,e)=>{"use strict";e.d(n,{c:()=>o});var r=e(150),i=e(1644),o={closed:!0,next:function(t){},error:function(t){if(r.v.useDeprecatedSynchronousErrorHandling)throw t;(0,i.z)(t)},complete:function(){}}},2039:(t,n,e)=>{"use strict";e.d(n,{L:()=>i});var r=e(655),i=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyError=function(t,n){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.complete()},n}(e(979).L)},2630:(t,n,e)=>{"use strict";e.d(n,{t:()=>f});var r=e(655),i=e(211),o=e(2546),u=e(8760),a=e(9276),c=e(1016),s=e(8253),f=function(t){function n(n,e,r){void 0===n&&(n=Number.POSITIVE_INFINITY),void 0===e&&(e=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=n<1?1:n,i._windowTime=e<1?1:e,e===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.ZT(n,t),n.prototype.nextInfiniteTimeWindow=function(n){var e=this._events;e.push(n),e.length>this._bufferSize&&e.shift(),t.prototype.next.call(this,n)},n.prototype.nextTimeWindow=function(n){this._events.push(new l(this._getNow(),n)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,n)},n.prototype._subscribe=function(t){var n,e=this._infiniteTimeWindow,r=e?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new c.N;if(this.isStopped||this.hasError?n=u.w.EMPTY:(this.observers.push(t),n=new s.W(this,t)),i&&t.add(t=new a.ht(t,i)),e)for(var f=0;f<o&&!t.closed;f++)t.next(r[f]);else for(f=0;f<o&&!t.closed;f++)t.next(r[f].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),n},n.prototype._getNow=function(){return(this.scheduler||o.c).now()},n.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),n=this._bufferSize,e=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<e);)o++;return i>n&&(o=Math.max(o,i-n)),o>0&&r.splice(0,o),r},n}(i.xQ),l=function(){return function(t,n){this.time=t,this.value=n}}()},8725:(t,n,e)=>{"use strict";e.d(n,{b:()=>r});var r=function(){function t(n,e){void 0===e&&(e=t.now),this.SchedulerAction=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.SchedulerAction(this,t).schedule(e,n)},t.now=function(){return Date.now()},t}()},211:(t,n,e)=>{"use strict";e.d(n,{Yc:()=>f,xQ:()=>l});var r=e(655),i=e(2772),o=e(979),u=e(8760),a=e(1016),c=e(8253),s=e(3142),f=function(t){function n(n){var e=t.call(this,n)||this;return e.destination=n,e}return r.ZT(n,t),n}(o.L),l=function(t){function n(){var n=t.call(this)||this;return n.observers=[],n.closed=!1,n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return r.ZT(n,t),n.prototype[s.b]=function(){return new f(this)},n.prototype.lift=function(t){var n=new h(this,this);return n.operator=t,n},n.prototype.next=function(t){if(this.closed)throw new a.N;if(!this.isStopped)for(var n=this.observers,e=n.length,r=n.slice(),i=0;i<e;i++)r[i].next(t)},n.prototype.error=function(t){if(this.closed)throw new a.N;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var n=this.observers,e=n.length,r=n.slice(),i=0;i<e;i++)r[i].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new a.N;this.isStopped=!0;for(var t=this.observers,n=t.length,e=t.slice(),r=0;r<n;r++)e[r].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(n){if(this.closed)throw new a.N;return t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){if(this.closed)throw new a.N;return this.hasError?(t.error(this.thrownError),u.w.EMPTY):this.isStopped?(t.complete(),u.w.EMPTY):(this.observers.push(t),new c.W(this,t))},n.prototype.asObservable=function(){var t=new i.y;return t.source=this,t},n.create=function(t,n){return new h(t,n)},n}(i.y),h=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return r.ZT(n,t),n.prototype.next=function(t){var n=this.destination;n&&n.next&&n.next(t)},n.prototype.error=function(t){var n=this.destination;n&&n.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):u.w.EMPTY},n}(l)},8253:(t,n,e)=>{"use strict";e.d(n,{W:()=>i});var r=e(655),i=function(t){function n(n,e){var r=t.call(this)||this;return r.subject=n,r.subscriber=e,r.closed=!1,r}return r.ZT(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,n=t.observers;if(this.subject=null,n&&0!==n.length&&!t.isStopped&&!t.closed){var e=n.indexOf(this.subscriber);-1!==e&&n.splice(e,1)}}},n}(e(8760).w)},979:(t,n,e)=>{"use strict";e.d(n,{L:()=>f});var r=e(655),i=e(4156),o=e(2174),u=e(8760),a=e(3142),c=e(150),s=e(1644),f=function(t){function n(e,r,i){var u=t.call(this)||this;switch(u.syncErrorValue=null,u.syncErrorThrown=!1,u.syncErrorThrowable=!1,u.isStopped=!1,arguments.length){case 0:u.destination=o.c;break;case 1:if(!e){u.destination=o.c;break}if("object"==typeof e){e instanceof n?(u.syncErrorThrowable=e.syncErrorThrowable,u.destination=e,e.add(u)):(u.syncErrorThrowable=!0,u.destination=new l(u,e));break}default:u.syncErrorThrowable=!0,u.destination=new l(u,e,r,i)}return u}return r.ZT(n,t),n.prototype[a.b]=function(){return this},n.create=function(t,e,r){var i=new n(t,e,r);return i.syncErrorThrowable=!1,i},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(u.w),l=function(t){function n(n,e,r,u){var a,c=t.call(this)||this;c._parentSubscriber=n;var s=c;return(0,i.m)(e)?a=e:e&&(a=e.next,r=e.error,u=e.complete,e!==o.c&&(s=Object.create(e),(0,i.m)(s.unsubscribe)&&c.add(s.unsubscribe.bind(s)),s.unsubscribe=c.unsubscribe.bind(c))),c._context=s,c._next=a,c._error=r,c._complete=u,c}return r.ZT(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;c.v.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,e=c.v.useDeprecatedSynchronousErrorHandling;if(this._error)e&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)e?(n.syncErrorValue=t,n.syncErrorThrown=!0):(0,s.z)(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;(0,s.z)(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};c.v.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),c.v.useDeprecatedSynchronousErrorHandling)throw t;(0,s.z)(t)}},n.prototype.__tryOrSetError=function(t,n,e){if(!c.v.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,e)}catch(n){return c.v.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):((0,s.z)(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(f)},8760:(t,n,e)=>{"use strict";e.d(n,{w:()=>a});var r=e(9026),i=e(2009),o=e(4156),u=e(8782),a=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var n;return t.prototype.unsubscribe=function(){var n;if(!this.closed){var e=this,a=e._parentOrParents,s=e._unsubscribe,f=e._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,a instanceof t)a.remove(this);else if(null!==a)for(var l=0;l<a.length;++l)a[l].remove(this);if((0,o.m)(s))try{s.call(this)}catch(t){n=t instanceof u.B?c(t.errors):[t]}if((0,r.k)(f)){l=-1;for(var h=f.length;++l<h;){var p=f[l];if((0,i.K)(p))try{p.unsubscribe()}catch(t){n=n||[],t instanceof u.B?n=n.concat(c(t.errors)):n.push(t)}}}if(n)throw new u.B(n)}},t.prototype.add=function(n){var e=n;if(!n)return t.EMPTY;switch(typeof n){case"function":e=new t(n);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var r=e;(e=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var i=e._parentOrParents;if(null===i)e._parentOrParents=this;else if(i instanceof t){if(i===this)return e;e._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return e;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[e]:o.push(e),e},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}},t.EMPTY=((n=new t).closed=!0,n),t}();function c(t){return t.reduce((function(t,n){return t.concat(n instanceof u.B?n.errors:n)}),[])}},150:(t,n,e)=>{"use strict";e.d(n,{v:()=>i});var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},3140:(t,n,e)=>{"use strict";e.d(n,{c:()=>s,N:()=>f});var r=e(655),i=e(211),o=e(2772),u=e(979),a=e(8760),c=e(3018),s=function(t){function n(n,e){var r=t.call(this)||this;return r.source=n,r.subjectFactory=e,r._refCount=0,r._isComplete=!1,r}return r.ZT(n,t),n.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},n.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},n.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new a.w).add(this.source.subscribe(new l(this.getSubject(),this))),t.closed&&(this._connection=null,t=a.w.EMPTY)),t},n.prototype.refCount=function(){return(0,c.x)()(this)},n}(o.y),f=function(){var t=s.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),l=function(t){function n(n,e){var r=t.call(this,n)||this;return r.connectable=e,r}return r.ZT(n,t),n.prototype._error=function(n){this._unsubscribe(),t.prototype._error.call(this,n)},n.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var n=t._connection;t._refCount=0,t._subject=null,t._connection=null,n&&n.unsubscribe()}},n}(i.Yc);u.L},5142:(t,n,e)=>{"use strict";e.d(n,{aj:()=>f,Ms:()=>l});var r=e(655),i=e(7507),o=e(9026),u=e(2039),a=e(7407),c=e(3375),s={};function f(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null,r=null;return(0,i.K)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&(0,o.k)(t[0])&&(t=t[0]),(0,c.n)(t,r).lift(new l(e))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function n(n,e){var r=t.call(this,n)||this;return r.resultSelector=e,r.active=0,r.values=[],r.observables=[],r}return r.ZT(n,t),n.prototype._next=function(t){this.values.push(s),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var e=0;e<n;e++){var r=t[e];this.add((0,a.D)(this,r,r,e))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.values,u=o[e],a=this.toRespond?u===s?--this.toRespond:this.toRespond:0;o[e]=n,0===a&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(u.L)},9795:(t,n,e)=>{"use strict";e.d(n,{z:()=>o});var r=e(8170),i=e(2257);function o(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(0,i.u)()(r.of.apply(void 0,t))}},1410:(t,n,e)=>{"use strict";e.d(n,{P:()=>u});var r=e(2772),i=e(5760),o=e(5631);function u(t){return new r.y((function(n){var e;try{e=t()}catch(t){return void n.error(t)}return(e?(0,i.D)(e):(0,o.c)()).subscribe(n)}))}},5631:(t,n,e)=>{"use strict";e.d(n,{E:()=>i,c:()=>o});var r=e(2772),i=new r.y((function(t){return t.complete()}));function o(t){return t?function(t){return new r.y((function(n){return t.schedule((function(){return n.complete()}))}))}(t):i}},5760:(t,n,e)=>{"use strict";e.d(n,{D:()=>u});var r=e(2772),i=e(7843),o=e(8107);function u(t,n){return n?(0,o.x)(t,n):t instanceof r.y?t:new r.y((0,i.s)(t))}},3375:(t,n,e)=>{"use strict";e.d(n,{n:()=>u});var r=e(2772),i=e(6900),o=e(3109);function u(t,n){return n?(0,o.r)(t,n):new r.y((0,i.V)(t))}},4370:(t,n,e)=>{"use strict";e.d(n,{T:()=>a});var r=e(2772),i=e(7507),o=e(2556),u=e(3375);function a(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Number.POSITIVE_INFINITY,a=null,c=t[t.length-1];return(0,i.K)(c)?(a=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(e=t.pop())):"number"==typeof c&&(e=t.pop()),null===a&&1===t.length&&t[0]instanceof r.y?t[0]:(0,o.J)(e)((0,u.n)(t,a))}},8170:(t,n,e)=>{"use strict";e.d(n,{of:()=>u});var r=e(7507),i=e(3375),o=e(3109);function u(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return(0,r.K)(e)?(t.pop(),(0,o.r)(t,e)):(0,i.n)(t)}},8821:(t,n,e)=>{"use strict";e.d(n,{S3:()=>c});var r=e(655),i=e(9026),o=e(3375),u=e(2039),a=e(7407);function c(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){if(!(0,i.k)(t[0]))return t[0];t=t[0]}return(0,o.n)(t,void 0).lift(new s)}var s=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new f(t))},t}(),f=function(t){function n(n){var e=t.call(this,n)||this;return e.hasFirst=!1,e.observables=[],e.subscriptions=[],e}return r.ZT(n,t),n.prototype._next=function(t){this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{for(var e=0;e<n&&!this.hasFirst;e++){var r=t[e],i=(0,a.D)(this,r,r,e);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},n.prototype.notifyNext=function(t,n,e,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==e){var u=this.subscriptions[o];u.unsubscribe(),this.remove(u)}this.subscriptions=null}this.destination.next(n)},n}(u.L)},4944:(t,n,e)=>{"use strict";e.d(n,{_:()=>i});var r=e(2772);function i(t,n){return n?new r.y((function(e){return n.schedule(o,0,{error:t,subscriber:e})})):new r.y((function(n){return n.error(t)}))}function o(t){var n=t.error;t.subscriber.error(n)}},9604:(t,n,e)=>{"use strict";e.d(n,{H:()=>a});var r=e(2772),i=e(964),o=e(5812),u=e(7507);function a(t,n,e){void 0===t&&(t=0);var a=-1;return(0,o.k)(n)?a=Number(n)<1?1:Number(n):(0,u.K)(n)&&(e=n),(0,u.K)(e)||(e=i.P),new r.y((function(n){var r=(0,o.k)(t)?t:+t-e.now();return e.schedule(c,r,{index:0,period:a,subscriber:n})}))}function c(t){var n=t.index,e=t.period,r=t.subscriber;if(r.next(n),!r.closed){if(-1===e)return r.complete();t.index=n+1,this.schedule(t,e)}}},5080:(t,n,e)=>{"use strict";e.d(n,{$R:()=>f,mx:()=>l});var r=e(655),i=e(3375),o=e(9026),u=e(979),a=e(2039),c=e(7407),s=e(999);function f(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return"function"==typeof e&&t.pop(),(0,i.n)(t,void 0).lift(new l(e))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function n(n,e,r){void 0===r&&(r=Object.create(null));var i=t.call(this,n)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof e?e:null,i.values=r,i}return r.ZT(n,t),n.prototype._next=function(t){var n=this.iterators;(0,o.k)(t)?n.push(new d(t)):"function"==typeof t[s.hZ]?n.push(new p(t[s.hZ]())):n.push(new v(this.destination,this,t))},n.prototype._complete=function(){var t=this.iterators,n=t.length;if(this.unsubscribe(),0!==n){this.active=n;for(var e=0;e<n;e++){var r=t[e];r.stillUnsubscribed?this.destination.add(r.subscribe(r,e)):this.active--}}else this.destination.complete()},n.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},n.prototype.checkIterators=function(){for(var t=this.iterators,n=t.length,e=this.destination,r=0;r<n;r++)if("function"==typeof(u=t[r]).hasValue&&!u.hasValue())return;var i=!1,o=[];for(r=0;r<n;r++){var u,a=(u=t[r]).next();if(u.hasCompleted()&&(i=!0),a.done)return void e.complete();o.push(a.value)}this.resultSelector?this._tryresultSelector(o):e.next(o),i&&e.complete()},n.prototype._tryresultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(u.L),p=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),d=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[s.hZ]=function(){return this},t.prototype.next=function(t){var n=this.index++,e=this.array;return n<this.length?{value:e[n],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),v=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.parent=e,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.ZT(n,t),n.prototype[s.hZ]=function(){return this},n.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},n.prototype.hasValue=function(){return this.buffer.length>0},n.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},n.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,i){this.buffer.push(n),this.parent.checkIterators()},n.prototype.subscribe=function(t,n){return(0,c.D)(this,this.observable,this,n)},n}(a.L)},2257:(t,n,e)=>{"use strict";e.d(n,{u:()=>i});var r=e(2556);function i(){return(0,r.J)(1)}},6008:(t,n,e)=>{"use strict";e.d(n,{h:()=>o});var r=e(655),i=e(979);function o(t,n){return function(e){return e.lift(new u(t,n))}}var u=function(){function t(t,n){this.predicate=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.predicate,this.thisArg))},t}(),a=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.thisArg=r,i.count=0,i}return r.ZT(n,t),n.prototype._next=function(t){var n;try{n=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}n&&this.destination.next(t)},n}(i.L)},1120:(t,n,e)=>{"use strict";e.d(n,{v:()=>c,T:()=>h});var r=e(655),i=e(979),o=e(8760),u=e(2772),a=e(211);function c(t,n,e,r){return function(i){return i.lift(new s(t,n,e,r))}}var s=function(){function t(t,n,e,r){this.keySelector=t,this.elementSelector=n,this.durationSelector=e,this.subjectSelector=r}return t.prototype.call=function(t,n){return n.subscribe(new f(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),f=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.keySelector=e,u.elementSelector=r,u.durationSelector=i,u.subjectSelector=o,u.groups=null,u.attemptedToUnsubscribe=!1,u.count=0,u}return r.ZT(n,t),n.prototype._next=function(t){var n;try{n=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,n)},n.prototype._group=function(t,n){var e=this.groups;e||(e=this.groups=new Map);var r,i=e.get(n);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new a.xQ,e.set(n,i);var o=new h(n,i,this);if(this.destination.next(o),this.durationSelector){var u=void 0;try{u=this.durationSelector(new h(n,i))}catch(t){return void this.error(t)}this.add(u.subscribe(new l(n,i,this)))}}i.closed||i.next(r)},n.prototype._error=function(t){var n=this.groups;n&&(n.forEach((function(n,e){n.error(t)})),n.clear()),this.destination.error(t)},n.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,n){t.complete()})),t.clear()),this.destination.complete()},n.prototype.removeGroup=function(t){this.groups.delete(t)},n.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},n}(i.L),l=function(t){function n(n,e,r){var i=t.call(this,e)||this;return i.key=n,i.group=e,i.parent=r,i}return r.ZT(n,t),n.prototype._next=function(t){this.complete()},n.prototype._unsubscribe=function(){var t=this.parent,n=this.key;this.key=this.parent=null,t&&t.removeGroup(n)},n}(i.L),h=function(t){function n(n,e,r){var i=t.call(this)||this;return i.key=n,i.groupSubject=e,i.refCountSubscription=r,i}return r.ZT(n,t),n.prototype._subscribe=function(t){var n=new o.w,e=this.refCountSubscription,r=this.groupSubject;return e&&!e.closed&&n.add(new p(e)),n.add(r.subscribe(t)),n},n}(u.y),p=function(t){function n(n){var e=t.call(this)||this;return e.parent=n,n.count++,e}return r.ZT(n,t),n.prototype.unsubscribe=function(){var n=this.parent;n.closed||this.closed||(t.prototype.unsubscribe.call(this),n.count-=1,0===n.count&&n.attemptedToUnsubscribe&&n.unsubscribe())},n}(o.w)},5709:(t,n,e)=>{"use strict";e.d(n,{U:()=>o});var r=e(655),i=e(979);function o(t,n){return function(e){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return e.lift(new u(t,n))}}var u=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.project,this.thisArg))},t}(),a=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.project=e,i.count=0,i.thisArg=r||i,i}return r.ZT(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(i.L)},2556:(t,n,e)=>{"use strict";e.d(n,{J:()=>o});var r=e(7746),i=e(3608);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),(0,r.zg)(i.y,t)}},7746:(t,n,e)=>{"use strict";e.d(n,{zg:()=>s});var r=e(655),i=e(7407),o=e(2039),u=e(1112),a=e(5709),c=e(5760);function s(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?function(r){return r.pipe(s((function(e,r){return(0,c.D)(t(e,r)).pipe((0,a.U)((function(t,i){return n(e,t,r,i)})))}),e))}:("number"==typeof n&&(e=n),function(n){return n.lift(new f(t,e))})}var f=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new l(t,this.project,this.concurrent))},t}(),l=function(t){function n(n,e,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,n)||this;return i.project=e,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return r.ZT(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=new u.d(this,n,e),o=this.destination;o.add(r);var a=(0,i.D)(this,t,void 0,void 0,r);a!==r&&o.add(a)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}(o.L)},9276:(t,n,e)=>{"use strict";e.d(n,{QV:()=>u,ht:()=>c});var r=e(655),i=e(979),o=e(2632);function u(t,n){return void 0===n&&(n=0),function(e){return e.lift(new a(t,n))}}var a=function(){function t(t,n){void 0===n&&(n=0),this.scheduler=t,this.delay=n}return t.prototype.call=function(t,n){return n.subscribe(new c(t,this.scheduler,this.delay))},t}(),c=function(t){function n(n,e,r){void 0===r&&(r=0);var i=t.call(this,n)||this;return i.scheduler=e,i.delay=r,i}return r.ZT(n,t),n.dispatch=function(t){var n=t.notification,e=t.destination;n.observe(e),this.unsubscribe()},n.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(n.dispatch,this.delay,new s(t,this.destination)))},n.prototype._next=function(t){this.scheduleMessage(o.P.createNext(t))},n.prototype._error=function(t){this.scheduleMessage(o.P.createError(t)),this.unsubscribe()},n.prototype._complete=function(){this.scheduleMessage(o.P.createComplete()),this.unsubscribe()},n}(i.L),s=function(){return function(t,n){this.notification=t,this.destination=n}}()},3018:(t,n,e)=>{"use strict";e.d(n,{x:()=>o});var r=e(655),i=e(979);function o(){return function(t){return t.lift(new u(t))}}var u=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,n){var e=this.connectable;e._refCount++;var r=new a(t,e),i=n.subscribe(r);return r.closed||(r.connection=e.connect()),i},t}(),a=function(t){function n(n,e){var r=t.call(this,n)||this;return r.connectable=e,r}return r.ZT(n,t),n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var n=t._refCount;if(n<=0)this.connection=null;else if(t._refCount=n-1,n>1)this.connection=null;else{var e=this.connection,r=t._connection;this.connection=null,!r||e&&r!==e||r.unsubscribe()}}else this.connection=null},n}(i.L)},3109:(t,n,e)=>{"use strict";e.d(n,{r:()=>o});var r=e(2772),i=e(8760);function o(t,n){return new r.y((function(e){var r=new i.w,o=0;return r.add(n.schedule((function(){o!==t.length?(e.next(t[o++]),e.closed||r.add(this.schedule())):e.complete()}))),r}))}},8107:(t,n,e)=>{"use strict";e.d(n,{x:()=>f});var r=e(2772),i=e(8760),o=e(5050),u=e(3109),a=e(999),c=e(336),s=e(9217);function f(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[o.L]}(t))return function(t,n){return new r.y((function(e){var r=new i.w;return r.add(n.schedule((function(){var i=t[o.L]();r.add(i.subscribe({next:function(t){r.add(n.schedule((function(){return e.next(t)})))},error:function(t){r.add(n.schedule((function(){return e.error(t)})))},complete:function(){r.add(n.schedule((function(){return e.complete()})))}}))}))),r}))}(t,n);if((0,c.t)(t))return function(t,n){return new r.y((function(e){var r=new i.w;return r.add(n.schedule((function(){return t.then((function(t){r.add(n.schedule((function(){e.next(t),r.add(n.schedule((function(){return e.complete()})))})))}),(function(t){r.add(n.schedule((function(){return e.error(t)})))}))}))),r}))}(t,n);if((0,s.z)(t))return(0,u.r)(t,n);if(function(t){return t&&"function"==typeof t[a.hZ]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new r.y((function(e){var r,o=new i.w;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(n.schedule((function(){r=t[a.hZ](),o.add(n.schedule((function(){if(!e.closed){var t,n;try{var i=r.next();t=i.value,n=i.done}catch(t){return void e.error(t)}n?e.complete():(e.next(t),this.schedule())}})))}))),o}))}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}},6114:(t,n,e)=>{"use strict";e.d(n,{o:()=>i});var r=e(655),i=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return r.ZT(n,t),n.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},n.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),setInterval(t.flush.bind(t,this),e)},n.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!==e&&this.delay===e&&!1===this.pending)return n;clearInterval(n)},n.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,n){var e=!1,r=void 0;try{this.work(t)}catch(t){e=!0,r=!!t&&t||new Error(t)}if(e)return this.unsubscribe(),r},n.prototype._unsubscribe=function(){var t=this.id,n=this.scheduler,e=n.actions,r=e.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&e.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null},n}(function(t){function n(n,e){return t.call(this)||this}return r.ZT(n,t),n.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},n}(e(8760).w))},8399:(t,n,e)=>{"use strict";e.d(n,{v:()=>o});var r=e(655),i=e(8725),o=function(t){function n(e,r){void 0===r&&(r=i.b.now);var o=t.call(this,e,(function(){return n.delegate&&n.delegate!==o?n.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.ZT(n,t),n.prototype.schedule=function(e,r,i){return void 0===r&&(r=0),n.delegate&&n.delegate!==this?n.delegate.schedule(e,r,i):t.prototype.schedule.call(this,e,r,i)},n.prototype.flush=function(t){var n=this.actions;if(this.active)n.push(t);else{var e;this.active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this.active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},n}(i.b)},6650:(t,n,e)=>{"use strict";e.d(n,{e:()=>s});var r=e(655),i=1,o=function(){return Promise.resolve()}(),u={};function a(t){return t in u&&(delete u[t],!0)}var c=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return r.ZT(n,t),n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,n,e,r):(n.actions.push(this),n.scheduled||(n.scheduled=(c=n.flush.bind(n,null),s=i++,u[s]=!0,o.then((function(){return a(s)&&c()})),s)));var c,s},n.prototype.recycleAsyncId=function(n,e,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,n,e,r);0===n.actions.length&&(a(e),n.scheduled=void 0)},n}(e(6114).o),s=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(n,t),n.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var n,e=this.actions,r=-1,i=e.length;t=t||e.shift();do{if(n=t.execute(t.state,t.delay))break}while(++r<i&&(t=e.shift()));if(this.active=!1,n){for(;++r<i&&(t=e.shift());)t.unsubscribe();throw n}},n}(e(8399).v))(c)},964:(t,n,e)=>{"use strict";e.d(n,{P:()=>i});var r=e(6114),i=new(e(8399).v)(r.o)},2546:(t,n,e)=>{"use strict";e.d(n,{c:()=>o});var r=e(655),i=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return r.ZT(n,t),n.prototype.schedule=function(n,e){return void 0===e&&(e=0),e>0?t.prototype.schedule.call(this,n,e):(this.delay=e,this.state=n,this.scheduler.flush(this),this)},n.prototype.execute=function(n,e){return e>0||this.closed?t.prototype.execute.call(this,n,e):this._execute(n,e)},n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,n,e,r):n.flush(this)},n}(e(6114).o),o=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(n,t),n}(e(8399).v))(i)},999:(t,n,e)=>{"use strict";function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}e.d(n,{hZ:()=>i});var i=r()},5050:(t,n,e)=>{"use strict";e.d(n,{L:()=>r});var r=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}()},3142:(t,n,e)=>{"use strict";e.d(n,{b:()=>r});var r=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}()},6565:(t,n,e)=>{"use strict";e.d(n,{W:()=>r});var r=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}()},6929:(t,n,e)=>{"use strict";e.d(n,{K:()=>r});var r=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}()},1016:(t,n,e)=>{"use strict";e.d(n,{N:()=>r});var r=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}()},1462:(t,n,e)=>{"use strict";e.d(n,{W:()=>r});var r=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}()},8782:(t,n,e)=>{"use strict";e.d(n,{B:()=>r});var r=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}()},3642:(t,n,e)=>{"use strict";e.d(n,{_:()=>i});var r=e(979);function i(t){for(;t;){var n=t,e=n.closed,i=n.destination,o=n.isStopped;if(e||o)return!1;t=i&&i instanceof r.L?i:null}return!0}},1644:(t,n,e)=>{"use strict";function r(t){setTimeout((function(){throw t}),0)}e.d(n,{z:()=>r})},3608:(t,n,e)=>{"use strict";function r(t){return t}e.d(n,{y:()=>r})},9026:(t,n,e)=>{"use strict";e.d(n,{k:()=>r});var r=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}()},9217:(t,n,e)=>{"use strict";e.d(n,{z:()=>r});var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},4156:(t,n,e)=>{"use strict";function r(t){return"function"==typeof t}e.d(n,{m:()=>r})},5812:(t,n,e)=>{"use strict";e.d(n,{k:()=>i});var r=e(9026);function i(t){return!(0,r.k)(t)&&t-parseFloat(t)+1>=0}},2009:(t,n,e)=>{"use strict";function r(t){return null!==t&&"object"==typeof t}e.d(n,{K:()=>r})},336:(t,n,e)=>{"use strict";function r(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}e.d(n,{t:()=>r})},7507:(t,n,e)=>{"use strict";function r(t){return t&&"function"==typeof t.schedule}e.d(n,{K:()=>r})},3306:(t,n,e)=>{"use strict";function r(){}e.d(n,{Z:()=>r})},8463:(t,n,e)=>{"use strict";function r(t,n){function e(){return!e.pred.apply(e.thisArg,arguments)}return e.pred=t,e.thisArg=n,e}e.d(n,{f:()=>r})},2561:(t,n,e)=>{"use strict";e.d(n,{z:()=>i,U:()=>o});var r=e(3608);function i(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return o(t)}function o(t){return 0===t.length?r.y:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}},7843:(t,n,e)=>{"use strict";e.d(n,{s:()=>f});var r=e(6900),i=e(1644),o=e(999),u=e(5050),a=e(9217),c=e(336),s=e(2009),f=function(t){if(t&&"function"==typeof t[u.L])return f=t,function(t){var n=f[u.L]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if((0,a.z)(t))return(0,r.V)(t);if((0,c.t)(t))return e=t,function(t){return e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,i.z),t};if(t&&"function"==typeof t[o.hZ])return n=t,function(t){for(var e=n[o.hZ]();;){var r=e.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof e.return&&t.add((function(){e.return&&e.return()})),t};var n,e,f,l=(0,s.K)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+l+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},6900:(t,n,e)=>{"use strict";e.d(n,{V:()=>r});var r=function(t){return function(n){for(var e=0,r=t.length;e<r&&!n.closed;e++)n.next(t[e]);n.complete()}}},7407:(t,n,e)=>{"use strict";e.d(n,{D:()=>u});var r=e(1112),i=e(7843),o=e(2772);function u(t,n,e,u,a){if(void 0===a&&(a=new r.d(t,e,u)),!a.closed)return n instanceof o.y?n.subscribe(a):(0,i.s)(n)(a)}},1717:(t,n,e)=>{"use strict";e.r(n),e.d(n,{audit:()=>u,auditTime:()=>l,buffer:()=>h,bufferCount:()=>y,bufferTime:()=>x,bufferToggle:()=>k,bufferWhen:()=>F,catchError:()=>O,combineAll:()=>V,combineLatest:()=>q,concat:()=>Y,concatAll:()=>W.u,concatMap:()=>X,concatMapTo:()=>$,count:()=>G,debounce:()=>J,debounceTime:()=>et,defaultIfEmpty:()=>ut,delay:()=>lt,delayWhen:()=>yt,dematerialize:()=>xt,distinct:()=>Mt,distinctUntilChanged:()=>Et,distinctUntilKeyChanged:()=>Ct,elementAt:()=>Ut,endWith:()=>Zt,every:()=>Yt,exhaust:()=>Xt,exhaustMap:()=>Qt,expand:()=>nn,filter:()=>Ft.h,finalize:()=>on,find:()=>cn,findIndex:()=>ln,first:()=>pn,flatMap:()=>H.zg,groupBy:()=>dn.v,ignoreElements:()=>vn,isEmpty:()=>gn,last:()=>Mn,map:()=>Kt.U,mapTo:()=>Tn,materialize:()=>An,max:()=>On,merge:()=>Dn,mergeAll:()=>Rn.J,mergeMap:()=>H.zg,mergeMapTo:()=>Vn,mergeScan:()=>Bn,min:()=>Zn,multicast:()=>Wn,observeOn:()=>Xn.QV,onErrorResumeNext:()=>$n,pairwise:()=>Qn,partition:()=>ee,pluck:()=>re,publish:()=>ue,publishBehavior:()=>ce,publishLast:()=>fe,publishReplay:()=>he,race:()=>de,reduce:()=>jn,refCount:()=>Ee.x,repeat:()=>ve,repeatWhen:()=>ge,retry:()=>xe,retryWhen:()=>Me,sample:()=>Ae,sampleTime:()=>Ie,scan:()=>In,sequenceEqual:()=>je,share:()=>Ve,shareReplay:()=>Be,single:()=>Ue,skip:()=>Ye,skipLast:()=>Xe,skipUntil:()=>Ke,skipWhile:()=>tr,startWith:()=>rr,subscribeOn:()=>ar,switchAll:()=>hr,switchMap:()=>sr,switchMapTo:()=>pr,take:()=>Rt,takeLast:()=>xn,takeUntil:()=>dr,takeWhile:()=>br,tap:()=>wr,throttle:()=>Nr,throttleTime:()=>kr,throwIfEmpty:()=>zt,timeInterval:()=>zr,timeout:()=>Br,timeoutWith:()=>Lr,timestamp:()=>Ur,toArray:()=>Yr,window:()=>Wr,windowCount:()=>$r,windowTime:()=>Qr,windowToggle:()=>oi,windowWhen:()=>ci,withLatestFrom:()=>li,zip:()=>vi,zipAll:()=>yi});var r=e(655),i=e(2039),o=e(7407);function u(t){return function(n){return n.lift(new a(t))}}var a=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new c(t,this.durationSelector))},t}(),c=function(t){function n(n,e){var r=t.call(this,n)||this;return r.durationSelector=e,r.hasValue=!1,r}return r.ZT(n,t),n.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var n=void 0;try{n=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var e=(0,o.D)(this,n);!e||e.closed?this.clearThrottle():this.add(this.throttled=e)}},n.prototype.clearThrottle=function(){var t=this,n=t.value,e=t.hasValue,r=t.throttled;r&&(this.remove(r),this.throttled=null,r.unsubscribe()),e&&(this.value=null,this.hasValue=!1,this.destination.next(n))},n.prototype.notifyNext=function(t,n,e,r){this.clearThrottle()},n.prototype.notifyComplete=function(){this.clearThrottle()},n}(i.L),s=e(964),f=e(9604);function l(t,n){return void 0===n&&(n=s.P),u((function(){return(0,f.H)(t,n)}))}function h(t){return function(n){return n.lift(new p(t))}}var p=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,n){return n.subscribe(new d(t,this.closingNotifier))},t}(),d=function(t){function n(n,e){var r=t.call(this,n)||this;return r.buffer=[],r.add((0,o.D)(r,e)),r}return r.ZT(n,t),n.prototype._next=function(t){this.buffer.push(t)},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.buffer;this.buffer=[],this.destination.next(o)},n}(i.L),v=e(979);function y(t,n){return void 0===n&&(n=null),function(e){return e.lift(new b(t,n))}}var b=function(){function t(t,n){this.bufferSize=t,this.startBufferEvery=n,this.subscriberClass=n&&t!==n?_:g}return t.prototype.call=function(t,n){return n.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),g=function(t){function n(n,e){var r=t.call(this,n)||this;return r.bufferSize=e,r.buffer=[],r}return r.ZT(n,t),n.prototype._next=function(t){var n=this.buffer;n.push(t),n.length==this.bufferSize&&(this.destination.next(n),this.buffer=[])},n.prototype._complete=function(){var n=this.buffer;n.length>0&&this.destination.next(n),t.prototype._complete.call(this)},n}(v.L),_=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.bufferSize=e,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.ZT(n,t),n.prototype._next=function(t){var n=this,e=n.bufferSize,r=n.startBufferEvery,i=n.buffers,o=n.count;this.count++,o%r==0&&i.push([]);for(var u=i.length;u--;){var a=i[u];a.push(t),a.length===e&&(i.splice(u,1),this.destination.next(a))}},n.prototype._complete=function(){for(var n=this.buffers,e=this.destination;n.length>0;){var r=n.shift();r.length>0&&e.next(r)}t.prototype._complete.call(this)},n}(v.L),m=e(7507);function x(t){var n=arguments.length,e=s.P;(0,m.K)(arguments[arguments.length-1])&&(e=arguments[arguments.length-1],n--);var r=null;n>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return n>=3&&(i=arguments[2]),function(n){return n.lift(new w(t,r,i,e))}}var w=function(){function t(t,n,e,r){this.bufferTimeSpan=t,this.bufferCreationInterval=n,this.maxBufferSize=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new M(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),S=function(){return function(){this.buffer=[]}}(),M=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;u.bufferTimeSpan=e,u.bufferCreationInterval=r,u.maxBufferSize=i,u.scheduler=o,u.contexts=[];var a=u.openContext();if(u.timespanOnly=null==r||r<0,u.timespanOnly){var c={subscriber:u,context:a,bufferTimeSpan:e};u.add(a.closeAction=o.schedule(T,e,c))}else{var s={subscriber:u,context:a},f={bufferTimeSpan:e,bufferCreationInterval:r,subscriber:u,scheduler:o};u.add(a.closeAction=o.schedule(E,e,s)),u.add(o.schedule(N,r,f))}return u}return r.ZT(n,t),n.prototype._next=function(t){for(var n,e=this.contexts,r=e.length,i=0;i<r;i++){var o=e[i],u=o.buffer;u.push(t),u.length==this.maxBufferSize&&(n=o)}n&&this.onBufferFull(n)},n.prototype._error=function(n){this.contexts.length=0,t.prototype._error.call(this,n)},n.prototype._complete=function(){for(var n=this.contexts,e=this.destination;n.length>0;){var r=n.shift();e.next(r.buffer)}t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){this.contexts=null},n.prototype.onBufferFull=function(t){this.closeContext(t);var n=t.closeAction;if(n.unsubscribe(),this.remove(n),!this.closed&&this.timespanOnly){t=this.openContext();var e=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:e};this.add(t.closeAction=this.scheduler.schedule(T,e,r))}},n.prototype.openContext=function(){var t=new S;return this.contexts.push(t),t},n.prototype.closeContext=function(t){this.destination.next(t.buffer);var n=this.contexts;(n?n.indexOf(t):-1)>=0&&n.splice(n.indexOf(t),1)},n}(v.L);function T(t){var n=t.subscriber,e=t.context;e&&n.closeContext(e),n.closed||(t.context=n.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function N(t){var n=t.bufferCreationInterval,e=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(E,e,{subscriber:r,context:o})),this.schedule(t,n))}function E(t){var n=t.subscriber,e=t.context;n.closeContext(e)}var A=e(8760);function k(t,n){return function(e){return e.lift(new C(t,n))}}var C=function(){function t(t,n){this.openings=t,this.closingSelector=n}return t.prototype.call=function(t,n){return n.subscribe(new I(t,this.openings,this.closingSelector))},t}(),I=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.openings=e,i.closingSelector=r,i.contexts=[],i.add((0,o.D)(i,e)),i}return r.ZT(n,t),n.prototype._next=function(t){for(var n=this.contexts,e=n.length,r=0;r<e;r++)n[r].buffer.push(t)},n.prototype._error=function(n){for(var e=this.contexts;e.length>0;){var r=e.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,n)},n.prototype._complete=function(){for(var n=this.contexts;n.length>0;){var e=n.shift();this.destination.next(e.buffer),e.subscription.unsubscribe(),e.buffer=null,e.subscription=null}this.contexts=null,t.prototype._complete.call(this)},n.prototype.notifyNext=function(t,n,e,r,i){t?this.closeBuffer(t):this.openBuffer(n)},n.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},n.prototype.openBuffer=function(t){try{var n=this.closingSelector.call(this,t);n&&this.trySubscribe(n)}catch(t){this._error(t)}},n.prototype.closeBuffer=function(t){var n=this.contexts;if(n&&t){var e=t.buffer,r=t.subscription;this.destination.next(e),n.splice(n.indexOf(t),1),this.remove(r),r.unsubscribe()}},n.prototype.trySubscribe=function(t){var n=this.contexts,e=new A.w,r={buffer:[],subscription:e};n.push(r);var i=(0,o.D)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),e.add(i))},n}(i.L);function F(t){return function(n){return n.lift(new P(t))}}var P=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new z(t,this.closingSelector))},t}(),z=function(t){function n(n,e){var r=t.call(this,n)||this;return r.closingSelector=e,r.subscribing=!1,r.openBuffer(),r}return r.ZT(n,t),n.prototype._next=function(t){this.buffer.push(t)},n.prototype._complete=function(){var n=this.buffer;n&&this.destination.next(n),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},n.prototype.notifyNext=function(t,n,e,r,i){this.openBuffer()},n.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},n.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var n,e=this.buffer;this.buffer&&this.destination.next(e),this.buffer=[];try{n=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new A.w,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add((0,o.D)(this,n)),this.subscribing=!1},n}(i.L),j=e(1112);function O(t){return function(n){var e=new L(t),r=n.lift(e);return e.caught=r}}var L=function(){function t(t){this.selector=t}return t.prototype.call=function(t,n){return n.subscribe(new D(t,this.selector,this.caught))},t}(),D=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.selector=e,i.caught=r,i}return r.ZT(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=void 0;try{e=this.selector(n,this.caught)}catch(n){return void t.prototype.error.call(this,n)}this._unsubscribeAndRecycle();var r=new j.d(this,void 0,void 0);this.add(r);var i=(0,o.D)(this,e,void 0,void 0,r);i!==r&&this.add(i)}},n}(i.L),R=e(5142);function V(t){return function(n){return n.lift(new R.Ms(t))}}var B=e(9026),U=e(5760);function q(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null;return"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&(0,B.k)(t[0])&&(t=t[0].slice()),function(n){return n.lift.call((0,U.D)([n].concat(t)),new R.Ms(e))}}var Z=e(9795);function Y(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(Z.z.apply(void 0,[n].concat(t)))}}var W=e(2257),H=e(7746);function X(t,n){return(0,H.zg)(t,n,1)}function $(t,n){return X((function(){return t}),n)}function G(t){return function(n){return n.lift(new K(t,n))}}var K=function(){function t(t,n){this.predicate=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Q(t,this.predicate,this.source))},t}(),Q=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.source=r,i.count=0,i.index=0,i}return r.ZT(n,t),n.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},n.prototype._tryPredicate=function(t){var n;try{n=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}n&&this.count++},n.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},n}(v.L);function J(t){return function(n){return n.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new nt(t,this.durationSelector))},t}(),nt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.durationSelector=e,r.hasValue=!1,r.durationSubscription=null,r}return r.ZT(n,t),n.prototype._next=function(t){try{var n=this.durationSelector.call(this,t);n&&this._tryNext(t,n)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.emitValue(),this.destination.complete()},n.prototype._tryNext=function(t,n){var e=this.durationSubscription;this.value=t,this.hasValue=!0,e&&(e.unsubscribe(),this.remove(e)),(e=(0,o.D)(this,n))&&!e.closed&&this.add(this.durationSubscription=e)},n.prototype.notifyNext=function(t,n,e,r,i){this.emitValue()},n.prototype.notifyComplete=function(){this.emitValue()},n.prototype.emitValue=function(){if(this.hasValue){var n=this.value,e=this.durationSubscription;e&&(this.durationSubscription=null,e.unsubscribe(),this.remove(e)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,n)}},n}(i.L);function et(t,n){return void 0===n&&(n=s.P),function(e){return e.lift(new rt(t,n))}}var rt=function(){function t(t,n){this.dueTime=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.dueTime=e,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.ZT(n,t),n.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},n.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},n.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},n.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},n}(v.L);function ot(t){t.debouncedNext()}function ut(t){return void 0===t&&(t=null),function(n){return n.lift(new at(t))}}var at=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,n){return n.subscribe(new ct(t,this.defaultValue))},t}(),ct=function(t){function n(n,e){var r=t.call(this,n)||this;return r.defaultValue=e,r.isEmpty=!0,r}return r.ZT(n,t),n.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},n.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},n}(v.L);function st(t){return t instanceof Date&&!isNaN(+t)}var ft=e(2632);function lt(t,n){void 0===n&&(n=s.P);var e=st(t)?+t-n.now():Math.abs(t);return function(t){return t.lift(new ht(e,n))}}var ht=function(){function t(t,n){this.delay=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new pt(t,this.delay,this.scheduler))},t}(),pt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.delay=e,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.ZT(n,t),n.dispatch=function(t){for(var n=t.source,e=n.queue,r=t.scheduler,i=t.destination;e.length>0&&e[0].time-r.now()<=0;)e.shift().notification.observe(i);if(e.length>0){var o=Math.max(0,e[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),n.active=!1},n.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(n.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},n.prototype.scheduleNotification=function(t){if(!0!==this.errored){var n=this.scheduler,e=new dt(n.now()+this.delay,t);this.queue.push(e),!1===this.active&&this._schedule(n)}},n.prototype._next=function(t){this.scheduleNotification(ft.P.createNext(t))},n.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.scheduleNotification(ft.P.createComplete()),this.unsubscribe()},n}(v.L),dt=function(){return function(t,n){this.time=t,this.notification=n}}(),vt=e(2772);function yt(t,n){return n?function(e){return new _t(e,n).lift(new bt(t))}:function(n){return n.lift(new bt(t))}}var bt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new gt(t,this.delayDurationSelector))},t}(),gt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.delayDurationSelector=e,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){var n=this.removeSubscription(t);n&&this.destination.next(n),this.tryComplete()},n.prototype._next=function(t){var n=this.index++;try{var e=this.delayDurationSelector(t,n);e&&this.tryDelay(e,t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},n.prototype.removeSubscription=function(t){t.unsubscribe();var n=this.delayNotifierSubscriptions.indexOf(t);return-1!==n&&this.delayNotifierSubscriptions.splice(n,1),t.outerValue},n.prototype.tryDelay=function(t,n){var e=(0,o.D)(this,t,n);e&&!e.closed&&(this.destination.add(e),this.delayNotifierSubscriptions.push(e))},n.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},n}(i.L),_t=function(t){function n(n,e){var r=t.call(this)||this;return r.source=n,r.subscriptionDelay=e,r}return r.ZT(n,t),n.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new mt(t,this.source))},n}(vt.y),mt=function(t){function n(n,e){var r=t.call(this)||this;return r.parent=n,r.source=e,r.sourceSubscribed=!1,r}return r.ZT(n,t),n.prototype._next=function(t){this.subscribeToSource()},n.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},n.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},n.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},n}(v.L);function xt(){return function(t){return t.lift(new wt)}}var wt=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new St(t))},t}(),St=function(t){function n(n){return t.call(this,n)||this}return r.ZT(n,t),n.prototype._next=function(t){t.observe(this.destination)},n}(v.L);function Mt(t,n){return function(e){return e.lift(new Tt(t,n))}}var Tt=function(){function t(t,n){this.keySelector=t,this.flushes=n}return t.prototype.call=function(t,n){return n.subscribe(new Nt(t,this.keySelector,this.flushes))},t}(),Nt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.keySelector=e,i.values=new Set,r&&i.add((0,o.D)(i,r)),i}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.values.clear()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},n.prototype._useKeySelector=function(t){var n,e=this.destination;try{n=this.keySelector(t)}catch(t){return void e.error(t)}this._finalizeNext(n,t)},n.prototype._finalizeNext=function(t,n){var e=this.values;e.has(t)||(e.add(t),this.destination.next(n))},n}(i.L);function Et(t,n){return function(e){return e.lift(new At(t,n))}}var At=function(){function t(t,n){this.compare=t,this.keySelector=n}return t.prototype.call=function(t,n){return n.subscribe(new kt(t,this.compare,this.keySelector))},t}(),kt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.keySelector=r,i.hasKey=!1,"function"==typeof e&&(i.compare=e),i}return r.ZT(n,t),n.prototype.compare=function(t,n){return t===n},n.prototype._next=function(t){var n;try{var e=this.keySelector;n=e?e(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,n)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=n,this.destination.next(t))},n}(v.L);function Ct(t,n){return Et((function(e,r){return n?n(e[t],r[t]):e[t]===r[t]}))}var It=e(6565),Ft=e(6008),Pt=e(6929);function zt(t){return void 0===t&&(t=Lt),function(n){return n.lift(new jt(t))}}var jt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,n){return n.subscribe(new Ot(t,this.errorFactory))},t}(),Ot=function(t){function n(n,e){var r=t.call(this,n)||this;return r.errorFactory=e,r.hasValue=!1,r}return r.ZT(n,t),n.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},n.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(n){t=n}this.destination.error(t)},n}(v.L);function Lt(){return new Pt.K}var Dt=e(5631);function Rt(t){return function(n){return 0===t?(0,Dt.c)():n.lift(new Vt(t))}}var Vt=function(){function t(t){if(this.total=t,this.total<0)throw new It.W}return t.prototype.call=function(t,n){return n.subscribe(new Bt(t,this.total))},t}(),Bt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.count=0,r}return r.ZT(n,t),n.prototype._next=function(t){var n=this.total,e=++this.count;e<=n&&(this.destination.next(t),e===n&&(this.destination.complete(),this.unsubscribe()))},n}(v.L);function Ut(t,n){if(t<0)throw new It.W;var e=arguments.length>=2;return function(r){return r.pipe((0,Ft.h)((function(n,e){return e===t})),Rt(1),e?ut(n):zt((function(){return new It.W})))}}var qt=e(8170);function Zt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return(0,Z.z)(n,qt.of.apply(void 0,t))}}function Yt(t,n){return function(e){return e.lift(new Wt(t,n,e))}}var Wt=function(){function t(t,n,e){this.predicate=t,this.thisArg=n,this.source=e}return t.prototype.call=function(t,n){return n.subscribe(new Ht(t,this.predicate,this.thisArg,this.source))},t}(),Ht=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.predicate=e,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.ZT(n,t),n.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},n.prototype._next=function(t){var n=!1;try{n=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}n||this.notifyComplete(!1)},n.prototype._complete=function(){this.notifyComplete(!0)},n}(v.L);function Xt(){return function(t){return t.lift(new $t)}}var $t=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new Gt(t))},t}(),Gt=function(t){function n(n){var e=t.call(this,n)||this;return e.hasCompleted=!1,e.hasSubscription=!1,e}return r.ZT(n,t),n.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add((0,o.D)(this,t)))},n.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},n.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},n}(i.L),Kt=e(5709);function Qt(t,n){return n?function(e){return e.pipe(Qt((function(e,r){return(0,U.D)(t(e,r)).pipe((0,Kt.U)((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new Jt(t))}}var Jt=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new tn(t,this.project))},t}(),tn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.project=e,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.ZT(n,t),n.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},n.prototype.tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=new j.d(this,n,e),i=this.destination;i.add(r);var u=(0,o.D)(this,t,void 0,void 0,r);u!==r&&i.add(u)},n.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyError=function(t){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},n}(i.L);function nn(t,n,e){return void 0===n&&(n=Number.POSITIVE_INFINITY),void 0===e&&(e=void 0),n=(n||0)<1?Number.POSITIVE_INFINITY:n,function(r){return r.lift(new en(t,n,e))}}var en=function(){function t(t,n,e){this.project=t,this.concurrent=n,this.scheduler=e}return t.prototype.call=function(t,n){return n.subscribe(new rn(t,this.project,this.concurrent,this.scheduler))},t}(),rn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.project=e,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.ZT(n,t),n.dispatch=function(t){var n=t.subscriber,e=t.result,r=t.value,i=t.index;n.subscribeToProjection(e,r,i)},n.prototype._next=function(t){var e=this.destination;if(e.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){e.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(n.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){e.error(t)}}else this.buffer.push(t)}},n.prototype.subscribeToProjection=function(t,n,e){this.active++,this.destination.add((0,o.D)(this,t,n,e))},n.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this._next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.destination.remove(t),this.active--,n&&n.length>0&&this._next(n.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},n}(i.L);function on(t){return function(n){return n.lift(new un(t))}}var un=function(){function t(t){this.callback=t}return t.prototype.call=function(t,n){return n.subscribe(new an(t,this.callback))},t}(),an=function(t){function n(n,e){var r=t.call(this,n)||this;return r.add(new A.w(e)),r}return r.ZT(n,t),n}(v.L);function cn(t,n){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(e){return e.lift(new sn(t,e,!1,n))}}var sn=function(){function t(t,n,e,r){this.predicate=t,this.source=n,this.yieldIndex=e,this.thisArg=r}return t.prototype.call=function(t,n){return n.subscribe(new fn(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),fn=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.predicate=e,u.source=r,u.yieldIndex=i,u.thisArg=o,u.index=0,u}return r.ZT(n,t),n.prototype.notifyComplete=function(t){var n=this.destination;n.next(t),n.complete(),this.unsubscribe()},n.prototype._next=function(t){var n=this.predicate,e=this.thisArg,r=this.index++;try{n.call(e||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},n}(v.L);function ln(t,n){return function(e){return e.lift(new sn(t,e,!0,n))}}var hn=e(3608);function pn(t,n){var e=arguments.length>=2;return function(r){return r.pipe(t?(0,Ft.h)((function(n,e){return t(n,e,r)})):hn.y,Rt(1),e?ut(n):zt((function(){return new Pt.K})))}}var dn=e(1120);function vn(){return function(t){return t.lift(new yn)}}var yn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new bn(t))},t}(),bn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(n,t),n.prototype._next=function(t){},n}(v.L);function gn(){return function(t){return t.lift(new _n)}}var _n=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new mn(t))},t}(),mn=function(t){function n(n){return t.call(this,n)||this}return r.ZT(n,t),n.prototype.notifyComplete=function(t){var n=this.destination;n.next(t),n.complete()},n.prototype._next=function(t){this.notifyComplete(!1)},n.prototype._complete=function(){this.notifyComplete(!0)},n}(v.L);function xn(t){return function(n){return 0===t?(0,Dt.c)():n.lift(new wn(t))}}var wn=function(){function t(t){if(this.total=t,this.total<0)throw new It.W}return t.prototype.call=function(t,n){return n.subscribe(new Sn(t,this.total))},t}(),Sn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.ring=new Array,r.count=0,r}return r.ZT(n,t),n.prototype._next=function(t){var n=this.ring,e=this.total,r=this.count++;n.length<e?n.push(t):n[r%e]=t},n.prototype._complete=function(){var t=this.destination,n=this.count;if(n>0)for(var e=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<e;i++){var o=n++%e;t.next(r[o])}t.complete()},n}(v.L);function Mn(t,n){var e=arguments.length>=2;return function(r){return r.pipe(t?(0,Ft.h)((function(n,e){return t(n,e,r)})):hn.y,xn(1),e?ut(n):zt((function(){return new Pt.K})))}}function Tn(t){return function(n){return n.lift(new Nn(t))}}var Nn=function(){function t(t){this.value=t}return t.prototype.call=function(t,n){return n.subscribe(new En(t,this.value))},t}(),En=function(t){function n(n,e){var r=t.call(this,n)||this;return r.value=e,r}return r.ZT(n,t),n.prototype._next=function(t){this.destination.next(this.value)},n}(v.L);function An(){return function(t){return t.lift(new kn)}}var kn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new Cn(t))},t}(),Cn=function(t){function n(n){return t.call(this,n)||this}return r.ZT(n,t),n.prototype._next=function(t){this.destination.next(ft.P.createNext(t))},n.prototype._error=function(t){var n=this.destination;n.next(ft.P.createError(t)),n.complete()},n.prototype._complete=function(){var t=this.destination;t.next(ft.P.createComplete()),t.complete()},n}(v.L);function In(t,n){var e=!1;return arguments.length>=2&&(e=!0),function(r){return r.lift(new Fn(t,n,e))}}var Fn=function(){function t(t,n,e){void 0===e&&(e=!1),this.accumulator=t,this.seed=n,this.hasSeed=e}return t.prototype.call=function(t,n){return n.subscribe(new Pn(t,this.accumulator,this.seed,this.hasSeed))},t}(),Pn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.accumulator=e,o._seed=r,o.hasSeed=i,o.index=0,o}return r.ZT(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.accumulator(this.seed,t,e)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(v.L),zn=e(2561);function jn(t,n){return arguments.length>=2?function(e){return(0,zn.z)(In(t,n),xn(1),ut(n))(e)}:function(n){return(0,zn.z)(In((function(n,e,r){return t(n,e,r+1)})),xn(1))(n)}}function On(t){return jn("function"==typeof t?function(n,e){return t(n,e)>0?n:e}:function(t,n){return t>n?t:n})}var Ln=e(4370);function Dn(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(Ln.T.apply(void 0,[n].concat(t)))}}var Rn=e(2556);function Vn(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?(0,H.zg)((function(){return t}),n,e):("number"==typeof n&&(e=n),(0,H.zg)((function(){return t}),e))}function Bn(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),function(r){return r.lift(new Un(t,n,e))}}var Un=function(){function t(t,n,e){this.accumulator=t,this.seed=n,this.concurrent=e}return t.prototype.call=function(t,n){return n.subscribe(new qn(t,this.accumulator,this.seed,this.concurrent))},t}(),qn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.accumulator=e,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.ZT(n,t),n.prototype._next=function(t){if(this.active<this.concurrent){var n=this.index++,e=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,n)}catch(t){return e.error(t)}this.active++,this._innerSub(r,t,n)}else this.buffer.push(t)},n.prototype._innerSub=function(t,n,e){var r=new j.d(this,n,e),i=this.destination;i.add(r);var u=(0,o.D)(this,t,void 0,void 0,r);u!==r&&i.add(u)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.destination;this.acc=n,this.hasValue=!0,o.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.destination.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},n}(i.L);function Zn(t){return jn("function"==typeof t?function(n,e){return t(n,e)<0?n:e}:function(t,n){return t<n?t:n})}var Yn=e(3140);function Wn(t,n){return function(e){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof n)return e.lift(new Hn(r,n));var i=Object.create(e,Yn.N);return i.source=e,i.subjectFactory=r,i}}var Hn=function(){function t(t,n){this.subjectFactory=t,this.selector=n}return t.prototype.call=function(t,n){var e=this.selector,r=this.subjectFactory(),i=e(r).subscribe(t);return i.add(n.subscribe(r)),i},t}(),Xn=e(9276);function $n(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 1===t.length&&(0,B.k)(t[0])&&(t=t[0]),function(n){return n.lift(new Gn(t))}}var Gn=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,n){return n.subscribe(new Kn(t,this.nextSources))},t}(),Kn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.destination=n,r.nextSources=e,r}return r.ZT(n,t),n.prototype.notifyError=function(t,n){this.subscribeToNextSource()},n.prototype.notifyComplete=function(t){this.subscribeToNextSource()},n.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},n.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},n.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var n=new j.d(this,void 0,void 0),e=this.destination;e.add(n);var r=(0,o.D)(this,t,void 0,void 0,n);r!==n&&e.add(r)}else this.destination.complete()},n}(i.L);function Qn(){return function(t){return t.lift(new Jn)}}var Jn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new te(t))},t}(),te=function(t){function n(n){var e=t.call(this,n)||this;return e.hasPrev=!1,e}return r.ZT(n,t),n.prototype._next=function(t){var n;this.hasPrev?n=[this.prev,t]:this.hasPrev=!0,this.prev=t,n&&this.destination.next(n)},n}(v.L),ne=e(8463);function ee(t,n){return function(e){return[(0,Ft.h)(t,n)(e),(0,Ft.h)((0,ne.f)(t,n))(e)]}}function re(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.length;if(0===e)throw new Error("list of properties cannot be empty.");return function(n){return(0,Kt.U)(ie(t,e))(n)}}function ie(t,n){return function(e){for(var r=e,i=0;i<n;i++){var o=r[t[i]];if(void 0===o)return;r=o}return r}}var oe=e(211);function ue(t){return t?Wn((function(){return new oe.xQ}),t):Wn(new oe.xQ)}var ae=e(9233);function ce(t){return function(n){return Wn(new ae.X(t))(n)}}var se=e(364);function fe(){return function(t){return Wn(new se.c)(t)}}var le=e(2630);function he(t,n,e,r){e&&"function"!=typeof e&&(r=e);var i="function"==typeof e?e:void 0,o=new le.t(t,n,r);return function(t){return Wn((function(){return o}),i)(t)}}var pe=e(8821);function de(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return 1===t.length&&(0,B.k)(t[0])&&(t=t[0]),n.lift.call(pe.S3.apply(void 0,[n].concat(t)))}}function ve(t){return void 0===t&&(t=-1),function(n){return 0===t?(0,Dt.c)():t<0?n.lift(new ye(-1,n)):n.lift(new ye(t-1,n))}}var ye=function(){function t(t,n){this.count=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new be(t,this.count,this.source))},t}(),be=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.count=e,i.source=r,i}return r.ZT(n,t),n.prototype.complete=function(){if(!this.isStopped){var n=this.source,e=this.count;if(0===e)return t.prototype.complete.call(this);e>-1&&(this.count=e-1),n.subscribe(this._unsubscribeAndRecycle())}},n}(v.L);function ge(t){return function(n){return n.lift(new _e(t))}}var _e=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){return n.subscribe(new me(t,this.notifier,n))},t}(),me=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.notifier=e,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},n.prototype.notifyComplete=function(n){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},n.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},n.prototype._unsubscribe=function(){var t=this.notifications,n=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),n&&(n.unsubscribe(),this.retriesSubscription=null),this.retries=null},n.prototype._unsubscribeAndRecycle=function(){var n=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=n,this},n.prototype.subscribeToRetries=function(){var n;this.notifications=new oe.xQ;try{n=(0,this.notifier)(this.notifications)}catch(n){return t.prototype.complete.call(this)}this.retries=n,this.retriesSubscription=(0,o.D)(this,n)},n}(i.L);function xe(t){return void 0===t&&(t=-1),function(n){return n.lift(new we(t,n))}}var we=function(){function t(t,n){this.count=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Se(t,this.count,this.source))},t}(),Se=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.count=e,i.source=r,i}return r.ZT(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,n);r>-1&&(this.count=r-1),e.subscribe(this._unsubscribeAndRecycle())}},n}(v.L);function Me(t){return function(n){return n.lift(new Te(t,n))}}var Te=function(){function t(t,n){this.notifier=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Ne(t,this.notifier,this.source))},t}(),Ne=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.notifier=e,i.source=r,i}return r.ZT(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=this.errors,r=this.retries,i=this.retriesSubscription;if(r)this.errors=null,this.retriesSubscription=null;else{e=new oe.xQ;try{r=(0,this.notifier)(e)}catch(n){return t.prototype.error.call(this,n)}i=(0,o.D)(this,r)}this._unsubscribeAndRecycle(),this.errors=e,this.retries=r,this.retriesSubscription=i,e.next(n)}},n.prototype._unsubscribe=function(){var t=this.errors,n=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),n&&(n.unsubscribe(),this.retriesSubscription=null),this.retries=null},n.prototype.notifyNext=function(t,n,e,r,i){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},n}(i.L),Ee=e(3018);function Ae(t){return function(n){return n.lift(new ke(t))}}var ke=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new Ce(t),r=n.subscribe(e);return r.add((0,o.D)(e,this.notifier)),r},t}(),Ce=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.hasValue=!1,n}return r.ZT(n,t),n.prototype._next=function(t){this.value=t,this.hasValue=!0},n.prototype.notifyNext=function(t,n,e,r,i){this.emitValue()},n.prototype.notifyComplete=function(){this.emitValue()},n.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},n}(i.L);function Ie(t,n){return void 0===n&&(n=s.P),function(e){return e.lift(new Fe(t,n))}}var Fe=function(){function t(t,n){this.period=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new Pe(t,this.period,this.scheduler))},t}(),Pe=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.period=e,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(ze,e,{subscriber:i,period:e})),i}return r.ZT(n,t),n.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},n.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},n}(v.L);function ze(t){var n=t.subscriber,e=t.period;n.notifyNext(),this.schedule(t,e)}function je(t,n){return function(e){return e.lift(new Oe(t,n))}}var Oe=function(){function t(t,n){this.compareTo=t,this.comparator=n}return t.prototype.call=function(t,n){return n.subscribe(new Le(t,this.compareTo,this.comparator))},t}(),Le=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.compareTo=e,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(e.subscribe(new De(n,i))),i}return r.ZT(n,t),n.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},n.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},n.prototype.checkValues=function(){for(var t=this,n=t._a,e=t._b,r=t.comparator;n.length>0&&e.length>0;){var i=n.shift(),o=e.shift(),u=!1;try{u=r?r(i,o):i===o}catch(t){this.destination.error(t)}u||this.emit(!1)}},n.prototype.emit=function(t){var n=this.destination;n.next(t),n.complete()},n.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},n.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},n}(v.L),De=function(t){function n(n,e){var r=t.call(this,n)||this;return r.parent=e,r}return r.ZT(n,t),n.prototype._next=function(t){this.parent.nextB(t)},n.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},n.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},n}(v.L);function Re(){return new oe.xQ}function Ve(){return function(t){return(0,Ee.x)()(Wn(Re)(t))}}function Be(t,n,e){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:n,refCount:!1,scheduler:e},function(t){return t.lift(function(t){var n,e,r=t.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=t.windowTime,u=void 0===o?Number.POSITIVE_INFINITY:o,a=t.refCount,c=t.scheduler,s=0,f=!1,l=!1;return function(t){s++,n&&!f||(f=!1,n=new le.t(i,u,c),e=t.subscribe({next:function(t){n.next(t)},error:function(t){f=!0,n.error(t)},complete:function(){l=!0,e=void 0,n.complete()}}));var r=n.subscribe(this);this.add((function(){s--,r.unsubscribe(),e&&!l&&a&&0===s&&(e.unsubscribe(),e=void 0,n=void 0)}))}}(r))}}function Ue(t){return function(n){return n.lift(new qe(t,n))}}var qe=function(){function t(t,n){this.predicate=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Ze(t,this.predicate,this.source))},t}(),Ze=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.source=r,i.seenValue=!1,i.index=0,i}return r.ZT(n,t),n.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},n.prototype._next=function(t){var n=this.index++;this.predicate?this.tryNext(t,n):this.applySingleValue(t)},n.prototype.tryNext=function(t,n){try{this.predicate(t,n,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new Pt.K)},n}(v.L);function Ye(t){return function(n){return n.lift(new We(t))}}var We=function(){function t(t){this.total=t}return t.prototype.call=function(t,n){return n.subscribe(new He(t,this.total))},t}(),He=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.count=0,r}return r.ZT(n,t),n.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},n}(v.L);function Xe(t){return function(n){return n.lift(new $e(t))}}var $e=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new It.W}return t.prototype.call=function(t,n){return 0===this._skipCount?n.subscribe(new v.L(t)):n.subscribe(new Ge(t,this._skipCount))},t}(),Ge=function(t){function n(n,e){var r=t.call(this,n)||this;return r._skipCount=e,r._count=0,r._ring=new Array(e),r}return r.ZT(n,t),n.prototype._next=function(t){var n=this._skipCount,e=this._count++;if(e<n)this._ring[e]=t;else{var r=e%n,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},n}(v.L);function Ke(t){return function(n){return n.lift(new Qe(t))}}var Qe=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){return n.subscribe(new Je(t,this.notifier))},t}(),Je=function(t){function n(n,e){var r=t.call(this,n)||this;r.hasValue=!1;var i=new j.d(r,void 0,void 0);r.add(i),r.innerSubscription=i;var u=(0,o.D)(r,e,void 0,void 0,i);return u!==i&&(r.add(u),r.innerSubscription=u),r}return r.ZT(n,t),n.prototype._next=function(n){this.hasValue&&t.prototype._next.call(this,n)},n.prototype.notifyNext=function(t,n,e,r,i){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},n.prototype.notifyComplete=function(){},n}(i.L);function tr(t){return function(n){return n.lift(new nr(t))}}var nr=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,n){return n.subscribe(new er(t,this.predicate))},t}(),er=function(t){function n(n,e){var r=t.call(this,n)||this;return r.predicate=e,r.skipping=!0,r.index=0,r}return r.ZT(n,t),n.prototype._next=function(t){var n=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||n.next(t)},n.prototype.tryCallPredicate=function(t){try{var n=this.predicate(t,this.index++);this.skipping=Boolean(n)}catch(t){this.destination.error(t)}},n}(v.L);function rr(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return(0,m.K)(e)?(t.pop(),function(n){return(0,Z.z)(t,n,e)}):function(n){return(0,Z.z)(t,n)}}var ir=e(6650),or=e(5812),ur=function(t){function n(n,e,r){void 0===e&&(e=0),void 0===r&&(r=ir.e);var i=t.call(this)||this;return i.source=n,i.delayTime=e,i.scheduler=r,(!(0,or.k)(e)||e<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=ir.e),i}return r.ZT(n,t),n.create=function(t,e,r){return void 0===e&&(e=0),void 0===r&&(r=ir.e),new n(t,e,r)},n.dispatch=function(t){var n=t.source,e=t.subscriber;return this.add(n.subscribe(e))},n.prototype._subscribe=function(t){var e=this.delayTime,r=this.source;return this.scheduler.schedule(n.dispatch,e,{source:r,subscriber:t})},n}(vt.y);function ar(t,n){return void 0===n&&(n=0),function(e){return e.lift(new cr(t,n))}}var cr=function(){function t(t,n){this.scheduler=t,this.delay=n}return t.prototype.call=function(t,n){return new ur(n,this.delay,this.scheduler).subscribe(t)},t}();function sr(t,n){return"function"==typeof n?function(e){return e.pipe(sr((function(e,r){return(0,U.D)(t(e,r)).pipe((0,Kt.U)((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new fr(t))}}var fr=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new lr(t,this.project))},t}(),lr=function(t){function n(n,e){var r=t.call(this,n)||this;return r.project=e,r.index=0,r}return r.ZT(n,t),n.prototype._next=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=this.innerSubscription;r&&r.unsubscribe();var i=new j.d(this,n,e),u=this.destination;u.add(i),this.innerSubscription=(0,o.D)(this,t,void 0,void 0,i),this.innerSubscription!==i&&u.add(this.innerSubscription)},n.prototype._complete=function(){var n=this.innerSubscription;n&&!n.closed||t.prototype._complete.call(this),this.unsubscribe()},n.prototype._unsubscribe=function(){this.innerSubscription=null},n.prototype.notifyComplete=function(n){this.destination.remove(n),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n}(i.L);function hr(){return sr(hn.y)}function pr(t,n){return n?sr((function(){return t}),n):sr((function(){return t}))}function dr(t){return function(n){return n.lift(new vr(t))}}var vr=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new yr(t),r=(0,o.D)(e,this.notifier);return r&&!e.seenValue?(e.add(r),n.subscribe(e)):e},t}(),yr=function(t){function n(n){var e=t.call(this,n)||this;return e.seenValue=!1,e}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.seenValue=!0,this.complete()},n.prototype.notifyComplete=function(){},n}(i.L);function br(t,n){return void 0===n&&(n=!1),function(e){return e.lift(new gr(t,n))}}var gr=function(){function t(t,n){this.predicate=t,this.inclusive=n}return t.prototype.call=function(t,n){return n.subscribe(new _r(t,this.predicate,this.inclusive))},t}(),_r=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.inclusive=r,i.index=0,i}return r.ZT(n,t),n.prototype._next=function(t){var n,e=this.destination;try{n=this.predicate(t,this.index++)}catch(t){return void e.error(t)}this.nextOrComplete(t,n)},n.prototype.nextOrComplete=function(t,n){var e=this.destination;Boolean(n)?e.next(t):(this.inclusive&&e.next(t),e.complete())},n}(v.L),mr=e(3306),xr=e(4156);function wr(t,n,e){return function(r){return r.lift(new Sr(t,n,e))}}var Sr=function(){function t(t,n,e){this.nextOrObserver=t,this.error=n,this.complete=e}return t.prototype.call=function(t,n){return n.subscribe(new Mr(t,this.nextOrObserver,this.error,this.complete))},t}(),Mr=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o._tapNext=mr.Z,o._tapError=mr.Z,o._tapComplete=mr.Z,o._tapError=r||mr.Z,o._tapComplete=i||mr.Z,(0,xr.m)(e)?(o._context=o,o._tapNext=e):e&&(o._context=e,o._tapNext=e.next||mr.Z,o._tapError=e.error||mr.Z,o._tapComplete=e.complete||mr.Z),o}return r.ZT(n,t),n.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},n.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},n.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},n}(v.L),Tr={leading:!0,trailing:!1};function Nr(t,n){return void 0===n&&(n=Tr),function(e){return e.lift(new Er(t,n.leading,n.trailing))}}var Er=function(){function t(t,n,e){this.durationSelector=t,this.leading=n,this.trailing=e}return t.prototype.call=function(t,n){return n.subscribe(new Ar(t,this.durationSelector,this.leading,this.trailing))},t}(),Ar=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.destination=n,o.durationSelector=e,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.ZT(n,t),n.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},n.prototype.send=function(){var t=this._hasValue,n=this._sendValue;t&&(this.destination.next(n),this.throttle(n)),this._hasValue=!1,this._sendValue=null},n.prototype.throttle=function(t){var n=this.tryDurationSelector(t);n&&this.add(this._throttled=(0,o.D)(this,n))},n.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},n.prototype.throttlingDone=function(){var t=this._throttled,n=this._trailing;t&&t.unsubscribe(),this._throttled=null,n&&this.send()},n.prototype.notifyNext=function(t,n,e,r,i){this.throttlingDone()},n.prototype.notifyComplete=function(){this.throttlingDone()},n}(i.L);function kr(t,n,e){return void 0===n&&(n=s.P),void 0===e&&(e=Tr),function(r){return r.lift(new Cr(t,n,e.leading,e.trailing))}}var Cr=function(){function t(t,n,e,r){this.duration=t,this.scheduler=n,this.leading=e,this.trailing=r}return t.prototype.call=function(t,n){return n.subscribe(new Ir(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),Ir=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.duration=e,u.scheduler=r,u.leading=i,u.trailing=o,u._hasTrailingValue=!1,u._trailingValue=null,u}return r.ZT(n,t),n.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(Fr,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},n.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},n.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},n}(v.L);function Fr(t){t.subscriber.clearThrottle()}var Pr=e(1410);function zr(t){return void 0===t&&(t=s.P),function(n){return(0,Pr.P)((function(){return n.pipe(In((function(n,e){var r=n.current;return{value:e,current:t.now(),last:r}}),{current:t.now(),value:void 0,last:void 0}),(0,Kt.U)((function(t){var n=t.current,e=t.last,r=t.value;return new jr(r,n-e)})))}))}}var jr=function(){return function(t,n){this.value=t,this.interval=n}}(),Or=e(1462);function Lr(t,n,e){return void 0===e&&(e=s.P),function(r){var i=st(t),o=i?+t-e.now():Math.abs(t);return r.lift(new Dr(o,i,n,e))}}var Dr=function(){function t(t,n,e,r){this.waitFor=t,this.absoluteTimeout=n,this.withObservable=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new Rr(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Rr=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.absoluteTimeout=e,u.waitFor=r,u.withObservable=i,u.scheduler=o,u.action=null,u.scheduleTimeout(),u}return r.ZT(n,t),n.dispatchTimeout=function(t){var n=t.withObservable;t._unsubscribeAndRecycle(),t.add((0,o.D)(t,n))},n.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(n.dispatchTimeout,this.waitFor,this))},n.prototype._next=function(n){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,n)},n.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},n}(i.L),Vr=e(4944);function Br(t,n){return void 0===n&&(n=s.P),Lr(t,(0,Vr._)(new Or.W),n)}function Ur(t){return void 0===t&&(t=s.P),(0,Kt.U)((function(n){return new qr(n,t.now())}))}var qr=function(){return function(t,n){this.value=t,this.timestamp=n}}();function Zr(t,n,e){return 0===e?[n]:(t.push(n),t)}function Yr(){return jn(Zr,[])}function Wr(t){return function(n){return n.lift(new Hr(t))}}var Hr=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,n){var e=new Xr(t),r=n.subscribe(e);return r.closed||e.add((0,o.D)(e,this.windowBoundaries)),r},t}(),Xr=function(t){function n(n){var e=t.call(this,n)||this;return e.window=new oe.xQ,n.next(e.window),e}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.openWindow()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){this._complete()},n.prototype._next=function(t){this.window.next(t)},n.prototype._error=function(t){this.window.error(t),this.destination.error(t)},n.prototype._complete=function(){this.window.complete(),this.destination.complete()},n.prototype._unsubscribe=function(){this.window=null},n.prototype.openWindow=function(){var t=this.window;t&&t.complete();var n=this.destination,e=this.window=new oe.xQ;n.next(e)},n}(i.L);function $r(t,n){return void 0===n&&(n=0),function(e){return e.lift(new Gr(t,n))}}var Gr=function(){function t(t,n){this.windowSize=t,this.startWindowEvery=n}return t.prototype.call=function(t,n){return n.subscribe(new Kr(t,this.windowSize,this.startWindowEvery))},t}(),Kr=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.destination=n,i.windowSize=e,i.startWindowEvery=r,i.windows=[new oe.xQ],i.count=0,n.next(i.windows[0]),i}return r.ZT(n,t),n.prototype._next=function(t){for(var n=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,e=this.destination,r=this.windowSize,i=this.windows,o=i.length,u=0;u<o&&!this.closed;u++)i[u].next(t);var a=this.count-r+1;if(a>=0&&a%n==0&&!this.closed&&i.shift().complete(),++this.count%n==0&&!this.closed){var c=new oe.xQ;i.push(c),e.next(c)}},n.prototype._error=function(t){var n=this.windows;if(n)for(;n.length>0&&!this.closed;)n.shift().error(t);this.destination.error(t)},n.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},n.prototype._unsubscribe=function(){this.count=0,this.windows=null},n}(v.L);function Qr(t){var n=s.P,e=null,r=Number.POSITIVE_INFINITY;return(0,m.K)(arguments[3])&&(n=arguments[3]),(0,m.K)(arguments[2])?n=arguments[2]:(0,or.k)(arguments[2])&&(r=arguments[2]),(0,m.K)(arguments[1])?n=arguments[1]:(0,or.k)(arguments[1])&&(e=arguments[1]),function(i){return i.lift(new Jr(t,e,r,n))}}var Jr=function(){function t(t,n,e,r){this.windowTimeSpan=t,this.windowCreationInterval=n,this.maxWindowSize=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new ni(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),ti=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._numberOfNextedValues=0,n}return r.ZT(n,t),n.prototype.next=function(n){this._numberOfNextedValues++,t.prototype.next.call(this,n)},Object.defineProperty(n.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),n}(oe.xQ),ni=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;u.destination=n,u.windowTimeSpan=e,u.windowCreationInterval=r,u.maxWindowSize=i,u.scheduler=o,u.windows=[];var a=u.openWindow();if(null!==r&&r>=0){var c={subscriber:u,window:a,context:null},s={windowTimeSpan:e,windowCreationInterval:r,subscriber:u,scheduler:o};u.add(o.schedule(ii,e,c)),u.add(o.schedule(ri,r,s))}else{var f={subscriber:u,window:a,windowTimeSpan:e};u.add(o.schedule(ei,e,f))}return u}return r.ZT(n,t),n.prototype._next=function(t){for(var n=this.windows,e=n.length,r=0;r<e;r++){var i=n[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},n.prototype._error=function(t){for(var n=this.windows;n.length>0;)n.shift().error(t);this.destination.error(t)},n.prototype._complete=function(){for(var t=this.windows;t.length>0;){var n=t.shift();n.closed||n.complete()}this.destination.complete()},n.prototype.openWindow=function(){var t=new ti;return this.windows.push(t),this.destination.next(t),t},n.prototype.closeWindow=function(t){t.complete();var n=this.windows;n.splice(n.indexOf(t),1)},n}(v.L);function ei(t){var n=t.subscriber,e=t.windowTimeSpan,r=t.window;r&&n.closeWindow(r),t.window=n.openWindow(),this.schedule(t,e)}function ri(t){var n=t.windowTimeSpan,e=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=e.openWindow(),u=this,a={action:u,subscription:null},c={subscriber:e,window:o,context:a};a.subscription=r.schedule(ii,n,c),u.add(a.subscription),u.schedule(t,i)}function ii(t){var n=t.subscriber,e=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),n.closeWindow(e)}function oi(t,n){return function(e){return e.lift(new ui(t,n))}}var ui=function(){function t(t,n){this.openings=t,this.closingSelector=n}return t.prototype.call=function(t,n){return n.subscribe(new ai(t,this.openings,this.closingSelector))},t}(),ai=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.openings=e,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=(0,o.D)(i,e,e)),i}return r.ZT(n,t),n.prototype._next=function(t){var n=this.contexts;if(n)for(var e=n.length,r=0;r<e;r++)n[r].window.next(t)},n.prototype._error=function(n){var e=this.contexts;if(this.contexts=null,e)for(var r=e.length,i=-1;++i<r;){var o=e[i];o.window.error(n),o.subscription.unsubscribe()}t.prototype._error.call(this,n)},n.prototype._complete=function(){var n=this.contexts;if(this.contexts=null,n)for(var e=n.length,r=-1;++r<e;){var i=n[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var n=t.length,e=-1;++e<n;){var r=t[e];r.window.unsubscribe(),r.subscription.unsubscribe()}},n.prototype.notifyNext=function(t,n,e,r,i){if(t===this.openings){var u=void 0;try{u=(0,this.closingSelector)(n)}catch(t){return this.error(t)}var a=new oe.xQ,c=new A.w,s={window:a,subscription:c};this.contexts.push(s);var f=(0,o.D)(this,u,s);f.closed?this.closeWindow(this.contexts.length-1):(f.context=s,c.add(f)),this.destination.next(a)}else this.closeWindow(this.contexts.indexOf(t))},n.prototype.notifyError=function(t){this.error(t)},n.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},n.prototype.closeWindow=function(t){if(-1!==t){var n=this.contexts,e=n[t],r=e.window,i=e.subscription;n.splice(t,1),r.complete(),i.unsubscribe()}},n}(i.L);function ci(t){return function(n){return n.lift(new si(t))}}var si=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new fi(t,this.closingSelector))},t}(),fi=function(t){function n(n,e){var r=t.call(this,n)||this;return r.destination=n,r.closingSelector=e,r.openWindow(),r}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.openWindow(i)},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){this.openWindow(t)},n.prototype._next=function(t){this.window.next(t)},n.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},n.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},n.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},n.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var n=this.window;n&&n.complete();var e,r=this.window=new oe.xQ;this.destination.next(r);try{e=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=(0,o.D)(this,e))},n}(i.L);function li(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e;"function"==typeof t[t.length-1]&&(e=t.pop());var r=t;return n.lift(new hi(r,e))}}var hi=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new pi(t,this.observables,this.project))},t}(),pi=function(t){function n(n,e,r){var i=t.call(this,n)||this;i.observables=e,i.project=r,i.toRespond=[];var u=e.length;i.values=new Array(u);for(var a=0;a<u;a++)i.toRespond.push(a);for(a=0;a<u;a++){var c=e[a];i.add((0,o.D)(i,c,c,a))}return i}return r.ZT(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.values[e]=n;var o=this.toRespond;if(o.length>0){var u=o.indexOf(e);-1!==u&&o.splice(u,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(i.L),di=e(5080);function vi(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(di.$R.apply(void 0,[n].concat(t)))}}function yi(t){return function(n){return n.lift(new di.mx(t))}}},7621:(t,n,e)=>{var r;!function(i){var o=/^\s+/,u=/\s+$/,a=0,c=i.round,s=i.min,f=i.max,l=i.random;function h(t,n){if(n=n||{},(t=t||"")instanceof h)return t;if(!(this instanceof h))return new h(t,n);var e=function(t){var n,e,r,a={r:0,g:0,b:0},c=1,l=null,h=null,p=null,d=!1,v=!1;return"string"==typeof t&&(t=function(t){t=t.replace(o,"").replace(u,"").toLowerCase();var n,e=!1;if(C[t])t=C[t],e=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};return(n=q.rgb.exec(t))?{r:n[1],g:n[2],b:n[3]}:(n=q.rgba.exec(t))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=q.hsl.exec(t))?{h:n[1],s:n[2],l:n[3]}:(n=q.hsla.exec(t))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=q.hsv.exec(t))?{h:n[1],s:n[2],v:n[3]}:(n=q.hsva.exec(t))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=q.hex8.exec(t))?{r:j(n[1]),g:j(n[2]),b:j(n[3]),a:R(n[4]),format:e?"name":"hex8"}:(n=q.hex6.exec(t))?{r:j(n[1]),g:j(n[2]),b:j(n[3]),format:e?"name":"hex"}:(n=q.hex4.exec(t))?{r:j(n[1]+""+n[1]),g:j(n[2]+""+n[2]),b:j(n[3]+""+n[3]),a:R(n[4]+""+n[4]),format:e?"name":"hex8"}:!!(n=q.hex3.exec(t))&&{r:j(n[1]+""+n[1]),g:j(n[2]+""+n[2]),b:j(n[3]+""+n[3]),format:e?"name":"hex"}}(t)),"object"==typeof t&&(Z(t.r)&&Z(t.g)&&Z(t.b)?(n=t.r,e=t.g,r=t.b,a={r:255*P(n,255),g:255*P(e,255),b:255*P(r,255)},d=!0,v="%"===String(t.r).substr(-1)?"prgb":"rgb"):Z(t.h)&&Z(t.s)&&Z(t.v)?(l=L(t.s),h=L(t.v),a=function(t,n,e){t=6*P(t,360),n=P(n,100),e=P(e,100);var r=i.floor(t),o=t-r,u=e*(1-n),a=e*(1-o*n),c=e*(1-(1-o)*n),s=r%6;return{r:255*[e,a,u,u,c,e][s],g:255*[c,e,e,a,u,u][s],b:255*[u,u,c,e,e,a][s]}}(t.h,l,h),d=!0,v="hsv"):Z(t.h)&&Z(t.s)&&Z(t.l)&&(l=L(t.s),p=L(t.l),a=function(t,n,e){var r,i,o;function u(t,n,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?t+6*(n-t)*e:e<.5?n:e<2/3?t+(n-t)*(2/3-e)*6:t}if(t=P(t,360),n=P(n,100),e=P(e,100),0===n)r=i=o=e;else{var a=e<.5?e*(1+n):e+n-e*n,c=2*e-a;r=u(c,a,t+1/3),i=u(c,a,t),o=u(c,a,t-1/3)}return{r:255*r,g:255*i,b:255*o}}(t.h,l,p),d=!0,v="hsl"),t.hasOwnProperty("a")&&(c=t.a)),c=F(c),{ok:d,format:t.format||v,r:s(255,f(a.r,0)),g:s(255,f(a.g,0)),b:s(255,f(a.b,0)),a:c}}(t);this._originalInput=t,this._r=e.r,this._g=e.g,this._b=e.b,this._a=e.a,this._roundA=c(100*this._a)/100,this._format=n.format||e.format,this._gradientType=n.gradientType,this._r<1&&(this._r=c(this._r)),this._g<1&&(this._g=c(this._g)),this._b<1&&(this._b=c(this._b)),this._ok=e.ok,this._tc_id=a++}function p(t,n,e){t=P(t,255),n=P(n,255),e=P(e,255);var r,i,o=f(t,n,e),u=s(t,n,e),a=(o+u)/2;if(o==u)r=i=0;else{var c=o-u;switch(i=a>.5?c/(2-o-u):c/(o+u),o){case t:r=(n-e)/c+(n<e?6:0);break;case n:r=(e-t)/c+2;break;case e:r=(t-n)/c+4}r/=6}return{h:r,s:i,l:a}}function d(t,n,e){t=P(t,255),n=P(n,255),e=P(e,255);var r,i,o=f(t,n,e),u=s(t,n,e),a=o,c=o-u;if(i=0===o?0:c/o,o==u)r=0;else{switch(o){case t:r=(n-e)/c+(n<e?6:0);break;case n:r=(e-t)/c+2;break;case e:r=(t-n)/c+4}r/=6}return{h:r,s:i,v:a}}function v(t,n,e,r){var i=[O(c(t).toString(16)),O(c(n).toString(16)),O(c(e).toString(16))];return r&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function y(t,n,e,r){return[O(D(r)),O(c(t).toString(16)),O(c(n).toString(16)),O(c(e).toString(16))].join("")}function b(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.s-=n/100,e.s=z(e.s),h(e)}function g(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.s+=n/100,e.s=z(e.s),h(e)}function _(t){return h(t).desaturate(100)}function m(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.l+=n/100,e.l=z(e.l),h(e)}function x(t,n){n=0===n?0:n||10;var e=h(t).toRgb();return e.r=f(0,s(255,e.r-c(-n/100*255))),e.g=f(0,s(255,e.g-c(-n/100*255))),e.b=f(0,s(255,e.b-c(-n/100*255))),h(e)}function w(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.l-=n/100,e.l=z(e.l),h(e)}function S(t,n){var e=h(t).toHsl(),r=(e.h+n)%360;return e.h=r<0?360+r:r,h(e)}function M(t){var n=h(t).toHsl();return n.h=(n.h+180)%360,h(n)}function T(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+120)%360,s:n.s,l:n.l}),h({h:(e+240)%360,s:n.s,l:n.l})]}function N(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+90)%360,s:n.s,l:n.l}),h({h:(e+180)%360,s:n.s,l:n.l}),h({h:(e+270)%360,s:n.s,l:n.l})]}function E(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+72)%360,s:n.s,l:n.l}),h({h:(e+216)%360,s:n.s,l:n.l})]}function A(t,n,e){n=n||6,e=e||30;var r=h(t).toHsl(),i=360/e,o=[h(t)];for(r.h=(r.h-(i*n>>1)+720)%360;--n;)r.h=(r.h+i)%360,o.push(h(r));return o}function k(t,n){n=n||6;for(var e=h(t).toHsv(),r=e.h,i=e.s,o=e.v,u=[],a=1/n;n--;)u.push(h({h:r,s:i,v:o})),o=(o+a)%1;return u}h.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,n,e,r=this.toRgb();return t=r.r/255,n=r.g/255,e=r.b/255,.2126*(t<=.03928?t/12.92:i.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:i.pow((n+.055)/1.055,2.4))+.0722*(e<=.03928?e/12.92:i.pow((e+.055)/1.055,2.4))},setAlpha:function(t){return this._a=F(t),this._roundA=c(100*this._a)/100,this},toHsv:function(){var t=d(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=d(this._r,this._g,this._b),n=c(360*t.h),e=c(100*t.s),r=c(100*t.v);return 1==this._a?"hsv("+n+", "+e+"%, "+r+"%)":"hsva("+n+", "+e+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var t=p(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=p(this._r,this._g,this._b),n=c(360*t.h),e=c(100*t.s),r=c(100*t.l);return 1==this._a?"hsl("+n+", "+e+"%, "+r+"%)":"hsla("+n+", "+e+"%, "+r+"%, "+this._roundA+")"},toHex:function(t){return v(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,n,e,r,i){var o=[O(c(t).toString(16)),O(c(n).toString(16)),O(c(e).toString(16)),O(D(r))];return i&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)&&o[3].charAt(0)==o[3].charAt(1)?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0)+o[3].charAt(0):o.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:c(this._r),g:c(this._g),b:c(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+c(this._r)+", "+c(this._g)+", "+c(this._b)+")":"rgba("+c(this._r)+", "+c(this._g)+", "+c(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:c(100*P(this._r,255))+"%",g:c(100*P(this._g,255))+"%",b:c(100*P(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+c(100*P(this._r,255))+"%, "+c(100*P(this._g,255))+"%, "+c(100*P(this._b,255))+"%)":"rgba("+c(100*P(this._r,255))+"%, "+c(100*P(this._g,255))+"%, "+c(100*P(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(I[v(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var n="#"+y(this._r,this._g,this._b,this._a),e=n,r=this._gradientType?"GradientType = 1, ":"";if(t){var i=h(t);e="#"+y(i._r,i._g,i._b,i._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+n+",endColorstr="+e+")"},toString:function(t){var n=!!t;t=t||this._format;var e=!1,r=this._a<1&&this._a>=0;return n||!r||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(e=this.toRgbString()),"prgb"===t&&(e=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(e=this.toHexString()),"hex3"===t&&(e=this.toHexString(!0)),"hex4"===t&&(e=this.toHex8String(!0)),"hex8"===t&&(e=this.toHex8String()),"name"===t&&(e=this.toName()),"hsl"===t&&(e=this.toHslString()),"hsv"===t&&(e=this.toHsvString()),e||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return h(this.toString())},_applyModification:function(t,n){var e=t.apply(null,[this].concat([].slice.call(n)));return this._r=e._r,this._g=e._g,this._b=e._b,this.setAlpha(e._a),this},lighten:function(){return this._applyModification(m,arguments)},brighten:function(){return this._applyModification(x,arguments)},darken:function(){return this._applyModification(w,arguments)},desaturate:function(){return this._applyModification(b,arguments)},saturate:function(){return this._applyModification(g,arguments)},greyscale:function(){return this._applyModification(_,arguments)},spin:function(){return this._applyModification(S,arguments)},_applyCombination:function(t,n){return t.apply(null,[this].concat([].slice.call(n)))},analogous:function(){return this._applyCombination(A,arguments)},complement:function(){return this._applyCombination(M,arguments)},monochromatic:function(){return this._applyCombination(k,arguments)},splitcomplement:function(){return this._applyCombination(E,arguments)},triad:function(){return this._applyCombination(T,arguments)},tetrad:function(){return this._applyCombination(N,arguments)}},h.fromRatio=function(t,n){if("object"==typeof t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]="a"===r?t[r]:L(t[r]));t=e}return h(t,n)},h.equals=function(t,n){return!(!t||!n)&&h(t).toRgbString()==h(n).toRgbString()},h.random=function(){return h.fromRatio({r:l(),g:l(),b:l()})},h.mix=function(t,n,e){e=0===e?0:e||50;var r=h(t).toRgb(),i=h(n).toRgb(),o=e/100;return h({r:(i.r-r.r)*o+r.r,g:(i.g-r.g)*o+r.g,b:(i.b-r.b)*o+r.b,a:(i.a-r.a)*o+r.a})},h.readability=function(t,n){var e=h(t),r=h(n);return(i.max(e.getLuminance(),r.getLuminance())+.05)/(i.min(e.getLuminance(),r.getLuminance())+.05)},h.isReadable=function(t,n,e){var r,i,o,u,a,c=h.readability(t,n);switch(i=!1,(o=e,"AA"!==(u=((o=o||{level:"AA",size:"small"}).level||"AA").toUpperCase())&&"AAA"!==u&&(u="AA"),"small"!==(a=(o.size||"small").toLowerCase())&&"large"!==a&&(a="small"),r={level:u,size:a}).level+r.size){case"AAsmall":case"AAAlarge":i=c>=4.5;break;case"AAlarge":i=c>=3;break;case"AAAsmall":i=c>=7}return i},h.mostReadable=function(t,n,e){var r,i,o,u,a=null,c=0;i=(e=e||{}).includeFallbackColors,o=e.level,u=e.size;for(var s=0;s<n.length;s++)(r=h.readability(t,n[s]))>c&&(c=r,a=h(n[s]));return h.isReadable(t,a,{level:o,size:u})||!i?a:(e.includeFallbackColors=!1,h.mostReadable(t,["#fff","#000"],e))};var C=h.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},I=h.hexNames=function(t){var n={};for(var e in t)t.hasOwnProperty(e)&&(n[t[e]]=e);return n}(C);function F(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function P(t,n){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var e=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(t);return t=s(n,f(0,parseFloat(t))),e&&(t=parseInt(t*n,10)/100),i.abs(t-n)<1e-6?1:t%n/parseFloat(n)}function z(t){return s(1,f(0,t))}function j(t){return parseInt(t,16)}function O(t){return 1==t.length?"0"+t:""+t}function L(t){return t<=1&&(t=100*t+"%"),t}function D(t){return i.round(255*parseFloat(t)).toString(16)}function R(t){return j(t)/255}var V,B,U,q=(B="[\\s|\\(]+("+(V="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+V+")[,|\\s]+("+V+")\\s*\\)?",U="[\\s|\\(]+("+V+")[,|\\s]+("+V+")[,|\\s]+("+V+")[,|\\s]+("+V+")\\s*\\)?",{CSS_UNIT:new RegExp(V),rgb:new RegExp("rgb"+B),rgba:new RegExp("rgba"+U),hsl:new RegExp("hsl"+B),hsla:new RegExp("hsla"+U),hsv:new RegExp("hsv"+B),hsva:new RegExp("hsva"+U),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function Z(t){return!!q.CSS_UNIT.exec(t)}t.exports?t.exports=h:void 0===(r=function(){return h}.call(n,e,n,t))||(t.exports=r)}(Math)},8492:(t,n,e)=>{"use strict";function r(t){for(var e in t)n.hasOwnProperty(e)||(n[e]=t[e])}Object.defineProperty(n,"__esModule",{value:!0}),r(e(2710)),r(e(3851)),r(e(6291)),r(e(1855)),r(e(3824)),r(e(6291)),r(e(1855)),r(e(6308))},6308:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(9362),i=e(1717),o=e(4143),u=e(6486),a=e(3824),c=e(1855),s=e(2367),f=e(7404),l=e(2710);n.drawTreeDel=function(t,n,e){f.emptyChildren(t);var h=r.select(t),p=a.buildTree(n,t);console.log("传入数据",p),document.getElementById("facet-tree-tooltip")||r.select("body").append("div").attr("id","facet-tree-tooltip").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px"),s.globalData.treeData=p,s.globalState.getValue().init?s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0}):(s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0}),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.currentFacetId}))).subscribe((function(t){e(t)})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.expandedFacetId})),i.filter((function(t){var n=t.split(",");return n[0]!==n[1]}))).subscribe((function(n){var e=n.split(","),r=e[0],i=e[1];if("-2"!==r&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0]){for(var o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}if("-2"!==i&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0]){for(o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}}))),h.append("g").selectAll("rect").data(p.branches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html("双击删除该分面").style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:p.branches[n].facetId,expandedFacetId:r+",-2"})),console.log("currentFacetId",s.globalState.getValue().currentFacetId),console.log("expandedFacetId",s.globalState.getValue().expandedFacetId)})),h.append("g").selectAll("rect").data(p.foldBranches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("transform",(function(t){return t.transform})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html("双击删除该分面").style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:p.branches[n].facetId,expandedFacetId:r+",-2"})),console.log("currentFacetId",s.globalState.getValue().currentFacetId),console.log("expandedFacetId",s.globalState.getValue().expandedFacetId)})),h.append("g").selectAll("circle").data(p.leaves).enter().append("circle").attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("r",(function(t,n){return p.treeData[n].containChildrenFacet?0:1.5*t.r})).attr("fill",(function(t){return t.color})).style("cursor","pointer"),h.append("g").selectAll("text").data(p.texts_leaf).enter().append("text").attr("font-size","20px").attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).text((function(t){return t.text})).attr("fill","#fff").style("cursor","pointer"),p.facetChart.forEach((function(n){c.drawFacetPieChart(n,t)}));var d=h.append("g").selectAll("text").data(p.texts).enter().append("text").attr("font-family","Times New Roman").attr("font-size",(function(t){return t.fontSize+"px"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("fill","#fff");p.texts.forEach((function(t,n){r.select(d._groups[0][n]).selectAll("tspan").data(t.text.split("")).enter().append("tspan").attr("x",t.x).attr("dy","1.2em").text((function(t){return t}))})),h.append("g").append("text").attr("x",t.clientWidth/2-24*l.judgementStringLengthWithChinese(n.topicName)/2).attr("y",t.clientHeight-10).text(n.topicName).attr("fill","#000").attr("font-size","24px")}},3851:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(9362),i=e(1717),o=e(4143),u=e(6486),a=e(3824),c=e(1855),s=e(2367),f=e(7404),l=e(2710),h="",p="",d=0;n.drawTreeNumber=function(t,n,e,v,y,b){f.emptyChildren(t);var g=r.select(t),_=a.buildTree(n,t);function m(t){if(1===t){var n=h;setTimeout((function(){p||n!==h||(r.select(document.getElementById("ListMenuFacet")).transition().transition().duration(500).style("opacity",0),h="")}),3e3)}}function x(t){r.select(t).transition().duration(300).style("font-weight","bold").style("font-size","14px"),p="yes"}function w(t){r.select(t).transition().duration(300).style("font-weight","normal").style("font-size","12px")}function S(t){if("yes"===b){r.event.preventDefault(),h=t+"select";var n=document.getElementById("ListMenuFacet");r.select(n).transition().style("opacity",1).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px"),m(1)}else console.log("不起作用！"),r.event.preventDefault()}if(console.log("传入数据",_),document.getElementById("facet-tree-tooltip")||r.select("body").append("div").attr("id","facet-tree-tooltip").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px"),document.getElementById("ListMenuFacet")||(r.select("body").append("div").attr("id","ListMenuFacet").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","12px").style("color","black").style("padding","5px 3px").style("width","100px").style("height","90px").style("background","white").style("border-radius","10px").style("border","2px solid black").on("mouseover",(function(){p="yes"})).on("mouseout",(function(){p="",m(1)})),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionDeleteFacet").style("height","25px").style("margin-top","10px").style("border-radius","10px").style("cursor","pointer").on("mouseover",(function(){x(this)})).on("mouseout",(function(){w(this)})).on("click",(function(){!function(t){console.log("This is really convenient!");var n=s.globalState.getValue().expandedFacetId.split(","),e=(n[0],n[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{branchFacetId:_.branches[t].facetId,expandedFacetId:e+",-2"})),console.log("branchFacetId",s.globalState.getValue().branchFacetId),console.log("expandedFacetId",s.globalState.getValue().expandedFacetId),console.log("Use your FacetDelete function here!"),v()}(d)})).style("padding-top","5px").text("删除该分面"),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionAddFacet").style("height","25px").style("margin-top","5px").style("border-radius","15px").style("cursor","pointer").on("mouseover",(function(){x(this)})).on("mouseout",(function(){w(this)})).style("padding-top","5px").text("添加新分面").on("click",(function(){y()}))),s.globalData.treeData=_,s.globalState.getValue().init)s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});else{s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});var M={currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!1};s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.currentFacetId,M.currentFacetId)})),i.map((function(t){return t.currentFacetId}))).subscribe((function(t){e(t),M.currentFacetId=t})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.branchFacetId,M.branchFacetId)})),i.map((function(t){return t.branchFacetId}))).subscribe((function(t){v(t),M.branchFacetId=t})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.expandedFacetId})),i.filter((function(t){var n=t.split(",");return n[0]!==n[1]}))).subscribe((function(n){var e=n.split(","),r=e[0],i=e[1];if("-2"!==r&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0]){for(var o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}if("-2"!==i&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0]){for(o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}}))}g.append("g").selectAll("rect").data(_.branches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("cursor","pointer").on("mouseover",(function(t){""===h&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){S(n),d=n})),g.append("g").selectAll("rect").data(_.foldBranches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("cursor","pointer").attr("transform",(function(t){return t.transform})).on("mouseover",(function(t){""===h&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){S(n),d=n})),g.append("g").selectAll("circle").data(_.leaves).enter().append("circle").attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("r",(function(t,n){return _.treeData[n].containChildrenFacet?0:1.5*t.r})).attr("fill",(function(t){return t.color})).style("cursor","pointer").on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:_.branches[n].facetId,expandedFacetId:r+",-2"})),console.log("currentFacetId",s.globalState.getValue().currentFacetId),console.log("expandedFacetId",s.globalState.getValue().expandedFacetId)})),g.append("g").selectAll("text").data(_.texts_leaf).enter().append("text").attr("font-size",(function(t){return t.fontSize})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("fill","#fff").style("cursor","pointer").on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:_.branches[n].facetId,expandedFacetId:r+",-2"}))})),_.facetChart.forEach((function(n){c.drawFacetPieChart(n,t)}));var T=g.append("g").selectAll("text").data(_.texts).enter().append("text").attr("font-family","Times New Roman").attr("font-size",(function(t){return t.fontSize+"px"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("fill","#fff").attr("cursor","pointer").on("contextmenu",(function(t,n){S(n),d=n}));_.texts.forEach((function(t,n){r.select(T._groups[0][n]).selectAll("tspan").data(t.text.split("")).enter().append("tspan").attr("x",t.x).attr("dy","1.2em").text((function(t){return t}))})),g.append("g").append("text").attr("x",t.clientWidth/2-24*l.judgementStringLengthWithChinese(n.topicName)/2).attr("y",t.clientHeight-10).text(n.topicName).attr("fill","#000").attr("font-size","24px")}},2710:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(9362),i=e(1717),o=e(4143),u=e(6486),a=e(3824),c=e(1855),s=e(2367),f=e(7404),l="",h="",p=0;function d(t){for(var n=0,e=0;e<t.length;e++)/[a-z0-9\*\\\|\(\)\&\^\%\$\#\@\!\,\.\?\<\>\/]/.test(t[e])?n+=.5:n+=1;return n}n.drawTree=function(t,n,e,v,y,b,g){var _={children:[]};f.emptyChildren(t),r.select(t);var m=a.buildTree(n,t);function x(t){if(1===t){var n=l;setTimeout((function(){h||n!==l||(r.select(document.getElementById("ListMenuFacet")).transition().transition().duration(500).style("opacity",0),l="")}),3e3)}}function w(t){r.select(t).transition().duration(300).style("font-weight","bold").style("font-size","14px"),h="yes"}function S(t){r.select(t).transition().duration(300).style("font-weight","normal").style("font-size","12px")}function M(t){if("yes"===b){r.event.preventDefault(),l=t+"select";var n=document.getElementById("ListMenuFacet");r.select(n).transition().style("opacity",1).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px"),x(1)}else console.log("不起作用！"),r.event.preventDefault()}console.log("传入数据",m),document.getElementById("ListMenuFacet")||(r.select("body").append("div").attr("id","ListMenuFacet").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","12px").style("color","black").style("padding","5px 3px").style("width","100px").style("height","90px").style("background","white").style("border-radius","10px").style("border","2px solid black").on("mouseover",(function(){h="yes"})).on("mouseout",(function(){h="",x(1)})),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionDeleteFacet").style("height","25px").style("margin-top","10px").style("border-radius","10px").style("cursor","pointer").on("mouseover",(function(){w(this)})).on("mouseout",(function(){S(this)})).on("click",(function(){!function(t){console.log("This is really convenient!");var n=s.globalState.getValue().expandedFacetId.split(","),e=(n[0],n[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{branchFacetId:m.branches[t].facetId,expandedFacetId:e+",-2"})),console.log("branchFacetId",s.globalState.getValue().branchFacetId),console.log("expandedFacetId",s.globalState.getValue().expandedFacetId),console.log("Use your FacetDelete function here!")}(p)})).style("padding-top","5px").text("删除该分面"),r.select(document.getElementById("ListMenuFacet")).append("div").attr("id","optionAddFacet").style("height","25px").style("margin-top","5px").style("border-radius","15px").style("cursor","pointer").on("mouseover",(function(){w(this)})).on("mouseout",(function(){S(this)})).style("padding-top","5px").text("添加新分面").on("click",(function(){y()})));for(var T=function(h){setTimeout((function(){f.emptyChildren(t);var y=r.select(t);_=function(t,n,e){t.topicId=n.topicId,t.topicName=n.topicName,t.topicUrl=n.topicUrl,t.topicLayer=n.topicLayer,t.domainId=n.domainId;var r=n.children[e];return t.children.push(r),t.childrenNumber=e+1,t}(_,n,h);var b=a.buildTree(_,t);if(document.getElementById("facet-tree-tooltip")||r.select("body").append("div").attr("id","facet-tree-tooltip").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px"),s.globalData.treeData=b,s.globalState.getValue().init)s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});else{s.globalState.next({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!0});var g={currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!1};s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.currentFacetId,g.currentFacetId)})),i.map((function(t){return t.currentFacetId}))).subscribe((function(t){e(t),g.currentFacetId=t})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t.branchFacetId,g.branchFacetId)})),i.map((function(t){return t.branchFacetId}))).subscribe((function(t){v(t),g.branchFacetId=t})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.expandedFacetId})),i.filter((function(t){var n=t.split(",");return n[0]!==n[1]}))).subscribe((function(n){var e=n.split(","),r=e[0],i=e[1];if("-2"!==r&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0]){for(var o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}if("-2"!==i&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0]){for(o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}}))}console.log("treedata",b),y.append("g").selectAll("rect").data(b.branches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("cursor","pointer").attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).on("mouseover",(function(t){""===l&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){M(n),p=n})),y.append("g").selectAll("rect").data(b.foldBranches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("cursor","pointer").attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("transform",(function(t){return t.transform})).on("mouseover",(function(t){""===l&&r.select(document.getElementById("ListMenuFacet")).style("left",r.event.pageX+20+"px").style("top",r.event.pageY+20+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})).on("contextmenu",(function(t,n){M(n),p=n})),y.append("g").selectAll("circle").data(b.leaves).enter().append("circle").attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("r",(function(t,n){return b.treeData[n].containChildrenFacet?0:1.5*t.r})).attr("fill",(function(t){return t.color})).style("cursor","pointer").on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:b.branches[n].facetId,expandedFacetId:r+",-2"}))})),y.append("g").selectAll("text").data(b.texts_leaf).enter().append("text").attr("font-size",(function(t){return t.fontSize})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).text((function(t){return""})).attr("fill","#fff").style("cursor","pointer").on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:b.branches[n].facetId,expandedFacetId:r+",-2"}))})),b.facetChart.forEach((function(n){c.drawFacetPieChart(n,t)}));var m=y.append("g").selectAll("text").data(b.texts).enter().append("text").attr("font-family","Times New Roman").attr("font-size",(function(t){return t.fontSize+"px"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("cursor","pointer").attr("fill","#fff").on("contextmenu",(function(t,n){M(n),p=n}));b.texts.forEach((function(t,n){r.select(m._groups[0][n]).selectAll("tspan").data(t.text.split("")).enter().append("tspan").attr("x",t.x).attr("dy","1.2em").text((function(t){return t})),console.log("x",t.x)})),y.append("g").append("text").attr("x",t.clientWidth/2-24*d(n.topicName)/2).attr("y",t.clientHeight-10).text(n.topicName).attr("fill","#000").attr("font-size","24px"),h+1===n.children.length&&setTimeout((function(){alert("当前页面构建完成！"),window.lock=!1}),100)}),h*g)},N=0;N<n.children.length;N++)T(N)},n.judgementStringLengthWithChinese=d},6291:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(9362),i=e(2367);function o(t){return isFinite(t)?t:0}n.drawFacetForceLayout=function(t,n,e){void 0===e&&(e=12);var u=r.select(n).append("g"),a=function(t){for(var n=[],e=[],r=t.childrenNumber,i=0;i<r;i++){var o=Object.assign({},t.children[i],{id:t.children[i].facetId});n.push(o)}for(i=0;i<r-1;i++){var u={source:n[i].id,target:n[i+1].id,value:1};e.push(u)}return e.push({source:n[r-1].id,target:n[0].id,value:1}),{nodes:n,links:e}}(t),c=a.nodes,s=a.links,f=u.attr("class",t.facetId).append("g").selectAll("line").data(s).enter().append("line").attr("stroke","#aaa").attr("stroke-width","1px"),l=u.append("g").selectAll("circle").data(c).enter().append("circle").attr("r",t.r/3).attr("fill",t.color).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.facetId,expandedFacetId:r+","+t.facetId.toString()}))})),h=u.append("g").selectAll("text").data(c).enter().append("text").attr("r",t.r/3).attr("fill","#000").attr("font-size","15px").text((function(t){return t.facetName})).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.facetId,expandedFacetId:r+","+t.facetId.toString()}))}));function p(t){t.attr("x1",(function(t){return o(t.source.x)})).attr("y1",(function(t){return o(t.source.y)})).attr("x2",(function(t){return o(t.target.x)})).attr("y2",(function(t){return o(t.target.y)}))}function d(t){t.attr("transform",(function(t){return"translate("+o(t.x)+","+o(t.y)+")"}))}function v(t){t.attr("transform",(function(t){return"translate("+o(t.x-e*t.facetName.length/2)+","+o(t.y)+")"}))}u.append("g").selectAll("text").data(c).enter().append("text").attr("r",t.r/3).attr("fill","#99FF66").attr("font-size","15px").text((function(t){return t.childrenNumber})).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.facetId,expandedFacetId:r+","+t.facetId.toString()}))}));var y=r.forceSimulation(c).force("charge",r.forceManyBody().strength(-500)).force("center",r.forceCenter(t.cx,t.cy)).force("x",r.forceX(t.cx).strength(1)).force("y",r.forceY(t.cy).strength(1)).force("link",r.forceLink(s).id((function(t){return t.id})).distance(2*t.r)).on("tick",(function(){l.call(d),f.call(p),h.call(v)}));l.call(r.drag().on("start",(function(t){r.event.sourceEvent.stopPropagation(),r.event.active||y.alphaTarget(.3).restart(),t.fx=t.x,t.fy=t.y})).on("drag",(function(t){t.fx=r.event.x,t.fy=r.event.y})).on("end",(function(t){r.event.active||y.alphaTarget(0),t.fx=null,t.fy=null})))}},1855:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(9362),i=e(2367);n.drawFacetPieChart=function(t,n,e){void 0===e&&(e=12);var o=r.select(n),u=r.pie().value(1)(t.children);console.log("piedata",u);var a=r.arc().innerRadius(0).outerRadius(t.r),c=(r.arc().innerRadius(0).outerRadius(t.r+70),o.selectAll("g.arc"+t.facetId).data(u).enter().append("g").attr("class","arc"+t.facetId).attr("transform",t.transform));c.append("path").attr("fill",t.color).attr("d",a).attr("stroke","white").attr("stroke-width",t.r/10).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),o=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.data.facetId,expandedFacetId:o+","+t.facetId.toString()}));var u=document.getElementById("facet-tree-tooltip");r.select(u).transition().transition().duration(500).style("opacity",0)})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html(t.data.facetName).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})),u.length>1?c.append("text").attr("transform",(function(t){return"translate("+a.centroid(t)+")"})).attr("text-anchor","middle").attr("fill","#fff").attr("font-size","10px").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),o=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.data.facetId,expandedFacetId:o+","+t.facetId.toString()}));var u=document.getElementById("facet-tree-tooltip");r.select(u).transition().transition().duration(500).style("opacity",0)})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html(t.data.facetName).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})):c.append("text").attr("text-anchor","middle").attr("fill","#fff").attr("font-size","20px").attr("vertical-align","middle").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),o=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.data.facetId,expandedFacetId:o+","+t.facetId.toString()}));var u=document.getElementById("facet-tree-tooltip");r.select(u).transition().transition().duration(500).style("opacity",0)})).on("mouseover",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html(t.data.facetName).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)})),t.childrenNumber,Math.PI}},3824:function(t,n,e){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t}).apply(this,arguments)};Object.defineProperty(n,"__esModule",{value:!0});var i=e(6486),o=e(9086),u=[];for(var a in o.presetPalettes)u.push(o.presetPalettes[a]);var c=2e3;function s(t){for(var n=[];t.length>0;)n.push.apply(n,t.splice(Math.floor(t.length/2),1));return n}function f(t){return-1===t.facetId?0:1===t.facetLayer?t.containChildrenFacet?c*t.childrenNumber:t.children.reduce((function(t,n){return"text"===n.assembleType?t+1:t+100}),0):t.containChildrenFacet?c*t.childrenNumber:t.children.reduce((function(t,n){return"fragment"===n.flag?t+1:t+100}),0)}function l(t,n,e,r,i){return Object.assign({},t,{transform:"translate("+n+","+e+")",cx:n,cy:e,r:i,color:r})}n.camelSort=s,n.buildTree=function(t,n){var e={branches:[],leaves:[],foldBranches:[],treeData:[],facetChart:[],texts:[],texts_leaf:[]};if(i.isEmpty(t)||!n)return e;var o=n.clientWidth,a=n.clientHeight,h=t.childrenNumber;if(1===h){e.branches.push({x:o/2-16,y:.4*a,width:32,height:.4*a-40,color:u[0][7],facetId:t.children[0].facetId,facetName:t.children[0].facetName,chilrenNumber:t.children[0].childrenNumber}),e.leaves.push({cx:o/2,cy:.382*a,r:20,color:u[0][7]}),e.foldBranches.push({x:o/2-8,y:.618*a,width:16,height:0,transform:"",color:""}),e.treeData=t.children,t.children[0].containChildrenFacet&&e.facetChart.push(l(t.children[0],e.leaves[0].cx,e.leaves[0].cy,e.leaves[0].color,e.leaves[0].r));var p=12;return p=12>(W=e.branches[0].height/(e.branches[0].facetName.length+8))?W:12,e.texts.push({x:e.branches[0].x+9,y:e.branches[0].y+8,text:e.branches[0].facetName,fontSize:p+5}),e.texts_leaf.push({x:e.leaves[0].cx,y:e.leaves[0].cy,text:e.branches[0].chilrenNumber.toString(),fontSize:18}),e}for(var d=h>7,v=[],y=0,b=t.children;y<b.length;y++){var g=b[y];v.push({facetId:g.facetId,value:f(g),containChildrenFacet:g.containChildrenFacet})}v.sort((function(t,n){return t.value-n.value}));var _=t.children;if(d){var m=v.filter((function(t){return t.value>1999})).length,x=[];if(7<m+1?x.concat(v.filter((function(t){return t.value<c})).map((function(t){return t.facetId}))):x=x.concat(v.slice(6).map((function(t){return t.facetId}))),x.length){var w=[];w=w.concat(_.filter((function(t){return-1===x.indexOf(t.facetId)})));var S={facetId:-1,facetName:"其他分面",facetLayer:-1,parentFacetId:0,topicId:t.topicId,childrenNumber:x.length,type:"branch",containChildrenFacet:!0,children:_.filter((function(t){return-1!==x.indexOf(t.facetId)}))};w.push(S),_=w}}_.sort((function(t,n){return f(n)-f(t)})),e.treeData=_;for(var M=_.length,T=M%2==1,N=.6*a,E=Math.PI/(2*M),A=o*Math.tan(E)/(2*(1+Math.tan(E))),k=T?N/(1+1/Math.sin(E)):N/(1+1/Math.tan(E)),C=A<k?A:k,I=C/Math.sin(E),F=I+C<N?(N-I-C)/M*2:0,P=T?0:E,z=Math.floor(M/2);P<Math.PI/2;){var j={cx:I*Math.sin(P)+o/2,cy:N-I*Math.cos(P)-F*z,r:C/2,color:"#ffffff"},O=r({},j);O.cx=o/2-I*Math.sin(P),e.leaves.push(j),e.leaves.push(O),P+=2*E,z--}T&&e.leaves.shift();for(var L=0;L<M;L++)e.leaves[L].color=u[L][7];var D=Math.abs(e.leaves[M-1].cx-e.leaves[M-2].cx)-C<.5*o,R=D?(Math.abs(e.leaves[M-1].cx-e.leaves[M-2].cx)-C)/(1.2*M-.2):.5*o/(1.2*M-.2),V=e.leaves[M-1].cx<e.leaves[M-2].cx?e.leaves[M-1].cx+C/2:e.leaves[M-2].cx+C/2;for(D||(V=.5*o/2),_.forEach((function(t,n){var r={x:V+1.2*n*R,y:0,width:R,height:0,facetId:-1,facetName:"",color:"",chilrenNumber:0};e.branches.push(r)})),e.branches=s(e.branches),L=0;L<M;L++)e.branches[L].facetName=_[L].facetName,e.branches[L].facetId=_[L].facetId,e.branches[L].chilrenNumber=_[L].childrenNumber;for(L=0;L<M;L++)e.branches[L].y=e.leaves[L].cy/2+a*(1-.8*.4)/2,e.branches[L].height=a-e.branches[L].y-40,e.branches[L].color=u[L][7];for(z=M+1,L=0;L<M;L++){var B={x:e.branches[L].x<o/2?e.branches[L].x+e.branches[L].width:e.branches[L].x-e.branches[L].width,y:e.branches[L].y,width:e.branches[L].width,height:e.branches[L].x>o/2?Math.sqrt(Math.pow(e.leaves[L].cx-e.branches[L].x+R/2,2)+Math.pow(e.leaves[L].cy-e.branches[L].y,2))/2:Math.sqrt(Math.pow(e.leaves[L].cx-e.branches[L].x-R,2)+Math.pow(e.leaves[L].cy-e.branches[L].y,2))/2,transform:"",color:u[L][7]},U=e.branches[L].x+B.width/2,q=B.y,Z=Math.atan(Math.abs((e.leaves[L].cy-q)/(e.leaves[L].cx-U)))/Math.PI*180;e.branches[L].x<o/2?B.transform="rotate("+(Z+90)+" "+B.x+","+B.y+")":B.transform="rotate("+(-Z-90)+" "+e.branches[L].x+","+B.y+")",e.foldBranches.push(B),z--}var Y=R-10>20?20:R-4;for(L=0;L<M;L++){var W;_[L].containChildrenFacet&&e.facetChart.push(l(_[L],e.leaves[L].cx,e.leaves[L].cy,e.leaves[L].color,e.leaves[L].r)),p=Y,p=Y>(W=e.branches[L].height/(e.branches[L].facetName.length+8))?W:Y,e.texts.push({x:e.branches[L].x+R/2-p/4,y:e.branches[L].y+8,text:e.branches[L].facetName,fontSize:p}),e.texts_leaf.push({x:e.leaves[L].cx-p*t.children[L].childrenNumber.toString().length/3,y:e.leaves[L].cy+.6*p,text:e.branches[L].chilrenNumber.toString(),fontSize:p})}for(var H=0,X=e.leaves;H<X.length;H++)X[H].r=.6*R;for(var $=0,G=e.facetChart;$<G.length;$++)G[$].r=.8*R;return e}},2367:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(4143);n.globalState=new r.BehaviorSubject({currentFacetId:-1,branchFacetId:-1,expandedFacetId:"-2,-2",init:!1}),n.globalData={treeData:null},n.globalBranch=new r.BehaviorSubject({currentFacetId:-1,expandedFacetId:"-2,-2",init:!1})},7404:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.emptyChildren=function(t){for(var n=t.childNodes;n.length>0;)t.removeChild(n[0])}},655:(t,n,e)=>{"use strict";e.d(n,{ZT:()=>i});var r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function i(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}}},n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}return e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),e(8492)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,